
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	0f80006f          	j	100fc <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrs (pseudo asm instruction) - set bit   
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  la t0, trap_table
   100b4:	00000297          	auipc	t0,0x0
   100b8:	f5028293          	addi	t0,t0,-176 # 10004 <trap_table>
  csrw mtvec, t0
   100bc:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100c0:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100c4:	08200137          	lui	sp,0x8200

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100c8:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100cc:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100d0:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100d4:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100d8:	40a10133          	sub	sp,sp,a0
  addi sp,sp,-256
   100dc:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ed61c>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100e0:	7b311073          	csrw	0x7b3,sp

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100e4:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   100e8:	00050663          	beqz	a0,100f4 <init0>
  wfi
   100ec:	10500073          	wfi
  j end_init0
   100f0:	0080006f          	j	100f8 <end_init0>

00000000000100f4 <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   100f4:	62c000ef          	jal	ra,10720 <_init>

00000000000100f8 <end_init0>:
end_init0:

  # a0 = hart id
  # a1 = fdt header
  mret
   100f8:	30200073          	mret

00000000000100fc <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   100fc:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10100:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10104:	100f5e63          	bgez	t5,10220 <handle_exception>

0000000000010108 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10108:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1010c:	00113023          	sd	ra,0(sp)
   10110:	00813423          	sd	s0,8(sp)
   10114:	00913823          	sd	s1,16(sp)
   10118:	01213c23          	sd	s2,24(sp)
   1011c:	03313023          	sd	s3,32(sp)
   10120:	03413423          	sd	s4,40(sp)
   10124:	03513823          	sd	s5,48(sp)
   10128:	03613c23          	sd	s6,56(sp)
   1012c:	05713023          	sd	s7,64(sp)
   10130:	05813423          	sd	s8,72(sp)
   10134:	05913823          	sd	s9,80(sp)
   10138:	05a13c23          	sd	s10,88(sp)
   1013c:	07b13023          	sd	s11,96(sp)
   10140:	06213423          	sd	sp,104(sp)
   10144:	07013c23          	sd	a6,120(sp)
   10148:	09113023          	sd	a7,128(sp)
   1014c:	08a13423          	sd	a0,136(sp)
   10150:	08b13823          	sd	a1,144(sp)
   10154:	08c13c23          	sd	a2,152(sp)
   10158:	0ad13023          	sd	a3,160(sp)
   1015c:	0ae13423          	sd	a4,168(sp)
   10160:	0af13823          	sd	a5,176(sp)
   10164:	0b013c23          	sd	a6,184(sp)
   10168:	0d113023          	sd	a7,192(sp)
   1016c:	0c513423          	sd	t0,200(sp)
   10170:	0c613823          	sd	t1,208(sp)
   10174:	0c713c23          	sd	t2,216(sp)
   10178:	0fc13023          	sd	t3,224(sp)
   1017c:	0fd13423          	sd	t4,232(sp)
   10180:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   10184:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   10188:	341025f3          	csrr	a1,mepc
  mv a2, sp
   1018c:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   10190:	365000ef          	jal	ra,10cf4 <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   10194:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   10198:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   1019c:	00013083          	ld	ra,0(sp)
   101a0:	00813403          	ld	s0,8(sp)
   101a4:	01013483          	ld	s1,16(sp)
   101a8:	01813903          	ld	s2,24(sp)
   101ac:	02013983          	ld	s3,32(sp)
   101b0:	02813a03          	ld	s4,40(sp)
   101b4:	03013a83          	ld	s5,48(sp)
   101b8:	03813b03          	ld	s6,56(sp)
   101bc:	04013b83          	ld	s7,64(sp)
   101c0:	04813c03          	ld	s8,72(sp)
   101c4:	05013c83          	ld	s9,80(sp)
   101c8:	05813d03          	ld	s10,88(sp)
   101cc:	06013d83          	ld	s11,96(sp)
   101d0:	06813103          	ld	sp,104(sp)
   101d4:	07813803          	ld	a6,120(sp)
   101d8:	08013883          	ld	a7,128(sp)
   101dc:	08813503          	ld	a0,136(sp)
   101e0:	09013583          	ld	a1,144(sp)
   101e4:	09813603          	ld	a2,152(sp)
   101e8:	0a013683          	ld	a3,160(sp)
   101ec:	0a813703          	ld	a4,168(sp)
   101f0:	0b013783          	ld	a5,176(sp)
   101f4:	0b813803          	ld	a6,184(sp)
   101f8:	0c013883          	ld	a7,192(sp)
   101fc:	0c813283          	ld	t0,200(sp)
   10200:	0d013303          	ld	t1,208(sp)
   10204:	0d813383          	ld	t2,216(sp)
   10208:	0e013e03          	ld	t3,224(sp)
   1020c:	0e813e83          	ld	t4,232(sp)
   10210:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10214:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10218:	34002f73          	csrr	t5,mscratch
  mret
   1021c:	30200073          	mret

0000000000010220 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10220:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10224:	1b5000ef          	jal	ra,10bd8 <exception_handler_c>
  mret
   10228:	30200073          	mret
   1022c:	0000                	unimp
   1022e:	0000                	unimp
	...

0000000000010232 <get_dev_bar>:
    uint64_t fwdbg3;            /// 0xfffff038: RW: FW debug register 3
    uint8_t cfg_table[(1 << 12) - 0x40];/// 0xfffff040: RO: PNP configuration
} pnp_map;


static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10232:	715d                	addi	sp,sp,-80
   10234:	e4a2                	sd	s0,72(sp)
   10236:	0880                	addi	s0,sp,80
   10238:	faa43c23          	sd	a0,-72(s0)
   1023c:	87ae                	mv	a5,a1
   1023e:	8732                	mv	a4,a2
   10240:	faf41b23          	sh	a5,-74(s0)
   10244:	87ba                	mv	a5,a4
   10246:	faf41a23          	sh	a5,-76(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1024a:	fb843783          	ld	a5,-72(s0)
   1024e:	479c                	lw	a5,8(a5)
   10250:	0087d79b          	srliw	a5,a5,0x8
   10254:	2781                	sext.w	a5,a5
   10256:	2781                	sext.w	a5,a5
   10258:	0ff7f793          	andi	a5,a5,255
   1025c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10260:	fb843783          	ld	a5,-72(s0)
   10264:	479c                	lw	a5,8(a5)
   10266:	0107d79b          	srliw	a5,a5,0x10
   1026a:	2781                	sext.w	a5,a5
   1026c:	2781                	sext.w	a5,a5
   1026e:	0ff7f793          	andi	a5,a5,255
   10272:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10276:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   1027a:	fe042423          	sw	zero,-24(s0)
   1027e:	a82d                	j	102b8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10280:	fec42783          	lw	a5,-20(s0)
   10284:	04078793          	addi	a5,a5,64
   10288:	fb843703          	ld	a4,-72(s0)
   1028c:	97ba                	add	a5,a5,a4
   1028e:	639c                	ld	a5,0(a5)
   10290:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10294:	fb843703          	ld	a4,-72(s0)
   10298:	fec42783          	lw	a5,-20(s0)
   1029c:	97ba                	add	a5,a5,a4
   1029e:	0407c783          	lbu	a5,64(a5)
   102a2:	2781                	sext.w	a5,a5
   102a4:	fec42703          	lw	a4,-20(s0)
   102a8:	9fb9                	addw	a5,a5,a4
   102aa:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   102ae:	fe842783          	lw	a5,-24(s0)
   102b2:	2785                	addiw	a5,a5,1
   102b4:	fef42423          	sw	a5,-24(s0)
   102b8:	fe842703          	lw	a4,-24(s0)
   102bc:	fdc42783          	lw	a5,-36(s0)
   102c0:	2701                	sext.w	a4,a4
   102c2:	2781                	sext.w	a5,a5
   102c4:	faf74ee3          	blt	a4,a5,10280 <get_dev_bar+0x4e>
    }

    for (int i = 0; i < slv_total; i++) {
   102c8:	fe042223          	sw	zero,-28(s0)
   102cc:	a8b5                	j	10348 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   102ce:	fec42783          	lw	a5,-20(s0)
   102d2:	04078793          	addi	a5,a5,64
   102d6:	fb843703          	ld	a4,-72(s0)
   102da:	97ba                	add	a5,a5,a4
   102dc:	639c                	ld	a5,0(a5)
   102de:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   102e2:	fec42783          	lw	a5,-20(s0)
   102e6:	27a1                	addiw	a5,a5,8
   102e8:	2781                	sext.w	a5,a5
   102ea:	04078793          	addi	a5,a5,64
   102ee:	fb843703          	ld	a4,-72(s0)
   102f2:	97ba                	add	a5,a5,a4
   102f4:	639c                	ld	a5,0(a5)
   102f6:	fcf43423          	sd	a5,-56(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   102fa:	fc645783          	lhu	a5,-58(s0)
   102fe:	fb645703          	lhu	a4,-74(s0)
   10302:	2701                	sext.w	a4,a4
   10304:	2781                	sext.w	a5,a5
   10306:	00f71f63          	bne	a4,a5,10324 <get_dev_bar+0xf2>
   1030a:	fc445783          	lhu	a5,-60(s0)
   1030e:	fb445703          	lhu	a4,-76(s0)
   10312:	2701                	sext.w	a4,a4
   10314:	2781                	sext.w	a5,a5
   10316:	00f71763          	bne	a4,a5,10324 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1031a:	fcc42783          	lw	a5,-52(s0)
   1031e:	1782                	slli	a5,a5,0x20
   10320:	9381                	srli	a5,a5,0x20
   10322:	a825                	j	1035a <get_dev_bar+0x128>
        }
        off += pnp->cfg_table[off];
   10324:	fb843703          	ld	a4,-72(s0)
   10328:	fec42783          	lw	a5,-20(s0)
   1032c:	97ba                	add	a5,a5,a4
   1032e:	0407c783          	lbu	a5,64(a5)
   10332:	2781                	sext.w	a5,a5
   10334:	fec42703          	lw	a4,-20(s0)
   10338:	9fb9                	addw	a5,a5,a4
   1033a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1033e:	fe442783          	lw	a5,-28(s0)
   10342:	2785                	addiw	a5,a5,1
   10344:	fef42223          	sw	a5,-28(s0)
   10348:	fe442703          	lw	a4,-28(s0)
   1034c:	fe042783          	lw	a5,-32(s0)
   10350:	2701                	sext.w	a4,a4
   10352:	2781                	sext.w	a5,a5
   10354:	f6f74de3          	blt	a4,a5,102ce <get_dev_bar+0x9c>
    }

    return DEV_NONE;
   10358:	57fd                	li	a5,-1
}
   1035a:	853e                	mv	a0,a5
   1035c:	6426                	ld	s0,72(sp)
   1035e:	6161                	addi	sp,sp,80
   10360:	8082                	ret

0000000000010362 <mpu_region_total>:
    mpu_ctrl_wrbits_type bits;
    uint64_t value;
} mpu_ctrl_type;

// Read CSR_MPU_ctrl vendor specific register
static int mpu_region_total() {
   10362:	1101                	addi	sp,sp,-32
   10364:	ec22                	sd	s0,24(sp)
   10366:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10368:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1036c:	bc4027f3          	csrr	a5,0xbc4
   10370:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10374:	fe843783          	ld	a5,-24(s0)
   10378:	83a1                	srli	a5,a5,0x8
   1037a:	2781                	sext.w	a5,a5
}
   1037c:	853e                	mv	a0,a5
   1037e:	6462                	ld	s0,24(sp)
   10380:	6105                	addi	sp,sp,32
   10382:	8082                	ret

0000000000010384 <mpu_disable_region>:

static void mpu_disable_region(int idx) {
   10384:	7179                	addi	sp,sp,-48
   10386:	f422                	sd	s0,40(sp)
   10388:	1800                	addi	s0,sp,48
   1038a:	87aa                	mv	a5,a0
   1038c:	fcf42e23          	sw	a5,-36(s0)
    mpu_ctrl_type ctrl;
    ctrl.value = 0;
   10390:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10394:	fdc42783          	lw	a5,-36(s0)
   10398:	0ff7f793          	andi	a5,a5,255
   1039c:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   103a0:	fe844783          	lbu	a5,-24(s0)
   103a4:	f807e793          	ori	a5,a5,-128
   103a8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   103ac:	fe843783          	ld	a5,-24(s0)
   103b0:	bc479073          	csrw	0xbc4,a5
}
   103b4:	0001                	nop
   103b6:	7422                	ld	s0,40(sp)
   103b8:	6145                	addi	sp,sp,48
   103ba:	8082                	ret

00000000000103bc <mpu_enable_region>:

static void mpu_enable_region(int idx,
                       uint64_t bar,
                       uint64_t KB,
                       int cached,
                       const char *rwx) {
   103bc:	715d                	addi	sp,sp,-80
   103be:	e4a2                	sd	s0,72(sp)
   103c0:	0880                	addi	s0,sp,80
   103c2:	87aa                	mv	a5,a0
   103c4:	fcb43023          	sd	a1,-64(s0)
   103c8:	fac43c23          	sd	a2,-72(s0)
   103cc:	fae43823          	sd	a4,-80(s0)
   103d0:	fcf42623          	sw	a5,-52(s0)
   103d4:	87b6                	mv	a5,a3
   103d6:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   103da:	c0000793          	li	a5,-1024
   103de:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   103e2:	fb043783          	ld	a5,-80(s0)
   103e6:	fef43023          	sd	a5,-32(s0)
    mpu_ctrl_type ctrl;

    asm("csrw 0xBC2, %0" : :"r"(bar));
   103ea:	fc043783          	ld	a5,-64(s0)
   103ee:	bc279073          	csrw	0xbc2,a5

    KB >>= 1;
   103f2:	fb843783          	ld	a5,-72(s0)
   103f6:	8385                	srli	a5,a5,0x1
   103f8:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   103fc:	a819                	j	10412 <mpu_enable_region+0x56>
        mask <<= 1;
   103fe:	fe843783          	ld	a5,-24(s0)
   10402:	0786                	slli	a5,a5,0x1
   10404:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10408:	fb843783          	ld	a5,-72(s0)
   1040c:	8385                	srli	a5,a5,0x1
   1040e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10412:	fb843783          	ld	a5,-72(s0)
   10416:	f7e5                	bnez	a5,103fe <mpu_enable_region+0x42>
    }
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10418:	fe843783          	ld	a5,-24(s0)
   1041c:	bc379073          	csrw	0xbc3,a5

    ctrl.value = 0;
   10420:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10424:	fcc42783          	lw	a5,-52(s0)
   10428:	0ff7f793          	andi	a5,a5,255
   1042c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10430:	fd844783          	lbu	a5,-40(s0)
   10434:	0107e793          	ori	a5,a5,16
   10438:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1043c:	fc842783          	lw	a5,-56(s0)
   10440:	8b85                	andi	a5,a5,1
   10442:	0ff7f793          	andi	a5,a5,255
   10446:	8b85                	andi	a5,a5,1
   10448:	0037969b          	slliw	a3,a5,0x3
   1044c:	fd844783          	lbu	a5,-40(s0)
   10450:	9bdd                	andi	a5,a5,-9
   10452:	873e                	mv	a4,a5
   10454:	87b6                	mv	a5,a3
   10456:	8fd9                	or	a5,a5,a4
   10458:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1045c:	fd844783          	lbu	a5,-40(s0)
   10460:	f807e793          	ori	a5,a5,-128
   10464:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10468:	a09d                	j	104ce <mpu_enable_region+0x112>
        if (*p == 'r') {
   1046a:	fe043783          	ld	a5,-32(s0)
   1046e:	0007c783          	lbu	a5,0(a5)
   10472:	873e                	mv	a4,a5
   10474:	07200793          	li	a5,114
   10478:	00f71863          	bne	a4,a5,10488 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1047c:	fd844783          	lbu	a5,-40(s0)
   10480:	0027e793          	ori	a5,a5,2
   10484:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'w') {
   10488:	fe043783          	ld	a5,-32(s0)
   1048c:	0007c783          	lbu	a5,0(a5)
   10490:	873e                	mv	a4,a5
   10492:	07700793          	li	a5,119
   10496:	00f71863          	bne	a4,a5,104a6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   1049a:	fd844783          	lbu	a5,-40(s0)
   1049e:	0017e793          	ori	a5,a5,1
   104a2:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'x') {
   104a6:	fe043783          	ld	a5,-32(s0)
   104aa:	0007c783          	lbu	a5,0(a5)
   104ae:	873e                	mv	a4,a5
   104b0:	07800793          	li	a5,120
   104b4:	00f71863          	bne	a4,a5,104c4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   104b8:	fd844783          	lbu	a5,-40(s0)
   104bc:	0047e793          	ori	a5,a5,4
   104c0:	fcf40c23          	sb	a5,-40(s0)
        }
        p++;
   104c4:	fe043783          	ld	a5,-32(s0)
   104c8:	0785                	addi	a5,a5,1
   104ca:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   104ce:	fe043783          	ld	a5,-32(s0)
   104d2:	0007c783          	lbu	a5,0(a5)
   104d6:	fbd1                	bnez	a5,1046a <mpu_enable_region+0xae>
    }
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   104d8:	fd843783          	ld	a5,-40(s0)
   104dc:	bc479073          	csrw	0xbc4,a5
}
   104e0:	0001                	nop
   104e2:	6426                	ld	s0,72(sp)
   104e4:	6161                	addi	sp,sp,80
   104e6:	8082                	ret

00000000000104e8 <fw_get_cpuid>:
#include "sd_uefi.h"
#include "uart.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   104e8:	1101                	addi	sp,sp,-32
   104ea:	ec22                	sd	s0,24(sp)
   104ec:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   104ee:	f14027f3          	csrr	a5,mhartid
   104f2:	fef42623          	sw	a5,-20(s0)
    return ret;
   104f6:	fec42783          	lw	a5,-20(s0)
}
   104fa:	853e                	mv	a0,a5
   104fc:	6462                	ld	s0,24(sp)
   104fe:	6105                	addi	sp,sp,32
   10500:	8082                	ret

0000000000010502 <led_set>:

void led_set(int output) {
   10502:	1101                	addi	sp,sp,-32
   10504:	ec22                	sd	s0,24(sp)
   10506:	1000                	addi	s0,sp,32
   10508:	87aa                	mv	a5,a0
   1050a:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   1050e:	fec42783          	lw	a5,-20(s0)
   10512:	0047979b          	slliw	a5,a5,0x4
   10516:	0007871b          	sext.w	a4,a5
   1051a:	100607b7          	lui	a5,0x10060
   1051e:	2701                	sext.w	a4,a4
   10520:	c7d8                	sw	a4,12(a5)
}
   10522:	0001                	nop
   10524:	6462                	ld	s0,24(sp)
   10526:	6105                	addi	sp,sp,32
   10528:	8082                	ret

000000000001052a <get_dip>:

int get_dip(int idx) {
   1052a:	7179                	addi	sp,sp,-48
   1052c:	f422                	sd	s0,40(sp)
   1052e:	1800                	addi	s0,sp,48
   10530:	87aa                	mv	a5,a0
   10532:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   10536:	100607b7          	lui	a5,0x10060
   1053a:	439c                	lw	a5,0(a5)
   1053c:	0007871b          	sext.w	a4,a5
   10540:	fdc42783          	lw	a5,-36(s0)
   10544:	00f757bb          	srlw	a5,a4,a5
   10548:	2781                	sext.w	a5,a5
   1054a:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   1054e:	fec42783          	lw	a5,-20(s0)
   10552:	8b85                	andi	a5,a5,1
   10554:	2781                	sext.w	a5,a5
}
   10556:	853e                	mv	a0,a5
   10558:	7422                	ld	s0,40(sp)
   1055a:	6145                	addi	sp,sp,48
   1055c:	8082                	ret

000000000001055e <get_dips>:

int get_dips() {
   1055e:	1101                	addi	sp,sp,-32
   10560:	ec22                	sd	s0,24(sp)
   10562:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   10564:	100607b7          	lui	a5,0x10060
   10568:	439c                	lw	a5,0(a5)
   1056a:	2781                	sext.w	a5,a5
   1056c:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   10570:	fec42783          	lw	a5,-20(s0)
   10574:	8bbd                	andi	a5,a5,15
   10576:	2781                	sext.w	a5,a5
}
   10578:	853e                	mv	a0,a5
   1057a:	6462                	ld	s0,24(sp)
   1057c:	6105                	addi	sp,sp,32
   1057e:	8082                	ret

0000000000010580 <copy_image>:



void copy_image() { 
   10580:	715d                	addi	sp,sp,-80
   10582:	e486                	sd	ra,72(sp)
   10584:	e0a2                	sd	s0,64(sp)
   10586:	0880                	addi	s0,sp,80
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10588:	090007b7          	lui	a5,0x9000
   1058c:	fcf43c23          	sd	a5,-40(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   10590:	080007b7          	lui	a5,0x8000
   10594:	fcf43823          	sd	a5,-48(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10598:	100ff7b7          	lui	a5,0x100ff
   1059c:	fcf43423          	sd	a5,-56(s0)

    uint64_t qspi2 = ~0ull;
   105a0:	57fd                	li	a5,-1
   105a2:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   105a6:	00000097          	auipc	ra,0x0
   105aa:	fb8080e7          	jalr	-72(ra) # 1055e <get_dips>
   105ae:	87aa                	mv	a5,a0
   105b0:	85be                	mv	a1,a5
   105b2:	67c9                	lui	a5,0x12
   105b4:	3b078513          	addi	a0,a5,944 # 123b0 <strnlen+0x1a>
   105b8:	00001097          	auipc	ra,0x1
   105bc:	07e080e7          	jalr	126(ra) # 11636 <printf_uart>
    if (get_dips() == 0xB) {
   105c0:	00000097          	auipc	ra,0x0
   105c4:	f9e080e7          	jalr	-98(ra) # 1055e <get_dips>
   105c8:	87aa                	mv	a5,a0
   105ca:	873e                	mv	a4,a5
   105cc:	47ad                	li	a5,11
   105ce:	04f71d63          	bne	a4,a5,10628 <copy_image+0xa8>
        // Load from SD-card
        qspi2 = get_dev_bar(pnp, VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   105d2:	07500613          	li	a2,117
   105d6:	0f100593          	li	a1,241
   105da:	fc843503          	ld	a0,-56(s0)
   105de:	c55ff0ef          	jal	ra,10232 <get_dev_bar>
   105e2:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   105e6:	fe843703          	ld	a4,-24(s0)
   105ea:	57fd                	li	a5,-1
   105ec:	02f70e63          	beq	a4,a5,10628 <copy_image+0xa8>
            print_uart("Select . .QSPI2\r\n", 17);
   105f0:	45c5                	li	a1,17
   105f2:	67c9                	lui	a5,0x12
   105f4:	3c078513          	addi	a0,a5,960 # 123c0 <strnlen+0x2a>
   105f8:	00001097          	auipc	ra,0x1
   105fc:	a62080e7          	jalr	-1438(ra) # 1105a <print_uart>
            if (run_from_sdcard() == -1) {
   10600:	00002097          	auipc	ra,0x2
   10604:	a78080e7          	jalr	-1416(ra) # 12078 <run_from_sdcard>
   10608:	87aa                	mv	a5,a0
   1060a:	873e                	mv	a4,a5
   1060c:	57fd                	li	a5,-1
   1060e:	00f71d63          	bne	a4,a5,10628 <copy_image+0xa8>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   10612:	45c9                	li	a1,18
   10614:	67c9                	lui	a5,0x12
   10616:	3d878513          	addi	a0,a5,984 # 123d8 <strnlen+0x42>
   1061a:	00001097          	auipc	ra,0x1
   1061e:	a40080e7          	jalr	-1472(ra) # 1105a <print_uart>
                qspi2 = ~0ull;
   10622:	57fd                	li	a5,-1
   10624:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   10628:	fe843703          	ld	a4,-24(s0)
   1062c:	57fd                	li	a5,-1
   1062e:	0af71163          	bne	a4,a5,106d0 <copy_image+0x150>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   10632:	fc843783          	ld	a5,-56(s0)
   10636:	43dc                	lw	a5,4(a5)
   10638:	efc1                	bnez	a5,106d0 <copy_image+0x150>
        // Check if SRAM already initialized in RTL simulation, then skip copying
        uint64_t *dst = (uint64_t *)sram;
   1063a:	fd043783          	ld	a5,-48(s0)
   1063e:	fcf43023          	sd	a5,-64(s0)
        uint64_t *src = (uint64_t *)fwrom;
   10642:	fd843783          	ld	a5,-40(s0)
   10646:	faf43c23          	sd	a5,-72(s0)
        int skip_rtl_sim = 1;
   1064a:	4785                	li	a5,1
   1064c:	fef42223          	sw	a5,-28(s0)
        for (int i = 0; i < 8; i++) {
   10650:	fe042023          	sw	zero,-32(s0)
   10654:	a80d                	j	10686 <copy_image+0x106>
            if (src[i] != dst[i]) {
   10656:	fe042783          	lw	a5,-32(s0)
   1065a:	078e                	slli	a5,a5,0x3
   1065c:	fb843703          	ld	a4,-72(s0)
   10660:	97ba                	add	a5,a5,a4
   10662:	6398                	ld	a4,0(a5)
   10664:	fe042783          	lw	a5,-32(s0)
   10668:	078e                	slli	a5,a5,0x3
   1066a:	fc043683          	ld	a3,-64(s0)
   1066e:	97b6                	add	a5,a5,a3
   10670:	639c                	ld	a5,0(a5)
   10672:	00f70563          	beq	a4,a5,1067c <copy_image+0xfc>
                skip_rtl_sim = 0;
   10676:	fe042223          	sw	zero,-28(s0)
                break;
   1067a:	a829                	j	10694 <copy_image+0x114>
        for (int i = 0; i < 8; i++) {
   1067c:	fe042783          	lw	a5,-32(s0)
   10680:	2785                	addiw	a5,a5,1
   10682:	fef42023          	sw	a5,-32(s0)
   10686:	fe042783          	lw	a5,-32(s0)
   1068a:	0007871b          	sext.w	a4,a5
   1068e:	479d                	li	a5,7
   10690:	fce7d3e3          	ble	a4,a5,10656 <copy_image+0xd6>
            }
        }
        if (skip_rtl_sim) {
   10694:	fe442783          	lw	a5,-28(s0)
   10698:	2781                	sext.w	a5,a5
   1069a:	cb91                	beqz	a5,106ae <copy_image+0x12e>
            print_uart("NO.COPY. .rtl.sim\r\n", 19);
   1069c:	45cd                	li	a1,19
   1069e:	67c9                	lui	a5,0x12
   106a0:	3f078513          	addi	a0,a5,1008 # 123f0 <strnlen+0x5a>
   106a4:	00001097          	auipc	ra,0x1
   106a8:	9b6080e7          	jalr	-1610(ra) # 1105a <print_uart>
   106ac:	a015                	j	106d0 <copy_image+0x150>
        } else {
            print_uart("Coping . .FWIMAGE\r\n", 19);
   106ae:	45cd                	li	a1,19
   106b0:	67c9                	lui	a5,0x12
   106b2:	40878513          	addi	a0,a5,1032 # 12408 <strnlen+0x72>
   106b6:	00001097          	auipc	ra,0x1
   106ba:	9a4080e7          	jalr	-1628(ra) # 1105a <print_uart>
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   106be:	000407b7          	lui	a5,0x40
   106c2:	863e                	mv	a2,a5
   106c4:	fd843583          	ld	a1,-40(s0)
   106c8:	fd043503          	ld	a0,-48(s0)
   106cc:	40b010ef          	jal	ra,122d6 <memcpy>
        }
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   106d0:	fc843783          	ld	a5,-56(s0)
   106d4:	20211737          	lui	a4,0x20211
   106d8:	1237071b          	addiw	a4,a4,291
   106dc:	c3d8                	sw	a4,4(a5)
}
   106de:	0001                	nop
   106e0:	60a6                	ld	ra,72(sp)
   106e2:	6406                	ld	s0,64(sp)
   106e4:	6161                	addi	sp,sp,80
   106e6:	8082                	ret

00000000000106e8 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   106e8:	1141                	addi	sp,sp,-16
   106ea:	e422                	sd	s0,8(sp)
   106ec:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   106ee:	0001                	nop
   106f0:	6422                	ld	s0,8(sp)
   106f2:	0141                	addi	sp,sp,16
   106f4:	8082                	ret

00000000000106f6 <init_pmp>:

// Enable U,S,MPRV for all regions
void init_pmp() {
   106f6:	1101                	addi	sp,sp,-32
   106f8:	ec22                	sd	s0,24(sp)
   106fa:	1000                	addi	s0,sp,32
    uint64_t a0 = -1;  // Give S-mode free rein of everything else.
   106fc:	57fd                	li	a5,-1
   106fe:	fef43423          	sd	a5,-24(s0)
    uint64_t cfg = (PMP_NAPOT | PMP_R | PMP_W | PMP_X) << 0; // [] channel: whole memory range
   10702:	47fd                	li	a5,31
   10704:	fef43023          	sd	a5,-32(s0)

    // Plug it all in.
    asm volatile ("csrw pmpaddr0, %[a0]\n\t"
   10708:	fe843783          	ld	a5,-24(s0)
   1070c:	fe043703          	ld	a4,-32(s0)
   10710:	3b079073          	csrw	pmpaddr0,a5
   10714:	3a071073          	csrw	pmpcfg0,a4
                  "csrw pmpcfg0, %[cfg]"
                  :: [a0] "r" (a0),
                     [cfg] "r" (cfg));
}
   10718:	0001                	nop
   1071a:	6462                	ld	s0,24(sp)
   1071c:	6105                	addi	sp,sp,32
   1071e:	8082                	ret

0000000000010720 <_init>:

static const fdt_header fdt_ = {
    0xf00dcafe
};

void _init() {
   10720:	715d                	addi	sp,sp,-80
   10722:	e486                	sd	ra,72(sp)
   10724:	e0a2                	sd	s0,64(sp)
   10726:	0880                	addi	s0,sp,80
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10728:	100ff7b7          	lui	a5,0x100ff
   1072c:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10730:	100007b7          	lui	a5,0x10000
   10734:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   10738:	100607b7          	lui	a5,0x10060
   1073c:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   10740:	47a1                	li	a5,8
   10742:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   10746:	fd043783          	ld	a5,-48(s0)
   1074a:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   1074e:	6785                	lui	a5,0x1
   10750:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   10754:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   10758:	fd043783          	ld	a5,-48(s0)
   1075c:	3047b073          	csrc	mie,a5

    t1 = 0x00000007;
   10760:	479d                	li	a5,7
   10762:	fcf43823          	sd	a5,-48(s0)
    asm("csrw mcounteren, %0" : :"r"(t1));  // allow counter access from S-mode
   10766:	fd043783          	ld	a5,-48(s0)
   1076a:	30679073          	csrw	mcounteren,a5
    asm("csrw scounteren, %0" : :"r"(t1));  // allow counter access from U-mode
   1076e:	fd043783          	ld	a5,-48(s0)
   10772:	10679073          	csrw	scounteren,a5

    init_pmp();
   10776:	00000097          	auipc	ra,0x0
   1077a:	f80080e7          	jalr	-128(ra) # 106f6 <init_pmp>

    txctrl.v = 0;
   1077e:	fc042023          	sw	zero,-64(s0)
    txctrl.b.txen = 1;
   10782:	fc044783          	lbu	a5,-64(s0)
   10786:	0017e793          	ori	a5,a5,1
   1078a:	fcf40023          	sb	a5,-64(s0)
    rxctrl.v = 0;
   1078e:	fa042c23          	sw	zero,-72(s0)
    rxctrl.b.rxen = 1;
   10792:	fb844783          	lbu	a5,-72(s0)
   10796:	0017e793          	ori	a5,a5,1
   1079a:	faf40c23          	sb	a5,-72(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   1079e:	fe043783          	ld	a5,-32(s0)
   107a2:	0ad00713          	li	a4,173
   107a6:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   107a8:	fc042783          	lw	a5,-64(s0)
   107ac:	0007871b          	sext.w	a4,a5
   107b0:	fe043783          	ld	a5,-32(s0)
   107b4:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   107b6:	fb842783          	lw	a5,-72(s0)
   107ba:	0007871b          	sext.w	a4,a5
   107be:	fe043783          	ld	a5,-32(s0)
   107c2:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   107c4:	fd843783          	ld	a5,-40(s0)
   107c8:	473d                	li	a4,15
   107ca:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   107cc:	fd843783          	ld	a5,-40(s0)
   107d0:	6705                	lui	a4,0x1
   107d2:	3741                	addiw	a4,a4,-16
   107d4:	c798                	sw	a4,8(a5)

    led_set(0x01);
   107d6:	4505                	li	a0,1
   107d8:	d2bff0ef          	jal	ra,10502 <led_set>

    copy_image();
   107dc:	00000097          	auipc	ra,0x0
   107e0:	da4080e7          	jalr	-604(ra) # 10580 <copy_image>
    led_set(0x02);
   107e4:	4509                	li	a0,2
   107e6:	d1dff0ef          	jal	ra,10502 <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   107ea:	67c9                	lui	a5,0x12
   107ec:	42078593          	addi	a1,a5,1056 # 12420 <strnlen+0x8a>
   107f0:	67c9                	lui	a5,0x12
   107f2:	42878513          	addi	a0,a5,1064 # 12428 <strnlen+0x92>
   107f6:	641000ef          	jal	ra,11636 <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   107fa:	67c9                	lui	a5,0x12
   107fc:	43878593          	addi	a1,a5,1080 # 12438 <strnlen+0xa2>
   10800:	67c9                	lui	a5,0x12
   10802:	44078513          	addi	a0,a5,1088 # 12440 <strnlen+0xaa>
   10806:	631000ef          	jal	ra,11636 <printf_uart>

    led_set(0x03);
   1080a:	450d                	li	a0,3
   1080c:	cf7ff0ef          	jal	ra,10502 <led_set>

    if (get_dips() == 0x0F) {
   10810:	d4fff0ef          	jal	ra,1055e <get_dips>
   10814:	87aa                	mv	a5,a0
   10816:	873e                	mv	a4,a5
   10818:	47bd                	li	a5,15
   1081a:	02f71463          	bne	a4,a5,10842 <_init+0x122>
        write_csr(mepc, 0x0000000080000000ull);  // sim: jump to ddr (bbl-q should be init)
   1081e:	4785                	li	a5,1
   10820:	07fe                	slli	a5,a5,0x1f
   10822:	34179073          	csrw	mepc,a5
        set_csr(mstatus, MSTATUS_MPP_M);           //      run bbl-q in machine mode
   10826:	6789                	lui	a5,0x2
   10828:	8007879b          	addiw	a5,a5,-2048
   1082c:	3007a7f3          	csrrs	a5,mstatus,a5
   10830:	fcf43423          	sd	a5,-56(s0)
        // set a0 = hart id
        asm("csrr a0,mhartid");
   10834:	f1402573          	csrr	a0,mhartid
        // set a1 = fdt header
        asm ("la a1,fdt_");
   10838:	00002597          	auipc	a1,0x2
   1083c:	ef858593          	addi	a1,a1,-264 # 12730 <fdt_>
    } else {
        write_csr(mepc, 0x0000000008000000ull);  // jump to entry point in SRAM = 0x08000000
    }
}
   10840:	a029                	j	1084a <_init+0x12a>
        write_csr(mepc, 0x0000000008000000ull);  // jump to entry point in SRAM = 0x08000000
   10842:	080007b7          	lui	a5,0x8000
   10846:	34179073          	csrw	mepc,a5
}
   1084a:	0001                	nop
   1084c:	60a6                	ld	ra,72(sp)
   1084e:	6406                	ld	s0,64(sp)
   10850:	6161                	addi	sp,sp,80
   10852:	8082                	ret

0000000000010854 <main>:

/** Not used actually */
int main() {
   10854:	1141                	addi	sp,sp,-16
   10856:	e422                	sd	s0,8(sp)
   10858:	0800                	addi	s0,sp,16
    while (1) {}
   1085a:	a001                	j	1085a <main+0x6>
	...

000000000001085e <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   1085e:	715d                	addi	sp,sp,-80
   10860:	e4a2                	sd	s0,72(sp)
   10862:	0880                	addi	s0,sp,80
   10864:	faa43c23          	sd	a0,-72(s0)
   10868:	87ae                	mv	a5,a1
   1086a:	8732                	mv	a4,a2
   1086c:	faf41b23          	sh	a5,-74(s0)
   10870:	87ba                	mv	a5,a4
   10872:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   10876:	fb843783          	ld	a5,-72(s0)
   1087a:	479c                	lw	a5,8(a5)
   1087c:	0087d79b          	srliw	a5,a5,0x8
   10880:	2781                	sext.w	a5,a5
   10882:	2781                	sext.w	a5,a5
   10884:	0ff7f793          	andi	a5,a5,255
   10888:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   1088c:	fb843783          	ld	a5,-72(s0)
   10890:	479c                	lw	a5,8(a5)
   10892:	0107d79b          	srliw	a5,a5,0x10
   10896:	2781                	sext.w	a5,a5
   10898:	2781                	sext.w	a5,a5
   1089a:	0ff7f793          	andi	a5,a5,255
   1089e:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   108a2:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   108a6:	fe042423          	sw	zero,-24(s0)
   108aa:	a82d                	j	108e4 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108ac:	fec42783          	lw	a5,-20(s0)
   108b0:	04078793          	addi	a5,a5,64 # 8000040 <_end+0x7fed75c>
   108b4:	fb843703          	ld	a4,-72(s0)
   108b8:	97ba                	add	a5,a5,a4
   108ba:	639c                	ld	a5,0(a5)
   108bc:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   108c0:	fb843703          	ld	a4,-72(s0)
   108c4:	fec42783          	lw	a5,-20(s0)
   108c8:	97ba                	add	a5,a5,a4
   108ca:	0407c783          	lbu	a5,64(a5)
   108ce:	2781                	sext.w	a5,a5
   108d0:	fec42703          	lw	a4,-20(s0)
   108d4:	9fb9                	addw	a5,a5,a4
   108d6:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   108da:	fe842783          	lw	a5,-24(s0)
   108de:	2785                	addiw	a5,a5,1
   108e0:	fef42423          	sw	a5,-24(s0)
   108e4:	fe842703          	lw	a4,-24(s0)
   108e8:	fdc42783          	lw	a5,-36(s0)
   108ec:	2701                	sext.w	a4,a4
   108ee:	2781                	sext.w	a5,a5
   108f0:	faf74ee3          	blt	a4,a5,108ac <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   108f4:	fe042223          	sw	zero,-28(s0)
   108f8:	a8b5                	j	10974 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108fa:	fec42783          	lw	a5,-20(s0)
   108fe:	04078793          	addi	a5,a5,64
   10902:	fb843703          	ld	a4,-72(s0)
   10906:	97ba                	add	a5,a5,a4
   10908:	639c                	ld	a5,0(a5)
   1090a:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   1090e:	fec42783          	lw	a5,-20(s0)
   10912:	27a1                	addiw	a5,a5,8
   10914:	2781                	sext.w	a5,a5
   10916:	04078793          	addi	a5,a5,64
   1091a:	fb843703          	ld	a4,-72(s0)
   1091e:	97ba                	add	a5,a5,a4
   10920:	639c                	ld	a5,0(a5)
   10922:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10926:	fc645783          	lhu	a5,-58(s0)
   1092a:	fb645703          	lhu	a4,-74(s0)
   1092e:	2701                	sext.w	a4,a4
   10930:	2781                	sext.w	a5,a5
   10932:	00f71f63          	bne	a4,a5,10950 <get_dev_bar+0xf2>
   10936:	fc445783          	lhu	a5,-60(s0)
   1093a:	fb445703          	lhu	a4,-76(s0)
   1093e:	2701                	sext.w	a4,a4
   10940:	2781                	sext.w	a5,a5
   10942:	00f71763          	bne	a4,a5,10950 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10946:	fcc42783          	lw	a5,-52(s0)
   1094a:	1782                	slli	a5,a5,0x20
   1094c:	9381                	srli	a5,a5,0x20
   1094e:	a825                	j	10986 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10950:	fb843703          	ld	a4,-72(s0)
   10954:	fec42783          	lw	a5,-20(s0)
   10958:	97ba                	add	a5,a5,a4
   1095a:	0407c783          	lbu	a5,64(a5)
   1095e:	2781                	sext.w	a5,a5
   10960:	fec42703          	lw	a4,-20(s0)
   10964:	9fb9                	addw	a5,a5,a4
   10966:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1096a:	fe442783          	lw	a5,-28(s0)
   1096e:	2785                	addiw	a5,a5,1
   10970:	fef42223          	sw	a5,-28(s0)
   10974:	fe442703          	lw	a4,-28(s0)
   10978:	fe042783          	lw	a5,-32(s0)
   1097c:	2701                	sext.w	a4,a4
   1097e:	2781                	sext.w	a5,a5
   10980:	f6f74de3          	blt	a4,a5,108fa <get_dev_bar+0x9c>
    return DEV_NONE;
   10984:	57fd                	li	a5,-1
}
   10986:	853e                	mv	a0,a5
   10988:	6426                	ld	s0,72(sp)
   1098a:	6161                	addi	sp,sp,80
   1098c:	8082                	ret

000000000001098e <mpu_region_total>:
static int mpu_region_total() {
   1098e:	1101                	addi	sp,sp,-32
   10990:	ec22                	sd	s0,24(sp)
   10992:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10994:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10998:	bc4027f3          	csrr	a5,0xbc4
   1099c:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   109a0:	fe843783          	ld	a5,-24(s0)
   109a4:	83a1                	srli	a5,a5,0x8
   109a6:	2781                	sext.w	a5,a5
}
   109a8:	853e                	mv	a0,a5
   109aa:	6462                	ld	s0,24(sp)
   109ac:	6105                	addi	sp,sp,32
   109ae:	8082                	ret

00000000000109b0 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   109b0:	7179                	addi	sp,sp,-48
   109b2:	f422                	sd	s0,40(sp)
   109b4:	1800                	addi	s0,sp,48
   109b6:	87aa                	mv	a5,a0
   109b8:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   109bc:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   109c0:	fdc42783          	lw	a5,-36(s0)
   109c4:	0ff7f793          	andi	a5,a5,255
   109c8:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   109cc:	fe844783          	lbu	a5,-24(s0)
   109d0:	f807e793          	ori	a5,a5,-128
   109d4:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   109d8:	fe843783          	ld	a5,-24(s0)
   109dc:	bc479073          	csrw	0xbc4,a5
}
   109e0:	0001                	nop
   109e2:	7422                	ld	s0,40(sp)
   109e4:	6145                	addi	sp,sp,48
   109e6:	8082                	ret

00000000000109e8 <mpu_enable_region>:
                       const char *rwx) {
   109e8:	715d                	addi	sp,sp,-80
   109ea:	e4a2                	sd	s0,72(sp)
   109ec:	0880                	addi	s0,sp,80
   109ee:	87aa                	mv	a5,a0
   109f0:	fcb43023          	sd	a1,-64(s0)
   109f4:	fac43c23          	sd	a2,-72(s0)
   109f8:	fae43823          	sd	a4,-80(s0)
   109fc:	fcf42623          	sw	a5,-52(s0)
   10a00:	87b6                	mv	a5,a3
   10a02:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10a06:	c0000793          	li	a5,-1024
   10a0a:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10a0e:	fb043783          	ld	a5,-80(s0)
   10a12:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10a16:	fc043783          	ld	a5,-64(s0)
   10a1a:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10a1e:	fb843783          	ld	a5,-72(s0)
   10a22:	8385                	srli	a5,a5,0x1
   10a24:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a28:	a819                	j	10a3e <mpu_enable_region+0x56>
        mask <<= 1;
   10a2a:	fe843783          	ld	a5,-24(s0)
   10a2e:	0786                	slli	a5,a5,0x1
   10a30:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10a34:	fb843783          	ld	a5,-72(s0)
   10a38:	8385                	srli	a5,a5,0x1
   10a3a:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a3e:	fb843783          	ld	a5,-72(s0)
   10a42:	f7e5                	bnez	a5,10a2a <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10a44:	fe843783          	ld	a5,-24(s0)
   10a48:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10a4c:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10a50:	fcc42783          	lw	a5,-52(s0)
   10a54:	0ff7f793          	andi	a5,a5,255
   10a58:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10a5c:	fd844783          	lbu	a5,-40(s0)
   10a60:	0107e793          	ori	a5,a5,16
   10a64:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10a68:	fc842783          	lw	a5,-56(s0)
   10a6c:	8b85                	andi	a5,a5,1
   10a6e:	0ff7f793          	andi	a5,a5,255
   10a72:	8b85                	andi	a5,a5,1
   10a74:	0037969b          	slliw	a3,a5,0x3
   10a78:	fd844783          	lbu	a5,-40(s0)
   10a7c:	9bdd                	andi	a5,a5,-9
   10a7e:	873e                	mv	a4,a5
   10a80:	87b6                	mv	a5,a3
   10a82:	8fd9                	or	a5,a5,a4
   10a84:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10a88:	fd844783          	lbu	a5,-40(s0)
   10a8c:	f807e793          	ori	a5,a5,-128
   10a90:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10a94:	a09d                	j	10afa <mpu_enable_region+0x112>
        if (*p == 'r') {
   10a96:	fe043783          	ld	a5,-32(s0)
   10a9a:	0007c783          	lbu	a5,0(a5)
   10a9e:	873e                	mv	a4,a5
   10aa0:	07200793          	li	a5,114
   10aa4:	00f71863          	bne	a4,a5,10ab4 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10aa8:	fd844783          	lbu	a5,-40(s0)
   10aac:	0027e793          	ori	a5,a5,2
   10ab0:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10ab4:	fe043783          	ld	a5,-32(s0)
   10ab8:	0007c783          	lbu	a5,0(a5)
   10abc:	873e                	mv	a4,a5
   10abe:	07700793          	li	a5,119
   10ac2:	00f71863          	bne	a4,a5,10ad2 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10ac6:	fd844783          	lbu	a5,-40(s0)
   10aca:	0017e793          	ori	a5,a5,1
   10ace:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10ad2:	fe043783          	ld	a5,-32(s0)
   10ad6:	0007c783          	lbu	a5,0(a5)
   10ada:	873e                	mv	a4,a5
   10adc:	07800793          	li	a5,120
   10ae0:	00f71863          	bne	a4,a5,10af0 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10ae4:	fd844783          	lbu	a5,-40(s0)
   10ae8:	0047e793          	ori	a5,a5,4
   10aec:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10af0:	fe043783          	ld	a5,-32(s0)
   10af4:	0785                	addi	a5,a5,1
   10af6:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10afa:	fe043783          	ld	a5,-32(s0)
   10afe:	0007c783          	lbu	a5,0(a5)
   10b02:	fbd1                	bnez	a5,10a96 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10b04:	fd843783          	ld	a5,-40(s0)
   10b08:	bc479073          	csrw	0xbc4,a5
}
   10b0c:	0001                	nop
   10b0e:	6426                	ld	s0,72(sp)
   10b10:	6161                	addi	sp,sp,80
   10b12:	8082                	ret

0000000000010b14 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10b14:	1101                	addi	sp,sp,-32
   10b16:	ec22                	sd	s0,24(sp)
   10b18:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10b1a:	342027f3          	csrr	a5,mcause
   10b1e:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b22:	fec42783          	lw	a5,-20(s0)
}
   10b26:	853e                	mv	a0,a5
   10b28:	6462                	ld	s0,24(sp)
   10b2a:	6105                	addi	sp,sp,32
   10b2c:	8082                	ret

0000000000010b2e <get_mepc>:

int get_mepc() {
   10b2e:	1101                	addi	sp,sp,-32
   10b30:	ec22                	sd	s0,24(sp)
   10b32:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10b34:	341027f3          	csrr	a5,mepc
   10b38:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b3c:	fec42783          	lw	a5,-20(s0)
}
   10b40:	853e                	mv	a0,a5
   10b42:	6462                	ld	s0,24(sp)
   10b44:	6105                	addi	sp,sp,32
   10b46:	8082                	ret

0000000000010b48 <env_call>:


void env_call(long long test_id) {
   10b48:	7179                	addi	sp,sp,-48
   10b4a:	f406                	sd	ra,40(sp)
   10b4c:	f022                	sd	s0,32(sp)
   10b4e:	1800                	addi	s0,sp,48
   10b50:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10b54:	fd843783          	ld	a5,-40(s0)
   10b58:	c7bd                	beqz	a5,10bc6 <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10b5a:	45b5                	li	a1,13
   10b5c:	67c9                	lui	a5,0x12
   10b5e:	45078513          	addi	a0,a5,1104 # 12450 <strnlen+0xba>
   10b62:	00000097          	auipc	ra,0x0
   10b66:	4f8080e7          	jalr	1272(ra) # 1105a <print_uart>
        print_uart("a0=", 3);
   10b6a:	458d                	li	a1,3
   10b6c:	67c9                	lui	a5,0x12
   10b6e:	46078513          	addi	a0,a5,1120 # 12460 <strnlen+0xca>
   10b72:	00000097          	auipc	ra,0x0
   10b76:	4e8080e7          	jalr	1256(ra) # 1105a <print_uart>
        print_uart_hex(test_id);
   10b7a:	fd843503          	ld	a0,-40(s0)
   10b7e:	54e000ef          	jal	ra,110cc <print_uart_hex>
        print_uart("\r\n", 2);
   10b82:	4589                	li	a1,2
   10b84:	67c9                	lui	a5,0x12
   10b86:	46878513          	addi	a0,a5,1128 # 12468 <strnlen+0xd2>
   10b8a:	00000097          	auipc	ra,0x0
   10b8e:	4d0080e7          	jalr	1232(ra) # 1105a <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10b92:	343027f3          	csrr	a5,mbadaddr
   10b96:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10b9a:	45a5                	li	a1,9
   10b9c:	67c9                	lui	a5,0x12
   10b9e:	47078513          	addi	a0,a5,1136 # 12470 <strnlen+0xda>
   10ba2:	00000097          	auipc	ra,0x0
   10ba6:	4b8080e7          	jalr	1208(ra) # 1105a <print_uart>
        print_uart_hex(mbadaddr);
   10baa:	fec42783          	lw	a5,-20(s0)
   10bae:	853e                	mv	a0,a5
   10bb0:	51c000ef          	jal	ra,110cc <print_uart_hex>
        print_uart("\r\n", 2);
   10bb4:	4589                	li	a1,2
   10bb6:	67c9                	lui	a5,0x12
   10bb8:	46878513          	addi	a0,a5,1128 # 12468 <strnlen+0xd2>
   10bbc:	00000097          	auipc	ra,0x0
   10bc0:	49e080e7          	jalr	1182(ra) # 1105a <print_uart>
   10bc4:	a809                	j	10bd6 <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10bc6:	45b5                	li	a1,13
   10bc8:	67c9                	lui	a5,0x12
   10bca:	48078513          	addi	a0,a5,1152 # 12480 <strnlen+0xea>
   10bce:	00000097          	auipc	ra,0x0
   10bd2:	48c080e7          	jalr	1164(ra) # 1105a <print_uart>
    }
    while (1) {}
   10bd6:	a001                	j	10bd6 <env_call+0x8e>

0000000000010bd8 <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10bd8:	7179                	addi	sp,sp,-48
   10bda:	f406                	sd	ra,40(sp)
   10bdc:	f022                	sd	s0,32(sp)
   10bde:	1800                	addi	s0,sp,48
   10be0:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10be4:	00000097          	auipc	ra,0x0
   10be8:	f30080e7          	jalr	-208(ra) # 10b14 <get_mcause>
   10bec:	87aa                	mv	a5,a0
   10bee:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10bf2:	fec42783          	lw	a5,-20(s0)
   10bf6:	37e1                	addiw	a5,a5,-8
   10bf8:	0007871b          	sext.w	a4,a5
   10bfc:	4785                	li	a5,1
   10bfe:	00e7e963          	bltu	a5,a4,10c10 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10c02:	fd843503          	ld	a0,-40(s0)
   10c06:	00000097          	auipc	ra,0x0
   10c0a:	f42080e7          	jalr	-190(ra) # 10b48 <env_call>
        return;
   10c0e:	a0b9                	j	10c5c <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10c10:	459d                	li	a1,7
   10c12:	67c9                	lui	a5,0x12
   10c14:	49078513          	addi	a0,a5,1168 # 12490 <strnlen+0xfa>
   10c18:	442000ef          	jal	ra,1105a <print_uart>
    print_uart_hex(mcause);
   10c1c:	fec42783          	lw	a5,-20(s0)
   10c20:	853e                	mv	a0,a5
   10c22:	00000097          	auipc	ra,0x0
   10c26:	4aa080e7          	jalr	1194(ra) # 110cc <print_uart_hex>
    print_uart(",mepc:", 6);
   10c2a:	4599                	li	a1,6
   10c2c:	67c9                	lui	a5,0x12
   10c2e:	49878513          	addi	a0,a5,1176 # 12498 <strnlen+0x102>
   10c32:	428000ef          	jal	ra,1105a <print_uart>
    print_uart_hex(get_mepc());
   10c36:	ef9ff0ef          	jal	ra,10b2e <get_mepc>
   10c3a:	87aa                	mv	a5,a0
   10c3c:	853e                	mv	a0,a5
   10c3e:	00000097          	auipc	ra,0x0
   10c42:	48e080e7          	jalr	1166(ra) # 110cc <print_uart_hex>
    print_uart("\r\n", 2);
   10c46:	4589                	li	a1,2
   10c48:	67c9                	lui	a5,0x12
   10c4a:	46878513          	addi	a0,a5,1128 # 12468 <strnlen+0xd2>
   10c4e:	40c000ef          	jal	ra,1105a <print_uart>

    /// Exception trap
    led_set(0xF0);
   10c52:	0f000513          	li	a0,240
   10c56:	8adff0ef          	jal	ra,10502 <led_set>
    while (1) {}
   10c5a:	a001                	j	10c5a <exception_handler_c+0x82>
}
   10c5c:	70a2                	ld	ra,40(sp)
   10c5e:	7402                	ld	s0,32(sp)
   10c60:	6145                	addi	sp,sp,48
   10c62:	8082                	ret

0000000000010c64 <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   10c64:	1141                	addi	sp,sp,-16
   10c66:	e406                	sd	ra,8(sp)
   10c68:	e022                	sd	s0,0(sp)
   10c6a:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10c6c:	0f000513          	li	a0,240
   10c70:	00000097          	auipc	ra,0x0
   10c74:	892080e7          	jalr	-1902(ra) # 10502 <led_set>
    print_uart("fatal_error()\r\n", 15);
   10c78:	45bd                	li	a1,15
   10c7a:	67c9                	lui	a5,0x12
   10c7c:	4a078513          	addi	a0,a5,1184 # 124a0 <strnlen+0x10a>
   10c80:	00000097          	auipc	ra,0x0
   10c84:	3da080e7          	jalr	986(ra) # 1105a <print_uart>
    while (1) {}
   10c88:	a001                	j	10c88 <fatal_error+0x24>

0000000000010c8a <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10c8a:	7179                	addi	sp,sp,-48
   10c8c:	f422                	sd	s0,40(sp)
   10c8e:	1800                	addi	s0,sp,48
   10c90:	87aa                	mv	a5,a0
   10c92:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10c96:	0c0007b7          	lui	a5,0xc000
   10c9a:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10c9e:	fe843703          	ld	a4,-24(s0)
   10ca2:	fdc42783          	lw	a5,-36(s0)
   10ca6:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed91c>
   10caa:	07b2                	slli	a5,a5,0xc
   10cac:	97ba                	add	a5,a5,a4
   10cae:	43dc                	lw	a5,4(a5)
   10cb0:	2781                	sext.w	a5,a5
}
   10cb2:	853e                	mv	a0,a5
   10cb4:	7422                	ld	s0,40(sp)
   10cb6:	6145                	addi	sp,sp,48
   10cb8:	8082                	ret

0000000000010cba <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10cba:	7179                	addi	sp,sp,-48
   10cbc:	f422                	sd	s0,40(sp)
   10cbe:	1800                	addi	s0,sp,48
   10cc0:	87aa                	mv	a5,a0
   10cc2:	872e                	mv	a4,a1
   10cc4:	fcf42e23          	sw	a5,-36(s0)
   10cc8:	87ba                	mv	a5,a4
   10cca:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10cce:	0c0007b7          	lui	a5,0xc000
   10cd2:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10cd6:	fd842703          	lw	a4,-40(s0)
   10cda:	fe843683          	ld	a3,-24(s0)
   10cde:	fdc42783          	lw	a5,-36(s0)
   10ce2:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed91c>
   10ce6:	07b2                	slli	a5,a5,0xc
   10ce8:	97b6                	add	a5,a5,a3
   10cea:	c3d8                	sw	a4,4(a5)
}
   10cec:	0001                	nop
   10cee:	7422                	ld	s0,40(sp)
   10cf0:	6145                	addi	sp,sp,48
   10cf2:	8082                	ret

0000000000010cf4 <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10cf4:	7139                	addi	sp,sp,-64
   10cf6:	fc06                	sd	ra,56(sp)
   10cf8:	f822                	sd	s0,48(sp)
   10cfa:	0080                	addi	s0,sp,64
   10cfc:	fca43c23          	sd	a0,-40(s0)
   10d00:	fcb43823          	sd	a1,-48(s0)
   10d04:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10d08:	fd843783          	ld	a5,-40(s0)
   10d0c:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d10:	fe744783          	lbu	a5,-25(s0)
   10d14:	f807f793          	andi	a5,a5,-128
   10d18:	0ff7f793          	andi	a5,a5,255
   10d1c:	cb85                	beqz	a5,10d4c <interrupt_handler_c+0x58>
   10d1e:	fe043703          	ld	a4,-32(s0)
   10d22:	57fd                	li	a5,-1
   10d24:	8385                	srli	a5,a5,0x1
   10d26:	8f7d                	and	a4,a4,a5
   10d28:	47ad                	li	a5,11
   10d2a:	02f71163          	bne	a4,a5,10d4c <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10d2e:	4501                	li	a0,0
   10d30:	f5bff0ef          	jal	ra,10c8a <plic_claim>
   10d34:	87aa                	mv	a5,a0
   10d36:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10d3a:	fec42783          	lw	a5,-20(s0)
   10d3e:	85be                	mv	a1,a5
   10d40:	4501                	li	a0,0
   10d42:	00000097          	auipc	ra,0x0
   10d46:	f78080e7          	jalr	-136(ra) # 10cba <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d4a:	a029                	j	10d54 <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10d4c:	00000097          	auipc	ra,0x0
   10d50:	f18080e7          	jalr	-232(ra) # 10c64 <fatal_error>
    }

    return epc;
   10d54:	fd043783          	ld	a5,-48(s0)
}
   10d58:	853e                	mv	a0,a5
   10d5a:	70e2                	ld	ra,56(sp)
   10d5c:	7442                	ld	s0,48(sp)
   10d5e:	6121                	addi	sp,sp,64
   10d60:	8082                	ret

0000000000010d62 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10d62:	715d                	addi	sp,sp,-80
   10d64:	e4a2                	sd	s0,72(sp)
   10d66:	0880                	addi	s0,sp,80
   10d68:	faa43c23          	sd	a0,-72(s0)
   10d6c:	87ae                	mv	a5,a1
   10d6e:	8732                	mv	a4,a2
   10d70:	faf41b23          	sh	a5,-74(s0)
   10d74:	87ba                	mv	a5,a4
   10d76:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   10d7a:	fb843783          	ld	a5,-72(s0)
   10d7e:	479c                	lw	a5,8(a5)
   10d80:	0087d79b          	srliw	a5,a5,0x8
   10d84:	2781                	sext.w	a5,a5
   10d86:	2781                	sext.w	a5,a5
   10d88:	0ff7f793          	andi	a5,a5,255
   10d8c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10d90:	fb843783          	ld	a5,-72(s0)
   10d94:	479c                	lw	a5,8(a5)
   10d96:	0107d79b          	srliw	a5,a5,0x10
   10d9a:	2781                	sext.w	a5,a5
   10d9c:	2781                	sext.w	a5,a5
   10d9e:	0ff7f793          	andi	a5,a5,255
   10da2:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10da6:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10daa:	fe042423          	sw	zero,-24(s0)
   10dae:	a82d                	j	10de8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10db0:	fec42783          	lw	a5,-20(s0)
   10db4:	04078793          	addi	a5,a5,64
   10db8:	fb843703          	ld	a4,-72(s0)
   10dbc:	97ba                	add	a5,a5,a4
   10dbe:	639c                	ld	a5,0(a5)
   10dc0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10dc4:	fb843703          	ld	a4,-72(s0)
   10dc8:	fec42783          	lw	a5,-20(s0)
   10dcc:	97ba                	add	a5,a5,a4
   10dce:	0407c783          	lbu	a5,64(a5)
   10dd2:	2781                	sext.w	a5,a5
   10dd4:	fec42703          	lw	a4,-20(s0)
   10dd8:	9fb9                	addw	a5,a5,a4
   10dda:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10dde:	fe842783          	lw	a5,-24(s0)
   10de2:	2785                	addiw	a5,a5,1
   10de4:	fef42423          	sw	a5,-24(s0)
   10de8:	fe842703          	lw	a4,-24(s0)
   10dec:	fdc42783          	lw	a5,-36(s0)
   10df0:	2701                	sext.w	a4,a4
   10df2:	2781                	sext.w	a5,a5
   10df4:	faf74ee3          	blt	a4,a5,10db0 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10df8:	fe042223          	sw	zero,-28(s0)
   10dfc:	a8b5                	j	10e78 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10dfe:	fec42783          	lw	a5,-20(s0)
   10e02:	04078793          	addi	a5,a5,64
   10e06:	fb843703          	ld	a4,-72(s0)
   10e0a:	97ba                	add	a5,a5,a4
   10e0c:	639c                	ld	a5,0(a5)
   10e0e:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10e12:	fec42783          	lw	a5,-20(s0)
   10e16:	27a1                	addiw	a5,a5,8
   10e18:	2781                	sext.w	a5,a5
   10e1a:	04078793          	addi	a5,a5,64
   10e1e:	fb843703          	ld	a4,-72(s0)
   10e22:	97ba                	add	a5,a5,a4
   10e24:	639c                	ld	a5,0(a5)
   10e26:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10e2a:	fc645783          	lhu	a5,-58(s0)
   10e2e:	fb645703          	lhu	a4,-74(s0)
   10e32:	2701                	sext.w	a4,a4
   10e34:	2781                	sext.w	a5,a5
   10e36:	00f71f63          	bne	a4,a5,10e54 <get_dev_bar+0xf2>
   10e3a:	fc445783          	lhu	a5,-60(s0)
   10e3e:	fb445703          	lhu	a4,-76(s0)
   10e42:	2701                	sext.w	a4,a4
   10e44:	2781                	sext.w	a5,a5
   10e46:	00f71763          	bne	a4,a5,10e54 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10e4a:	fcc42783          	lw	a5,-52(s0)
   10e4e:	1782                	slli	a5,a5,0x20
   10e50:	9381                	srli	a5,a5,0x20
   10e52:	a825                	j	10e8a <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10e54:	fb843703          	ld	a4,-72(s0)
   10e58:	fec42783          	lw	a5,-20(s0)
   10e5c:	97ba                	add	a5,a5,a4
   10e5e:	0407c783          	lbu	a5,64(a5)
   10e62:	2781                	sext.w	a5,a5
   10e64:	fec42703          	lw	a4,-20(s0)
   10e68:	9fb9                	addw	a5,a5,a4
   10e6a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10e6e:	fe442783          	lw	a5,-28(s0)
   10e72:	2785                	addiw	a5,a5,1
   10e74:	fef42223          	sw	a5,-28(s0)
   10e78:	fe442703          	lw	a4,-28(s0)
   10e7c:	fe042783          	lw	a5,-32(s0)
   10e80:	2701                	sext.w	a4,a4
   10e82:	2781                	sext.w	a5,a5
   10e84:	f6f74de3          	blt	a4,a5,10dfe <get_dev_bar+0x9c>
    return DEV_NONE;
   10e88:	57fd                	li	a5,-1
}
   10e8a:	853e                	mv	a0,a5
   10e8c:	6426                	ld	s0,72(sp)
   10e8e:	6161                	addi	sp,sp,80
   10e90:	8082                	ret

0000000000010e92 <mpu_region_total>:
static int mpu_region_total() {
   10e92:	1101                	addi	sp,sp,-32
   10e94:	ec22                	sd	s0,24(sp)
   10e96:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10e98:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10e9c:	bc4027f3          	csrr	a5,0xbc4
   10ea0:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10ea4:	fe843783          	ld	a5,-24(s0)
   10ea8:	83a1                	srli	a5,a5,0x8
   10eaa:	2781                	sext.w	a5,a5
}
   10eac:	853e                	mv	a0,a5
   10eae:	6462                	ld	s0,24(sp)
   10eb0:	6105                	addi	sp,sp,32
   10eb2:	8082                	ret

0000000000010eb4 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10eb4:	7179                	addi	sp,sp,-48
   10eb6:	f422                	sd	s0,40(sp)
   10eb8:	1800                	addi	s0,sp,48
   10eba:	87aa                	mv	a5,a0
   10ebc:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10ec0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10ec4:	fdc42783          	lw	a5,-36(s0)
   10ec8:	0ff7f793          	andi	a5,a5,255
   10ecc:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10ed0:	fe844783          	lbu	a5,-24(s0)
   10ed4:	f807e793          	ori	a5,a5,-128
   10ed8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10edc:	fe843783          	ld	a5,-24(s0)
   10ee0:	bc479073          	csrw	0xbc4,a5
}
   10ee4:	0001                	nop
   10ee6:	7422                	ld	s0,40(sp)
   10ee8:	6145                	addi	sp,sp,48
   10eea:	8082                	ret

0000000000010eec <mpu_enable_region>:
                       const char *rwx) {
   10eec:	715d                	addi	sp,sp,-80
   10eee:	e4a2                	sd	s0,72(sp)
   10ef0:	0880                	addi	s0,sp,80
   10ef2:	87aa                	mv	a5,a0
   10ef4:	fcb43023          	sd	a1,-64(s0)
   10ef8:	fac43c23          	sd	a2,-72(s0)
   10efc:	fae43823          	sd	a4,-80(s0)
   10f00:	fcf42623          	sw	a5,-52(s0)
   10f04:	87b6                	mv	a5,a3
   10f06:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10f0a:	c0000793          	li	a5,-1024
   10f0e:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10f12:	fb043783          	ld	a5,-80(s0)
   10f16:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10f1a:	fc043783          	ld	a5,-64(s0)
   10f1e:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10f22:	fb843783          	ld	a5,-72(s0)
   10f26:	8385                	srli	a5,a5,0x1
   10f28:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f2c:	a819                	j	10f42 <mpu_enable_region+0x56>
        mask <<= 1;
   10f2e:	fe843783          	ld	a5,-24(s0)
   10f32:	0786                	slli	a5,a5,0x1
   10f34:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10f38:	fb843783          	ld	a5,-72(s0)
   10f3c:	8385                	srli	a5,a5,0x1
   10f3e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f42:	fb843783          	ld	a5,-72(s0)
   10f46:	f7e5                	bnez	a5,10f2e <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10f48:	fe843783          	ld	a5,-24(s0)
   10f4c:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10f50:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10f54:	fcc42783          	lw	a5,-52(s0)
   10f58:	0ff7f793          	andi	a5,a5,255
   10f5c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10f60:	fd844783          	lbu	a5,-40(s0)
   10f64:	0107e793          	ori	a5,a5,16
   10f68:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10f6c:	fc842783          	lw	a5,-56(s0)
   10f70:	8b85                	andi	a5,a5,1
   10f72:	0ff7f793          	andi	a5,a5,255
   10f76:	8b85                	andi	a5,a5,1
   10f78:	0037969b          	slliw	a3,a5,0x3
   10f7c:	fd844783          	lbu	a5,-40(s0)
   10f80:	9bdd                	andi	a5,a5,-9
   10f82:	873e                	mv	a4,a5
   10f84:	87b6                	mv	a5,a3
   10f86:	8fd9                	or	a5,a5,a4
   10f88:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10f8c:	fd844783          	lbu	a5,-40(s0)
   10f90:	f807e793          	ori	a5,a5,-128
   10f94:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10f98:	a09d                	j	10ffe <mpu_enable_region+0x112>
        if (*p == 'r') {
   10f9a:	fe043783          	ld	a5,-32(s0)
   10f9e:	0007c783          	lbu	a5,0(a5)
   10fa2:	873e                	mv	a4,a5
   10fa4:	07200793          	li	a5,114
   10fa8:	00f71863          	bne	a4,a5,10fb8 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10fac:	fd844783          	lbu	a5,-40(s0)
   10fb0:	0027e793          	ori	a5,a5,2
   10fb4:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10fb8:	fe043783          	ld	a5,-32(s0)
   10fbc:	0007c783          	lbu	a5,0(a5)
   10fc0:	873e                	mv	a4,a5
   10fc2:	07700793          	li	a5,119
   10fc6:	00f71863          	bne	a4,a5,10fd6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10fca:	fd844783          	lbu	a5,-40(s0)
   10fce:	0017e793          	ori	a5,a5,1
   10fd2:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10fd6:	fe043783          	ld	a5,-32(s0)
   10fda:	0007c783          	lbu	a5,0(a5)
   10fde:	873e                	mv	a4,a5
   10fe0:	07800793          	li	a5,120
   10fe4:	00f71863          	bne	a4,a5,10ff4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10fe8:	fd844783          	lbu	a5,-40(s0)
   10fec:	0047e793          	ori	a5,a5,4
   10ff0:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10ff4:	fe043783          	ld	a5,-32(s0)
   10ff8:	0785                	addi	a5,a5,1
   10ffa:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10ffe:	fe043783          	ld	a5,-32(s0)
   11002:	0007c783          	lbu	a5,0(a5)
   11006:	fbd1                	bnez	a5,10f9a <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11008:	fd843783          	ld	a5,-40(s0)
   1100c:	bc479073          	csrw	0xbc4,a5
}
   11010:	0001                	nop
   11012:	6426                	ld	s0,72(sp)
   11014:	6161                	addi	sp,sp,80
   11016:	8082                	ret

0000000000011018 <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   11018:	7179                	addi	sp,sp,-48
   1101a:	f422                	sd	s0,40(sp)
   1101c:	1800                	addi	s0,sp,48
   1101e:	87aa                	mv	a5,a0
   11020:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   11024:	100007b7          	lui	a5,0x10000
   11028:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   1102c:	fe843783          	ld	a5,-24(s0)
   11030:	439c                	lw	a5,0(a5)
   11032:	2781                	sext.w	a5,a5
   11034:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   11038:	fe344783          	lbu	a5,-29(s0)
   1103c:	f807f793          	andi	a5,a5,-128
   11040:	0ff7f793          	andi	a5,a5,255
   11044:	f7e5                	bnez	a5,1102c <print_char+0x14>
    uart->txdata = ch;
   11046:	fdc42703          	lw	a4,-36(s0)
   1104a:	fe843783          	ld	a5,-24(s0)
   1104e:	c398                	sw	a4,0(a5)
    return 0;
   11050:	4781                	li	a5,0
}
   11052:	853e                	mv	a0,a5
   11054:	7422                	ld	s0,40(sp)
   11056:	6145                	addi	sp,sp,48
   11058:	8082                	ret

000000000001105a <print_uart>:

void print_uart(const char *buf, int sz) {
   1105a:	7139                	addi	sp,sp,-64
   1105c:	fc22                	sd	s0,56(sp)
   1105e:	0080                	addi	s0,sp,64
   11060:	fca43423          	sd	a0,-56(s0)
   11064:	87ae                	mv	a5,a1
   11066:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   1106a:	100007b7          	lui	a5,0x10000
   1106e:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   11072:	fe042623          	sw	zero,-20(s0)
   11076:	a83d                	j	110b4 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   11078:	fe043783          	ld	a5,-32(s0)
   1107c:	439c                	lw	a5,0(a5)
   1107e:	2781                	sext.w	a5,a5
   11080:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   11084:	fdb44783          	lbu	a5,-37(s0)
   11088:	f807f793          	andi	a5,a5,-128
   1108c:	0ff7f793          	andi	a5,a5,255
   11090:	f7e5                	bnez	a5,11078 <print_uart+0x1e>
        uart->txdata = buf[i];
   11092:	fec42783          	lw	a5,-20(s0)
   11096:	fc843703          	ld	a4,-56(s0)
   1109a:	97ba                	add	a5,a5,a4
   1109c:	0007c783          	lbu	a5,0(a5) # 10000000 <_end+0xffed71c>
   110a0:	0007871b          	sext.w	a4,a5
   110a4:	fe043783          	ld	a5,-32(s0)
   110a8:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   110aa:	fec42783          	lw	a5,-20(s0)
   110ae:	2785                	addiw	a5,a5,1
   110b0:	fef42623          	sw	a5,-20(s0)
   110b4:	fec42703          	lw	a4,-20(s0)
   110b8:	fc442783          	lw	a5,-60(s0)
   110bc:	2701                	sext.w	a4,a4
   110be:	2781                	sext.w	a5,a5
   110c0:	faf74ce3          	blt	a4,a5,11078 <print_uart+0x1e>
    }
}
   110c4:	0001                	nop
   110c6:	7462                	ld	s0,56(sp)
   110c8:	6121                	addi	sp,sp,64
   110ca:	8082                	ret

00000000000110cc <print_uart_hex>:

void print_uart_hex(long val) {
   110cc:	7139                	addi	sp,sp,-64
   110ce:	fc22                	sd	s0,56(sp)
   110d0:	0080                	addi	s0,sp,64
   110d2:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   110d6:	100007b7          	lui	a5,0x10000
   110da:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   110de:	fe042423          	sw	zero,-24(s0)
   110e2:	a041                	j	11162 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   110e4:	fe043783          	ld	a5,-32(s0)
   110e8:	439c                	lw	a5,0(a5)
   110ea:	2781                	sext.w	a5,a5
   110ec:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   110f0:	fdb44783          	lbu	a5,-37(s0)
   110f4:	f807f793          	andi	a5,a5,-128
   110f8:	0ff7f793          	andi	a5,a5,255
   110fc:	f7e5                	bnez	a5,110e4 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   110fe:	473d                	li	a4,15
   11100:	fe842783          	lw	a5,-24(s0)
   11104:	40f707bb          	subw	a5,a4,a5
   11108:	2781                	sext.w	a5,a5
   1110a:	0027979b          	slliw	a5,a5,0x2
   1110e:	2781                	sext.w	a5,a5
   11110:	fc843703          	ld	a4,-56(s0)
   11114:	40f757b3          	sra	a5,a4,a5
   11118:	0ff7f793          	andi	a5,a5,255
   1111c:	8bbd                	andi	a5,a5,15
   1111e:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   11122:	fdf44783          	lbu	a5,-33(s0)
   11126:	0ff7f713          	andi	a4,a5,255
   1112a:	47a5                	li	a5,9
   1112c:	00e7e963          	bltu	a5,a4,1113e <print_uart_hex+0x72>
            s = t + '0';
   11130:	fdf44783          	lbu	a5,-33(s0)
   11134:	0307879b          	addiw	a5,a5,48
   11138:	fef407a3          	sb	a5,-17(s0)
   1113c:	a039                	j	1114a <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   1113e:	fdf44783          	lbu	a5,-33(s0)
   11142:	0577879b          	addiw	a5,a5,87
   11146:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   1114a:	fef44783          	lbu	a5,-17(s0)
   1114e:	0007871b          	sext.w	a4,a5
   11152:	fe043783          	ld	a5,-32(s0)
   11156:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   11158:	fe842783          	lw	a5,-24(s0)
   1115c:	2785                	addiw	a5,a5,1
   1115e:	fef42423          	sw	a5,-24(s0)
   11162:	fe842783          	lw	a5,-24(s0)
   11166:	0007871b          	sext.w	a4,a5
   1116a:	47bd                	li	a5,15
   1116c:	f6e7dce3          	ble	a4,a5,110e4 <print_uart_hex+0x18>
    }
}
   11170:	0001                	nop
   11172:	7462                	ld	s0,56(sp)
   11174:	6121                	addi	sp,sp,64
   11176:	8082                	ret

0000000000011178 <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   11178:	7119                	addi	sp,sp,-128
   1117a:	fc86                	sd	ra,120(sp)
   1117c:	f8a2                	sd	s0,112(sp)
   1117e:	0100                	addi	s0,sp,128
   11180:	f8a43c23          	sd	a0,-104(s0)
   11184:	87ae                	mv	a5,a1
   11186:	8736                	mv	a4,a3
   11188:	f8f42a23          	sw	a5,-108(s0)
   1118c:	87b2                	mv	a5,a2
   1118e:	f8f42823          	sw	a5,-112(s0)
   11192:	87ba                	mv	a5,a4
   11194:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   11198:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   1119c:	f9442783          	lw	a5,-108(s0)
   111a0:	f9843703          	ld	a4,-104(s0)
   111a4:	02f776b3          	remu	a3,a4,a5
   111a8:	fec42783          	lw	a5,-20(s0)
   111ac:	0017871b          	addiw	a4,a5,1
   111b0:	fee42623          	sw	a4,-20(s0)
   111b4:	0ff6f713          	andi	a4,a3,255
   111b8:	ff040693          	addi	a3,s0,-16
   111bc:	97b6                	add	a5,a5,a3
   111be:	fae78c23          	sb	a4,-72(a5) # fffffb8 <_end+0xffed6d4>
        if (num < base) {
   111c2:	f9442783          	lw	a5,-108(s0)
   111c6:	f9843703          	ld	a4,-104(s0)
   111ca:	00f76b63          	bltu	a4,a5,111e0 <printnum+0x68>
            break;
        }
        num /= base;
   111ce:	f9442783          	lw	a5,-108(s0)
   111d2:	f9843703          	ld	a4,-104(s0)
   111d6:	02f757b3          	divu	a5,a4,a5
   111da:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   111de:	bf7d                	j	1119c <printnum+0x24>
            break;
   111e0:	0001                	nop
    }

    while (width-- > pos) {
   111e2:	a801                	j	111f2 <printnum+0x7a>
        print_char(padc);
   111e4:	f8c42783          	lw	a5,-116(s0)
   111e8:	853e                	mv	a0,a5
   111ea:	00000097          	auipc	ra,0x0
   111ee:	e2e080e7          	jalr	-466(ra) # 11018 <print_char>
    while (width-- > pos) {
   111f2:	f9042783          	lw	a5,-112(s0)
   111f6:	fff7871b          	addiw	a4,a5,-1
   111fa:	f8e42823          	sw	a4,-112(s0)
   111fe:	fec42703          	lw	a4,-20(s0)
   11202:	2701                	sext.w	a4,a4
   11204:	fef740e3          	blt	a4,a5,111e4 <printnum+0x6c>
    }


    while (pos-- > 0) {
   11208:	a089                	j	1124a <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   1120a:	fec42783          	lw	a5,-20(s0)
   1120e:	ff040713          	addi	a4,s0,-16
   11212:	97ba                	add	a5,a5,a4
   11214:	fb87c783          	lbu	a5,-72(a5)
   11218:	0007871b          	sext.w	a4,a5
   1121c:	fec42783          	lw	a5,-20(s0)
   11220:	ff040693          	addi	a3,s0,-16
   11224:	97b6                	add	a5,a5,a3
   11226:	fb87c783          	lbu	a5,-72(a5)
   1122a:	86be                	mv	a3,a5
   1122c:	47a5                	li	a5,9
   1122e:	00d7f563          	bleu	a3,a5,11238 <printnum+0xc0>
   11232:	05700793          	li	a5,87
   11236:	a019                	j	1123c <printnum+0xc4>
   11238:	03000793          	li	a5,48
   1123c:	9fb9                	addw	a5,a5,a4
   1123e:	2781                	sext.w	a5,a5
   11240:	853e                	mv	a0,a5
   11242:	00000097          	auipc	ra,0x0
   11246:	dd6080e7          	jalr	-554(ra) # 11018 <print_char>
    while (pos-- > 0) {
   1124a:	fec42783          	lw	a5,-20(s0)
   1124e:	fff7871b          	addiw	a4,a5,-1
   11252:	fee42623          	sw	a4,-20(s0)
   11256:	faf04ae3          	bgtz	a5,1120a <printnum+0x92>
    }
}
   1125a:	0001                	nop
   1125c:	70e6                	ld	ra,120(sp)
   1125e:	7446                	ld	s0,112(sp)
   11260:	6109                	addi	sp,sp,128
   11262:	8082                	ret

0000000000011264 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   11264:	1101                	addi	sp,sp,-32
   11266:	ec22                	sd	s0,24(sp)
   11268:	1000                	addi	s0,sp,32
   1126a:	fea43423          	sd	a0,-24(s0)
   1126e:	87ae                	mv	a5,a1
   11270:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   11274:	fe442783          	lw	a5,-28(s0)
   11278:	0007871b          	sext.w	a4,a5
   1127c:	4785                	li	a5,1
   1127e:	00e7dc63          	ble	a4,a5,11296 <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   11282:	fe843783          	ld	a5,-24(s0)
   11286:	639c                	ld	a5,0(a5)
   11288:	00878693          	addi	a3,a5,8
   1128c:	fe843703          	ld	a4,-24(s0)
   11290:	e314                	sd	a3,0(a4)
   11292:	639c                	ld	a5,0(a5)
   11294:	a815                	j	112c8 <getuint+0x64>
    } else if (lflag) {
   11296:	fe442783          	lw	a5,-28(s0)
   1129a:	2781                	sext.w	a5,a5
   1129c:	cb99                	beqz	a5,112b2 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   1129e:	fe843783          	ld	a5,-24(s0)
   112a2:	639c                	ld	a5,0(a5)
   112a4:	00878693          	addi	a3,a5,8
   112a8:	fe843703          	ld	a4,-24(s0)
   112ac:	e314                	sd	a3,0(a4)
   112ae:	639c                	ld	a5,0(a5)
   112b0:	a821                	j	112c8 <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   112b2:	fe843783          	ld	a5,-24(s0)
   112b6:	639c                	ld	a5,0(a5)
   112b8:	00878693          	addi	a3,a5,8
   112bc:	fe843703          	ld	a4,-24(s0)
   112c0:	e314                	sd	a3,0(a4)
   112c2:	439c                	lw	a5,0(a5)
   112c4:	1782                	slli	a5,a5,0x20
   112c6:	9381                	srli	a5,a5,0x20
}
   112c8:	853e                	mv	a0,a5
   112ca:	6462                	ld	s0,24(sp)
   112cc:	6105                	addi	sp,sp,32
   112ce:	8082                	ret

00000000000112d0 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   112d0:	1101                	addi	sp,sp,-32
   112d2:	ec22                	sd	s0,24(sp)
   112d4:	1000                	addi	s0,sp,32
   112d6:	fea43423          	sd	a0,-24(s0)
   112da:	87ae                	mv	a5,a1
   112dc:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   112e0:	fe442783          	lw	a5,-28(s0)
   112e4:	0007871b          	sext.w	a4,a5
   112e8:	4785                	li	a5,1
   112ea:	00e7dc63          	ble	a4,a5,11302 <getint+0x32>
        return va_arg(*ap, long long);
   112ee:	fe843783          	ld	a5,-24(s0)
   112f2:	639c                	ld	a5,0(a5)
   112f4:	00878693          	addi	a3,a5,8
   112f8:	fe843703          	ld	a4,-24(s0)
   112fc:	e314                	sd	a3,0(a4)
   112fe:	639c                	ld	a5,0(a5)
   11300:	a805                	j	11330 <getint+0x60>
    } else if (lflag) {
   11302:	fe442783          	lw	a5,-28(s0)
   11306:	2781                	sext.w	a5,a5
   11308:	cb99                	beqz	a5,1131e <getint+0x4e>
        return va_arg(*ap, long);
   1130a:	fe843783          	ld	a5,-24(s0)
   1130e:	639c                	ld	a5,0(a5)
   11310:	00878693          	addi	a3,a5,8
   11314:	fe843703          	ld	a4,-24(s0)
   11318:	e314                	sd	a3,0(a4)
   1131a:	639c                	ld	a5,0(a5)
   1131c:	a811                	j	11330 <getint+0x60>
    }
    return va_arg(*ap, int);
   1131e:	fe843783          	ld	a5,-24(s0)
   11322:	639c                	ld	a5,0(a5)
   11324:	00878693          	addi	a3,a5,8
   11328:	fe843703          	ld	a4,-24(s0)
   1132c:	e314                	sd	a3,0(a4)
   1132e:	439c                	lw	a5,0(a5)
}
   11330:	853e                	mv	a0,a5
   11332:	6462                	ld	s0,24(sp)
   11334:	6105                	addi	sp,sp,32
   11336:	8082                	ret

0000000000011338 <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   11338:	711d                	addi	sp,sp,-96
   1133a:	ec86                	sd	ra,88(sp)
   1133c:	e8a2                	sd	s0,80(sp)
   1133e:	e4a6                	sd	s1,72(sp)
   11340:	e0ca                	sd	s2,64(sp)
   11342:	1080                	addi	s0,sp,96
   11344:	faa43423          	sd	a0,-88(s0)
   11348:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   1134c:	a819                	j	11362 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   1134e:	2c048d63          	beqz	s1,11628 <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   11352:	fa843783          	ld	a5,-88(s0)
   11356:	0785                	addi	a5,a5,1
   11358:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   1135c:	8526                	mv	a0,s1
   1135e:	cbbff0ef          	jal	ra,11018 <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   11362:	fa843783          	ld	a5,-88(s0)
   11366:	0007c783          	lbu	a5,0(a5)
   1136a:	0007849b          	sext.w	s1,a5
   1136e:	8726                	mv	a4,s1
   11370:	02500793          	li	a5,37
   11374:	fcf71de3          	bne	a4,a5,1134e <vprintfmt_lib+0x16>
        }
        fmt++;
   11378:	fa843783          	ld	a5,-88(s0)
   1137c:	0785                	addi	a5,a5,1
   1137e:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   11382:	fa843783          	ld	a5,-88(s0)
   11386:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   1138a:	02000793          	li	a5,32
   1138e:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   11392:	57fd                	li	a5,-1
   11394:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   11398:	57fd                	li	a5,-1
   1139a:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   1139e:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   113a2:	fa843783          	ld	a5,-88(s0)
   113a6:	00178713          	addi	a4,a5,1
   113aa:	fae43423          	sd	a4,-88(s0)
   113ae:	0007c783          	lbu	a5,0(a5)
   113b2:	0007849b          	sext.w	s1,a5
   113b6:	fdd4869b          	addiw	a3,s1,-35
   113ba:	0006871b          	sext.w	a4,a3
   113be:	05500793          	li	a5,85
   113c2:	24e7e963          	bltu	a5,a4,11614 <vprintfmt_lib+0x2dc>
   113c6:	02069793          	slli	a5,a3,0x20
   113ca:	9381                	srli	a5,a5,0x20
   113cc:	00279713          	slli	a4,a5,0x2
   113d0:	67c9                	lui	a5,0x12
   113d2:	4b878793          	addi	a5,a5,1208 # 124b8 <strnlen+0x122>
   113d6:	97ba                	add	a5,a5,a4
   113d8:	439c                	lw	a5,0(a5)
   113da:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   113dc:	02d00793          	li	a5,45
   113e0:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   113e4:	bf7d                	j	113a2 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   113e6:	03000793          	li	a5,48
   113ea:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   113ee:	bf55                	j	113a2 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   113f0:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   113f4:	fc842703          	lw	a4,-56(s0)
   113f8:	87ba                	mv	a5,a4
   113fa:	0027979b          	slliw	a5,a5,0x2
   113fe:	9fb9                	addw	a5,a5,a4
   11400:	0017979b          	slliw	a5,a5,0x1
   11404:	2781                	sext.w	a5,a5
   11406:	9fa5                	addw	a5,a5,s1
   11408:	2781                	sext.w	a5,a5
   1140a:	fd07879b          	addiw	a5,a5,-48
   1140e:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   11412:	fa843783          	ld	a5,-88(s0)
   11416:	0007c783          	lbu	a5,0(a5)
   1141a:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   1141e:	8726                	mv	a4,s1
   11420:	02f00793          	li	a5,47
   11424:	02e7df63          	ble	a4,a5,11462 <vprintfmt_lib+0x12a>
   11428:	8726                	mv	a4,s1
   1142a:	03900793          	li	a5,57
   1142e:	02e7ca63          	blt	a5,a4,11462 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   11432:	fa843783          	ld	a5,-88(s0)
   11436:	0785                	addi	a5,a5,1
   11438:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   1143c:	bf65                	j	113f4 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   1143e:	fa043783          	ld	a5,-96(s0)
   11442:	00878713          	addi	a4,a5,8
   11446:	fae43023          	sd	a4,-96(s0)
   1144a:	439c                	lw	a5,0(a5)
   1144c:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   11450:	a811                	j	11464 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   11452:	fcc42783          	lw	a5,-52(s0)
   11456:	2781                	sext.w	a5,a5
   11458:	f407d5e3          	bgez	a5,113a2 <vprintfmt_lib+0x6a>
                width = 0;
   1145c:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   11460:	b789                	j	113a2 <vprintfmt_lib+0x6a>
            goto process_precision;
   11462:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   11464:	fcc42783          	lw	a5,-52(s0)
   11468:	2781                	sext.w	a5,a5
   1146a:	f207dce3          	bgez	a5,113a2 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   1146e:	fc842783          	lw	a5,-56(s0)
   11472:	fcf42623          	sw	a5,-52(s0)
   11476:	57fd                	li	a5,-1
   11478:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   1147c:	b71d                	j	113a2 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   1147e:	fd042783          	lw	a5,-48(s0)
   11482:	2785                	addiw	a5,a5,1
   11484:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   11488:	bf29                	j	113a2 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   1148a:	fa043783          	ld	a5,-96(s0)
   1148e:	00878713          	addi	a4,a5,8
   11492:	fae43023          	sd	a4,-96(s0)
   11496:	439c                	lw	a5,0(a5)
   11498:	853e                	mv	a0,a5
   1149a:	b7fff0ef          	jal	ra,11018 <print_char>
            break;
   1149e:	a261                	j	11626 <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   114a0:	fa043783          	ld	a5,-96(s0)
   114a4:	00878713          	addi	a4,a5,8
   114a8:	fae43023          	sd	a4,-96(s0)
   114ac:	0007b903          	ld	s2,0(a5)
   114b0:	00091563          	bnez	s2,114ba <vprintfmt_lib+0x182>
                p = "(null)";
   114b4:	67c9                	lui	a5,0x12
   114b6:	4b078913          	addi	s2,a5,1200 # 124b0 <strnlen+0x11a>
            }
            if (width > 0 && padc != '-') {
   114ba:	fcc42783          	lw	a5,-52(s0)
   114be:	2781                	sext.w	a5,a5
   114c0:	06f05263          	blez	a5,11524 <vprintfmt_lib+0x1ec>
   114c4:	fc744783          	lbu	a5,-57(s0)
   114c8:	0ff7f713          	andi	a4,a5,255
   114cc:	02d00793          	li	a5,45
   114d0:	04f70a63          	beq	a4,a5,11524 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   114d4:	fc842783          	lw	a5,-56(s0)
   114d8:	85be                	mv	a1,a5
   114da:	854a                	mv	a0,s2
   114dc:	6bb000ef          	jal	ra,12396 <strnlen>
   114e0:	87aa                	mv	a5,a0
   114e2:	873e                	mv	a4,a5
   114e4:	fcc42783          	lw	a5,-52(s0)
   114e8:	9f99                	subw	a5,a5,a4
   114ea:	fcf42623          	sw	a5,-52(s0)
   114ee:	a821                	j	11506 <vprintfmt_lib+0x1ce>
                    print_char(padc);
   114f0:	fc744783          	lbu	a5,-57(s0)
   114f4:	2781                	sext.w	a5,a5
   114f6:	853e                	mv	a0,a5
   114f8:	b21ff0ef          	jal	ra,11018 <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   114fc:	fcc42783          	lw	a5,-52(s0)
   11500:	37fd                	addiw	a5,a5,-1
   11502:	fcf42623          	sw	a5,-52(s0)
   11506:	fcc42783          	lw	a5,-52(s0)
   1150a:	2781                	sext.w	a5,a5
   1150c:	fef042e3          	bgtz	a5,114f0 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   11510:	a811                	j	11524 <vprintfmt_lib+0x1ec>
                print_char(ch);
   11512:	8526                	mv	a0,s1
   11514:	b05ff0ef          	jal	ra,11018 <print_char>
                p++;
   11518:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   1151a:	fcc42783          	lw	a5,-52(s0)
   1151e:	37fd                	addiw	a5,a5,-1
   11520:	fcf42623          	sw	a5,-52(s0)
   11524:	00094783          	lbu	a5,0(s2)
   11528:	0007849b          	sext.w	s1,a5
   1152c:	c895                	beqz	s1,11560 <vprintfmt_lib+0x228>
   1152e:	fc842783          	lw	a5,-56(s0)
   11532:	2781                	sext.w	a5,a5
   11534:	fc07cfe3          	bltz	a5,11512 <vprintfmt_lib+0x1da>
   11538:	fc842783          	lw	a5,-56(s0)
   1153c:	37fd                	addiw	a5,a5,-1
   1153e:	fcf42423          	sw	a5,-56(s0)
   11542:	fc842783          	lw	a5,-56(s0)
   11546:	2781                	sext.w	a5,a5
   11548:	fc07d5e3          	bgez	a5,11512 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   1154c:	a811                	j	11560 <vprintfmt_lib+0x228>
                print_char(' ');
   1154e:	02000513          	li	a0,32
   11552:	ac7ff0ef          	jal	ra,11018 <print_char>
            for (; width > 0; width--) {
   11556:	fcc42783          	lw	a5,-52(s0)
   1155a:	37fd                	addiw	a5,a5,-1
   1155c:	fcf42623          	sw	a5,-52(s0)
   11560:	fcc42783          	lw	a5,-52(s0)
   11564:	2781                	sext.w	a5,a5
   11566:	fef044e3          	bgtz	a5,1154e <vprintfmt_lib+0x216>
            }
            break;
   1156a:	a875                	j	11626 <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   1156c:	fd042703          	lw	a4,-48(s0)
   11570:	fa040793          	addi	a5,s0,-96
   11574:	85ba                	mv	a1,a4
   11576:	853e                	mv	a0,a5
   11578:	00000097          	auipc	ra,0x0
   1157c:	d58080e7          	jalr	-680(ra) # 112d0 <getint>
   11580:	87aa                	mv	a5,a0
   11582:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   11586:	fd843783          	ld	a5,-40(s0)
   1158a:	0007dc63          	bgez	a5,115a2 <vprintfmt_lib+0x26a>
                print_char('-');
   1158e:	02d00513          	li	a0,45
   11592:	a87ff0ef          	jal	ra,11018 <print_char>
                num = -(long long) num;
   11596:	fd843783          	ld	a5,-40(s0)
   1159a:	40f007b3          	neg	a5,a5
   1159e:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   115a2:	47a9                	li	a5,10
   115a4:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   115a8:	a089                	j	115ea <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   115aa:	47a9                	li	a5,10
   115ac:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   115b0:	a01d                	j	115d6 <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   115b2:	47a1                	li	a5,8
   115b4:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   115b8:	a839                	j	115d6 <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   115ba:	4785                	li	a5,1
   115bc:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   115c0:	03000513          	li	a0,48
   115c4:	a55ff0ef          	jal	ra,11018 <print_char>
            print_char('x');
   115c8:	07800513          	li	a0,120
   115cc:	a4dff0ef          	jal	ra,11018 <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   115d0:	47c1                	li	a5,16
   115d2:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   115d6:	fd042703          	lw	a4,-48(s0)
   115da:	fa040793          	addi	a5,s0,-96
   115de:	85ba                	mv	a1,a4
   115e0:	853e                	mv	a0,a5
   115e2:	c83ff0ef          	jal	ra,11264 <getuint>
   115e6:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   115ea:	fc744783          	lbu	a5,-57(s0)
   115ee:	0007869b          	sext.w	a3,a5
   115f2:	fcc42703          	lw	a4,-52(s0)
   115f6:	fd442783          	lw	a5,-44(s0)
   115fa:	863a                	mv	a2,a4
   115fc:	85be                	mv	a1,a5
   115fe:	fd843503          	ld	a0,-40(s0)
   11602:	00000097          	auipc	ra,0x0
   11606:	b76080e7          	jalr	-1162(ra) # 11178 <printnum>
            break;
   1160a:	a831                	j	11626 <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   1160c:	8526                	mv	a0,s1
   1160e:	a0bff0ef          	jal	ra,11018 <print_char>
            break;
   11612:	a811                	j	11626 <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   11614:	02500513          	li	a0,37
   11618:	a01ff0ef          	jal	ra,11018 <print_char>
            fmt = last_fmt;
   1161c:	fb843783          	ld	a5,-72(s0)
   11620:	faf43423          	sd	a5,-88(s0)
            break;
   11624:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   11626:	bb35                	j	11362 <vprintfmt_lib+0x2a>
                return;
   11628:	0001                	nop
        }
    }
}
   1162a:	60e6                	ld	ra,88(sp)
   1162c:	6446                	ld	s0,80(sp)
   1162e:	64a6                	ld	s1,72(sp)
   11630:	6906                	ld	s2,64(sp)
   11632:	6125                	addi	sp,sp,96
   11634:	8082                	ret

0000000000011636 <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   11636:	7159                	addi	sp,sp,-112
   11638:	f406                	sd	ra,40(sp)
   1163a:	f022                	sd	s0,32(sp)
   1163c:	1800                	addi	s0,sp,48
   1163e:	fca43c23          	sd	a0,-40(s0)
   11642:	e40c                	sd	a1,8(s0)
   11644:	e810                	sd	a2,16(s0)
   11646:	ec14                	sd	a3,24(s0)
   11648:	f018                	sd	a4,32(s0)
   1164a:	f41c                	sd	a5,40(s0)
   1164c:	03043823          	sd	a6,48(s0)
   11650:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   11654:	04040793          	addi	a5,s0,64
   11658:	fc878793          	addi	a5,a5,-56
   1165c:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   11660:	fe843783          	ld	a5,-24(s0)
   11664:	85be                	mv	a1,a5
   11666:	fd843503          	ld	a0,-40(s0)
   1166a:	00000097          	auipc	ra,0x0
   1166e:	cce080e7          	jalr	-818(ra) # 11338 <vprintfmt_lib>

    va_end(arg);
}
   11672:	0001                	nop
   11674:	70a2                	ld	ra,40(sp)
   11676:	7402                	ld	s0,32(sp)
   11678:	6165                	addi	sp,sp,112
   1167a:	8082                	ret

000000000001167c <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   1167c:	715d                	addi	sp,sp,-80
   1167e:	e4a2                	sd	s0,72(sp)
   11680:	0880                	addi	s0,sp,80
   11682:	faa43c23          	sd	a0,-72(s0)
   11686:	87ae                	mv	a5,a1
   11688:	8732                	mv	a4,a2
   1168a:	faf41b23          	sh	a5,-74(s0)
   1168e:	87ba                	mv	a5,a4
   11690:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11694:	fb843783          	ld	a5,-72(s0)
   11698:	479c                	lw	a5,8(a5)
   1169a:	0087d79b          	srliw	a5,a5,0x8
   1169e:	2781                	sext.w	a5,a5
   116a0:	2781                	sext.w	a5,a5
   116a2:	0ff7f793          	andi	a5,a5,255
   116a6:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   116aa:	fb843783          	ld	a5,-72(s0)
   116ae:	479c                	lw	a5,8(a5)
   116b0:	0107d79b          	srliw	a5,a5,0x10
   116b4:	2781                	sext.w	a5,a5
   116b6:	2781                	sext.w	a5,a5
   116b8:	0ff7f793          	andi	a5,a5,255
   116bc:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   116c0:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   116c4:	fe042423          	sw	zero,-24(s0)
   116c8:	a82d                	j	11702 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   116ca:	fec42783          	lw	a5,-20(s0)
   116ce:	04078793          	addi	a5,a5,64
   116d2:	fb843703          	ld	a4,-72(s0)
   116d6:	97ba                	add	a5,a5,a4
   116d8:	639c                	ld	a5,0(a5)
   116da:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   116de:	fb843703          	ld	a4,-72(s0)
   116e2:	fec42783          	lw	a5,-20(s0)
   116e6:	97ba                	add	a5,a5,a4
   116e8:	0407c783          	lbu	a5,64(a5)
   116ec:	2781                	sext.w	a5,a5
   116ee:	fec42703          	lw	a4,-20(s0)
   116f2:	9fb9                	addw	a5,a5,a4
   116f4:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   116f8:	fe842783          	lw	a5,-24(s0)
   116fc:	2785                	addiw	a5,a5,1
   116fe:	fef42423          	sw	a5,-24(s0)
   11702:	fe842703          	lw	a4,-24(s0)
   11706:	fdc42783          	lw	a5,-36(s0)
   1170a:	2701                	sext.w	a4,a4
   1170c:	2781                	sext.w	a5,a5
   1170e:	faf74ee3          	blt	a4,a5,116ca <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11712:	fe042223          	sw	zero,-28(s0)
   11716:	a8b5                	j	11792 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11718:	fec42783          	lw	a5,-20(s0)
   1171c:	04078793          	addi	a5,a5,64
   11720:	fb843703          	ld	a4,-72(s0)
   11724:	97ba                	add	a5,a5,a4
   11726:	639c                	ld	a5,0(a5)
   11728:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   1172c:	fec42783          	lw	a5,-20(s0)
   11730:	27a1                	addiw	a5,a5,8
   11732:	2781                	sext.w	a5,a5
   11734:	04078793          	addi	a5,a5,64
   11738:	fb843703          	ld	a4,-72(s0)
   1173c:	97ba                	add	a5,a5,a4
   1173e:	639c                	ld	a5,0(a5)
   11740:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11744:	fc645783          	lhu	a5,-58(s0)
   11748:	fb645703          	lhu	a4,-74(s0)
   1174c:	2701                	sext.w	a4,a4
   1174e:	2781                	sext.w	a5,a5
   11750:	00f71f63          	bne	a4,a5,1176e <get_dev_bar+0xf2>
   11754:	fc445783          	lhu	a5,-60(s0)
   11758:	fb445703          	lhu	a4,-76(s0)
   1175c:	2701                	sext.w	a4,a4
   1175e:	2781                	sext.w	a5,a5
   11760:	00f71763          	bne	a4,a5,1176e <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11764:	fcc42783          	lw	a5,-52(s0)
   11768:	1782                	slli	a5,a5,0x20
   1176a:	9381                	srli	a5,a5,0x20
   1176c:	a825                	j	117a4 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   1176e:	fb843703          	ld	a4,-72(s0)
   11772:	fec42783          	lw	a5,-20(s0)
   11776:	97ba                	add	a5,a5,a4
   11778:	0407c783          	lbu	a5,64(a5)
   1177c:	2781                	sext.w	a5,a5
   1177e:	fec42703          	lw	a4,-20(s0)
   11782:	9fb9                	addw	a5,a5,a4
   11784:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   11788:	fe442783          	lw	a5,-28(s0)
   1178c:	2785                	addiw	a5,a5,1
   1178e:	fef42223          	sw	a5,-28(s0)
   11792:	fe442703          	lw	a4,-28(s0)
   11796:	fe042783          	lw	a5,-32(s0)
   1179a:	2701                	sext.w	a4,a4
   1179c:	2781                	sext.w	a5,a5
   1179e:	f6f74de3          	blt	a4,a5,11718 <get_dev_bar+0x9c>
    return DEV_NONE;
   117a2:	57fd                	li	a5,-1
}
   117a4:	853e                	mv	a0,a5
   117a6:	6426                	ld	s0,72(sp)
   117a8:	6161                	addi	sp,sp,80
   117aa:	8082                	ret

00000000000117ac <mpu_region_total>:
static int mpu_region_total() {
   117ac:	1101                	addi	sp,sp,-32
   117ae:	ec22                	sd	s0,24(sp)
   117b0:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   117b2:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   117b6:	bc4027f3          	csrr	a5,0xbc4
   117ba:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   117be:	fe843783          	ld	a5,-24(s0)
   117c2:	83a1                	srli	a5,a5,0x8
   117c4:	2781                	sext.w	a5,a5
}
   117c6:	853e                	mv	a0,a5
   117c8:	6462                	ld	s0,24(sp)
   117ca:	6105                	addi	sp,sp,32
   117cc:	8082                	ret

00000000000117ce <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   117ce:	7179                	addi	sp,sp,-48
   117d0:	f422                	sd	s0,40(sp)
   117d2:	1800                	addi	s0,sp,48
   117d4:	87aa                	mv	a5,a0
   117d6:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   117da:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   117de:	fdc42783          	lw	a5,-36(s0)
   117e2:	0ff7f793          	andi	a5,a5,255
   117e6:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   117ea:	fe844783          	lbu	a5,-24(s0)
   117ee:	f807e793          	ori	a5,a5,-128
   117f2:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   117f6:	fe843783          	ld	a5,-24(s0)
   117fa:	bc479073          	csrw	0xbc4,a5
}
   117fe:	0001                	nop
   11800:	7422                	ld	s0,40(sp)
   11802:	6145                	addi	sp,sp,48
   11804:	8082                	ret

0000000000011806 <mpu_enable_region>:
                       const char *rwx) {
   11806:	715d                	addi	sp,sp,-80
   11808:	e4a2                	sd	s0,72(sp)
   1180a:	0880                	addi	s0,sp,80
   1180c:	87aa                	mv	a5,a0
   1180e:	fcb43023          	sd	a1,-64(s0)
   11812:	fac43c23          	sd	a2,-72(s0)
   11816:	fae43823          	sd	a4,-80(s0)
   1181a:	fcf42623          	sw	a5,-52(s0)
   1181e:	87b6                	mv	a5,a3
   11820:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11824:	c0000793          	li	a5,-1024
   11828:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   1182c:	fb043783          	ld	a5,-80(s0)
   11830:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11834:	fc043783          	ld	a5,-64(s0)
   11838:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   1183c:	fb843783          	ld	a5,-72(s0)
   11840:	8385                	srli	a5,a5,0x1
   11842:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11846:	a819                	j	1185c <mpu_enable_region+0x56>
        mask <<= 1;
   11848:	fe843783          	ld	a5,-24(s0)
   1184c:	0786                	slli	a5,a5,0x1
   1184e:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11852:	fb843783          	ld	a5,-72(s0)
   11856:	8385                	srli	a5,a5,0x1
   11858:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1185c:	fb843783          	ld	a5,-72(s0)
   11860:	f7e5                	bnez	a5,11848 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11862:	fe843783          	ld	a5,-24(s0)
   11866:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   1186a:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   1186e:	fcc42783          	lw	a5,-52(s0)
   11872:	0ff7f793          	andi	a5,a5,255
   11876:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   1187a:	fd844783          	lbu	a5,-40(s0)
   1187e:	0107e793          	ori	a5,a5,16
   11882:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   11886:	fc842783          	lw	a5,-56(s0)
   1188a:	8b85                	andi	a5,a5,1
   1188c:	0ff7f793          	andi	a5,a5,255
   11890:	8b85                	andi	a5,a5,1
   11892:	0037969b          	slliw	a3,a5,0x3
   11896:	fd844783          	lbu	a5,-40(s0)
   1189a:	9bdd                	andi	a5,a5,-9
   1189c:	873e                	mv	a4,a5
   1189e:	87b6                	mv	a5,a3
   118a0:	8fd9                	or	a5,a5,a4
   118a2:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   118a6:	fd844783          	lbu	a5,-40(s0)
   118aa:	f807e793          	ori	a5,a5,-128
   118ae:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   118b2:	a09d                	j	11918 <mpu_enable_region+0x112>
        if (*p == 'r') {
   118b4:	fe043783          	ld	a5,-32(s0)
   118b8:	0007c783          	lbu	a5,0(a5)
   118bc:	873e                	mv	a4,a5
   118be:	07200793          	li	a5,114
   118c2:	00f71863          	bne	a4,a5,118d2 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   118c6:	fd844783          	lbu	a5,-40(s0)
   118ca:	0027e793          	ori	a5,a5,2
   118ce:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   118d2:	fe043783          	ld	a5,-32(s0)
   118d6:	0007c783          	lbu	a5,0(a5)
   118da:	873e                	mv	a4,a5
   118dc:	07700793          	li	a5,119
   118e0:	00f71863          	bne	a4,a5,118f0 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   118e4:	fd844783          	lbu	a5,-40(s0)
   118e8:	0017e793          	ori	a5,a5,1
   118ec:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   118f0:	fe043783          	ld	a5,-32(s0)
   118f4:	0007c783          	lbu	a5,0(a5)
   118f8:	873e                	mv	a4,a5
   118fa:	07800793          	li	a5,120
   118fe:	00f71863          	bne	a4,a5,1190e <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11902:	fd844783          	lbu	a5,-40(s0)
   11906:	0047e793          	ori	a5,a5,4
   1190a:	fcf40c23          	sb	a5,-40(s0)
        p++;
   1190e:	fe043783          	ld	a5,-32(s0)
   11912:	0785                	addi	a5,a5,1
   11914:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11918:	fe043783          	ld	a5,-32(s0)
   1191c:	0007c783          	lbu	a5,0(a5)
   11920:	fbd1                	bnez	a5,118b4 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11922:	fd843783          	ld	a5,-40(s0)
   11926:	bc479073          	csrw	0xbc4,a5
}
   1192a:	0001                	nop
   1192c:	6426                	ld	s0,72(sp)
   1192e:	6161                	addi	sp,sp,80
   11930:	8082                	ret

0000000000011932 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   11932:	1141                	addi	sp,sp,-16
   11934:	e422                	sd	s0,8(sp)
   11936:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   11938:	0001                	nop
   1193a:	6422                	ld	s0,8(sp)
   1193c:	0141                	addi	sp,sp,16
   1193e:	8082                	ret

0000000000011940 <sd_get_byte>:

uint8_t sd_get_byte() {
   11940:	1101                	addi	sp,sp,-32
   11942:	ec22                	sd	s0,24(sp)
   11944:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11946:	100507b7          	lui	a5,0x10050
   1194a:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   1194e:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   11952:	fe843783          	ld	a5,-24(s0)
   11956:	47fc                	lw	a5,76(a5)
   11958:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   1195c:	fe442783          	lw	a5,-28(s0)
   11960:	fe07c9e3          	bltz	a5,11952 <sd_get_byte+0x12>
    return (uint8_t)rx;
   11964:	fe442783          	lw	a5,-28(s0)
   11968:	0ff7f793          	andi	a5,a5,255
}
   1196c:	853e                	mv	a0,a5
   1196e:	6462                	ld	s0,24(sp)
   11970:	6105                	addi	sp,sp,32
   11972:	8082                	ret

0000000000011974 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   11974:	7179                	addi	sp,sp,-48
   11976:	f422                	sd	s0,40(sp)
   11978:	1800                	addi	s0,sp,48
   1197a:	87aa                	mv	a5,a0
   1197c:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11980:	100507b7          	lui	a5,0x10050
   11984:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   11988:	0001                	nop
   1198a:	fe843783          	ld	a5,-24(s0)
   1198e:	47bc                	lw	a5,72(a5)
   11990:	2781                	sext.w	a5,a5
   11992:	2781                	sext.w	a5,a5
   11994:	fe07cbe3          	bltz	a5,1198a <sd_set_byte+0x16>
    p->txdata = v;
   11998:	fdf44783          	lbu	a5,-33(s0)
   1199c:	0007871b          	sext.w	a4,a5
   119a0:	fe843783          	ld	a5,-24(s0)
   119a4:	c7b8                	sw	a4,72(a5)
}
   119a6:	0001                	nop
   119a8:	7422                	ld	s0,40(sp)
   119aa:	6145                	addi	sp,sp,48
   119ac:	8082                	ret

00000000000119ae <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   119ae:	7179                	addi	sp,sp,-48
   119b0:	f406                	sd	ra,40(sp)
   119b2:	f022                	sd	s0,32(sp)
   119b4:	1800                	addi	s0,sp,48
   119b6:	fca43c23          	sd	a0,-40(s0)
   119ba:	87ae                	mv	a5,a1
   119bc:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   119c0:	100507b7          	lui	a5,0x10050
   119c4:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   119c8:	f79ff0ef          	jal	ra,11940 <sd_get_byte>
   119cc:	87aa                	mv	a5,a0
   119ce:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   119d2:	a831                	j	119ee <sd_read_block+0x40>
       *buf = sd_get_byte();
   119d4:	f6dff0ef          	jal	ra,11940 <sd_get_byte>
   119d8:	87aa                	mv	a5,a0
   119da:	873e                	mv	a4,a5
   119dc:	fd843783          	ld	a5,-40(s0)
   119e0:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003d71c>
       buf++;
   119e4:	fd843783          	ld	a5,-40(s0)
   119e8:	0785                	addi	a5,a5,1
   119ea:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   119ee:	fd442783          	lw	a5,-44(s0)
   119f2:	fff7871b          	addiw	a4,a5,-1
   119f6:	fce42a23          	sw	a4,-44(s0)
   119fa:	ffe9                	bnez	a5,119d4 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   119fc:	f45ff0ef          	jal	ra,11940 <sd_get_byte>
   11a00:	87aa                	mv	a5,a0
   11a02:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   11a06:	f3bff0ef          	jal	ra,11940 <sd_get_byte>
   11a0a:	87aa                	mv	a5,a0
   11a0c:	fef40323          	sb	a5,-26(s0)
}
   11a10:	0001                	nop
   11a12:	70a2                	ld	ra,40(sp)
   11a14:	7402                	ld	s0,32(sp)
   11a16:	6145                	addi	sp,sp,48
   11a18:	8082                	ret

0000000000011a1a <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   11a1a:	7179                	addi	sp,sp,-48
   11a1c:	f406                	sd	ra,40(sp)
   11a1e:	f022                	sd	s0,32(sp)
   11a20:	1800                	addi	s0,sp,48
   11a22:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a26:	100507b7          	lui	a5,0x10050
   11a2a:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   11a2e:	05200513          	li	a0,82
   11a32:	f43ff0ef          	jal	ra,11974 <sd_set_byte>
    sd_set_byte(0x00);
   11a36:	4501                	li	a0,0
   11a38:	f3dff0ef          	jal	ra,11974 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11a3c:	fd843783          	ld	a5,-40(s0)
   11a40:	83c1                	srli	a5,a5,0x10
   11a42:	0ff7f793          	andi	a5,a5,255
   11a46:	853e                	mv	a0,a5
   11a48:	f2dff0ef          	jal	ra,11974 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11a4c:	fd843783          	ld	a5,-40(s0)
   11a50:	83a1                	srli	a5,a5,0x8
   11a52:	0ff7f793          	andi	a5,a5,255
   11a56:	853e                	mv	a0,a5
   11a58:	f1dff0ef          	jal	ra,11974 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11a5c:	fd843783          	ld	a5,-40(s0)
   11a60:	0ff7f793          	andi	a5,a5,255
   11a64:	853e                	mv	a0,a5
   11a66:	f0fff0ef          	jal	ra,11974 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11a6a:	0ff00513          	li	a0,255
   11a6e:	f07ff0ef          	jal	ra,11974 <sd_set_byte>

    cmdresp = sd_get_byte();
   11a72:	00000097          	auipc	ra,0x0
   11a76:	ece080e7          	jalr	-306(ra) # 11940 <sd_get_byte>
   11a7a:	87aa                	mv	a5,a0
   11a7c:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11a80:	fe744783          	lbu	a5,-25(s0)
   11a84:	2781                	sext.w	a5,a5
}
   11a86:	853e                	mv	a0,a5
   11a88:	70a2                	ld	ra,40(sp)
   11a8a:	7402                	ld	s0,32(sp)
   11a8c:	6145                	addi	sp,sp,48
   11a8e:	8082                	ret

0000000000011a90 <sd_stop_reading>:

int sd_stop_reading() {
   11a90:	1101                	addi	sp,sp,-32
   11a92:	ec06                	sd	ra,24(sp)
   11a94:	e822                	sd	s0,16(sp)
   11a96:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a98:	100507b7          	lui	a5,0x10050
   11a9c:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   11aa0:	04c00513          	li	a0,76
   11aa4:	00000097          	auipc	ra,0x0
   11aa8:	ed0080e7          	jalr	-304(ra) # 11974 <sd_set_byte>
    sd_set_byte(0);
   11aac:	4501                	li	a0,0
   11aae:	00000097          	auipc	ra,0x0
   11ab2:	ec6080e7          	jalr	-314(ra) # 11974 <sd_set_byte>
    sd_set_byte(0);
   11ab6:	4501                	li	a0,0
   11ab8:	00000097          	auipc	ra,0x0
   11abc:	ebc080e7          	jalr	-324(ra) # 11974 <sd_set_byte>
    sd_set_byte(0);
   11ac0:	4501                	li	a0,0
   11ac2:	00000097          	auipc	ra,0x0
   11ac6:	eb2080e7          	jalr	-334(ra) # 11974 <sd_set_byte>
    sd_set_byte(0);
   11aca:	4501                	li	a0,0
   11acc:	00000097          	auipc	ra,0x0
   11ad0:	ea8080e7          	jalr	-344(ra) # 11974 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11ad4:	0ff00513          	li	a0,255
   11ad8:	00000097          	auipc	ra,0x0
   11adc:	e9c080e7          	jalr	-356(ra) # 11974 <sd_set_byte>
    cmdresp = sd_get_byte();
   11ae0:	e61ff0ef          	jal	ra,11940 <sd_get_byte>
   11ae4:	87aa                	mv	a5,a0
   11ae6:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   11aea:	fe744783          	lbu	a5,-25(s0)
   11aee:	2781                	sext.w	a5,a5
}
   11af0:	853e                	mv	a0,a5
   11af2:	60e2                	ld	ra,24(sp)
   11af4:	6442                	ld	s0,16(sp)
   11af6:	6105                	addi	sp,sp,32
   11af8:	8082                	ret

0000000000011afa <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11afa:	715d                	addi	sp,sp,-80
   11afc:	e4a2                	sd	s0,72(sp)
   11afe:	0880                	addi	s0,sp,80
   11b00:	faa43c23          	sd	a0,-72(s0)
   11b04:	87ae                	mv	a5,a1
   11b06:	8732                	mv	a4,a2
   11b08:	faf41b23          	sh	a5,-74(s0)
   11b0c:	87ba                	mv	a5,a4
   11b0e:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11b12:	fb843783          	ld	a5,-72(s0)
   11b16:	479c                	lw	a5,8(a5)
   11b18:	0087d79b          	srliw	a5,a5,0x8
   11b1c:	2781                	sext.w	a5,a5
   11b1e:	2781                	sext.w	a5,a5
   11b20:	0ff7f793          	andi	a5,a5,255
   11b24:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   11b28:	fb843783          	ld	a5,-72(s0)
   11b2c:	479c                	lw	a5,8(a5)
   11b2e:	0107d79b          	srliw	a5,a5,0x10
   11b32:	2781                	sext.w	a5,a5
   11b34:	2781                	sext.w	a5,a5
   11b36:	0ff7f793          	andi	a5,a5,255
   11b3a:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   11b3e:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b42:	fe042423          	sw	zero,-24(s0)
   11b46:	a82d                	j	11b80 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b48:	fec42783          	lw	a5,-20(s0)
   11b4c:	04078793          	addi	a5,a5,64 # 10050040 <_end+0x1003d75c>
   11b50:	fb843703          	ld	a4,-72(s0)
   11b54:	97ba                	add	a5,a5,a4
   11b56:	639c                	ld	a5,0(a5)
   11b58:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   11b5c:	fb843703          	ld	a4,-72(s0)
   11b60:	fec42783          	lw	a5,-20(s0)
   11b64:	97ba                	add	a5,a5,a4
   11b66:	0407c783          	lbu	a5,64(a5)
   11b6a:	2781                	sext.w	a5,a5
   11b6c:	fec42703          	lw	a4,-20(s0)
   11b70:	9fb9                	addw	a5,a5,a4
   11b72:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b76:	fe842783          	lw	a5,-24(s0)
   11b7a:	2785                	addiw	a5,a5,1
   11b7c:	fef42423          	sw	a5,-24(s0)
   11b80:	fe842703          	lw	a4,-24(s0)
   11b84:	fdc42783          	lw	a5,-36(s0)
   11b88:	2701                	sext.w	a4,a4
   11b8a:	2781                	sext.w	a5,a5
   11b8c:	faf74ee3          	blt	a4,a5,11b48 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11b90:	fe042223          	sw	zero,-28(s0)
   11b94:	a8b5                	j	11c10 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b96:	fec42783          	lw	a5,-20(s0)
   11b9a:	04078793          	addi	a5,a5,64
   11b9e:	fb843703          	ld	a4,-72(s0)
   11ba2:	97ba                	add	a5,a5,a4
   11ba4:	639c                	ld	a5,0(a5)
   11ba6:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11baa:	fec42783          	lw	a5,-20(s0)
   11bae:	27a1                	addiw	a5,a5,8
   11bb0:	2781                	sext.w	a5,a5
   11bb2:	04078793          	addi	a5,a5,64
   11bb6:	fb843703          	ld	a4,-72(s0)
   11bba:	97ba                	add	a5,a5,a4
   11bbc:	639c                	ld	a5,0(a5)
   11bbe:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11bc2:	fc645783          	lhu	a5,-58(s0)
   11bc6:	fb645703          	lhu	a4,-74(s0)
   11bca:	2701                	sext.w	a4,a4
   11bcc:	2781                	sext.w	a5,a5
   11bce:	00f71f63          	bne	a4,a5,11bec <get_dev_bar+0xf2>
   11bd2:	fc445783          	lhu	a5,-60(s0)
   11bd6:	fb445703          	lhu	a4,-76(s0)
   11bda:	2701                	sext.w	a4,a4
   11bdc:	2781                	sext.w	a5,a5
   11bde:	00f71763          	bne	a4,a5,11bec <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11be2:	fcc42783          	lw	a5,-52(s0)
   11be6:	1782                	slli	a5,a5,0x20
   11be8:	9381                	srli	a5,a5,0x20
   11bea:	a825                	j	11c22 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11bec:	fb843703          	ld	a4,-72(s0)
   11bf0:	fec42783          	lw	a5,-20(s0)
   11bf4:	97ba                	add	a5,a5,a4
   11bf6:	0407c783          	lbu	a5,64(a5)
   11bfa:	2781                	sext.w	a5,a5
   11bfc:	fec42703          	lw	a4,-20(s0)
   11c00:	9fb9                	addw	a5,a5,a4
   11c02:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   11c06:	fe442783          	lw	a5,-28(s0)
   11c0a:	2785                	addiw	a5,a5,1
   11c0c:	fef42223          	sw	a5,-28(s0)
   11c10:	fe442703          	lw	a4,-28(s0)
   11c14:	fe042783          	lw	a5,-32(s0)
   11c18:	2701                	sext.w	a4,a4
   11c1a:	2781                	sext.w	a5,a5
   11c1c:	f6f74de3          	blt	a4,a5,11b96 <get_dev_bar+0x9c>
    return DEV_NONE;
   11c20:	57fd                	li	a5,-1
}
   11c22:	853e                	mv	a0,a5
   11c24:	6426                	ld	s0,72(sp)
   11c26:	6161                	addi	sp,sp,80
   11c28:	8082                	ret

0000000000011c2a <mpu_region_total>:
static int mpu_region_total() {
   11c2a:	1101                	addi	sp,sp,-32
   11c2c:	ec22                	sd	s0,24(sp)
   11c2e:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11c30:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   11c34:	bc4027f3          	csrr	a5,0xbc4
   11c38:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   11c3c:	fe843783          	ld	a5,-24(s0)
   11c40:	83a1                	srli	a5,a5,0x8
   11c42:	2781                	sext.w	a5,a5
}
   11c44:	853e                	mv	a0,a5
   11c46:	6462                	ld	s0,24(sp)
   11c48:	6105                	addi	sp,sp,32
   11c4a:	8082                	ret

0000000000011c4c <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   11c4c:	7179                	addi	sp,sp,-48
   11c4e:	f422                	sd	s0,40(sp)
   11c50:	1800                	addi	s0,sp,48
   11c52:	87aa                	mv	a5,a0
   11c54:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   11c58:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   11c5c:	fdc42783          	lw	a5,-36(s0)
   11c60:	0ff7f793          	andi	a5,a5,255
   11c64:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   11c68:	fe844783          	lbu	a5,-24(s0)
   11c6c:	f807e793          	ori	a5,a5,-128
   11c70:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11c74:	fe843783          	ld	a5,-24(s0)
   11c78:	bc479073          	csrw	0xbc4,a5
}
   11c7c:	0001                	nop
   11c7e:	7422                	ld	s0,40(sp)
   11c80:	6145                	addi	sp,sp,48
   11c82:	8082                	ret

0000000000011c84 <mpu_enable_region>:
                       const char *rwx) {
   11c84:	715d                	addi	sp,sp,-80
   11c86:	e4a2                	sd	s0,72(sp)
   11c88:	0880                	addi	s0,sp,80
   11c8a:	87aa                	mv	a5,a0
   11c8c:	fcb43023          	sd	a1,-64(s0)
   11c90:	fac43c23          	sd	a2,-72(s0)
   11c94:	fae43823          	sd	a4,-80(s0)
   11c98:	fcf42623          	sw	a5,-52(s0)
   11c9c:	87b6                	mv	a5,a3
   11c9e:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11ca2:	c0000793          	li	a5,-1024
   11ca6:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11caa:	fb043783          	ld	a5,-80(s0)
   11cae:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11cb2:	fc043783          	ld	a5,-64(s0)
   11cb6:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11cba:	fb843783          	ld	a5,-72(s0)
   11cbe:	8385                	srli	a5,a5,0x1
   11cc0:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11cc4:	a819                	j	11cda <mpu_enable_region+0x56>
        mask <<= 1;
   11cc6:	fe843783          	ld	a5,-24(s0)
   11cca:	0786                	slli	a5,a5,0x1
   11ccc:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11cd0:	fb843783          	ld	a5,-72(s0)
   11cd4:	8385                	srli	a5,a5,0x1
   11cd6:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11cda:	fb843783          	ld	a5,-72(s0)
   11cde:	f7e5                	bnez	a5,11cc6 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11ce0:	fe843783          	ld	a5,-24(s0)
   11ce4:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   11ce8:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11cec:	fcc42783          	lw	a5,-52(s0)
   11cf0:	0ff7f793          	andi	a5,a5,255
   11cf4:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   11cf8:	fd844783          	lbu	a5,-40(s0)
   11cfc:	0107e793          	ori	a5,a5,16
   11d00:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   11d04:	fc842783          	lw	a5,-56(s0)
   11d08:	8b85                	andi	a5,a5,1
   11d0a:	0ff7f793          	andi	a5,a5,255
   11d0e:	8b85                	andi	a5,a5,1
   11d10:	0037969b          	slliw	a3,a5,0x3
   11d14:	fd844783          	lbu	a5,-40(s0)
   11d18:	9bdd                	andi	a5,a5,-9
   11d1a:	873e                	mv	a4,a5
   11d1c:	87b6                	mv	a5,a3
   11d1e:	8fd9                	or	a5,a5,a4
   11d20:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   11d24:	fd844783          	lbu	a5,-40(s0)
   11d28:	f807e793          	ori	a5,a5,-128
   11d2c:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11d30:	a09d                	j	11d96 <mpu_enable_region+0x112>
        if (*p == 'r') {
   11d32:	fe043783          	ld	a5,-32(s0)
   11d36:	0007c783          	lbu	a5,0(a5)
   11d3a:	873e                	mv	a4,a5
   11d3c:	07200793          	li	a5,114
   11d40:	00f71863          	bne	a4,a5,11d50 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11d44:	fd844783          	lbu	a5,-40(s0)
   11d48:	0027e793          	ori	a5,a5,2
   11d4c:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11d50:	fe043783          	ld	a5,-32(s0)
   11d54:	0007c783          	lbu	a5,0(a5)
   11d58:	873e                	mv	a4,a5
   11d5a:	07700793          	li	a5,119
   11d5e:	00f71863          	bne	a4,a5,11d6e <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11d62:	fd844783          	lbu	a5,-40(s0)
   11d66:	0017e793          	ori	a5,a5,1
   11d6a:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11d6e:	fe043783          	ld	a5,-32(s0)
   11d72:	0007c783          	lbu	a5,0(a5)
   11d76:	873e                	mv	a4,a5
   11d78:	07800793          	li	a5,120
   11d7c:	00f71863          	bne	a4,a5,11d8c <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11d80:	fd844783          	lbu	a5,-40(s0)
   11d84:	0047e793          	ori	a5,a5,4
   11d88:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11d8c:	fe043783          	ld	a5,-32(s0)
   11d90:	0785                	addi	a5,a5,1
   11d92:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11d96:	fe043783          	ld	a5,-32(s0)
   11d9a:	0007c783          	lbu	a5,0(a5)
   11d9e:	fbd1                	bnez	a5,11d32 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11da0:	fd843783          	ld	a5,-40(s0)
   11da4:	bc479073          	csrw	0xbc4,a5
}
   11da8:	0001                	nop
   11daa:	6426                	ld	s0,72(sp)
   11dac:	6161                	addi	sp,sp,80
   11dae:	8082                	ret

0000000000011db0 <is_empty_gui>:
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"
#include <string.h>

int is_empty_gui(const struct gpt_guid *guid) {
   11db0:	1101                	addi	sp,sp,-32
   11db2:	ec22                	sd	s0,24(sp)
   11db4:	1000                	addi	s0,sp,32
   11db6:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11dba:	fe843783          	ld	a5,-24(s0)
   11dbe:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11dc0:	e7ad                	bnez	a5,11e2a <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11dc2:	fe843783          	ld	a5,-24(s0)
   11dc6:	0047d783          	lhu	a5,4(a5)
   11dca:	e3a5                	bnez	a5,11e2a <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11dcc:	fe843783          	ld	a5,-24(s0)
   11dd0:	0067d783          	lhu	a5,6(a5)
   11dd4:	ebb9                	bnez	a5,11e2a <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11dd6:	fe843783          	ld	a5,-24(s0)
   11dda:	0087c783          	lbu	a5,8(a5)
   11dde:	e7b1                	bnez	a5,11e2a <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11de0:	fe843783          	ld	a5,-24(s0)
   11de4:	0097c783          	lbu	a5,9(a5)
   11de8:	e3a9                	bnez	a5,11e2a <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11dea:	fe843783          	ld	a5,-24(s0)
   11dee:	00a7c783          	lbu	a5,10(a5)
   11df2:	ef85                	bnez	a5,11e2a <is_empty_gui+0x7a>
   11df4:	fe843783          	ld	a5,-24(s0)
   11df8:	00b7c783          	lbu	a5,11(a5)
   11dfc:	e79d                	bnez	a5,11e2a <is_empty_gui+0x7a>
   11dfe:	fe843783          	ld	a5,-24(s0)
   11e02:	00c7c783          	lbu	a5,12(a5)
   11e06:	e395                	bnez	a5,11e2a <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11e08:	fe843783          	ld	a5,-24(s0)
   11e0c:	00d7c783          	lbu	a5,13(a5)
   11e10:	ef89                	bnez	a5,11e2a <is_empty_gui+0x7a>
   11e12:	fe843783          	ld	a5,-24(s0)
   11e16:	00e7c783          	lbu	a5,14(a5)
   11e1a:	eb81                	bnez	a5,11e2a <is_empty_gui+0x7a>
   11e1c:	fe843783          	ld	a5,-24(s0)
   11e20:	00f7c783          	lbu	a5,15(a5)
   11e24:	e399                	bnez	a5,11e2a <is_empty_gui+0x7a>
   11e26:	4785                	li	a5,1
   11e28:	a011                	j	11e2c <is_empty_gui+0x7c>
   11e2a:	4781                	li	a5,0
}
   11e2c:	853e                	mv	a0,a5
   11e2e:	6462                	ld	s0,24(sp)
   11e30:	6105                	addi	sp,sp,32
   11e32:	8082                	ret

0000000000011e34 <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11e34:	7159                	addi	sp,sp,-112
   11e36:	f486                	sd	ra,104(sp)
   11e38:	f0a2                	sd	s0,96(sp)
   11e3a:	1880                	addi	s0,sp,112
   11e3c:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e40:	fe843783          	ld	a5,-24(s0)
   11e44:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e46:	0187d79b          	srliw	a5,a5,0x18
   11e4a:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e4e:	fe843783          	ld	a5,-24(s0)
   11e52:	439c                	lw	a5,0(a5)
   11e54:	0107d79b          	srliw	a5,a5,0x10
   11e58:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e5a:	0ff7f793          	andi	a5,a5,255
   11e5e:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11e62:	fe843783          	ld	a5,-24(s0)
   11e66:	439c                	lw	a5,0(a5)
   11e68:	0087d79b          	srliw	a5,a5,0x8
   11e6c:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e6e:	0ff7f793          	andi	a5,a5,255
   11e72:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11e76:	fe843783          	ld	a5,-24(s0)
   11e7a:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e7c:	0ff7f793          	andi	a5,a5,255
   11e80:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11e84:	fe843783          	ld	a5,-24(s0)
   11e88:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e8c:	0087d79b          	srliw	a5,a5,0x8
   11e90:	17c2                	slli	a5,a5,0x30
   11e92:	93c1                	srli	a5,a5,0x30
   11e94:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11e98:	fe843783          	ld	a5,-24(s0)
   11e9c:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ea0:	2781                	sext.w	a5,a5
   11ea2:	0ff7f793          	andi	a5,a5,255
   11ea6:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11eaa:	fe843783          	ld	a5,-24(s0)
   11eae:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eb2:	0087d79b          	srliw	a5,a5,0x8
   11eb6:	17c2                	slli	a5,a5,0x30
   11eb8:	93c1                	srli	a5,a5,0x30
   11eba:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11ebe:	fe843783          	ld	a5,-24(s0)
   11ec2:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ec6:	2781                	sext.w	a5,a5
   11ec8:	0ff7f793          	andi	a5,a5,255
   11ecc:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11ece:	fe843703          	ld	a4,-24(s0)
   11ed2:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ed6:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11ed8:	fe843683          	ld	a3,-24(s0)
   11edc:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ee0:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ee2:	fe843603          	ld	a2,-24(s0)
   11ee6:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eea:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11eec:	fe843583          	ld	a1,-24(s0)
   11ef0:	00b5c583          	lbu	a1,11(a1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ef4:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ef6:	fe843503          	ld	a0,-24(s0)
   11efa:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11efe:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f00:	fe843803          	ld	a6,-24(s0)
   11f04:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f08:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f0a:	fe843883          	ld	a7,-24(s0)
   11f0e:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f12:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f14:	fe843303          	ld	t1,-24(s0)
   11f18:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f1c:	2301                	sext.w	t1,t1
   11f1e:	e09a                	sd	t1,64(sp)
   11f20:	fc46                	sd	a7,56(sp)
   11f22:	f842                	sd	a6,48(sp)
   11f24:	f42a                	sd	a0,40(sp)
   11f26:	f02e                	sd	a1,32(sp)
   11f28:	ec32                	sd	a2,24(sp)
   11f2a:	e836                	sd	a3,16(sp)
   11f2c:	e43a                	sd	a4,8(sp)
   11f2e:	e03e                	sd	a5,0(sp)
   11f30:	8886                	mv	a7,ra
   11f32:	881e                	mv	a6,t2
   11f34:	8796                	mv	a5,t0
   11f36:	877e                	mv	a4,t6
   11f38:	86fa                	mv	a3,t5
   11f3a:	8676                	mv	a2,t4
   11f3c:	85f2                	mv	a1,t3
   11f3e:	6549                	lui	a0,0x12
   11f40:	61050513          	addi	a0,a0,1552 # 12610 <strnlen+0x27a>
   11f44:	ef2ff0ef          	jal	ra,11636 <printf_uart>
        );
}
   11f48:	0001                	nop
   11f4a:	70a6                	ld	ra,104(sp)
   11f4c:	7406                	ld	s0,96(sp)
   11f4e:	6165                	addi	sp,sp,112
   11f50:	8082                	ret

0000000000011f52 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   11f52:	7179                	addi	sp,sp,-48
   11f54:	f422                	sd	s0,40(sp)
   11f56:	1800                	addi	s0,sp,48
   11f58:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   11f5c:	5b1937b7          	lui	a5,0x5b193
   11f60:	3007879b          	addiw	a5,a5,768
   11f64:	fef42023          	sw	a5,-32(s0)
   11f68:	c7800793          	li	a5,-904
   11f6c:	fef41223          	sh	a5,-28(s0)
   11f70:	6791                	lui	a5,0x4
   11f72:	0cd7879b          	addiw	a5,a5,205
   11f76:	fef41323          	sh	a5,-26(s0)
   11f7a:	f8000793          	li	a5,-128
   11f7e:	fef40423          	sb	a5,-24(s0)
   11f82:	4789                	li	a5,2
   11f84:	fef404a3          	sb	a5,-23(s0)
   11f88:	57a1                	li	a5,-24
   11f8a:	fef40523          	sb	a5,-22(s0)
   11f8e:	06c00793          	li	a5,108
   11f92:	fef405a3          	sb	a5,-21(s0)
   11f96:	04500793          	li	a5,69
   11f9a:	fef40623          	sb	a5,-20(s0)
   11f9e:	05800793          	li	a5,88
   11fa2:	fef406a3          	sb	a5,-19(s0)
   11fa6:	47ad                	li	a5,11
   11fa8:	fef40723          	sb	a5,-18(s0)
   11fac:	04700793          	li	a5,71
   11fb0:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   11fb4:	fe042703          	lw	a4,-32(s0)
   11fb8:	fd843783          	ld	a5,-40(s0)
   11fbc:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   11fbe:	0af71863          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   11fc2:	fe445703          	lhu	a4,-28(s0)
   11fc6:	fd843783          	ld	a5,-40(s0)
   11fca:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   11fce:	2701                	sext.w	a4,a4
   11fd0:	2781                	sext.w	a5,a5
   11fd2:	08f71e63          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   11fd6:	fe645703          	lhu	a4,-26(s0)
   11fda:	fd843783          	ld	a5,-40(s0)
   11fde:	0067d783          	lhu	a5,6(a5)
   11fe2:	2701                	sext.w	a4,a4
   11fe4:	2781                	sext.w	a5,a5
   11fe6:	08f71463          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   11fea:	fe844703          	lbu	a4,-24(s0)
   11fee:	fd843783          	ld	a5,-40(s0)
   11ff2:	0087c783          	lbu	a5,8(a5)
   11ff6:	06f71c63          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   11ffa:	fe944703          	lbu	a4,-23(s0)
   11ffe:	fd843783          	ld	a5,-40(s0)
   12002:	0097c783          	lbu	a5,9(a5)
   12006:	06f71463          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   1200a:	fea44703          	lbu	a4,-22(s0)
   1200e:	fd843783          	ld	a5,-40(s0)
   12012:	00a7c783          	lbu	a5,10(a5)
   12016:	04f71c63          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   1201a:	feb44703          	lbu	a4,-21(s0)
   1201e:	fd843783          	ld	a5,-40(s0)
   12022:	00b7c783          	lbu	a5,11(a5)
   12026:	04f71463          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   1202a:	fec44703          	lbu	a4,-20(s0)
   1202e:	fd843783          	ld	a5,-40(s0)
   12032:	00c7c783          	lbu	a5,12(a5)
   12036:	02f71c63          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   1203a:	fed44703          	lbu	a4,-19(s0)
   1203e:	fd843783          	ld	a5,-40(s0)
   12042:	00d7c783          	lbu	a5,13(a5)
   12046:	02f71463          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   1204a:	fee44703          	lbu	a4,-18(s0)
   1204e:	fd843783          	ld	a5,-40(s0)
   12052:	00e7c783          	lbu	a5,14(a5)
   12056:	00f71c63          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   1205a:	fef44703          	lbu	a4,-17(s0)
   1205e:	fd843783          	ld	a5,-40(s0)
   12062:	00f7c783          	lbu	a5,15(a5)
   12066:	00f71463          	bne	a4,a5,1206e <is_uboot_guid+0x11c>
   1206a:	4785                	li	a5,1
   1206c:	a011                	j	12070 <is_uboot_guid+0x11e>
   1206e:	4781                	li	a5,0
}
   12070:	853e                	mv	a0,a5
   12072:	7422                	ld	s0,40(sp)
   12074:	6145                	addi	sp,sp,48
   12076:	8082                	ret

0000000000012078 <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   12078:	9c010113          	addi	sp,sp,-1600
   1207c:	62113c23          	sd	ra,1592(sp)
   12080:	62813823          	sd	s0,1584(sp)
   12084:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   12088:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   1208c:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   12090:	080007b7          	lui	a5,0x8000
   12094:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   12098:	00000097          	auipc	ra,0x0
   1209c:	89a080e7          	jalr	-1894(ra) # 11932 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   120a0:	45b5                	li	a1,13
   120a2:	67c9                	lui	a5,0x12
   120a4:	65878513          	addi	a0,a5,1624 # 12658 <strnlen+0x2c2>
   120a8:	fb3fe0ef          	jal	ra,1105a <print_uart>

    sd_start_reading(0);
   120ac:	4501                	li	a0,0
   120ae:	00000097          	auipc	ra,0x0
   120b2:	96c080e7          	jalr	-1684(ra) # 11a1a <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   120b6:	dc040793          	addi	a5,s0,-576
   120ba:	20000593          	li	a1,512
   120be:	853e                	mv	a0,a5
   120c0:	8efff0ef          	jal	ra,119ae <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   120c4:	bc040793          	addi	a5,s0,-1088
   120c8:	20000593          	li	a1,512
   120cc:	853e                	mv	a0,a5
   120ce:	8e1ff0ef          	jal	ra,119ae <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   120d2:	bc043703          	ld	a4,-1088(s0)
   120d6:	67c9                	lui	a5,0x12
   120d8:	6b87b783          	ld	a5,1720(a5) # 126b8 <strnlen+0x322>
   120dc:	00f70663          	beq	a4,a5,120e8 <run_from_sdcard+0x70>
        sd_stop_reading();
   120e0:	9b1ff0ef          	jal	ra,11a90 <sd_stop_reading>
        return -1;
   120e4:	57fd                	li	a5,-1
   120e6:	a2c5                	j	122c6 <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   120e8:	fc042a23          	sw	zero,-44(s0)
   120ec:	a8c5                	j	121dc <run_from_sdcard+0x164>
        i4 = i % 4;
   120ee:	fd442703          	lw	a4,-44(s0)
   120f2:	41f7579b          	sraiw	a5,a4,0x1f
   120f6:	01e7d79b          	srliw	a5,a5,0x1e
   120fa:	9f3d                	addw	a4,a4,a5
   120fc:	8b0d                	andi	a4,a4,3
   120fe:	40f707bb          	subw	a5,a4,a5
   12102:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   12106:	fc442783          	lw	a5,-60(s0)
   1210a:	2781                	sext.w	a5,a5
   1210c:	eb81                	bnez	a5,1211c <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   1210e:	9c040793          	addi	a5,s0,-1600
   12112:	20000593          	li	a1,512
   12116:	853e                	mv	a0,a5
   12118:	897ff0ef          	jal	ra,119ae <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   1211c:	9c040713          	addi	a4,s0,-1600
   12120:	fc442783          	lw	a5,-60(s0)
   12124:	079e                	slli	a5,a5,0x7
   12126:	97ba                	add	a5,a5,a4
   12128:	853e                	mv	a0,a5
   1212a:	00000097          	auipc	ra,0x0
   1212e:	c86080e7          	jalr	-890(ra) # 11db0 <is_empty_gui>
   12132:	87aa                	mv	a5,a0
   12134:	efd1                	bnez	a5,121d0 <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   12136:	fd442783          	lw	a5,-44(s0)
   1213a:	85be                	mv	a1,a5
   1213c:	67c9                	lui	a5,0x12
   1213e:	66878513          	addi	a0,a5,1640 # 12668 <strnlen+0x2d2>
   12142:	cf4ff0ef          	jal	ra,11636 <printf_uart>
        print_guid(&entry[i4].type);
   12146:	9c040713          	addi	a4,s0,-1600
   1214a:	fc442783          	lw	a5,-60(s0)
   1214e:	079e                	slli	a5,a5,0x7
   12150:	97ba                	add	a5,a5,a4
   12152:	853e                	mv	a0,a5
   12154:	ce1ff0ef          	jal	ra,11e34 <print_guid>
        print_uart(" : ", 3);
   12158:	458d                	li	a1,3
   1215a:	67c9                	lui	a5,0x12
   1215c:	67078513          	addi	a0,a5,1648 # 12670 <strnlen+0x2da>
   12160:	efbfe0ef          	jal	ra,1105a <print_uart>
        print_uart((const char *)entry[i4].name, sizeof(entry[i4].name));
   12164:	9c040713          	addi	a4,s0,-1600
   12168:	fc442783          	lw	a5,-60(s0)
   1216c:	079e                	slli	a5,a5,0x7
   1216e:	03078793          	addi	a5,a5,48
   12172:	97ba                	add	a5,a5,a4
   12174:	07a1                	addi	a5,a5,8
   12176:	04800593          	li	a1,72
   1217a:	853e                	mv	a0,a5
   1217c:	edffe0ef          	jal	ra,1105a <print_uart>
        print_uart("\r\n", 2);
   12180:	4589                	li	a1,2
   12182:	67c9                	lui	a5,0x12
   12184:	67878513          	addi	a0,a5,1656 # 12678 <strnlen+0x2e2>
   12188:	ed3fe0ef          	jal	ra,1105a <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   1218c:	9c040713          	addi	a4,s0,-1600
   12190:	fc442783          	lw	a5,-60(s0)
   12194:	079e                	slli	a5,a5,0x7
   12196:	97ba                	add	a5,a5,a4
   12198:	853e                	mv	a0,a5
   1219a:	00000097          	auipc	ra,0x0
   1219e:	db8080e7          	jalr	-584(ra) # 11f52 <is_uboot_guid>
   121a2:	87aa                	mv	a5,a0
   121a4:	c79d                	beqz	a5,121d2 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   121a6:	fc442783          	lw	a5,-60(s0)
   121aa:	079e                	slli	a5,a5,0x7
   121ac:	ff040713          	addi	a4,s0,-16
   121b0:	97ba                	add	a5,a5,a4
   121b2:	9f07b783          	ld	a5,-1552(a5)
   121b6:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   121ba:	fc442783          	lw	a5,-60(s0)
   121be:	079e                	slli	a5,a5,0x7
   121c0:	ff040713          	addi	a4,s0,-16
   121c4:	97ba                	add	a5,a5,a4
   121c6:	9f87b783          	ld	a5,-1544(a5)
   121ca:	fef43023          	sd	a5,-32(s0)
   121ce:	a011                	j	121d2 <run_from_sdcard+0x15a>
            continue;
   121d0:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   121d2:	fd442783          	lw	a5,-44(s0)
   121d6:	2785                	addiw	a5,a5,1
   121d8:	fcf42a23          	sw	a5,-44(s0)
   121dc:	c1042703          	lw	a4,-1008(s0)
   121e0:	fd442783          	lw	a5,-44(s0)
   121e4:	f0e7e5e3          	bltu	a5,a4,120ee <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   121e8:	8a9ff0ef          	jal	ra,11a90 <sd_stop_reading>

    if (lba_start == 0) {
   121ec:	fe843783          	ld	a5,-24(s0)
   121f0:	e399                	bnez	a5,121f6 <run_from_sdcard+0x17e>
        return -1;
   121f2:	57fd                	li	a5,-1
   121f4:	a8c9                	j	122c6 <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   121f6:	fe843783          	ld	a5,-24(s0)
   121fa:	07a6                	slli	a5,a5,0x9
   121fc:	853e                	mv	a0,a5
   121fe:	00000097          	auipc	ra,0x0
   12202:	81c080e7          	jalr	-2020(ra) # 11a1a <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   12206:	fe043703          	ld	a4,-32(s0)
   1220a:	fe843783          	ld	a5,-24(s0)
   1220e:	40f707b3          	sub	a5,a4,a5
   12212:	0785                	addi	a5,a5,1
   12214:	8385                	srli	a5,a5,0x1
   12216:	85be                	mv	a1,a5
   12218:	67c9                	lui	a5,0x12
   1221a:	68078513          	addi	a0,a5,1664 # 12680 <strnlen+0x2ea>
   1221e:	c18ff0ef          	jal	ra,11636 <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12222:	fe843783          	ld	a5,-24(s0)
   12226:	fcf43423          	sd	a5,-56(s0)
   1222a:	a8bd                	j	122a8 <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   1222c:	9c040793          	addi	a5,s0,-1600
   12230:	20000593          	li	a1,512
   12234:	853e                	mv	a0,a5
   12236:	f78ff0ef          	jal	ra,119ae <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   1223a:	9c040793          	addi	a5,s0,-1600
   1223e:	6398                	ld	a4,0(a5)
   12240:	fd843783          	ld	a5,-40(s0)
   12244:	639c                	ld	a5,0(a5)
   12246:	00f71b63          	bne	a4,a5,1225c <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   1224a:	67c9                	lui	a5,0x12
   1224c:	69078593          	addi	a1,a5,1680 # 12690 <strnlen+0x2fa>
   12250:	67c9                	lui	a5,0x12
   12252:	6a078513          	addi	a0,a5,1696 # 126a0 <strnlen+0x30a>
   12256:	be0ff0ef          	jal	ra,11636 <printf_uart>
            break;
   1225a:	a8a9                	j	122b4 <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   1225c:	fd843783          	ld	a5,-40(s0)
   12260:	86be                	mv	a3,a5
   12262:	9c040793          	addi	a5,s0,-1600
   12266:	20000713          	li	a4,512
   1226a:	863a                	mv	a2,a4
   1226c:	85be                	mv	a1,a5
   1226e:	8536                	mv	a0,a3
   12270:	00000097          	auipc	ra,0x0
   12274:	066080e7          	jalr	102(ra) # 122d6 <memcpy>
        sram += sizeof(entry);
   12278:	fd843783          	ld	a5,-40(s0)
   1227c:	20078793          	addi	a5,a5,512
   12280:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   12284:	fc843703          	ld	a4,-56(s0)
   12288:	06400793          	li	a5,100
   1228c:	02f777b3          	remu	a5,a4,a5
   12290:	e799                	bnez	a5,1229e <run_from_sdcard+0x226>
            print_uart(". ", 2);
   12292:	4589                	li	a1,2
   12294:	67c9                	lui	a5,0x12
   12296:	6b078513          	addi	a0,a5,1712 # 126b0 <strnlen+0x31a>
   1229a:	dc1fe0ef          	jal	ra,1105a <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   1229e:	fc843783          	ld	a5,-56(s0)
   122a2:	0785                	addi	a5,a5,1
   122a4:	fcf43423          	sd	a5,-56(s0)
   122a8:	fc843703          	ld	a4,-56(s0)
   122ac:	fe043783          	ld	a5,-32(s0)
   122b0:	f6e7fee3          	bleu	a4,a5,1222c <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   122b4:	4589                	li	a1,2
   122b6:	67c9                	lui	a5,0x12
   122b8:	67878513          	addi	a0,a5,1656 # 12678 <strnlen+0x2e2>
   122bc:	d9ffe0ef          	jal	ra,1105a <print_uart>

    sd_stop_reading();
   122c0:	fd0ff0ef          	jal	ra,11a90 <sd_stop_reading>
    return 0;
   122c4:	4781                	li	a5,0
}
   122c6:	853e                	mv	a0,a5
   122c8:	63813083          	ld	ra,1592(sp)
   122cc:	63013403          	ld	s0,1584(sp)
   122d0:	64010113          	addi	sp,sp,1600
   122d4:	8082                	ret

00000000000122d6 <memcpy>:
   122d6:	00a5c7b3          	xor	a5,a1,a0
   122da:	8b9d                	andi	a5,a5,7
   122dc:	00c50733          	add	a4,a0,a2
   122e0:	e781                	bnez	a5,122e8 <memcpy+0x12>
   122e2:	479d                	li	a5,7
   122e4:	00c7ef63          	bltu	a5,a2,12302 <memcpy+0x2c>
   122e8:	87aa                	mv	a5,a0
   122ea:	00e56963          	bltu	a0,a4,122fc <memcpy+0x26>
   122ee:	8082                	ret
   122f0:	0005c683          	lbu	a3,0(a1)
   122f4:	0785                	addi	a5,a5,1
   122f6:	0585                	addi	a1,a1,1
   122f8:	fed78fa3          	sb	a3,-1(a5)
   122fc:	fee7eae3          	bltu	a5,a4,122f0 <memcpy+0x1a>
   12300:	8082                	ret
   12302:	00757793          	andi	a5,a0,7
   12306:	ebbd                	bnez	a5,1237c <memcpy+0xa6>
   12308:	87aa                	mv	a5,a0
   1230a:	ff877693          	andi	a3,a4,-8
   1230e:	fc068613          	addi	a2,a3,-64
   12312:	06c7fc63          	bleu	a2,a5,1238a <memcpy+0xb4>
   12316:	0005b383          	ld	t2,0(a1)
   1231a:	0085b283          	ld	t0,8(a1)
   1231e:	0105bf83          	ld	t6,16(a1)
   12322:	0185bf03          	ld	t5,24(a1)
   12326:	0205be83          	ld	t4,32(a1)
   1232a:	0285be03          	ld	t3,40(a1)
   1232e:	0305b303          	ld	t1,48(a1)
   12332:	0385b883          	ld	a7,56(a1)
   12336:	04858593          	addi	a1,a1,72
   1233a:	04878793          	addi	a5,a5,72
   1233e:	ff85b803          	ld	a6,-8(a1)
   12342:	fa77bc23          	sd	t2,-72(a5)
   12346:	fc57b023          	sd	t0,-64(a5)
   1234a:	fdf7b423          	sd	t6,-56(a5)
   1234e:	fde7b823          	sd	t5,-48(a5)
   12352:	fdd7bc23          	sd	t4,-40(a5)
   12356:	ffc7b023          	sd	t3,-32(a5)
   1235a:	fe67b423          	sd	t1,-24(a5)
   1235e:	ff17b823          	sd	a7,-16(a5)
   12362:	ff07bc23          	sd	a6,-8(a5)
   12366:	b775                	j	12312 <memcpy+0x3c>
   12368:	0005c683          	lbu	a3,0(a1)
   1236c:	0785                	addi	a5,a5,1
   1236e:	0585                	addi	a1,a1,1
   12370:	fed78fa3          	sb	a3,-1(a5)
   12374:	0077f693          	andi	a3,a5,7
   12378:	fae5                	bnez	a3,12368 <memcpy+0x92>
   1237a:	bf41                	j	1230a <memcpy+0x34>
   1237c:	87aa                	mv	a5,a0
   1237e:	bfdd                	j	12374 <memcpy+0x9e>
   12380:	6190                	ld	a2,0(a1)
   12382:	07a1                	addi	a5,a5,8
   12384:	05a1                	addi	a1,a1,8
   12386:	fec7bc23          	sd	a2,-8(a5)
   1238a:	fed7ebe3          	bltu	a5,a3,12380 <memcpy+0xaa>
   1238e:	f6e7e7e3          	bltu	a5,a4,122fc <memcpy+0x26>
   12392:	8082                	ret
	...

0000000000012396 <strnlen>:
   12396:	95aa                	add	a1,a1,a0
   12398:	87aa                	mv	a5,a0
   1239a:	00b78563          	beq	a5,a1,123a4 <strnlen+0xe>
   1239e:	0007c703          	lbu	a4,0(a5)
   123a2:	e701                	bnez	a4,123aa <strnlen+0x14>
   123a4:	40a78533          	sub	a0,a5,a0
   123a8:	8082                	ret
   123aa:	0785                	addi	a5,a5,1
   123ac:	b7fd                	j	1239a <strnlen+0x4>
	...
