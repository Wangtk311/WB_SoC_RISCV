
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1180006f          	j	1011c <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0
  li t0, 0x00001800
   100c0:	000022b7          	lui	t0,0x2
   100c4:	8002829b          	addiw	t0,t0,-2048
  csrs mstatus, t0
   100c8:	3002a073          	csrs	mstatus,t0

  la t0, trap_table
   100cc:	00000297          	auipc	t0,0x0
   100d0:	f3828293          	addi	t0,t0,-200 # 10004 <trap_table>
  csrw mtvec, t0
   100d4:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100d8:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100dc:	08200137          	lui	sp,0x8200

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100e0:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100e4:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100e8:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100ec:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100f0:	40a10133          	sub	sp,sp,a0
  addi sp,sp,-256
   100f4:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ed638>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100f8:	7b311073          	csrw	0x7b3,sp

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100fc:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   10100:	00050663          	beqz	a0,1010c <init0>
  wfi
   10104:	10500073          	wfi
  j end_init0
   10108:	0080006f          	j	10110 <end_init0>

000000000001010c <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   1010c:	634000ef          	jal	ra,10740 <_init>

0000000000010110 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10110:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10114:	34129073          	csrw	mepc,t0
  mret
   10118:	30200073          	mret

000000000001011c <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   1011c:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10120:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10124:	100f5e63          	bgez	t5,10240 <handle_exception>

0000000000010128 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10128:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1012c:	00113023          	sd	ra,0(sp)
   10130:	00813423          	sd	s0,8(sp)
   10134:	00913823          	sd	s1,16(sp)
   10138:	01213c23          	sd	s2,24(sp)
   1013c:	03313023          	sd	s3,32(sp)
   10140:	03413423          	sd	s4,40(sp)
   10144:	03513823          	sd	s5,48(sp)
   10148:	03613c23          	sd	s6,56(sp)
   1014c:	05713023          	sd	s7,64(sp)
   10150:	05813423          	sd	s8,72(sp)
   10154:	05913823          	sd	s9,80(sp)
   10158:	05a13c23          	sd	s10,88(sp)
   1015c:	07b13023          	sd	s11,96(sp)
   10160:	06213423          	sd	sp,104(sp)
   10164:	07013c23          	sd	a6,120(sp)
   10168:	09113023          	sd	a7,128(sp)
   1016c:	08a13423          	sd	a0,136(sp)
   10170:	08b13823          	sd	a1,144(sp)
   10174:	08c13c23          	sd	a2,152(sp)
   10178:	0ad13023          	sd	a3,160(sp)
   1017c:	0ae13423          	sd	a4,168(sp)
   10180:	0af13823          	sd	a5,176(sp)
   10184:	0b013c23          	sd	a6,184(sp)
   10188:	0d113023          	sd	a7,192(sp)
   1018c:	0c513423          	sd	t0,200(sp)
   10190:	0c613823          	sd	t1,208(sp)
   10194:	0c713c23          	sd	t2,216(sp)
   10198:	0fc13023          	sd	t3,224(sp)
   1019c:	0fd13423          	sd	t4,232(sp)
   101a0:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   101a4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   101a8:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101ac:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   101b0:	32b000ef          	jal	ra,10cda <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   101b4:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   101b8:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   101bc:	00013083          	ld	ra,0(sp)
   101c0:	00813403          	ld	s0,8(sp)
   101c4:	01013483          	ld	s1,16(sp)
   101c8:	01813903          	ld	s2,24(sp)
   101cc:	02013983          	ld	s3,32(sp)
   101d0:	02813a03          	ld	s4,40(sp)
   101d4:	03013a83          	ld	s5,48(sp)
   101d8:	03813b03          	ld	s6,56(sp)
   101dc:	04013b83          	ld	s7,64(sp)
   101e0:	04813c03          	ld	s8,72(sp)
   101e4:	05013c83          	ld	s9,80(sp)
   101e8:	05813d03          	ld	s10,88(sp)
   101ec:	06013d83          	ld	s11,96(sp)
   101f0:	06813103          	ld	sp,104(sp)
   101f4:	07813803          	ld	a6,120(sp)
   101f8:	08013883          	ld	a7,128(sp)
   101fc:	08813503          	ld	a0,136(sp)
   10200:	09013583          	ld	a1,144(sp)
   10204:	09813603          	ld	a2,152(sp)
   10208:	0a013683          	ld	a3,160(sp)
   1020c:	0a813703          	ld	a4,168(sp)
   10210:	0b013783          	ld	a5,176(sp)
   10214:	0b813803          	ld	a6,184(sp)
   10218:	0c013883          	ld	a7,192(sp)
   1021c:	0c813283          	ld	t0,200(sp)
   10220:	0d013303          	ld	t1,208(sp)
   10224:	0d813383          	ld	t2,216(sp)
   10228:	0e013e03          	ld	t3,224(sp)
   1022c:	0e813e83          	ld	t4,232(sp)
   10230:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10234:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10238:	34002f73          	csrr	t5,mscratch
  mret
   1023c:	30200073          	mret

0000000000010240 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10240:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10244:	17b000ef          	jal	ra,10bbe <exception_handler_c>
  mret
   10248:	30200073          	mret
   1024c:	0000                	unimp
   1024e:	0000                	unimp
	...

0000000000010252 <get_dev_bar>:
    uint64_t fwdbg3;            /// 0xfffff038: RW: FW debug register 3
    uint8_t cfg_table[(1 << 12) - 0x40];/// 0xfffff040: RO: PNP configuration
} pnp_map;


static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10252:	715d                	addi	sp,sp,-80
   10254:	e4a2                	sd	s0,72(sp)
   10256:	0880                	addi	s0,sp,80
   10258:	faa43c23          	sd	a0,-72(s0)
   1025c:	87ae                	mv	a5,a1
   1025e:	8732                	mv	a4,a2
   10260:	faf41b23          	sh	a5,-74(s0)
   10264:	87ba                	mv	a5,a4
   10266:	faf41a23          	sh	a5,-76(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1026a:	fb843783          	ld	a5,-72(s0)
   1026e:	479c                	lw	a5,8(a5)
   10270:	0087d79b          	srliw	a5,a5,0x8
   10274:	2781                	sext.w	a5,a5
   10276:	2781                	sext.w	a5,a5
   10278:	0ff7f793          	andi	a5,a5,255
   1027c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10280:	fb843783          	ld	a5,-72(s0)
   10284:	479c                	lw	a5,8(a5)
   10286:	0107d79b          	srliw	a5,a5,0x10
   1028a:	2781                	sext.w	a5,a5
   1028c:	2781                	sext.w	a5,a5
   1028e:	0ff7f793          	andi	a5,a5,255
   10292:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10296:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   1029a:	fe042423          	sw	zero,-24(s0)
   1029e:	a82d                	j	102d8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   102a0:	fec42783          	lw	a5,-20(s0)
   102a4:	04078793          	addi	a5,a5,64
   102a8:	fb843703          	ld	a4,-72(s0)
   102ac:	97ba                	add	a5,a5,a4
   102ae:	639c                	ld	a5,0(a5)
   102b0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   102b4:	fb843703          	ld	a4,-72(s0)
   102b8:	fec42783          	lw	a5,-20(s0)
   102bc:	97ba                	add	a5,a5,a4
   102be:	0407c783          	lbu	a5,64(a5)
   102c2:	2781                	sext.w	a5,a5
   102c4:	fec42703          	lw	a4,-20(s0)
   102c8:	9fb9                	addw	a5,a5,a4
   102ca:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   102ce:	fe842783          	lw	a5,-24(s0)
   102d2:	2785                	addiw	a5,a5,1
   102d4:	fef42423          	sw	a5,-24(s0)
   102d8:	fe842703          	lw	a4,-24(s0)
   102dc:	fdc42783          	lw	a5,-36(s0)
   102e0:	2701                	sext.w	a4,a4
   102e2:	2781                	sext.w	a5,a5
   102e4:	faf74ee3          	blt	a4,a5,102a0 <get_dev_bar+0x4e>
    }

    for (int i = 0; i < slv_total; i++) {
   102e8:	fe042223          	sw	zero,-28(s0)
   102ec:	a8b5                	j	10368 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   102ee:	fec42783          	lw	a5,-20(s0)
   102f2:	04078793          	addi	a5,a5,64
   102f6:	fb843703          	ld	a4,-72(s0)
   102fa:	97ba                	add	a5,a5,a4
   102fc:	639c                	ld	a5,0(a5)
   102fe:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10302:	fec42783          	lw	a5,-20(s0)
   10306:	27a1                	addiw	a5,a5,8
   10308:	2781                	sext.w	a5,a5
   1030a:	04078793          	addi	a5,a5,64
   1030e:	fb843703          	ld	a4,-72(s0)
   10312:	97ba                	add	a5,a5,a4
   10314:	639c                	ld	a5,0(a5)
   10316:	fcf43423          	sd	a5,-56(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   1031a:	fc645783          	lhu	a5,-58(s0)
   1031e:	fb645703          	lhu	a4,-74(s0)
   10322:	2701                	sext.w	a4,a4
   10324:	2781                	sext.w	a5,a5
   10326:	00f71f63          	bne	a4,a5,10344 <get_dev_bar+0xf2>
   1032a:	fc445783          	lhu	a5,-60(s0)
   1032e:	fb445703          	lhu	a4,-76(s0)
   10332:	2701                	sext.w	a4,a4
   10334:	2781                	sext.w	a5,a5
   10336:	00f71763          	bne	a4,a5,10344 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1033a:	fcc42783          	lw	a5,-52(s0)
   1033e:	1782                	slli	a5,a5,0x20
   10340:	9381                	srli	a5,a5,0x20
   10342:	a825                	j	1037a <get_dev_bar+0x128>
        }
        off += pnp->cfg_table[off];
   10344:	fb843703          	ld	a4,-72(s0)
   10348:	fec42783          	lw	a5,-20(s0)
   1034c:	97ba                	add	a5,a5,a4
   1034e:	0407c783          	lbu	a5,64(a5)
   10352:	2781                	sext.w	a5,a5
   10354:	fec42703          	lw	a4,-20(s0)
   10358:	9fb9                	addw	a5,a5,a4
   1035a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1035e:	fe442783          	lw	a5,-28(s0)
   10362:	2785                	addiw	a5,a5,1
   10364:	fef42223          	sw	a5,-28(s0)
   10368:	fe442703          	lw	a4,-28(s0)
   1036c:	fe042783          	lw	a5,-32(s0)
   10370:	2701                	sext.w	a4,a4
   10372:	2781                	sext.w	a5,a5
   10374:	f6f74de3          	blt	a4,a5,102ee <get_dev_bar+0x9c>
    }

    return DEV_NONE;
   10378:	57fd                	li	a5,-1
}
   1037a:	853e                	mv	a0,a5
   1037c:	6426                	ld	s0,72(sp)
   1037e:	6161                	addi	sp,sp,80
   10380:	8082                	ret

0000000000010382 <mpu_region_total>:
    mpu_ctrl_wrbits_type bits;
    uint64_t value;
} mpu_ctrl_type;

// Read CSR_MPU_ctrl vendor specific register
static int mpu_region_total() {
   10382:	1101                	addi	sp,sp,-32
   10384:	ec22                	sd	s0,24(sp)
   10386:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10388:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1038c:	bc4027f3          	csrr	a5,0xbc4
   10390:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10394:	fe843783          	ld	a5,-24(s0)
   10398:	83a1                	srli	a5,a5,0x8
   1039a:	2781                	sext.w	a5,a5
}
   1039c:	853e                	mv	a0,a5
   1039e:	6462                	ld	s0,24(sp)
   103a0:	6105                	addi	sp,sp,32
   103a2:	8082                	ret

00000000000103a4 <mpu_disable_region>:

static void mpu_disable_region(int idx) {
   103a4:	7179                	addi	sp,sp,-48
   103a6:	f422                	sd	s0,40(sp)
   103a8:	1800                	addi	s0,sp,48
   103aa:	87aa                	mv	a5,a0
   103ac:	fcf42e23          	sw	a5,-36(s0)
    mpu_ctrl_type ctrl;
    ctrl.value = 0;
   103b0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   103b4:	fdc42783          	lw	a5,-36(s0)
   103b8:	0ff7f793          	andi	a5,a5,255
   103bc:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   103c0:	fe844783          	lbu	a5,-24(s0)
   103c4:	f807e793          	ori	a5,a5,-128
   103c8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   103cc:	fe843783          	ld	a5,-24(s0)
   103d0:	bc479073          	csrw	0xbc4,a5
}
   103d4:	0001                	nop
   103d6:	7422                	ld	s0,40(sp)
   103d8:	6145                	addi	sp,sp,48
   103da:	8082                	ret

00000000000103dc <mpu_enable_region>:

static void mpu_enable_region(int idx,
                       uint64_t bar,
                       uint64_t KB,
                       int cached,
                       const char *rwx) {
   103dc:	715d                	addi	sp,sp,-80
   103de:	e4a2                	sd	s0,72(sp)
   103e0:	0880                	addi	s0,sp,80
   103e2:	87aa                	mv	a5,a0
   103e4:	fcb43023          	sd	a1,-64(s0)
   103e8:	fac43c23          	sd	a2,-72(s0)
   103ec:	fae43823          	sd	a4,-80(s0)
   103f0:	fcf42623          	sw	a5,-52(s0)
   103f4:	87b6                	mv	a5,a3
   103f6:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   103fa:	c0000793          	li	a5,-1024
   103fe:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10402:	fb043783          	ld	a5,-80(s0)
   10406:	fef43023          	sd	a5,-32(s0)
    mpu_ctrl_type ctrl;

    asm("csrw 0xBC2, %0" : :"r"(bar));
   1040a:	fc043783          	ld	a5,-64(s0)
   1040e:	bc279073          	csrw	0xbc2,a5

    KB >>= 1;
   10412:	fb843783          	ld	a5,-72(s0)
   10416:	8385                	srli	a5,a5,0x1
   10418:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1041c:	a819                	j	10432 <mpu_enable_region+0x56>
        mask <<= 1;
   1041e:	fe843783          	ld	a5,-24(s0)
   10422:	0786                	slli	a5,a5,0x1
   10424:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10428:	fb843783          	ld	a5,-72(s0)
   1042c:	8385                	srli	a5,a5,0x1
   1042e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10432:	fb843783          	ld	a5,-72(s0)
   10436:	f7e5                	bnez	a5,1041e <mpu_enable_region+0x42>
    }
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10438:	fe843783          	ld	a5,-24(s0)
   1043c:	bc379073          	csrw	0xbc3,a5

    ctrl.value = 0;
   10440:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10444:	fcc42783          	lw	a5,-52(s0)
   10448:	0ff7f793          	andi	a5,a5,255
   1044c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10450:	fd844783          	lbu	a5,-40(s0)
   10454:	0107e793          	ori	a5,a5,16
   10458:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1045c:	fc842783          	lw	a5,-56(s0)
   10460:	8b85                	andi	a5,a5,1
   10462:	0ff7f793          	andi	a5,a5,255
   10466:	8b85                	andi	a5,a5,1
   10468:	0037969b          	slliw	a3,a5,0x3
   1046c:	fd844783          	lbu	a5,-40(s0)
   10470:	9bdd                	andi	a5,a5,-9
   10472:	873e                	mv	a4,a5
   10474:	87b6                	mv	a5,a3
   10476:	8fd9                	or	a5,a5,a4
   10478:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1047c:	fd844783          	lbu	a5,-40(s0)
   10480:	f807e793          	ori	a5,a5,-128
   10484:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10488:	a09d                	j	104ee <mpu_enable_region+0x112>
        if (*p == 'r') {
   1048a:	fe043783          	ld	a5,-32(s0)
   1048e:	0007c783          	lbu	a5,0(a5)
   10492:	873e                	mv	a4,a5
   10494:	07200793          	li	a5,114
   10498:	00f71863          	bne	a4,a5,104a8 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1049c:	fd844783          	lbu	a5,-40(s0)
   104a0:	0027e793          	ori	a5,a5,2
   104a4:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'w') {
   104a8:	fe043783          	ld	a5,-32(s0)
   104ac:	0007c783          	lbu	a5,0(a5)
   104b0:	873e                	mv	a4,a5
   104b2:	07700793          	li	a5,119
   104b6:	00f71863          	bne	a4,a5,104c6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   104ba:	fd844783          	lbu	a5,-40(s0)
   104be:	0017e793          	ori	a5,a5,1
   104c2:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'x') {
   104c6:	fe043783          	ld	a5,-32(s0)
   104ca:	0007c783          	lbu	a5,0(a5)
   104ce:	873e                	mv	a4,a5
   104d0:	07800793          	li	a5,120
   104d4:	00f71863          	bne	a4,a5,104e4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   104d8:	fd844783          	lbu	a5,-40(s0)
   104dc:	0047e793          	ori	a5,a5,4
   104e0:	fcf40c23          	sb	a5,-40(s0)
        }
        p++;
   104e4:	fe043783          	ld	a5,-32(s0)
   104e8:	0785                	addi	a5,a5,1
   104ea:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   104ee:	fe043783          	ld	a5,-32(s0)
   104f2:	0007c783          	lbu	a5,0(a5)
   104f6:	fbd1                	bnez	a5,1048a <mpu_enable_region+0xae>
    }
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   104f8:	fd843783          	ld	a5,-40(s0)
   104fc:	bc479073          	csrw	0xbc4,a5
}
   10500:	0001                	nop
   10502:	6426                	ld	s0,72(sp)
   10504:	6161                	addi	sp,sp,80
   10506:	8082                	ret

0000000000010508 <fw_get_cpuid>:
#include "sd_uefi.h"
#include "uart.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   10508:	1101                	addi	sp,sp,-32
   1050a:	ec22                	sd	s0,24(sp)
   1050c:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   1050e:	f14027f3          	csrr	a5,mhartid
   10512:	fef42623          	sw	a5,-20(s0)
    return ret;
   10516:	fec42783          	lw	a5,-20(s0)
}
   1051a:	853e                	mv	a0,a5
   1051c:	6462                	ld	s0,24(sp)
   1051e:	6105                	addi	sp,sp,32
   10520:	8082                	ret

0000000000010522 <led_set>:

void led_set(int output) {
   10522:	1101                	addi	sp,sp,-32
   10524:	ec22                	sd	s0,24(sp)
   10526:	1000                	addi	s0,sp,32
   10528:	87aa                	mv	a5,a0
   1052a:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   1052e:	fec42783          	lw	a5,-20(s0)
   10532:	0047979b          	slliw	a5,a5,0x4
   10536:	0007871b          	sext.w	a4,a5
   1053a:	100607b7          	lui	a5,0x10060
   1053e:	2701                	sext.w	a4,a4
   10540:	c7d8                	sw	a4,12(a5)
}
   10542:	0001                	nop
   10544:	6462                	ld	s0,24(sp)
   10546:	6105                	addi	sp,sp,32
   10548:	8082                	ret

000000000001054a <get_dip>:

int get_dip(int idx) {
   1054a:	7179                	addi	sp,sp,-48
   1054c:	f422                	sd	s0,40(sp)
   1054e:	1800                	addi	s0,sp,48
   10550:	87aa                	mv	a5,a0
   10552:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   10556:	100607b7          	lui	a5,0x10060
   1055a:	439c                	lw	a5,0(a5)
   1055c:	0007871b          	sext.w	a4,a5
   10560:	fdc42783          	lw	a5,-36(s0)
   10564:	00f757bb          	srlw	a5,a4,a5
   10568:	2781                	sext.w	a5,a5
   1056a:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   1056e:	fec42783          	lw	a5,-20(s0)
   10572:	8b85                	andi	a5,a5,1
   10574:	2781                	sext.w	a5,a5
}
   10576:	853e                	mv	a0,a5
   10578:	7422                	ld	s0,40(sp)
   1057a:	6145                	addi	sp,sp,48
   1057c:	8082                	ret

000000000001057e <get_dips>:

int get_dips() {
   1057e:	1101                	addi	sp,sp,-32
   10580:	ec22                	sd	s0,24(sp)
   10582:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   10584:	100607b7          	lui	a5,0x10060
   10588:	439c                	lw	a5,0(a5)
   1058a:	2781                	sext.w	a5,a5
   1058c:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   10590:	fec42783          	lw	a5,-20(s0)
   10594:	8bbd                	andi	a5,a5,15
   10596:	2781                	sext.w	a5,a5
}
   10598:	853e                	mv	a0,a5
   1059a:	6462                	ld	s0,24(sp)
   1059c:	6105                	addi	sp,sp,32
   1059e:	8082                	ret

00000000000105a0 <copy_image>:



void copy_image() { 
   105a0:	715d                	addi	sp,sp,-80
   105a2:	e486                	sd	ra,72(sp)
   105a4:	e0a2                	sd	s0,64(sp)
   105a6:	0880                	addi	s0,sp,80
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   105a8:	090007b7          	lui	a5,0x9000
   105ac:	fcf43c23          	sd	a5,-40(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   105b0:	080007b7          	lui	a5,0x8000
   105b4:	fcf43823          	sd	a5,-48(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   105b8:	100ff7b7          	lui	a5,0x100ff
   105bc:	fcf43423          	sd	a5,-56(s0)

    uint64_t qspi2 = ~0ull;
   105c0:	57fd                	li	a5,-1
   105c2:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   105c6:	00000097          	auipc	ra,0x0
   105ca:	fb8080e7          	jalr	-72(ra) # 1057e <get_dips>
   105ce:	87aa                	mv	a5,a0
   105d0:	85be                	mv	a1,a5
   105d2:	67c9                	lui	a5,0x12
   105d4:	39878513          	addi	a0,a5,920 # 12398 <strnlen+0x1c>
   105d8:	00001097          	auipc	ra,0x1
   105dc:	044080e7          	jalr	68(ra) # 1161c <printf_uart>
    if (get_dips() == 0xB) {
   105e0:	00000097          	auipc	ra,0x0
   105e4:	f9e080e7          	jalr	-98(ra) # 1057e <get_dips>
   105e8:	87aa                	mv	a5,a0
   105ea:	873e                	mv	a4,a5
   105ec:	47ad                	li	a5,11
   105ee:	04f71d63          	bne	a4,a5,10648 <copy_image+0xa8>
        // Load from SD-card
        qspi2 = get_dev_bar(pnp, VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   105f2:	07500613          	li	a2,117
   105f6:	0f100593          	li	a1,241
   105fa:	fc843503          	ld	a0,-56(s0)
   105fe:	c55ff0ef          	jal	ra,10252 <get_dev_bar>
   10602:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   10606:	fe843703          	ld	a4,-24(s0)
   1060a:	57fd                	li	a5,-1
   1060c:	02f70e63          	beq	a4,a5,10648 <copy_image+0xa8>
            print_uart("Select . .QSPI2\r\n", 17);
   10610:	45c5                	li	a1,17
   10612:	67c9                	lui	a5,0x12
   10614:	3a878513          	addi	a0,a5,936 # 123a8 <strnlen+0x2c>
   10618:	00001097          	auipc	ra,0x1
   1061c:	a28080e7          	jalr	-1496(ra) # 11040 <print_uart>
            if (run_from_sdcard() == -1) {
   10620:	00002097          	auipc	ra,0x2
   10624:	a3e080e7          	jalr	-1474(ra) # 1205e <run_from_sdcard>
   10628:	87aa                	mv	a5,a0
   1062a:	873e                	mv	a4,a5
   1062c:	57fd                	li	a5,-1
   1062e:	00f71d63          	bne	a4,a5,10648 <copy_image+0xa8>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   10632:	45c9                	li	a1,18
   10634:	67c9                	lui	a5,0x12
   10636:	3c078513          	addi	a0,a5,960 # 123c0 <strnlen+0x44>
   1063a:	00001097          	auipc	ra,0x1
   1063e:	a06080e7          	jalr	-1530(ra) # 11040 <print_uart>
                qspi2 = ~0ull;
   10642:	57fd                	li	a5,-1
   10644:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   10648:	fe843703          	ld	a4,-24(s0)
   1064c:	57fd                	li	a5,-1
   1064e:	0af71163          	bne	a4,a5,106f0 <copy_image+0x150>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   10652:	fc843783          	ld	a5,-56(s0)
   10656:	43dc                	lw	a5,4(a5)
   10658:	efc1                	bnez	a5,106f0 <copy_image+0x150>
        // Check if SRAM already initialized in RTL simulation, then skip copying
        uint64_t *dst = (uint64_t *)sram;
   1065a:	fd043783          	ld	a5,-48(s0)
   1065e:	fcf43023          	sd	a5,-64(s0)
        uint64_t *src = (uint64_t *)fwrom;
   10662:	fd843783          	ld	a5,-40(s0)
   10666:	faf43c23          	sd	a5,-72(s0)
        int skip_rtl_sim = 1;
   1066a:	4785                	li	a5,1
   1066c:	fef42223          	sw	a5,-28(s0)
        for (int i = 0; i < 8; i++) {
   10670:	fe042023          	sw	zero,-32(s0)
   10674:	a80d                	j	106a6 <copy_image+0x106>
            if (src[i] != dst[i]) {
   10676:	fe042783          	lw	a5,-32(s0)
   1067a:	078e                	slli	a5,a5,0x3
   1067c:	fb843703          	ld	a4,-72(s0)
   10680:	97ba                	add	a5,a5,a4
   10682:	6398                	ld	a4,0(a5)
   10684:	fe042783          	lw	a5,-32(s0)
   10688:	078e                	slli	a5,a5,0x3
   1068a:	fc043683          	ld	a3,-64(s0)
   1068e:	97b6                	add	a5,a5,a3
   10690:	639c                	ld	a5,0(a5)
   10692:	00f70563          	beq	a4,a5,1069c <copy_image+0xfc>
                skip_rtl_sim = 0;
   10696:	fe042223          	sw	zero,-28(s0)
                break;
   1069a:	a829                	j	106b4 <copy_image+0x114>
        for (int i = 0; i < 8; i++) {
   1069c:	fe042783          	lw	a5,-32(s0)
   106a0:	2785                	addiw	a5,a5,1
   106a2:	fef42023          	sw	a5,-32(s0)
   106a6:	fe042783          	lw	a5,-32(s0)
   106aa:	0007871b          	sext.w	a4,a5
   106ae:	479d                	li	a5,7
   106b0:	fce7d3e3          	ble	a4,a5,10676 <copy_image+0xd6>
            }
        }
        if (skip_rtl_sim) {
   106b4:	fe442783          	lw	a5,-28(s0)
   106b8:	2781                	sext.w	a5,a5
   106ba:	cb91                	beqz	a5,106ce <copy_image+0x12e>
            print_uart("NO.COPY. .rtl.sim\r\n", 19);
   106bc:	45cd                	li	a1,19
   106be:	67c9                	lui	a5,0x12
   106c0:	3d878513          	addi	a0,a5,984 # 123d8 <strnlen+0x5c>
   106c4:	00001097          	auipc	ra,0x1
   106c8:	97c080e7          	jalr	-1668(ra) # 11040 <print_uart>
   106cc:	a015                	j	106f0 <copy_image+0x150>
        } else {
            print_uart("Coping . .FWIMAGE\r\n", 19);
   106ce:	45cd                	li	a1,19
   106d0:	67c9                	lui	a5,0x12
   106d2:	3f078513          	addi	a0,a5,1008 # 123f0 <strnlen+0x74>
   106d6:	00001097          	auipc	ra,0x1
   106da:	96a080e7          	jalr	-1686(ra) # 11040 <print_uart>
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   106de:	000407b7          	lui	a5,0x40
   106e2:	863e                	mv	a2,a5
   106e4:	fd843583          	ld	a1,-40(s0)
   106e8:	fd043503          	ld	a0,-48(s0)
   106ec:	3d1010ef          	jal	ra,122bc <memcpy>
        }
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   106f0:	fc843783          	ld	a5,-56(s0)
   106f4:	20211737          	lui	a4,0x20211
   106f8:	1237071b          	addiw	a4,a4,291
   106fc:	c3d8                	sw	a4,4(a5)
}
   106fe:	0001                	nop
   10700:	60a6                	ld	ra,72(sp)
   10702:	6406                	ld	s0,64(sp)
   10704:	6161                	addi	sp,sp,80
   10706:	8082                	ret

0000000000010708 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   10708:	1141                	addi	sp,sp,-16
   1070a:	e422                	sd	s0,8(sp)
   1070c:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   1070e:	0001                	nop
   10710:	6422                	ld	s0,8(sp)
   10712:	0141                	addi	sp,sp,16
   10714:	8082                	ret

0000000000010716 <init_pmp>:

// Enable U,S,MPRV for all regions
void init_pmp() {
   10716:	1101                	addi	sp,sp,-32
   10718:	ec22                	sd	s0,24(sp)
   1071a:	1000                	addi	s0,sp,32
    uint64_t a0 = -1;  // Give S-mode free rein of everything else.
   1071c:	57fd                	li	a5,-1
   1071e:	fef43423          	sd	a5,-24(s0)
    uint64_t cfg = (PMP_NAPOT | PMP_R | PMP_W | PMP_X) << 0; // [] channel: whole memory range
   10722:	47fd                	li	a5,31
   10724:	fef43023          	sd	a5,-32(s0)

    // Plug it all in.
    asm volatile ("csrw pmpaddr0, %[a0]\n\t"
   10728:	fe843783          	ld	a5,-24(s0)
   1072c:	fe043703          	ld	a4,-32(s0)
   10730:	3b079073          	csrw	pmpaddr0,a5
   10734:	3a071073          	csrw	pmpcfg0,a4
                  "csrw pmpcfg0, %[cfg]"
                  :: [a0] "r" (a0),
                     [cfg] "r" (cfg));
}
   10738:	0001                	nop
   1073a:	6462                	ld	s0,24(sp)
   1073c:	6105                	addi	sp,sp,32
   1073e:	8082                	ret

0000000000010740 <_init>:


void _init() {
   10740:	7139                	addi	sp,sp,-64
   10742:	fc06                	sd	ra,56(sp)
   10744:	f822                	sd	s0,48(sp)
   10746:	0080                	addi	s0,sp,64
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10748:	100ff7b7          	lui	a5,0x100ff
   1074c:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10750:	100007b7          	lui	a5,0x10000
   10754:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   10758:	100607b7          	lui	a5,0x10060
   1075c:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   10760:	47a1                	li	a5,8
   10762:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   10766:	fd043783          	ld	a5,-48(s0)
   1076a:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   1076e:	6785                	lui	a5,0x1
   10770:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   10774:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   10778:	fd043783          	ld	a5,-48(s0)
   1077c:	3047b073          	csrc	mie,a5

    t1 = 0x00000007;
   10780:	479d                	li	a5,7
   10782:	fcf43823          	sd	a5,-48(s0)
    asm("csrw mcounteren, %0" : :"r"(t1));  // allow counter access from S-mode
   10786:	fd043783          	ld	a5,-48(s0)
   1078a:	30679073          	csrw	mcounteren,a5
    asm("csrw scounteren, %0" : :"r"(t1));  // allow counter access from U-mode
   1078e:	fd043783          	ld	a5,-48(s0)
   10792:	10679073          	csrw	scounteren,a5

    init_pmp();
   10796:	00000097          	auipc	ra,0x0
   1079a:	f80080e7          	jalr	-128(ra) # 10716 <init_pmp>

    txctrl.v = 0;
   1079e:	fc042423          	sw	zero,-56(s0)
    txctrl.b.txen = 1;
   107a2:	fc844783          	lbu	a5,-56(s0)
   107a6:	0017e793          	ori	a5,a5,1
   107aa:	fcf40423          	sb	a5,-56(s0)
    rxctrl.v = 0;
   107ae:	fc042023          	sw	zero,-64(s0)
    rxctrl.b.rxen = 1;
   107b2:	fc044783          	lbu	a5,-64(s0)
   107b6:	0017e793          	ori	a5,a5,1
   107ba:	fcf40023          	sb	a5,-64(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   107be:	fe043783          	ld	a5,-32(s0)
   107c2:	0ad00713          	li	a4,173
   107c6:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   107c8:	fc842783          	lw	a5,-56(s0)
   107cc:	0007871b          	sext.w	a4,a5
   107d0:	fe043783          	ld	a5,-32(s0)
   107d4:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   107d6:	fc042783          	lw	a5,-64(s0)
   107da:	0007871b          	sext.w	a4,a5
   107de:	fe043783          	ld	a5,-32(s0)
   107e2:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   107e4:	fd843783          	ld	a5,-40(s0)
   107e8:	473d                	li	a4,15
   107ea:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   107ec:	fd843783          	ld	a5,-40(s0)
   107f0:	6705                	lui	a4,0x1
   107f2:	3741                	addiw	a4,a4,-16
   107f4:	c798                	sw	a4,8(a5)

    led_set(0x01);
   107f6:	4505                	li	a0,1
   107f8:	d2bff0ef          	jal	ra,10522 <led_set>

    copy_image();
   107fc:	00000097          	auipc	ra,0x0
   10800:	da4080e7          	jalr	-604(ra) # 105a0 <copy_image>
    led_set(0x02);
   10804:	4509                	li	a0,2
   10806:	d1dff0ef          	jal	ra,10522 <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   1080a:	67c9                	lui	a5,0x12
   1080c:	40878593          	addi	a1,a5,1032 # 12408 <strnlen+0x8c>
   10810:	67c9                	lui	a5,0x12
   10812:	41078513          	addi	a0,a5,1040 # 12410 <strnlen+0x94>
   10816:	607000ef          	jal	ra,1161c <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   1081a:	67c9                	lui	a5,0x12
   1081c:	42078593          	addi	a1,a5,1056 # 12420 <strnlen+0xa4>
   10820:	67c9                	lui	a5,0x12
   10822:	42878513          	addi	a0,a5,1064 # 12428 <strnlen+0xac>
   10826:	5f7000ef          	jal	ra,1161c <printf_uart>

    led_set(0x03);
   1082a:	450d                	li	a0,3
   1082c:	cf7ff0ef          	jal	ra,10522 <led_set>
}
   10830:	0001                	nop
   10832:	70e2                	ld	ra,56(sp)
   10834:	7442                	ld	s0,48(sp)
   10836:	6121                	addi	sp,sp,64
   10838:	8082                	ret

000000000001083a <main>:

/** Not used actually */
int main() {
   1083a:	1141                	addi	sp,sp,-16
   1083c:	e422                	sd	s0,8(sp)
   1083e:	0800                	addi	s0,sp,16
    while (1) {}
   10840:	a001                	j	10840 <main+0x6>
	...

0000000000010844 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10844:	715d                	addi	sp,sp,-80
   10846:	e4a2                	sd	s0,72(sp)
   10848:	0880                	addi	s0,sp,80
   1084a:	faa43c23          	sd	a0,-72(s0)
   1084e:	87ae                	mv	a5,a1
   10850:	8732                	mv	a4,a2
   10852:	faf41b23          	sh	a5,-74(s0)
   10856:	87ba                	mv	a5,a4
   10858:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1085c:	fb843783          	ld	a5,-72(s0)
   10860:	479c                	lw	a5,8(a5)
   10862:	0087d79b          	srliw	a5,a5,0x8
   10866:	2781                	sext.w	a5,a5
   10868:	2781                	sext.w	a5,a5
   1086a:	0ff7f793          	andi	a5,a5,255
   1086e:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10872:	fb843783          	ld	a5,-72(s0)
   10876:	479c                	lw	a5,8(a5)
   10878:	0107d79b          	srliw	a5,a5,0x10
   1087c:	2781                	sext.w	a5,a5
   1087e:	2781                	sext.w	a5,a5
   10880:	0ff7f793          	andi	a5,a5,255
   10884:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10888:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   1088c:	fe042423          	sw	zero,-24(s0)
   10890:	a82d                	j	108ca <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10892:	fec42783          	lw	a5,-20(s0)
   10896:	04078793          	addi	a5,a5,64
   1089a:	fb843703          	ld	a4,-72(s0)
   1089e:	97ba                	add	a5,a5,a4
   108a0:	639c                	ld	a5,0(a5)
   108a2:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   108a6:	fb843703          	ld	a4,-72(s0)
   108aa:	fec42783          	lw	a5,-20(s0)
   108ae:	97ba                	add	a5,a5,a4
   108b0:	0407c783          	lbu	a5,64(a5)
   108b4:	2781                	sext.w	a5,a5
   108b6:	fec42703          	lw	a4,-20(s0)
   108ba:	9fb9                	addw	a5,a5,a4
   108bc:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   108c0:	fe842783          	lw	a5,-24(s0)
   108c4:	2785                	addiw	a5,a5,1
   108c6:	fef42423          	sw	a5,-24(s0)
   108ca:	fe842703          	lw	a4,-24(s0)
   108ce:	fdc42783          	lw	a5,-36(s0)
   108d2:	2701                	sext.w	a4,a4
   108d4:	2781                	sext.w	a5,a5
   108d6:	faf74ee3          	blt	a4,a5,10892 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   108da:	fe042223          	sw	zero,-28(s0)
   108de:	a8b5                	j	1095a <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108e0:	fec42783          	lw	a5,-20(s0)
   108e4:	04078793          	addi	a5,a5,64
   108e8:	fb843703          	ld	a4,-72(s0)
   108ec:	97ba                	add	a5,a5,a4
   108ee:	639c                	ld	a5,0(a5)
   108f0:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   108f4:	fec42783          	lw	a5,-20(s0)
   108f8:	27a1                	addiw	a5,a5,8
   108fa:	2781                	sext.w	a5,a5
   108fc:	04078793          	addi	a5,a5,64
   10900:	fb843703          	ld	a4,-72(s0)
   10904:	97ba                	add	a5,a5,a4
   10906:	639c                	ld	a5,0(a5)
   10908:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   1090c:	fc645783          	lhu	a5,-58(s0)
   10910:	fb645703          	lhu	a4,-74(s0)
   10914:	2701                	sext.w	a4,a4
   10916:	2781                	sext.w	a5,a5
   10918:	00f71f63          	bne	a4,a5,10936 <get_dev_bar+0xf2>
   1091c:	fc445783          	lhu	a5,-60(s0)
   10920:	fb445703          	lhu	a4,-76(s0)
   10924:	2701                	sext.w	a4,a4
   10926:	2781                	sext.w	a5,a5
   10928:	00f71763          	bne	a4,a5,10936 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1092c:	fcc42783          	lw	a5,-52(s0)
   10930:	1782                	slli	a5,a5,0x20
   10932:	9381                	srli	a5,a5,0x20
   10934:	a825                	j	1096c <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10936:	fb843703          	ld	a4,-72(s0)
   1093a:	fec42783          	lw	a5,-20(s0)
   1093e:	97ba                	add	a5,a5,a4
   10940:	0407c783          	lbu	a5,64(a5)
   10944:	2781                	sext.w	a5,a5
   10946:	fec42703          	lw	a4,-20(s0)
   1094a:	9fb9                	addw	a5,a5,a4
   1094c:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10950:	fe442783          	lw	a5,-28(s0)
   10954:	2785                	addiw	a5,a5,1
   10956:	fef42223          	sw	a5,-28(s0)
   1095a:	fe442703          	lw	a4,-28(s0)
   1095e:	fe042783          	lw	a5,-32(s0)
   10962:	2701                	sext.w	a4,a4
   10964:	2781                	sext.w	a5,a5
   10966:	f6f74de3          	blt	a4,a5,108e0 <get_dev_bar+0x9c>
    return DEV_NONE;
   1096a:	57fd                	li	a5,-1
}
   1096c:	853e                	mv	a0,a5
   1096e:	6426                	ld	s0,72(sp)
   10970:	6161                	addi	sp,sp,80
   10972:	8082                	ret

0000000000010974 <mpu_region_total>:
static int mpu_region_total() {
   10974:	1101                	addi	sp,sp,-32
   10976:	ec22                	sd	s0,24(sp)
   10978:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   1097a:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1097e:	bc4027f3          	csrr	a5,0xbc4
   10982:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10986:	fe843783          	ld	a5,-24(s0)
   1098a:	83a1                	srli	a5,a5,0x8
   1098c:	2781                	sext.w	a5,a5
}
   1098e:	853e                	mv	a0,a5
   10990:	6462                	ld	s0,24(sp)
   10992:	6105                	addi	sp,sp,32
   10994:	8082                	ret

0000000000010996 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10996:	7179                	addi	sp,sp,-48
   10998:	f422                	sd	s0,40(sp)
   1099a:	1800                	addi	s0,sp,48
   1099c:	87aa                	mv	a5,a0
   1099e:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   109a2:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   109a6:	fdc42783          	lw	a5,-36(s0)
   109aa:	0ff7f793          	andi	a5,a5,255
   109ae:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   109b2:	fe844783          	lbu	a5,-24(s0)
   109b6:	f807e793          	ori	a5,a5,-128
   109ba:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   109be:	fe843783          	ld	a5,-24(s0)
   109c2:	bc479073          	csrw	0xbc4,a5
}
   109c6:	0001                	nop
   109c8:	7422                	ld	s0,40(sp)
   109ca:	6145                	addi	sp,sp,48
   109cc:	8082                	ret

00000000000109ce <mpu_enable_region>:
                       const char *rwx) {
   109ce:	715d                	addi	sp,sp,-80
   109d0:	e4a2                	sd	s0,72(sp)
   109d2:	0880                	addi	s0,sp,80
   109d4:	87aa                	mv	a5,a0
   109d6:	fcb43023          	sd	a1,-64(s0)
   109da:	fac43c23          	sd	a2,-72(s0)
   109de:	fae43823          	sd	a4,-80(s0)
   109e2:	fcf42623          	sw	a5,-52(s0)
   109e6:	87b6                	mv	a5,a3
   109e8:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   109ec:	c0000793          	li	a5,-1024
   109f0:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   109f4:	fb043783          	ld	a5,-80(s0)
   109f8:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   109fc:	fc043783          	ld	a5,-64(s0)
   10a00:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10a04:	fb843783          	ld	a5,-72(s0)
   10a08:	8385                	srli	a5,a5,0x1
   10a0a:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a0e:	a819                	j	10a24 <mpu_enable_region+0x56>
        mask <<= 1;
   10a10:	fe843783          	ld	a5,-24(s0)
   10a14:	0786                	slli	a5,a5,0x1
   10a16:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10a1a:	fb843783          	ld	a5,-72(s0)
   10a1e:	8385                	srli	a5,a5,0x1
   10a20:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a24:	fb843783          	ld	a5,-72(s0)
   10a28:	f7e5                	bnez	a5,10a10 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10a2a:	fe843783          	ld	a5,-24(s0)
   10a2e:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10a32:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10a36:	fcc42783          	lw	a5,-52(s0)
   10a3a:	0ff7f793          	andi	a5,a5,255
   10a3e:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10a42:	fd844783          	lbu	a5,-40(s0)
   10a46:	0107e793          	ori	a5,a5,16
   10a4a:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10a4e:	fc842783          	lw	a5,-56(s0)
   10a52:	8b85                	andi	a5,a5,1
   10a54:	0ff7f793          	andi	a5,a5,255
   10a58:	8b85                	andi	a5,a5,1
   10a5a:	0037969b          	slliw	a3,a5,0x3
   10a5e:	fd844783          	lbu	a5,-40(s0)
   10a62:	9bdd                	andi	a5,a5,-9
   10a64:	873e                	mv	a4,a5
   10a66:	87b6                	mv	a5,a3
   10a68:	8fd9                	or	a5,a5,a4
   10a6a:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10a6e:	fd844783          	lbu	a5,-40(s0)
   10a72:	f807e793          	ori	a5,a5,-128
   10a76:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10a7a:	a09d                	j	10ae0 <mpu_enable_region+0x112>
        if (*p == 'r') {
   10a7c:	fe043783          	ld	a5,-32(s0)
   10a80:	0007c783          	lbu	a5,0(a5)
   10a84:	873e                	mv	a4,a5
   10a86:	07200793          	li	a5,114
   10a8a:	00f71863          	bne	a4,a5,10a9a <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10a8e:	fd844783          	lbu	a5,-40(s0)
   10a92:	0027e793          	ori	a5,a5,2
   10a96:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10a9a:	fe043783          	ld	a5,-32(s0)
   10a9e:	0007c783          	lbu	a5,0(a5)
   10aa2:	873e                	mv	a4,a5
   10aa4:	07700793          	li	a5,119
   10aa8:	00f71863          	bne	a4,a5,10ab8 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10aac:	fd844783          	lbu	a5,-40(s0)
   10ab0:	0017e793          	ori	a5,a5,1
   10ab4:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10ab8:	fe043783          	ld	a5,-32(s0)
   10abc:	0007c783          	lbu	a5,0(a5)
   10ac0:	873e                	mv	a4,a5
   10ac2:	07800793          	li	a5,120
   10ac6:	00f71863          	bne	a4,a5,10ad6 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10aca:	fd844783          	lbu	a5,-40(s0)
   10ace:	0047e793          	ori	a5,a5,4
   10ad2:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10ad6:	fe043783          	ld	a5,-32(s0)
   10ada:	0785                	addi	a5,a5,1
   10adc:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10ae0:	fe043783          	ld	a5,-32(s0)
   10ae4:	0007c783          	lbu	a5,0(a5)
   10ae8:	fbd1                	bnez	a5,10a7c <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10aea:	fd843783          	ld	a5,-40(s0)
   10aee:	bc479073          	csrw	0xbc4,a5
}
   10af2:	0001                	nop
   10af4:	6426                	ld	s0,72(sp)
   10af6:	6161                	addi	sp,sp,80
   10af8:	8082                	ret

0000000000010afa <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10afa:	1101                	addi	sp,sp,-32
   10afc:	ec22                	sd	s0,24(sp)
   10afe:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10b00:	342027f3          	csrr	a5,mcause
   10b04:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b08:	fec42783          	lw	a5,-20(s0)
}
   10b0c:	853e                	mv	a0,a5
   10b0e:	6462                	ld	s0,24(sp)
   10b10:	6105                	addi	sp,sp,32
   10b12:	8082                	ret

0000000000010b14 <get_mepc>:

int get_mepc() {
   10b14:	1101                	addi	sp,sp,-32
   10b16:	ec22                	sd	s0,24(sp)
   10b18:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10b1a:	341027f3          	csrr	a5,mepc
   10b1e:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b22:	fec42783          	lw	a5,-20(s0)
}
   10b26:	853e                	mv	a0,a5
   10b28:	6462                	ld	s0,24(sp)
   10b2a:	6105                	addi	sp,sp,32
   10b2c:	8082                	ret

0000000000010b2e <env_call>:


void env_call(long long test_id) {
   10b2e:	7179                	addi	sp,sp,-48
   10b30:	f406                	sd	ra,40(sp)
   10b32:	f022                	sd	s0,32(sp)
   10b34:	1800                	addi	s0,sp,48
   10b36:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10b3a:	fd843783          	ld	a5,-40(s0)
   10b3e:	c7bd                	beqz	a5,10bac <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10b40:	45b5                	li	a1,13
   10b42:	67c9                	lui	a5,0x12
   10b44:	43878513          	addi	a0,a5,1080 # 12438 <strnlen+0xbc>
   10b48:	00000097          	auipc	ra,0x0
   10b4c:	4f8080e7          	jalr	1272(ra) # 11040 <print_uart>
        print_uart("a0=", 3);
   10b50:	458d                	li	a1,3
   10b52:	67c9                	lui	a5,0x12
   10b54:	44878513          	addi	a0,a5,1096 # 12448 <strnlen+0xcc>
   10b58:	00000097          	auipc	ra,0x0
   10b5c:	4e8080e7          	jalr	1256(ra) # 11040 <print_uart>
        print_uart_hex(test_id);
   10b60:	fd843503          	ld	a0,-40(s0)
   10b64:	54e000ef          	jal	ra,110b2 <print_uart_hex>
        print_uart("\r\n", 2);
   10b68:	4589                	li	a1,2
   10b6a:	67c9                	lui	a5,0x12
   10b6c:	45078513          	addi	a0,a5,1104 # 12450 <strnlen+0xd4>
   10b70:	00000097          	auipc	ra,0x0
   10b74:	4d0080e7          	jalr	1232(ra) # 11040 <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10b78:	343027f3          	csrr	a5,mbadaddr
   10b7c:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10b80:	45a5                	li	a1,9
   10b82:	67c9                	lui	a5,0x12
   10b84:	45878513          	addi	a0,a5,1112 # 12458 <strnlen+0xdc>
   10b88:	00000097          	auipc	ra,0x0
   10b8c:	4b8080e7          	jalr	1208(ra) # 11040 <print_uart>
        print_uart_hex(mbadaddr);
   10b90:	fec42783          	lw	a5,-20(s0)
   10b94:	853e                	mv	a0,a5
   10b96:	51c000ef          	jal	ra,110b2 <print_uart_hex>
        print_uart("\r\n", 2);
   10b9a:	4589                	li	a1,2
   10b9c:	67c9                	lui	a5,0x12
   10b9e:	45078513          	addi	a0,a5,1104 # 12450 <strnlen+0xd4>
   10ba2:	00000097          	auipc	ra,0x0
   10ba6:	49e080e7          	jalr	1182(ra) # 11040 <print_uart>
   10baa:	a809                	j	10bbc <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10bac:	45b5                	li	a1,13
   10bae:	67c9                	lui	a5,0x12
   10bb0:	46878513          	addi	a0,a5,1128 # 12468 <strnlen+0xec>
   10bb4:	00000097          	auipc	ra,0x0
   10bb8:	48c080e7          	jalr	1164(ra) # 11040 <print_uart>
    }
    while (1) {}
   10bbc:	a001                	j	10bbc <env_call+0x8e>

0000000000010bbe <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10bbe:	7179                	addi	sp,sp,-48
   10bc0:	f406                	sd	ra,40(sp)
   10bc2:	f022                	sd	s0,32(sp)
   10bc4:	1800                	addi	s0,sp,48
   10bc6:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10bca:	00000097          	auipc	ra,0x0
   10bce:	f30080e7          	jalr	-208(ra) # 10afa <get_mcause>
   10bd2:	87aa                	mv	a5,a0
   10bd4:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10bd8:	fec42783          	lw	a5,-20(s0)
   10bdc:	37e1                	addiw	a5,a5,-8
   10bde:	0007871b          	sext.w	a4,a5
   10be2:	4785                	li	a5,1
   10be4:	00e7e963          	bltu	a5,a4,10bf6 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10be8:	fd843503          	ld	a0,-40(s0)
   10bec:	00000097          	auipc	ra,0x0
   10bf0:	f42080e7          	jalr	-190(ra) # 10b2e <env_call>
        return;
   10bf4:	a0b9                	j	10c42 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10bf6:	459d                	li	a1,7
   10bf8:	67c9                	lui	a5,0x12
   10bfa:	47878513          	addi	a0,a5,1144 # 12478 <strnlen+0xfc>
   10bfe:	442000ef          	jal	ra,11040 <print_uart>
    print_uart_hex(mcause);
   10c02:	fec42783          	lw	a5,-20(s0)
   10c06:	853e                	mv	a0,a5
   10c08:	00000097          	auipc	ra,0x0
   10c0c:	4aa080e7          	jalr	1194(ra) # 110b2 <print_uart_hex>
    print_uart(",mepc:", 6);
   10c10:	4599                	li	a1,6
   10c12:	67c9                	lui	a5,0x12
   10c14:	48078513          	addi	a0,a5,1152 # 12480 <strnlen+0x104>
   10c18:	428000ef          	jal	ra,11040 <print_uart>
    print_uart_hex(get_mepc());
   10c1c:	ef9ff0ef          	jal	ra,10b14 <get_mepc>
   10c20:	87aa                	mv	a5,a0
   10c22:	853e                	mv	a0,a5
   10c24:	00000097          	auipc	ra,0x0
   10c28:	48e080e7          	jalr	1166(ra) # 110b2 <print_uart_hex>
    print_uart("\r\n", 2);
   10c2c:	4589                	li	a1,2
   10c2e:	67c9                	lui	a5,0x12
   10c30:	45078513          	addi	a0,a5,1104 # 12450 <strnlen+0xd4>
   10c34:	40c000ef          	jal	ra,11040 <print_uart>

    /// Exception trap
    led_set(0xF0);
   10c38:	0f000513          	li	a0,240
   10c3c:	8e7ff0ef          	jal	ra,10522 <led_set>
    while (1) {}
   10c40:	a001                	j	10c40 <exception_handler_c+0x82>
}
   10c42:	70a2                	ld	ra,40(sp)
   10c44:	7402                	ld	s0,32(sp)
   10c46:	6145                	addi	sp,sp,48
   10c48:	8082                	ret

0000000000010c4a <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   10c4a:	1141                	addi	sp,sp,-16
   10c4c:	e406                	sd	ra,8(sp)
   10c4e:	e022                	sd	s0,0(sp)
   10c50:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10c52:	0f000513          	li	a0,240
   10c56:	00000097          	auipc	ra,0x0
   10c5a:	8cc080e7          	jalr	-1844(ra) # 10522 <led_set>
    print_uart("fatal_error()\r\n", 15);
   10c5e:	45bd                	li	a1,15
   10c60:	67c9                	lui	a5,0x12
   10c62:	48878513          	addi	a0,a5,1160 # 12488 <strnlen+0x10c>
   10c66:	00000097          	auipc	ra,0x0
   10c6a:	3da080e7          	jalr	986(ra) # 11040 <print_uart>
    while (1) {}
   10c6e:	a001                	j	10c6e <fatal_error+0x24>

0000000000010c70 <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10c70:	7179                	addi	sp,sp,-48
   10c72:	f422                	sd	s0,40(sp)
   10c74:	1800                	addi	s0,sp,48
   10c76:	87aa                	mv	a5,a0
   10c78:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10c7c:	0c0007b7          	lui	a5,0xc000
   10c80:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10c84:	fe843703          	ld	a4,-24(s0)
   10c88:	fdc42783          	lw	a5,-36(s0)
   10c8c:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed938>
   10c90:	07b2                	slli	a5,a5,0xc
   10c92:	97ba                	add	a5,a5,a4
   10c94:	43dc                	lw	a5,4(a5)
   10c96:	2781                	sext.w	a5,a5
}
   10c98:	853e                	mv	a0,a5
   10c9a:	7422                	ld	s0,40(sp)
   10c9c:	6145                	addi	sp,sp,48
   10c9e:	8082                	ret

0000000000010ca0 <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10ca0:	7179                	addi	sp,sp,-48
   10ca2:	f422                	sd	s0,40(sp)
   10ca4:	1800                	addi	s0,sp,48
   10ca6:	87aa                	mv	a5,a0
   10ca8:	872e                	mv	a4,a1
   10caa:	fcf42e23          	sw	a5,-36(s0)
   10cae:	87ba                	mv	a5,a4
   10cb0:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10cb4:	0c0007b7          	lui	a5,0xc000
   10cb8:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10cbc:	fd842703          	lw	a4,-40(s0)
   10cc0:	fe843683          	ld	a3,-24(s0)
   10cc4:	fdc42783          	lw	a5,-36(s0)
   10cc8:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed938>
   10ccc:	07b2                	slli	a5,a5,0xc
   10cce:	97b6                	add	a5,a5,a3
   10cd0:	c3d8                	sw	a4,4(a5)
}
   10cd2:	0001                	nop
   10cd4:	7422                	ld	s0,40(sp)
   10cd6:	6145                	addi	sp,sp,48
   10cd8:	8082                	ret

0000000000010cda <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10cda:	7139                	addi	sp,sp,-64
   10cdc:	fc06                	sd	ra,56(sp)
   10cde:	f822                	sd	s0,48(sp)
   10ce0:	0080                	addi	s0,sp,64
   10ce2:	fca43c23          	sd	a0,-40(s0)
   10ce6:	fcb43823          	sd	a1,-48(s0)
   10cea:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10cee:	fd843783          	ld	a5,-40(s0)
   10cf2:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10cf6:	fe744783          	lbu	a5,-25(s0)
   10cfa:	f807f793          	andi	a5,a5,-128
   10cfe:	0ff7f793          	andi	a5,a5,255
   10d02:	cb85                	beqz	a5,10d32 <interrupt_handler_c+0x58>
   10d04:	fe043703          	ld	a4,-32(s0)
   10d08:	57fd                	li	a5,-1
   10d0a:	8385                	srli	a5,a5,0x1
   10d0c:	8f7d                	and	a4,a4,a5
   10d0e:	47ad                	li	a5,11
   10d10:	02f71163          	bne	a4,a5,10d32 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10d14:	4501                	li	a0,0
   10d16:	f5bff0ef          	jal	ra,10c70 <plic_claim>
   10d1a:	87aa                	mv	a5,a0
   10d1c:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10d20:	fec42783          	lw	a5,-20(s0)
   10d24:	85be                	mv	a1,a5
   10d26:	4501                	li	a0,0
   10d28:	00000097          	auipc	ra,0x0
   10d2c:	f78080e7          	jalr	-136(ra) # 10ca0 <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d30:	a029                	j	10d3a <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10d32:	00000097          	auipc	ra,0x0
   10d36:	f18080e7          	jalr	-232(ra) # 10c4a <fatal_error>
    }

    return epc;
   10d3a:	fd043783          	ld	a5,-48(s0)
}
   10d3e:	853e                	mv	a0,a5
   10d40:	70e2                	ld	ra,56(sp)
   10d42:	7442                	ld	s0,48(sp)
   10d44:	6121                	addi	sp,sp,64
   10d46:	8082                	ret

0000000000010d48 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10d48:	715d                	addi	sp,sp,-80
   10d4a:	e4a2                	sd	s0,72(sp)
   10d4c:	0880                	addi	s0,sp,80
   10d4e:	faa43c23          	sd	a0,-72(s0)
   10d52:	87ae                	mv	a5,a1
   10d54:	8732                	mv	a4,a2
   10d56:	faf41b23          	sh	a5,-74(s0)
   10d5a:	87ba                	mv	a5,a4
   10d5c:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   10d60:	fb843783          	ld	a5,-72(s0)
   10d64:	479c                	lw	a5,8(a5)
   10d66:	0087d79b          	srliw	a5,a5,0x8
   10d6a:	2781                	sext.w	a5,a5
   10d6c:	2781                	sext.w	a5,a5
   10d6e:	0ff7f793          	andi	a5,a5,255
   10d72:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10d76:	fb843783          	ld	a5,-72(s0)
   10d7a:	479c                	lw	a5,8(a5)
   10d7c:	0107d79b          	srliw	a5,a5,0x10
   10d80:	2781                	sext.w	a5,a5
   10d82:	2781                	sext.w	a5,a5
   10d84:	0ff7f793          	andi	a5,a5,255
   10d88:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10d8c:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10d90:	fe042423          	sw	zero,-24(s0)
   10d94:	a82d                	j	10dce <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10d96:	fec42783          	lw	a5,-20(s0)
   10d9a:	04078793          	addi	a5,a5,64
   10d9e:	fb843703          	ld	a4,-72(s0)
   10da2:	97ba                	add	a5,a5,a4
   10da4:	639c                	ld	a5,0(a5)
   10da6:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10daa:	fb843703          	ld	a4,-72(s0)
   10dae:	fec42783          	lw	a5,-20(s0)
   10db2:	97ba                	add	a5,a5,a4
   10db4:	0407c783          	lbu	a5,64(a5)
   10db8:	2781                	sext.w	a5,a5
   10dba:	fec42703          	lw	a4,-20(s0)
   10dbe:	9fb9                	addw	a5,a5,a4
   10dc0:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10dc4:	fe842783          	lw	a5,-24(s0)
   10dc8:	2785                	addiw	a5,a5,1
   10dca:	fef42423          	sw	a5,-24(s0)
   10dce:	fe842703          	lw	a4,-24(s0)
   10dd2:	fdc42783          	lw	a5,-36(s0)
   10dd6:	2701                	sext.w	a4,a4
   10dd8:	2781                	sext.w	a5,a5
   10dda:	faf74ee3          	blt	a4,a5,10d96 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10dde:	fe042223          	sw	zero,-28(s0)
   10de2:	a8b5                	j	10e5e <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10de4:	fec42783          	lw	a5,-20(s0)
   10de8:	04078793          	addi	a5,a5,64
   10dec:	fb843703          	ld	a4,-72(s0)
   10df0:	97ba                	add	a5,a5,a4
   10df2:	639c                	ld	a5,0(a5)
   10df4:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10df8:	fec42783          	lw	a5,-20(s0)
   10dfc:	27a1                	addiw	a5,a5,8
   10dfe:	2781                	sext.w	a5,a5
   10e00:	04078793          	addi	a5,a5,64
   10e04:	fb843703          	ld	a4,-72(s0)
   10e08:	97ba                	add	a5,a5,a4
   10e0a:	639c                	ld	a5,0(a5)
   10e0c:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10e10:	fc645783          	lhu	a5,-58(s0)
   10e14:	fb645703          	lhu	a4,-74(s0)
   10e18:	2701                	sext.w	a4,a4
   10e1a:	2781                	sext.w	a5,a5
   10e1c:	00f71f63          	bne	a4,a5,10e3a <get_dev_bar+0xf2>
   10e20:	fc445783          	lhu	a5,-60(s0)
   10e24:	fb445703          	lhu	a4,-76(s0)
   10e28:	2701                	sext.w	a4,a4
   10e2a:	2781                	sext.w	a5,a5
   10e2c:	00f71763          	bne	a4,a5,10e3a <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10e30:	fcc42783          	lw	a5,-52(s0)
   10e34:	1782                	slli	a5,a5,0x20
   10e36:	9381                	srli	a5,a5,0x20
   10e38:	a825                	j	10e70 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10e3a:	fb843703          	ld	a4,-72(s0)
   10e3e:	fec42783          	lw	a5,-20(s0)
   10e42:	97ba                	add	a5,a5,a4
   10e44:	0407c783          	lbu	a5,64(a5)
   10e48:	2781                	sext.w	a5,a5
   10e4a:	fec42703          	lw	a4,-20(s0)
   10e4e:	9fb9                	addw	a5,a5,a4
   10e50:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10e54:	fe442783          	lw	a5,-28(s0)
   10e58:	2785                	addiw	a5,a5,1
   10e5a:	fef42223          	sw	a5,-28(s0)
   10e5e:	fe442703          	lw	a4,-28(s0)
   10e62:	fe042783          	lw	a5,-32(s0)
   10e66:	2701                	sext.w	a4,a4
   10e68:	2781                	sext.w	a5,a5
   10e6a:	f6f74de3          	blt	a4,a5,10de4 <get_dev_bar+0x9c>
    return DEV_NONE;
   10e6e:	57fd                	li	a5,-1
}
   10e70:	853e                	mv	a0,a5
   10e72:	6426                	ld	s0,72(sp)
   10e74:	6161                	addi	sp,sp,80
   10e76:	8082                	ret

0000000000010e78 <mpu_region_total>:
static int mpu_region_total() {
   10e78:	1101                	addi	sp,sp,-32
   10e7a:	ec22                	sd	s0,24(sp)
   10e7c:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10e7e:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10e82:	bc4027f3          	csrr	a5,0xbc4
   10e86:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10e8a:	fe843783          	ld	a5,-24(s0)
   10e8e:	83a1                	srli	a5,a5,0x8
   10e90:	2781                	sext.w	a5,a5
}
   10e92:	853e                	mv	a0,a5
   10e94:	6462                	ld	s0,24(sp)
   10e96:	6105                	addi	sp,sp,32
   10e98:	8082                	ret

0000000000010e9a <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10e9a:	7179                	addi	sp,sp,-48
   10e9c:	f422                	sd	s0,40(sp)
   10e9e:	1800                	addi	s0,sp,48
   10ea0:	87aa                	mv	a5,a0
   10ea2:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10ea6:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10eaa:	fdc42783          	lw	a5,-36(s0)
   10eae:	0ff7f793          	andi	a5,a5,255
   10eb2:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10eb6:	fe844783          	lbu	a5,-24(s0)
   10eba:	f807e793          	ori	a5,a5,-128
   10ebe:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10ec2:	fe843783          	ld	a5,-24(s0)
   10ec6:	bc479073          	csrw	0xbc4,a5
}
   10eca:	0001                	nop
   10ecc:	7422                	ld	s0,40(sp)
   10ece:	6145                	addi	sp,sp,48
   10ed0:	8082                	ret

0000000000010ed2 <mpu_enable_region>:
                       const char *rwx) {
   10ed2:	715d                	addi	sp,sp,-80
   10ed4:	e4a2                	sd	s0,72(sp)
   10ed6:	0880                	addi	s0,sp,80
   10ed8:	87aa                	mv	a5,a0
   10eda:	fcb43023          	sd	a1,-64(s0)
   10ede:	fac43c23          	sd	a2,-72(s0)
   10ee2:	fae43823          	sd	a4,-80(s0)
   10ee6:	fcf42623          	sw	a5,-52(s0)
   10eea:	87b6                	mv	a5,a3
   10eec:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10ef0:	c0000793          	li	a5,-1024
   10ef4:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10ef8:	fb043783          	ld	a5,-80(s0)
   10efc:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10f00:	fc043783          	ld	a5,-64(s0)
   10f04:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10f08:	fb843783          	ld	a5,-72(s0)
   10f0c:	8385                	srli	a5,a5,0x1
   10f0e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f12:	a819                	j	10f28 <mpu_enable_region+0x56>
        mask <<= 1;
   10f14:	fe843783          	ld	a5,-24(s0)
   10f18:	0786                	slli	a5,a5,0x1
   10f1a:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10f1e:	fb843783          	ld	a5,-72(s0)
   10f22:	8385                	srli	a5,a5,0x1
   10f24:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f28:	fb843783          	ld	a5,-72(s0)
   10f2c:	f7e5                	bnez	a5,10f14 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10f2e:	fe843783          	ld	a5,-24(s0)
   10f32:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10f36:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10f3a:	fcc42783          	lw	a5,-52(s0)
   10f3e:	0ff7f793          	andi	a5,a5,255
   10f42:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10f46:	fd844783          	lbu	a5,-40(s0)
   10f4a:	0107e793          	ori	a5,a5,16
   10f4e:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10f52:	fc842783          	lw	a5,-56(s0)
   10f56:	8b85                	andi	a5,a5,1
   10f58:	0ff7f793          	andi	a5,a5,255
   10f5c:	8b85                	andi	a5,a5,1
   10f5e:	0037969b          	slliw	a3,a5,0x3
   10f62:	fd844783          	lbu	a5,-40(s0)
   10f66:	9bdd                	andi	a5,a5,-9
   10f68:	873e                	mv	a4,a5
   10f6a:	87b6                	mv	a5,a3
   10f6c:	8fd9                	or	a5,a5,a4
   10f6e:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10f72:	fd844783          	lbu	a5,-40(s0)
   10f76:	f807e793          	ori	a5,a5,-128
   10f7a:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10f7e:	a09d                	j	10fe4 <mpu_enable_region+0x112>
        if (*p == 'r') {
   10f80:	fe043783          	ld	a5,-32(s0)
   10f84:	0007c783          	lbu	a5,0(a5)
   10f88:	873e                	mv	a4,a5
   10f8a:	07200793          	li	a5,114
   10f8e:	00f71863          	bne	a4,a5,10f9e <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10f92:	fd844783          	lbu	a5,-40(s0)
   10f96:	0027e793          	ori	a5,a5,2
   10f9a:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10f9e:	fe043783          	ld	a5,-32(s0)
   10fa2:	0007c783          	lbu	a5,0(a5)
   10fa6:	873e                	mv	a4,a5
   10fa8:	07700793          	li	a5,119
   10fac:	00f71863          	bne	a4,a5,10fbc <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10fb0:	fd844783          	lbu	a5,-40(s0)
   10fb4:	0017e793          	ori	a5,a5,1
   10fb8:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10fbc:	fe043783          	ld	a5,-32(s0)
   10fc0:	0007c783          	lbu	a5,0(a5)
   10fc4:	873e                	mv	a4,a5
   10fc6:	07800793          	li	a5,120
   10fca:	00f71863          	bne	a4,a5,10fda <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10fce:	fd844783          	lbu	a5,-40(s0)
   10fd2:	0047e793          	ori	a5,a5,4
   10fd6:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10fda:	fe043783          	ld	a5,-32(s0)
   10fde:	0785                	addi	a5,a5,1
   10fe0:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10fe4:	fe043783          	ld	a5,-32(s0)
   10fe8:	0007c783          	lbu	a5,0(a5)
   10fec:	fbd1                	bnez	a5,10f80 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10fee:	fd843783          	ld	a5,-40(s0)
   10ff2:	bc479073          	csrw	0xbc4,a5
}
   10ff6:	0001                	nop
   10ff8:	6426                	ld	s0,72(sp)
   10ffa:	6161                	addi	sp,sp,80
   10ffc:	8082                	ret

0000000000010ffe <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   10ffe:	7179                	addi	sp,sp,-48
   11000:	f422                	sd	s0,40(sp)
   11002:	1800                	addi	s0,sp,48
   11004:	87aa                	mv	a5,a0
   11006:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   1100a:	100007b7          	lui	a5,0x10000
   1100e:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   11012:	fe843783          	ld	a5,-24(s0)
   11016:	439c                	lw	a5,0(a5)
   11018:	2781                	sext.w	a5,a5
   1101a:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   1101e:	fe344783          	lbu	a5,-29(s0)
   11022:	f807f793          	andi	a5,a5,-128
   11026:	0ff7f793          	andi	a5,a5,255
   1102a:	f7e5                	bnez	a5,11012 <print_char+0x14>
    uart->txdata = ch;
   1102c:	fdc42703          	lw	a4,-36(s0)
   11030:	fe843783          	ld	a5,-24(s0)
   11034:	c398                	sw	a4,0(a5)
    return 0;
   11036:	4781                	li	a5,0
}
   11038:	853e                	mv	a0,a5
   1103a:	7422                	ld	s0,40(sp)
   1103c:	6145                	addi	sp,sp,48
   1103e:	8082                	ret

0000000000011040 <print_uart>:

void print_uart(const char *buf, int sz) {
   11040:	7139                	addi	sp,sp,-64
   11042:	fc22                	sd	s0,56(sp)
   11044:	0080                	addi	s0,sp,64
   11046:	fca43423          	sd	a0,-56(s0)
   1104a:	87ae                	mv	a5,a1
   1104c:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   11050:	100007b7          	lui	a5,0x10000
   11054:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   11058:	fe042623          	sw	zero,-20(s0)
   1105c:	a83d                	j	1109a <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   1105e:	fe043783          	ld	a5,-32(s0)
   11062:	439c                	lw	a5,0(a5)
   11064:	2781                	sext.w	a5,a5
   11066:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   1106a:	fdb44783          	lbu	a5,-37(s0)
   1106e:	f807f793          	andi	a5,a5,-128
   11072:	0ff7f793          	andi	a5,a5,255
   11076:	f7e5                	bnez	a5,1105e <print_uart+0x1e>
        uart->txdata = buf[i];
   11078:	fec42783          	lw	a5,-20(s0)
   1107c:	fc843703          	ld	a4,-56(s0)
   11080:	97ba                	add	a5,a5,a4
   11082:	0007c783          	lbu	a5,0(a5) # 10000000 <_end+0xffed738>
   11086:	0007871b          	sext.w	a4,a5
   1108a:	fe043783          	ld	a5,-32(s0)
   1108e:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   11090:	fec42783          	lw	a5,-20(s0)
   11094:	2785                	addiw	a5,a5,1
   11096:	fef42623          	sw	a5,-20(s0)
   1109a:	fec42703          	lw	a4,-20(s0)
   1109e:	fc442783          	lw	a5,-60(s0)
   110a2:	2701                	sext.w	a4,a4
   110a4:	2781                	sext.w	a5,a5
   110a6:	faf74ce3          	blt	a4,a5,1105e <print_uart+0x1e>
    }
}
   110aa:	0001                	nop
   110ac:	7462                	ld	s0,56(sp)
   110ae:	6121                	addi	sp,sp,64
   110b0:	8082                	ret

00000000000110b2 <print_uart_hex>:

void print_uart_hex(long val) {
   110b2:	7139                	addi	sp,sp,-64
   110b4:	fc22                	sd	s0,56(sp)
   110b6:	0080                	addi	s0,sp,64
   110b8:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   110bc:	100007b7          	lui	a5,0x10000
   110c0:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   110c4:	fe042423          	sw	zero,-24(s0)
   110c8:	a041                	j	11148 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   110ca:	fe043783          	ld	a5,-32(s0)
   110ce:	439c                	lw	a5,0(a5)
   110d0:	2781                	sext.w	a5,a5
   110d2:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   110d6:	fdb44783          	lbu	a5,-37(s0)
   110da:	f807f793          	andi	a5,a5,-128
   110de:	0ff7f793          	andi	a5,a5,255
   110e2:	f7e5                	bnez	a5,110ca <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   110e4:	473d                	li	a4,15
   110e6:	fe842783          	lw	a5,-24(s0)
   110ea:	40f707bb          	subw	a5,a4,a5
   110ee:	2781                	sext.w	a5,a5
   110f0:	0027979b          	slliw	a5,a5,0x2
   110f4:	2781                	sext.w	a5,a5
   110f6:	fc843703          	ld	a4,-56(s0)
   110fa:	40f757b3          	sra	a5,a4,a5
   110fe:	0ff7f793          	andi	a5,a5,255
   11102:	8bbd                	andi	a5,a5,15
   11104:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   11108:	fdf44783          	lbu	a5,-33(s0)
   1110c:	0ff7f713          	andi	a4,a5,255
   11110:	47a5                	li	a5,9
   11112:	00e7e963          	bltu	a5,a4,11124 <print_uart_hex+0x72>
            s = t + '0';
   11116:	fdf44783          	lbu	a5,-33(s0)
   1111a:	0307879b          	addiw	a5,a5,48
   1111e:	fef407a3          	sb	a5,-17(s0)
   11122:	a039                	j	11130 <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   11124:	fdf44783          	lbu	a5,-33(s0)
   11128:	0577879b          	addiw	a5,a5,87
   1112c:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   11130:	fef44783          	lbu	a5,-17(s0)
   11134:	0007871b          	sext.w	a4,a5
   11138:	fe043783          	ld	a5,-32(s0)
   1113c:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   1113e:	fe842783          	lw	a5,-24(s0)
   11142:	2785                	addiw	a5,a5,1
   11144:	fef42423          	sw	a5,-24(s0)
   11148:	fe842783          	lw	a5,-24(s0)
   1114c:	0007871b          	sext.w	a4,a5
   11150:	47bd                	li	a5,15
   11152:	f6e7dce3          	ble	a4,a5,110ca <print_uart_hex+0x18>
    }
}
   11156:	0001                	nop
   11158:	7462                	ld	s0,56(sp)
   1115a:	6121                	addi	sp,sp,64
   1115c:	8082                	ret

000000000001115e <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   1115e:	7119                	addi	sp,sp,-128
   11160:	fc86                	sd	ra,120(sp)
   11162:	f8a2                	sd	s0,112(sp)
   11164:	0100                	addi	s0,sp,128
   11166:	f8a43c23          	sd	a0,-104(s0)
   1116a:	87ae                	mv	a5,a1
   1116c:	8736                	mv	a4,a3
   1116e:	f8f42a23          	sw	a5,-108(s0)
   11172:	87b2                	mv	a5,a2
   11174:	f8f42823          	sw	a5,-112(s0)
   11178:	87ba                	mv	a5,a4
   1117a:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   1117e:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   11182:	f9442783          	lw	a5,-108(s0)
   11186:	f9843703          	ld	a4,-104(s0)
   1118a:	02f776b3          	remu	a3,a4,a5
   1118e:	fec42783          	lw	a5,-20(s0)
   11192:	0017871b          	addiw	a4,a5,1
   11196:	fee42623          	sw	a4,-20(s0)
   1119a:	0ff6f713          	andi	a4,a3,255
   1119e:	ff040693          	addi	a3,s0,-16
   111a2:	97b6                	add	a5,a5,a3
   111a4:	fae78c23          	sb	a4,-72(a5) # fffffb8 <_end+0xffed6f0>
        if (num < base) {
   111a8:	f9442783          	lw	a5,-108(s0)
   111ac:	f9843703          	ld	a4,-104(s0)
   111b0:	00f76b63          	bltu	a4,a5,111c6 <printnum+0x68>
            break;
        }
        num /= base;
   111b4:	f9442783          	lw	a5,-108(s0)
   111b8:	f9843703          	ld	a4,-104(s0)
   111bc:	02f757b3          	divu	a5,a4,a5
   111c0:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   111c4:	bf7d                	j	11182 <printnum+0x24>
            break;
   111c6:	0001                	nop
    }

    while (width-- > pos) {
   111c8:	a801                	j	111d8 <printnum+0x7a>
        print_char(padc);
   111ca:	f8c42783          	lw	a5,-116(s0)
   111ce:	853e                	mv	a0,a5
   111d0:	00000097          	auipc	ra,0x0
   111d4:	e2e080e7          	jalr	-466(ra) # 10ffe <print_char>
    while (width-- > pos) {
   111d8:	f9042783          	lw	a5,-112(s0)
   111dc:	fff7871b          	addiw	a4,a5,-1
   111e0:	f8e42823          	sw	a4,-112(s0)
   111e4:	fec42703          	lw	a4,-20(s0)
   111e8:	2701                	sext.w	a4,a4
   111ea:	fef740e3          	blt	a4,a5,111ca <printnum+0x6c>
    }


    while (pos-- > 0) {
   111ee:	a089                	j	11230 <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   111f0:	fec42783          	lw	a5,-20(s0)
   111f4:	ff040713          	addi	a4,s0,-16
   111f8:	97ba                	add	a5,a5,a4
   111fa:	fb87c783          	lbu	a5,-72(a5)
   111fe:	0007871b          	sext.w	a4,a5
   11202:	fec42783          	lw	a5,-20(s0)
   11206:	ff040693          	addi	a3,s0,-16
   1120a:	97b6                	add	a5,a5,a3
   1120c:	fb87c783          	lbu	a5,-72(a5)
   11210:	86be                	mv	a3,a5
   11212:	47a5                	li	a5,9
   11214:	00d7f563          	bleu	a3,a5,1121e <printnum+0xc0>
   11218:	05700793          	li	a5,87
   1121c:	a019                	j	11222 <printnum+0xc4>
   1121e:	03000793          	li	a5,48
   11222:	9fb9                	addw	a5,a5,a4
   11224:	2781                	sext.w	a5,a5
   11226:	853e                	mv	a0,a5
   11228:	00000097          	auipc	ra,0x0
   1122c:	dd6080e7          	jalr	-554(ra) # 10ffe <print_char>
    while (pos-- > 0) {
   11230:	fec42783          	lw	a5,-20(s0)
   11234:	fff7871b          	addiw	a4,a5,-1
   11238:	fee42623          	sw	a4,-20(s0)
   1123c:	faf04ae3          	bgtz	a5,111f0 <printnum+0x92>
    }
}
   11240:	0001                	nop
   11242:	70e6                	ld	ra,120(sp)
   11244:	7446                	ld	s0,112(sp)
   11246:	6109                	addi	sp,sp,128
   11248:	8082                	ret

000000000001124a <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   1124a:	1101                	addi	sp,sp,-32
   1124c:	ec22                	sd	s0,24(sp)
   1124e:	1000                	addi	s0,sp,32
   11250:	fea43423          	sd	a0,-24(s0)
   11254:	87ae                	mv	a5,a1
   11256:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   1125a:	fe442783          	lw	a5,-28(s0)
   1125e:	0007871b          	sext.w	a4,a5
   11262:	4785                	li	a5,1
   11264:	00e7dc63          	ble	a4,a5,1127c <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   11268:	fe843783          	ld	a5,-24(s0)
   1126c:	639c                	ld	a5,0(a5)
   1126e:	00878693          	addi	a3,a5,8
   11272:	fe843703          	ld	a4,-24(s0)
   11276:	e314                	sd	a3,0(a4)
   11278:	639c                	ld	a5,0(a5)
   1127a:	a815                	j	112ae <getuint+0x64>
    } else if (lflag) {
   1127c:	fe442783          	lw	a5,-28(s0)
   11280:	2781                	sext.w	a5,a5
   11282:	cb99                	beqz	a5,11298 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   11284:	fe843783          	ld	a5,-24(s0)
   11288:	639c                	ld	a5,0(a5)
   1128a:	00878693          	addi	a3,a5,8
   1128e:	fe843703          	ld	a4,-24(s0)
   11292:	e314                	sd	a3,0(a4)
   11294:	639c                	ld	a5,0(a5)
   11296:	a821                	j	112ae <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   11298:	fe843783          	ld	a5,-24(s0)
   1129c:	639c                	ld	a5,0(a5)
   1129e:	00878693          	addi	a3,a5,8
   112a2:	fe843703          	ld	a4,-24(s0)
   112a6:	e314                	sd	a3,0(a4)
   112a8:	439c                	lw	a5,0(a5)
   112aa:	1782                	slli	a5,a5,0x20
   112ac:	9381                	srli	a5,a5,0x20
}
   112ae:	853e                	mv	a0,a5
   112b0:	6462                	ld	s0,24(sp)
   112b2:	6105                	addi	sp,sp,32
   112b4:	8082                	ret

00000000000112b6 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   112b6:	1101                	addi	sp,sp,-32
   112b8:	ec22                	sd	s0,24(sp)
   112ba:	1000                	addi	s0,sp,32
   112bc:	fea43423          	sd	a0,-24(s0)
   112c0:	87ae                	mv	a5,a1
   112c2:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   112c6:	fe442783          	lw	a5,-28(s0)
   112ca:	0007871b          	sext.w	a4,a5
   112ce:	4785                	li	a5,1
   112d0:	00e7dc63          	ble	a4,a5,112e8 <getint+0x32>
        return va_arg(*ap, long long);
   112d4:	fe843783          	ld	a5,-24(s0)
   112d8:	639c                	ld	a5,0(a5)
   112da:	00878693          	addi	a3,a5,8
   112de:	fe843703          	ld	a4,-24(s0)
   112e2:	e314                	sd	a3,0(a4)
   112e4:	639c                	ld	a5,0(a5)
   112e6:	a805                	j	11316 <getint+0x60>
    } else if (lflag) {
   112e8:	fe442783          	lw	a5,-28(s0)
   112ec:	2781                	sext.w	a5,a5
   112ee:	cb99                	beqz	a5,11304 <getint+0x4e>
        return va_arg(*ap, long);
   112f0:	fe843783          	ld	a5,-24(s0)
   112f4:	639c                	ld	a5,0(a5)
   112f6:	00878693          	addi	a3,a5,8
   112fa:	fe843703          	ld	a4,-24(s0)
   112fe:	e314                	sd	a3,0(a4)
   11300:	639c                	ld	a5,0(a5)
   11302:	a811                	j	11316 <getint+0x60>
    }
    return va_arg(*ap, int);
   11304:	fe843783          	ld	a5,-24(s0)
   11308:	639c                	ld	a5,0(a5)
   1130a:	00878693          	addi	a3,a5,8
   1130e:	fe843703          	ld	a4,-24(s0)
   11312:	e314                	sd	a3,0(a4)
   11314:	439c                	lw	a5,0(a5)
}
   11316:	853e                	mv	a0,a5
   11318:	6462                	ld	s0,24(sp)
   1131a:	6105                	addi	sp,sp,32
   1131c:	8082                	ret

000000000001131e <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   1131e:	711d                	addi	sp,sp,-96
   11320:	ec86                	sd	ra,88(sp)
   11322:	e8a2                	sd	s0,80(sp)
   11324:	e4a6                	sd	s1,72(sp)
   11326:	e0ca                	sd	s2,64(sp)
   11328:	1080                	addi	s0,sp,96
   1132a:	faa43423          	sd	a0,-88(s0)
   1132e:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   11332:	a819                	j	11348 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   11334:	2c048d63          	beqz	s1,1160e <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   11338:	fa843783          	ld	a5,-88(s0)
   1133c:	0785                	addi	a5,a5,1
   1133e:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   11342:	8526                	mv	a0,s1
   11344:	cbbff0ef          	jal	ra,10ffe <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   11348:	fa843783          	ld	a5,-88(s0)
   1134c:	0007c783          	lbu	a5,0(a5)
   11350:	0007849b          	sext.w	s1,a5
   11354:	8726                	mv	a4,s1
   11356:	02500793          	li	a5,37
   1135a:	fcf71de3          	bne	a4,a5,11334 <vprintfmt_lib+0x16>
        }
        fmt++;
   1135e:	fa843783          	ld	a5,-88(s0)
   11362:	0785                	addi	a5,a5,1
   11364:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   11368:	fa843783          	ld	a5,-88(s0)
   1136c:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   11370:	02000793          	li	a5,32
   11374:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   11378:	57fd                	li	a5,-1
   1137a:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   1137e:	57fd                	li	a5,-1
   11380:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   11384:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   11388:	fa843783          	ld	a5,-88(s0)
   1138c:	00178713          	addi	a4,a5,1
   11390:	fae43423          	sd	a4,-88(s0)
   11394:	0007c783          	lbu	a5,0(a5)
   11398:	0007849b          	sext.w	s1,a5
   1139c:	fdd4869b          	addiw	a3,s1,-35
   113a0:	0006871b          	sext.w	a4,a3
   113a4:	05500793          	li	a5,85
   113a8:	24e7e963          	bltu	a5,a4,115fa <vprintfmt_lib+0x2dc>
   113ac:	02069793          	slli	a5,a3,0x20
   113b0:	9381                	srli	a5,a5,0x20
   113b2:	00279713          	slli	a4,a5,0x2
   113b6:	67c9                	lui	a5,0x12
   113b8:	4a078793          	addi	a5,a5,1184 # 124a0 <strnlen+0x124>
   113bc:	97ba                	add	a5,a5,a4
   113be:	439c                	lw	a5,0(a5)
   113c0:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   113c2:	02d00793          	li	a5,45
   113c6:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   113ca:	bf7d                	j	11388 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   113cc:	03000793          	li	a5,48
   113d0:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   113d4:	bf55                	j	11388 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   113d6:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   113da:	fc842703          	lw	a4,-56(s0)
   113de:	87ba                	mv	a5,a4
   113e0:	0027979b          	slliw	a5,a5,0x2
   113e4:	9fb9                	addw	a5,a5,a4
   113e6:	0017979b          	slliw	a5,a5,0x1
   113ea:	2781                	sext.w	a5,a5
   113ec:	9fa5                	addw	a5,a5,s1
   113ee:	2781                	sext.w	a5,a5
   113f0:	fd07879b          	addiw	a5,a5,-48
   113f4:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   113f8:	fa843783          	ld	a5,-88(s0)
   113fc:	0007c783          	lbu	a5,0(a5)
   11400:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   11404:	8726                	mv	a4,s1
   11406:	02f00793          	li	a5,47
   1140a:	02e7df63          	ble	a4,a5,11448 <vprintfmt_lib+0x12a>
   1140e:	8726                	mv	a4,s1
   11410:	03900793          	li	a5,57
   11414:	02e7ca63          	blt	a5,a4,11448 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   11418:	fa843783          	ld	a5,-88(s0)
   1141c:	0785                	addi	a5,a5,1
   1141e:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   11422:	bf65                	j	113da <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   11424:	fa043783          	ld	a5,-96(s0)
   11428:	00878713          	addi	a4,a5,8
   1142c:	fae43023          	sd	a4,-96(s0)
   11430:	439c                	lw	a5,0(a5)
   11432:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   11436:	a811                	j	1144a <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   11438:	fcc42783          	lw	a5,-52(s0)
   1143c:	2781                	sext.w	a5,a5
   1143e:	f407d5e3          	bgez	a5,11388 <vprintfmt_lib+0x6a>
                width = 0;
   11442:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   11446:	b789                	j	11388 <vprintfmt_lib+0x6a>
            goto process_precision;
   11448:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   1144a:	fcc42783          	lw	a5,-52(s0)
   1144e:	2781                	sext.w	a5,a5
   11450:	f207dce3          	bgez	a5,11388 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   11454:	fc842783          	lw	a5,-56(s0)
   11458:	fcf42623          	sw	a5,-52(s0)
   1145c:	57fd                	li	a5,-1
   1145e:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   11462:	b71d                	j	11388 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   11464:	fd042783          	lw	a5,-48(s0)
   11468:	2785                	addiw	a5,a5,1
   1146a:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   1146e:	bf29                	j	11388 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   11470:	fa043783          	ld	a5,-96(s0)
   11474:	00878713          	addi	a4,a5,8
   11478:	fae43023          	sd	a4,-96(s0)
   1147c:	439c                	lw	a5,0(a5)
   1147e:	853e                	mv	a0,a5
   11480:	b7fff0ef          	jal	ra,10ffe <print_char>
            break;
   11484:	a261                	j	1160c <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   11486:	fa043783          	ld	a5,-96(s0)
   1148a:	00878713          	addi	a4,a5,8
   1148e:	fae43023          	sd	a4,-96(s0)
   11492:	0007b903          	ld	s2,0(a5)
   11496:	00091563          	bnez	s2,114a0 <vprintfmt_lib+0x182>
                p = "(null)";
   1149a:	67c9                	lui	a5,0x12
   1149c:	49878913          	addi	s2,a5,1176 # 12498 <strnlen+0x11c>
            }
            if (width > 0 && padc != '-') {
   114a0:	fcc42783          	lw	a5,-52(s0)
   114a4:	2781                	sext.w	a5,a5
   114a6:	06f05263          	blez	a5,1150a <vprintfmt_lib+0x1ec>
   114aa:	fc744783          	lbu	a5,-57(s0)
   114ae:	0ff7f713          	andi	a4,a5,255
   114b2:	02d00793          	li	a5,45
   114b6:	04f70a63          	beq	a4,a5,1150a <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   114ba:	fc842783          	lw	a5,-56(s0)
   114be:	85be                	mv	a1,a5
   114c0:	854a                	mv	a0,s2
   114c2:	6bb000ef          	jal	ra,1237c <strnlen>
   114c6:	87aa                	mv	a5,a0
   114c8:	873e                	mv	a4,a5
   114ca:	fcc42783          	lw	a5,-52(s0)
   114ce:	9f99                	subw	a5,a5,a4
   114d0:	fcf42623          	sw	a5,-52(s0)
   114d4:	a821                	j	114ec <vprintfmt_lib+0x1ce>
                    print_char(padc);
   114d6:	fc744783          	lbu	a5,-57(s0)
   114da:	2781                	sext.w	a5,a5
   114dc:	853e                	mv	a0,a5
   114de:	b21ff0ef          	jal	ra,10ffe <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   114e2:	fcc42783          	lw	a5,-52(s0)
   114e6:	37fd                	addiw	a5,a5,-1
   114e8:	fcf42623          	sw	a5,-52(s0)
   114ec:	fcc42783          	lw	a5,-52(s0)
   114f0:	2781                	sext.w	a5,a5
   114f2:	fef042e3          	bgtz	a5,114d6 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   114f6:	a811                	j	1150a <vprintfmt_lib+0x1ec>
                print_char(ch);
   114f8:	8526                	mv	a0,s1
   114fa:	b05ff0ef          	jal	ra,10ffe <print_char>
                p++;
   114fe:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   11500:	fcc42783          	lw	a5,-52(s0)
   11504:	37fd                	addiw	a5,a5,-1
   11506:	fcf42623          	sw	a5,-52(s0)
   1150a:	00094783          	lbu	a5,0(s2)
   1150e:	0007849b          	sext.w	s1,a5
   11512:	c895                	beqz	s1,11546 <vprintfmt_lib+0x228>
   11514:	fc842783          	lw	a5,-56(s0)
   11518:	2781                	sext.w	a5,a5
   1151a:	fc07cfe3          	bltz	a5,114f8 <vprintfmt_lib+0x1da>
   1151e:	fc842783          	lw	a5,-56(s0)
   11522:	37fd                	addiw	a5,a5,-1
   11524:	fcf42423          	sw	a5,-56(s0)
   11528:	fc842783          	lw	a5,-56(s0)
   1152c:	2781                	sext.w	a5,a5
   1152e:	fc07d5e3          	bgez	a5,114f8 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   11532:	a811                	j	11546 <vprintfmt_lib+0x228>
                print_char(' ');
   11534:	02000513          	li	a0,32
   11538:	ac7ff0ef          	jal	ra,10ffe <print_char>
            for (; width > 0; width--) {
   1153c:	fcc42783          	lw	a5,-52(s0)
   11540:	37fd                	addiw	a5,a5,-1
   11542:	fcf42623          	sw	a5,-52(s0)
   11546:	fcc42783          	lw	a5,-52(s0)
   1154a:	2781                	sext.w	a5,a5
   1154c:	fef044e3          	bgtz	a5,11534 <vprintfmt_lib+0x216>
            }
            break;
   11550:	a875                	j	1160c <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   11552:	fd042703          	lw	a4,-48(s0)
   11556:	fa040793          	addi	a5,s0,-96
   1155a:	85ba                	mv	a1,a4
   1155c:	853e                	mv	a0,a5
   1155e:	00000097          	auipc	ra,0x0
   11562:	d58080e7          	jalr	-680(ra) # 112b6 <getint>
   11566:	87aa                	mv	a5,a0
   11568:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   1156c:	fd843783          	ld	a5,-40(s0)
   11570:	0007dc63          	bgez	a5,11588 <vprintfmt_lib+0x26a>
                print_char('-');
   11574:	02d00513          	li	a0,45
   11578:	a87ff0ef          	jal	ra,10ffe <print_char>
                num = -(long long) num;
   1157c:	fd843783          	ld	a5,-40(s0)
   11580:	40f007b3          	neg	a5,a5
   11584:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   11588:	47a9                	li	a5,10
   1158a:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   1158e:	a089                	j	115d0 <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   11590:	47a9                	li	a5,10
   11592:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   11596:	a01d                	j	115bc <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   11598:	47a1                	li	a5,8
   1159a:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   1159e:	a839                	j	115bc <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   115a0:	4785                	li	a5,1
   115a2:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   115a6:	03000513          	li	a0,48
   115aa:	a55ff0ef          	jal	ra,10ffe <print_char>
            print_char('x');
   115ae:	07800513          	li	a0,120
   115b2:	a4dff0ef          	jal	ra,10ffe <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   115b6:	47c1                	li	a5,16
   115b8:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   115bc:	fd042703          	lw	a4,-48(s0)
   115c0:	fa040793          	addi	a5,s0,-96
   115c4:	85ba                	mv	a1,a4
   115c6:	853e                	mv	a0,a5
   115c8:	c83ff0ef          	jal	ra,1124a <getuint>
   115cc:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   115d0:	fc744783          	lbu	a5,-57(s0)
   115d4:	0007869b          	sext.w	a3,a5
   115d8:	fcc42703          	lw	a4,-52(s0)
   115dc:	fd442783          	lw	a5,-44(s0)
   115e0:	863a                	mv	a2,a4
   115e2:	85be                	mv	a1,a5
   115e4:	fd843503          	ld	a0,-40(s0)
   115e8:	00000097          	auipc	ra,0x0
   115ec:	b76080e7          	jalr	-1162(ra) # 1115e <printnum>
            break;
   115f0:	a831                	j	1160c <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   115f2:	8526                	mv	a0,s1
   115f4:	a0bff0ef          	jal	ra,10ffe <print_char>
            break;
   115f8:	a811                	j	1160c <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   115fa:	02500513          	li	a0,37
   115fe:	a01ff0ef          	jal	ra,10ffe <print_char>
            fmt = last_fmt;
   11602:	fb843783          	ld	a5,-72(s0)
   11606:	faf43423          	sd	a5,-88(s0)
            break;
   1160a:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   1160c:	bb35                	j	11348 <vprintfmt_lib+0x2a>
                return;
   1160e:	0001                	nop
        }
    }
}
   11610:	60e6                	ld	ra,88(sp)
   11612:	6446                	ld	s0,80(sp)
   11614:	64a6                	ld	s1,72(sp)
   11616:	6906                	ld	s2,64(sp)
   11618:	6125                	addi	sp,sp,96
   1161a:	8082                	ret

000000000001161c <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   1161c:	7159                	addi	sp,sp,-112
   1161e:	f406                	sd	ra,40(sp)
   11620:	f022                	sd	s0,32(sp)
   11622:	1800                	addi	s0,sp,48
   11624:	fca43c23          	sd	a0,-40(s0)
   11628:	e40c                	sd	a1,8(s0)
   1162a:	e810                	sd	a2,16(s0)
   1162c:	ec14                	sd	a3,24(s0)
   1162e:	f018                	sd	a4,32(s0)
   11630:	f41c                	sd	a5,40(s0)
   11632:	03043823          	sd	a6,48(s0)
   11636:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   1163a:	04040793          	addi	a5,s0,64
   1163e:	fc878793          	addi	a5,a5,-56
   11642:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   11646:	fe843783          	ld	a5,-24(s0)
   1164a:	85be                	mv	a1,a5
   1164c:	fd843503          	ld	a0,-40(s0)
   11650:	00000097          	auipc	ra,0x0
   11654:	cce080e7          	jalr	-818(ra) # 1131e <vprintfmt_lib>

    va_end(arg);
}
   11658:	0001                	nop
   1165a:	70a2                	ld	ra,40(sp)
   1165c:	7402                	ld	s0,32(sp)
   1165e:	6165                	addi	sp,sp,112
   11660:	8082                	ret

0000000000011662 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11662:	715d                	addi	sp,sp,-80
   11664:	e4a2                	sd	s0,72(sp)
   11666:	0880                	addi	s0,sp,80
   11668:	faa43c23          	sd	a0,-72(s0)
   1166c:	87ae                	mv	a5,a1
   1166e:	8732                	mv	a4,a2
   11670:	faf41b23          	sh	a5,-74(s0)
   11674:	87ba                	mv	a5,a4
   11676:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1167a:	fb843783          	ld	a5,-72(s0)
   1167e:	479c                	lw	a5,8(a5)
   11680:	0087d79b          	srliw	a5,a5,0x8
   11684:	2781                	sext.w	a5,a5
   11686:	2781                	sext.w	a5,a5
   11688:	0ff7f793          	andi	a5,a5,255
   1168c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   11690:	fb843783          	ld	a5,-72(s0)
   11694:	479c                	lw	a5,8(a5)
   11696:	0107d79b          	srliw	a5,a5,0x10
   1169a:	2781                	sext.w	a5,a5
   1169c:	2781                	sext.w	a5,a5
   1169e:	0ff7f793          	andi	a5,a5,255
   116a2:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   116a6:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   116aa:	fe042423          	sw	zero,-24(s0)
   116ae:	a82d                	j	116e8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   116b0:	fec42783          	lw	a5,-20(s0)
   116b4:	04078793          	addi	a5,a5,64
   116b8:	fb843703          	ld	a4,-72(s0)
   116bc:	97ba                	add	a5,a5,a4
   116be:	639c                	ld	a5,0(a5)
   116c0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   116c4:	fb843703          	ld	a4,-72(s0)
   116c8:	fec42783          	lw	a5,-20(s0)
   116cc:	97ba                	add	a5,a5,a4
   116ce:	0407c783          	lbu	a5,64(a5)
   116d2:	2781                	sext.w	a5,a5
   116d4:	fec42703          	lw	a4,-20(s0)
   116d8:	9fb9                	addw	a5,a5,a4
   116da:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   116de:	fe842783          	lw	a5,-24(s0)
   116e2:	2785                	addiw	a5,a5,1
   116e4:	fef42423          	sw	a5,-24(s0)
   116e8:	fe842703          	lw	a4,-24(s0)
   116ec:	fdc42783          	lw	a5,-36(s0)
   116f0:	2701                	sext.w	a4,a4
   116f2:	2781                	sext.w	a5,a5
   116f4:	faf74ee3          	blt	a4,a5,116b0 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   116f8:	fe042223          	sw	zero,-28(s0)
   116fc:	a8b5                	j	11778 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   116fe:	fec42783          	lw	a5,-20(s0)
   11702:	04078793          	addi	a5,a5,64
   11706:	fb843703          	ld	a4,-72(s0)
   1170a:	97ba                	add	a5,a5,a4
   1170c:	639c                	ld	a5,0(a5)
   1170e:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11712:	fec42783          	lw	a5,-20(s0)
   11716:	27a1                	addiw	a5,a5,8
   11718:	2781                	sext.w	a5,a5
   1171a:	04078793          	addi	a5,a5,64
   1171e:	fb843703          	ld	a4,-72(s0)
   11722:	97ba                	add	a5,a5,a4
   11724:	639c                	ld	a5,0(a5)
   11726:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   1172a:	fc645783          	lhu	a5,-58(s0)
   1172e:	fb645703          	lhu	a4,-74(s0)
   11732:	2701                	sext.w	a4,a4
   11734:	2781                	sext.w	a5,a5
   11736:	00f71f63          	bne	a4,a5,11754 <get_dev_bar+0xf2>
   1173a:	fc445783          	lhu	a5,-60(s0)
   1173e:	fb445703          	lhu	a4,-76(s0)
   11742:	2701                	sext.w	a4,a4
   11744:	2781                	sext.w	a5,a5
   11746:	00f71763          	bne	a4,a5,11754 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1174a:	fcc42783          	lw	a5,-52(s0)
   1174e:	1782                	slli	a5,a5,0x20
   11750:	9381                	srli	a5,a5,0x20
   11752:	a825                	j	1178a <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11754:	fb843703          	ld	a4,-72(s0)
   11758:	fec42783          	lw	a5,-20(s0)
   1175c:	97ba                	add	a5,a5,a4
   1175e:	0407c783          	lbu	a5,64(a5)
   11762:	2781                	sext.w	a5,a5
   11764:	fec42703          	lw	a4,-20(s0)
   11768:	9fb9                	addw	a5,a5,a4
   1176a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1176e:	fe442783          	lw	a5,-28(s0)
   11772:	2785                	addiw	a5,a5,1
   11774:	fef42223          	sw	a5,-28(s0)
   11778:	fe442703          	lw	a4,-28(s0)
   1177c:	fe042783          	lw	a5,-32(s0)
   11780:	2701                	sext.w	a4,a4
   11782:	2781                	sext.w	a5,a5
   11784:	f6f74de3          	blt	a4,a5,116fe <get_dev_bar+0x9c>
    return DEV_NONE;
   11788:	57fd                	li	a5,-1
}
   1178a:	853e                	mv	a0,a5
   1178c:	6426                	ld	s0,72(sp)
   1178e:	6161                	addi	sp,sp,80
   11790:	8082                	ret

0000000000011792 <mpu_region_total>:
static int mpu_region_total() {
   11792:	1101                	addi	sp,sp,-32
   11794:	ec22                	sd	s0,24(sp)
   11796:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11798:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1179c:	bc4027f3          	csrr	a5,0xbc4
   117a0:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   117a4:	fe843783          	ld	a5,-24(s0)
   117a8:	83a1                	srli	a5,a5,0x8
   117aa:	2781                	sext.w	a5,a5
}
   117ac:	853e                	mv	a0,a5
   117ae:	6462                	ld	s0,24(sp)
   117b0:	6105                	addi	sp,sp,32
   117b2:	8082                	ret

00000000000117b4 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   117b4:	7179                	addi	sp,sp,-48
   117b6:	f422                	sd	s0,40(sp)
   117b8:	1800                	addi	s0,sp,48
   117ba:	87aa                	mv	a5,a0
   117bc:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   117c0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   117c4:	fdc42783          	lw	a5,-36(s0)
   117c8:	0ff7f793          	andi	a5,a5,255
   117cc:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   117d0:	fe844783          	lbu	a5,-24(s0)
   117d4:	f807e793          	ori	a5,a5,-128
   117d8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   117dc:	fe843783          	ld	a5,-24(s0)
   117e0:	bc479073          	csrw	0xbc4,a5
}
   117e4:	0001                	nop
   117e6:	7422                	ld	s0,40(sp)
   117e8:	6145                	addi	sp,sp,48
   117ea:	8082                	ret

00000000000117ec <mpu_enable_region>:
                       const char *rwx) {
   117ec:	715d                	addi	sp,sp,-80
   117ee:	e4a2                	sd	s0,72(sp)
   117f0:	0880                	addi	s0,sp,80
   117f2:	87aa                	mv	a5,a0
   117f4:	fcb43023          	sd	a1,-64(s0)
   117f8:	fac43c23          	sd	a2,-72(s0)
   117fc:	fae43823          	sd	a4,-80(s0)
   11800:	fcf42623          	sw	a5,-52(s0)
   11804:	87b6                	mv	a5,a3
   11806:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   1180a:	c0000793          	li	a5,-1024
   1180e:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11812:	fb043783          	ld	a5,-80(s0)
   11816:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   1181a:	fc043783          	ld	a5,-64(s0)
   1181e:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11822:	fb843783          	ld	a5,-72(s0)
   11826:	8385                	srli	a5,a5,0x1
   11828:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1182c:	a819                	j	11842 <mpu_enable_region+0x56>
        mask <<= 1;
   1182e:	fe843783          	ld	a5,-24(s0)
   11832:	0786                	slli	a5,a5,0x1
   11834:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11838:	fb843783          	ld	a5,-72(s0)
   1183c:	8385                	srli	a5,a5,0x1
   1183e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11842:	fb843783          	ld	a5,-72(s0)
   11846:	f7e5                	bnez	a5,1182e <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11848:	fe843783          	ld	a5,-24(s0)
   1184c:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   11850:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11854:	fcc42783          	lw	a5,-52(s0)
   11858:	0ff7f793          	andi	a5,a5,255
   1185c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   11860:	fd844783          	lbu	a5,-40(s0)
   11864:	0107e793          	ori	a5,a5,16
   11868:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1186c:	fc842783          	lw	a5,-56(s0)
   11870:	8b85                	andi	a5,a5,1
   11872:	0ff7f793          	andi	a5,a5,255
   11876:	8b85                	andi	a5,a5,1
   11878:	0037969b          	slliw	a3,a5,0x3
   1187c:	fd844783          	lbu	a5,-40(s0)
   11880:	9bdd                	andi	a5,a5,-9
   11882:	873e                	mv	a4,a5
   11884:	87b6                	mv	a5,a3
   11886:	8fd9                	or	a5,a5,a4
   11888:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1188c:	fd844783          	lbu	a5,-40(s0)
   11890:	f807e793          	ori	a5,a5,-128
   11894:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11898:	a09d                	j	118fe <mpu_enable_region+0x112>
        if (*p == 'r') {
   1189a:	fe043783          	ld	a5,-32(s0)
   1189e:	0007c783          	lbu	a5,0(a5)
   118a2:	873e                	mv	a4,a5
   118a4:	07200793          	li	a5,114
   118a8:	00f71863          	bne	a4,a5,118b8 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   118ac:	fd844783          	lbu	a5,-40(s0)
   118b0:	0027e793          	ori	a5,a5,2
   118b4:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   118b8:	fe043783          	ld	a5,-32(s0)
   118bc:	0007c783          	lbu	a5,0(a5)
   118c0:	873e                	mv	a4,a5
   118c2:	07700793          	li	a5,119
   118c6:	00f71863          	bne	a4,a5,118d6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   118ca:	fd844783          	lbu	a5,-40(s0)
   118ce:	0017e793          	ori	a5,a5,1
   118d2:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   118d6:	fe043783          	ld	a5,-32(s0)
   118da:	0007c783          	lbu	a5,0(a5)
   118de:	873e                	mv	a4,a5
   118e0:	07800793          	li	a5,120
   118e4:	00f71863          	bne	a4,a5,118f4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   118e8:	fd844783          	lbu	a5,-40(s0)
   118ec:	0047e793          	ori	a5,a5,4
   118f0:	fcf40c23          	sb	a5,-40(s0)
        p++;
   118f4:	fe043783          	ld	a5,-32(s0)
   118f8:	0785                	addi	a5,a5,1
   118fa:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   118fe:	fe043783          	ld	a5,-32(s0)
   11902:	0007c783          	lbu	a5,0(a5)
   11906:	fbd1                	bnez	a5,1189a <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11908:	fd843783          	ld	a5,-40(s0)
   1190c:	bc479073          	csrw	0xbc4,a5
}
   11910:	0001                	nop
   11912:	6426                	ld	s0,72(sp)
   11914:	6161                	addi	sp,sp,80
   11916:	8082                	ret

0000000000011918 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   11918:	1141                	addi	sp,sp,-16
   1191a:	e422                	sd	s0,8(sp)
   1191c:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   1191e:	0001                	nop
   11920:	6422                	ld	s0,8(sp)
   11922:	0141                	addi	sp,sp,16
   11924:	8082                	ret

0000000000011926 <sd_get_byte>:

uint8_t sd_get_byte() {
   11926:	1101                	addi	sp,sp,-32
   11928:	ec22                	sd	s0,24(sp)
   1192a:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   1192c:	100507b7          	lui	a5,0x10050
   11930:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   11934:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   11938:	fe843783          	ld	a5,-24(s0)
   1193c:	47fc                	lw	a5,76(a5)
   1193e:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   11942:	fe442783          	lw	a5,-28(s0)
   11946:	fe07c9e3          	bltz	a5,11938 <sd_get_byte+0x12>
    return (uint8_t)rx;
   1194a:	fe442783          	lw	a5,-28(s0)
   1194e:	0ff7f793          	andi	a5,a5,255
}
   11952:	853e                	mv	a0,a5
   11954:	6462                	ld	s0,24(sp)
   11956:	6105                	addi	sp,sp,32
   11958:	8082                	ret

000000000001195a <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   1195a:	7179                	addi	sp,sp,-48
   1195c:	f422                	sd	s0,40(sp)
   1195e:	1800                	addi	s0,sp,48
   11960:	87aa                	mv	a5,a0
   11962:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11966:	100507b7          	lui	a5,0x10050
   1196a:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   1196e:	0001                	nop
   11970:	fe843783          	ld	a5,-24(s0)
   11974:	47bc                	lw	a5,72(a5)
   11976:	2781                	sext.w	a5,a5
   11978:	2781                	sext.w	a5,a5
   1197a:	fe07cbe3          	bltz	a5,11970 <sd_set_byte+0x16>
    p->txdata = v;
   1197e:	fdf44783          	lbu	a5,-33(s0)
   11982:	0007871b          	sext.w	a4,a5
   11986:	fe843783          	ld	a5,-24(s0)
   1198a:	c7b8                	sw	a4,72(a5)
}
   1198c:	0001                	nop
   1198e:	7422                	ld	s0,40(sp)
   11990:	6145                	addi	sp,sp,48
   11992:	8082                	ret

0000000000011994 <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   11994:	7179                	addi	sp,sp,-48
   11996:	f406                	sd	ra,40(sp)
   11998:	f022                	sd	s0,32(sp)
   1199a:	1800                	addi	s0,sp,48
   1199c:	fca43c23          	sd	a0,-40(s0)
   119a0:	87ae                	mv	a5,a1
   119a2:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   119a6:	100507b7          	lui	a5,0x10050
   119aa:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   119ae:	f79ff0ef          	jal	ra,11926 <sd_get_byte>
   119b2:	87aa                	mv	a5,a0
   119b4:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   119b8:	a831                	j	119d4 <sd_read_block+0x40>
       *buf = sd_get_byte();
   119ba:	f6dff0ef          	jal	ra,11926 <sd_get_byte>
   119be:	87aa                	mv	a5,a0
   119c0:	873e                	mv	a4,a5
   119c2:	fd843783          	ld	a5,-40(s0)
   119c6:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003d738>
       buf++;
   119ca:	fd843783          	ld	a5,-40(s0)
   119ce:	0785                	addi	a5,a5,1
   119d0:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   119d4:	fd442783          	lw	a5,-44(s0)
   119d8:	fff7871b          	addiw	a4,a5,-1
   119dc:	fce42a23          	sw	a4,-44(s0)
   119e0:	ffe9                	bnez	a5,119ba <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   119e2:	f45ff0ef          	jal	ra,11926 <sd_get_byte>
   119e6:	87aa                	mv	a5,a0
   119e8:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   119ec:	f3bff0ef          	jal	ra,11926 <sd_get_byte>
   119f0:	87aa                	mv	a5,a0
   119f2:	fef40323          	sb	a5,-26(s0)
}
   119f6:	0001                	nop
   119f8:	70a2                	ld	ra,40(sp)
   119fa:	7402                	ld	s0,32(sp)
   119fc:	6145                	addi	sp,sp,48
   119fe:	8082                	ret

0000000000011a00 <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   11a00:	7179                	addi	sp,sp,-48
   11a02:	f406                	sd	ra,40(sp)
   11a04:	f022                	sd	s0,32(sp)
   11a06:	1800                	addi	s0,sp,48
   11a08:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a0c:	100507b7          	lui	a5,0x10050
   11a10:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   11a14:	05200513          	li	a0,82
   11a18:	f43ff0ef          	jal	ra,1195a <sd_set_byte>
    sd_set_byte(0x00);
   11a1c:	4501                	li	a0,0
   11a1e:	f3dff0ef          	jal	ra,1195a <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11a22:	fd843783          	ld	a5,-40(s0)
   11a26:	83c1                	srli	a5,a5,0x10
   11a28:	0ff7f793          	andi	a5,a5,255
   11a2c:	853e                	mv	a0,a5
   11a2e:	f2dff0ef          	jal	ra,1195a <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11a32:	fd843783          	ld	a5,-40(s0)
   11a36:	83a1                	srli	a5,a5,0x8
   11a38:	0ff7f793          	andi	a5,a5,255
   11a3c:	853e                	mv	a0,a5
   11a3e:	f1dff0ef          	jal	ra,1195a <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11a42:	fd843783          	ld	a5,-40(s0)
   11a46:	0ff7f793          	andi	a5,a5,255
   11a4a:	853e                	mv	a0,a5
   11a4c:	f0fff0ef          	jal	ra,1195a <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11a50:	0ff00513          	li	a0,255
   11a54:	f07ff0ef          	jal	ra,1195a <sd_set_byte>

    cmdresp = sd_get_byte();
   11a58:	00000097          	auipc	ra,0x0
   11a5c:	ece080e7          	jalr	-306(ra) # 11926 <sd_get_byte>
   11a60:	87aa                	mv	a5,a0
   11a62:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11a66:	fe744783          	lbu	a5,-25(s0)
   11a6a:	2781                	sext.w	a5,a5
}
   11a6c:	853e                	mv	a0,a5
   11a6e:	70a2                	ld	ra,40(sp)
   11a70:	7402                	ld	s0,32(sp)
   11a72:	6145                	addi	sp,sp,48
   11a74:	8082                	ret

0000000000011a76 <sd_stop_reading>:

int sd_stop_reading() {
   11a76:	1101                	addi	sp,sp,-32
   11a78:	ec06                	sd	ra,24(sp)
   11a7a:	e822                	sd	s0,16(sp)
   11a7c:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a7e:	100507b7          	lui	a5,0x10050
   11a82:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   11a86:	04c00513          	li	a0,76
   11a8a:	00000097          	auipc	ra,0x0
   11a8e:	ed0080e7          	jalr	-304(ra) # 1195a <sd_set_byte>
    sd_set_byte(0);
   11a92:	4501                	li	a0,0
   11a94:	00000097          	auipc	ra,0x0
   11a98:	ec6080e7          	jalr	-314(ra) # 1195a <sd_set_byte>
    sd_set_byte(0);
   11a9c:	4501                	li	a0,0
   11a9e:	00000097          	auipc	ra,0x0
   11aa2:	ebc080e7          	jalr	-324(ra) # 1195a <sd_set_byte>
    sd_set_byte(0);
   11aa6:	4501                	li	a0,0
   11aa8:	00000097          	auipc	ra,0x0
   11aac:	eb2080e7          	jalr	-334(ra) # 1195a <sd_set_byte>
    sd_set_byte(0);
   11ab0:	4501                	li	a0,0
   11ab2:	00000097          	auipc	ra,0x0
   11ab6:	ea8080e7          	jalr	-344(ra) # 1195a <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11aba:	0ff00513          	li	a0,255
   11abe:	00000097          	auipc	ra,0x0
   11ac2:	e9c080e7          	jalr	-356(ra) # 1195a <sd_set_byte>
    cmdresp = sd_get_byte();
   11ac6:	e61ff0ef          	jal	ra,11926 <sd_get_byte>
   11aca:	87aa                	mv	a5,a0
   11acc:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   11ad0:	fe744783          	lbu	a5,-25(s0)
   11ad4:	2781                	sext.w	a5,a5
}
   11ad6:	853e                	mv	a0,a5
   11ad8:	60e2                	ld	ra,24(sp)
   11ada:	6442                	ld	s0,16(sp)
   11adc:	6105                	addi	sp,sp,32
   11ade:	8082                	ret

0000000000011ae0 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11ae0:	715d                	addi	sp,sp,-80
   11ae2:	e4a2                	sd	s0,72(sp)
   11ae4:	0880                	addi	s0,sp,80
   11ae6:	faa43c23          	sd	a0,-72(s0)
   11aea:	87ae                	mv	a5,a1
   11aec:	8732                	mv	a4,a2
   11aee:	faf41b23          	sh	a5,-74(s0)
   11af2:	87ba                	mv	a5,a4
   11af4:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11af8:	fb843783          	ld	a5,-72(s0)
   11afc:	479c                	lw	a5,8(a5)
   11afe:	0087d79b          	srliw	a5,a5,0x8
   11b02:	2781                	sext.w	a5,a5
   11b04:	2781                	sext.w	a5,a5
   11b06:	0ff7f793          	andi	a5,a5,255
   11b0a:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   11b0e:	fb843783          	ld	a5,-72(s0)
   11b12:	479c                	lw	a5,8(a5)
   11b14:	0107d79b          	srliw	a5,a5,0x10
   11b18:	2781                	sext.w	a5,a5
   11b1a:	2781                	sext.w	a5,a5
   11b1c:	0ff7f793          	andi	a5,a5,255
   11b20:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   11b24:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b28:	fe042423          	sw	zero,-24(s0)
   11b2c:	a82d                	j	11b66 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b2e:	fec42783          	lw	a5,-20(s0)
   11b32:	04078793          	addi	a5,a5,64 # 10050040 <_end+0x1003d778>
   11b36:	fb843703          	ld	a4,-72(s0)
   11b3a:	97ba                	add	a5,a5,a4
   11b3c:	639c                	ld	a5,0(a5)
   11b3e:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   11b42:	fb843703          	ld	a4,-72(s0)
   11b46:	fec42783          	lw	a5,-20(s0)
   11b4a:	97ba                	add	a5,a5,a4
   11b4c:	0407c783          	lbu	a5,64(a5)
   11b50:	2781                	sext.w	a5,a5
   11b52:	fec42703          	lw	a4,-20(s0)
   11b56:	9fb9                	addw	a5,a5,a4
   11b58:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b5c:	fe842783          	lw	a5,-24(s0)
   11b60:	2785                	addiw	a5,a5,1
   11b62:	fef42423          	sw	a5,-24(s0)
   11b66:	fe842703          	lw	a4,-24(s0)
   11b6a:	fdc42783          	lw	a5,-36(s0)
   11b6e:	2701                	sext.w	a4,a4
   11b70:	2781                	sext.w	a5,a5
   11b72:	faf74ee3          	blt	a4,a5,11b2e <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11b76:	fe042223          	sw	zero,-28(s0)
   11b7a:	a8b5                	j	11bf6 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b7c:	fec42783          	lw	a5,-20(s0)
   11b80:	04078793          	addi	a5,a5,64
   11b84:	fb843703          	ld	a4,-72(s0)
   11b88:	97ba                	add	a5,a5,a4
   11b8a:	639c                	ld	a5,0(a5)
   11b8c:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11b90:	fec42783          	lw	a5,-20(s0)
   11b94:	27a1                	addiw	a5,a5,8
   11b96:	2781                	sext.w	a5,a5
   11b98:	04078793          	addi	a5,a5,64
   11b9c:	fb843703          	ld	a4,-72(s0)
   11ba0:	97ba                	add	a5,a5,a4
   11ba2:	639c                	ld	a5,0(a5)
   11ba4:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11ba8:	fc645783          	lhu	a5,-58(s0)
   11bac:	fb645703          	lhu	a4,-74(s0)
   11bb0:	2701                	sext.w	a4,a4
   11bb2:	2781                	sext.w	a5,a5
   11bb4:	00f71f63          	bne	a4,a5,11bd2 <get_dev_bar+0xf2>
   11bb8:	fc445783          	lhu	a5,-60(s0)
   11bbc:	fb445703          	lhu	a4,-76(s0)
   11bc0:	2701                	sext.w	a4,a4
   11bc2:	2781                	sext.w	a5,a5
   11bc4:	00f71763          	bne	a4,a5,11bd2 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11bc8:	fcc42783          	lw	a5,-52(s0)
   11bcc:	1782                	slli	a5,a5,0x20
   11bce:	9381                	srli	a5,a5,0x20
   11bd0:	a825                	j	11c08 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11bd2:	fb843703          	ld	a4,-72(s0)
   11bd6:	fec42783          	lw	a5,-20(s0)
   11bda:	97ba                	add	a5,a5,a4
   11bdc:	0407c783          	lbu	a5,64(a5)
   11be0:	2781                	sext.w	a5,a5
   11be2:	fec42703          	lw	a4,-20(s0)
   11be6:	9fb9                	addw	a5,a5,a4
   11be8:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   11bec:	fe442783          	lw	a5,-28(s0)
   11bf0:	2785                	addiw	a5,a5,1
   11bf2:	fef42223          	sw	a5,-28(s0)
   11bf6:	fe442703          	lw	a4,-28(s0)
   11bfa:	fe042783          	lw	a5,-32(s0)
   11bfe:	2701                	sext.w	a4,a4
   11c00:	2781                	sext.w	a5,a5
   11c02:	f6f74de3          	blt	a4,a5,11b7c <get_dev_bar+0x9c>
    return DEV_NONE;
   11c06:	57fd                	li	a5,-1
}
   11c08:	853e                	mv	a0,a5
   11c0a:	6426                	ld	s0,72(sp)
   11c0c:	6161                	addi	sp,sp,80
   11c0e:	8082                	ret

0000000000011c10 <mpu_region_total>:
static int mpu_region_total() {
   11c10:	1101                	addi	sp,sp,-32
   11c12:	ec22                	sd	s0,24(sp)
   11c14:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11c16:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   11c1a:	bc4027f3          	csrr	a5,0xbc4
   11c1e:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   11c22:	fe843783          	ld	a5,-24(s0)
   11c26:	83a1                	srli	a5,a5,0x8
   11c28:	2781                	sext.w	a5,a5
}
   11c2a:	853e                	mv	a0,a5
   11c2c:	6462                	ld	s0,24(sp)
   11c2e:	6105                	addi	sp,sp,32
   11c30:	8082                	ret

0000000000011c32 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   11c32:	7179                	addi	sp,sp,-48
   11c34:	f422                	sd	s0,40(sp)
   11c36:	1800                	addi	s0,sp,48
   11c38:	87aa                	mv	a5,a0
   11c3a:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   11c3e:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   11c42:	fdc42783          	lw	a5,-36(s0)
   11c46:	0ff7f793          	andi	a5,a5,255
   11c4a:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   11c4e:	fe844783          	lbu	a5,-24(s0)
   11c52:	f807e793          	ori	a5,a5,-128
   11c56:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11c5a:	fe843783          	ld	a5,-24(s0)
   11c5e:	bc479073          	csrw	0xbc4,a5
}
   11c62:	0001                	nop
   11c64:	7422                	ld	s0,40(sp)
   11c66:	6145                	addi	sp,sp,48
   11c68:	8082                	ret

0000000000011c6a <mpu_enable_region>:
                       const char *rwx) {
   11c6a:	715d                	addi	sp,sp,-80
   11c6c:	e4a2                	sd	s0,72(sp)
   11c6e:	0880                	addi	s0,sp,80
   11c70:	87aa                	mv	a5,a0
   11c72:	fcb43023          	sd	a1,-64(s0)
   11c76:	fac43c23          	sd	a2,-72(s0)
   11c7a:	fae43823          	sd	a4,-80(s0)
   11c7e:	fcf42623          	sw	a5,-52(s0)
   11c82:	87b6                	mv	a5,a3
   11c84:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11c88:	c0000793          	li	a5,-1024
   11c8c:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11c90:	fb043783          	ld	a5,-80(s0)
   11c94:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11c98:	fc043783          	ld	a5,-64(s0)
   11c9c:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11ca0:	fb843783          	ld	a5,-72(s0)
   11ca4:	8385                	srli	a5,a5,0x1
   11ca6:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11caa:	a819                	j	11cc0 <mpu_enable_region+0x56>
        mask <<= 1;
   11cac:	fe843783          	ld	a5,-24(s0)
   11cb0:	0786                	slli	a5,a5,0x1
   11cb2:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11cb6:	fb843783          	ld	a5,-72(s0)
   11cba:	8385                	srli	a5,a5,0x1
   11cbc:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11cc0:	fb843783          	ld	a5,-72(s0)
   11cc4:	f7e5                	bnez	a5,11cac <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11cc6:	fe843783          	ld	a5,-24(s0)
   11cca:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   11cce:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11cd2:	fcc42783          	lw	a5,-52(s0)
   11cd6:	0ff7f793          	andi	a5,a5,255
   11cda:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   11cde:	fd844783          	lbu	a5,-40(s0)
   11ce2:	0107e793          	ori	a5,a5,16
   11ce6:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   11cea:	fc842783          	lw	a5,-56(s0)
   11cee:	8b85                	andi	a5,a5,1
   11cf0:	0ff7f793          	andi	a5,a5,255
   11cf4:	8b85                	andi	a5,a5,1
   11cf6:	0037969b          	slliw	a3,a5,0x3
   11cfa:	fd844783          	lbu	a5,-40(s0)
   11cfe:	9bdd                	andi	a5,a5,-9
   11d00:	873e                	mv	a4,a5
   11d02:	87b6                	mv	a5,a3
   11d04:	8fd9                	or	a5,a5,a4
   11d06:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   11d0a:	fd844783          	lbu	a5,-40(s0)
   11d0e:	f807e793          	ori	a5,a5,-128
   11d12:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11d16:	a09d                	j	11d7c <mpu_enable_region+0x112>
        if (*p == 'r') {
   11d18:	fe043783          	ld	a5,-32(s0)
   11d1c:	0007c783          	lbu	a5,0(a5)
   11d20:	873e                	mv	a4,a5
   11d22:	07200793          	li	a5,114
   11d26:	00f71863          	bne	a4,a5,11d36 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11d2a:	fd844783          	lbu	a5,-40(s0)
   11d2e:	0027e793          	ori	a5,a5,2
   11d32:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11d36:	fe043783          	ld	a5,-32(s0)
   11d3a:	0007c783          	lbu	a5,0(a5)
   11d3e:	873e                	mv	a4,a5
   11d40:	07700793          	li	a5,119
   11d44:	00f71863          	bne	a4,a5,11d54 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11d48:	fd844783          	lbu	a5,-40(s0)
   11d4c:	0017e793          	ori	a5,a5,1
   11d50:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11d54:	fe043783          	ld	a5,-32(s0)
   11d58:	0007c783          	lbu	a5,0(a5)
   11d5c:	873e                	mv	a4,a5
   11d5e:	07800793          	li	a5,120
   11d62:	00f71863          	bne	a4,a5,11d72 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11d66:	fd844783          	lbu	a5,-40(s0)
   11d6a:	0047e793          	ori	a5,a5,4
   11d6e:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11d72:	fe043783          	ld	a5,-32(s0)
   11d76:	0785                	addi	a5,a5,1
   11d78:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11d7c:	fe043783          	ld	a5,-32(s0)
   11d80:	0007c783          	lbu	a5,0(a5)
   11d84:	fbd1                	bnez	a5,11d18 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11d86:	fd843783          	ld	a5,-40(s0)
   11d8a:	bc479073          	csrw	0xbc4,a5
}
   11d8e:	0001                	nop
   11d90:	6426                	ld	s0,72(sp)
   11d92:	6161                	addi	sp,sp,80
   11d94:	8082                	ret

0000000000011d96 <is_empty_gui>:
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"
#include <string.h>

int is_empty_gui(const struct gpt_guid *guid) {
   11d96:	1101                	addi	sp,sp,-32
   11d98:	ec22                	sd	s0,24(sp)
   11d9a:	1000                	addi	s0,sp,32
   11d9c:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11da0:	fe843783          	ld	a5,-24(s0)
   11da4:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11da6:	e7ad                	bnez	a5,11e10 <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11da8:	fe843783          	ld	a5,-24(s0)
   11dac:	0047d783          	lhu	a5,4(a5)
   11db0:	e3a5                	bnez	a5,11e10 <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11db2:	fe843783          	ld	a5,-24(s0)
   11db6:	0067d783          	lhu	a5,6(a5)
   11dba:	ebb9                	bnez	a5,11e10 <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11dbc:	fe843783          	ld	a5,-24(s0)
   11dc0:	0087c783          	lbu	a5,8(a5)
   11dc4:	e7b1                	bnez	a5,11e10 <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11dc6:	fe843783          	ld	a5,-24(s0)
   11dca:	0097c783          	lbu	a5,9(a5)
   11dce:	e3a9                	bnez	a5,11e10 <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11dd0:	fe843783          	ld	a5,-24(s0)
   11dd4:	00a7c783          	lbu	a5,10(a5)
   11dd8:	ef85                	bnez	a5,11e10 <is_empty_gui+0x7a>
   11dda:	fe843783          	ld	a5,-24(s0)
   11dde:	00b7c783          	lbu	a5,11(a5)
   11de2:	e79d                	bnez	a5,11e10 <is_empty_gui+0x7a>
   11de4:	fe843783          	ld	a5,-24(s0)
   11de8:	00c7c783          	lbu	a5,12(a5)
   11dec:	e395                	bnez	a5,11e10 <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11dee:	fe843783          	ld	a5,-24(s0)
   11df2:	00d7c783          	lbu	a5,13(a5)
   11df6:	ef89                	bnez	a5,11e10 <is_empty_gui+0x7a>
   11df8:	fe843783          	ld	a5,-24(s0)
   11dfc:	00e7c783          	lbu	a5,14(a5)
   11e00:	eb81                	bnez	a5,11e10 <is_empty_gui+0x7a>
   11e02:	fe843783          	ld	a5,-24(s0)
   11e06:	00f7c783          	lbu	a5,15(a5)
   11e0a:	e399                	bnez	a5,11e10 <is_empty_gui+0x7a>
   11e0c:	4785                	li	a5,1
   11e0e:	a011                	j	11e12 <is_empty_gui+0x7c>
   11e10:	4781                	li	a5,0
}
   11e12:	853e                	mv	a0,a5
   11e14:	6462                	ld	s0,24(sp)
   11e16:	6105                	addi	sp,sp,32
   11e18:	8082                	ret

0000000000011e1a <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11e1a:	7159                	addi	sp,sp,-112
   11e1c:	f486                	sd	ra,104(sp)
   11e1e:	f0a2                	sd	s0,96(sp)
   11e20:	1880                	addi	s0,sp,112
   11e22:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e26:	fe843783          	ld	a5,-24(s0)
   11e2a:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e2c:	0187d79b          	srliw	a5,a5,0x18
   11e30:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e34:	fe843783          	ld	a5,-24(s0)
   11e38:	439c                	lw	a5,0(a5)
   11e3a:	0107d79b          	srliw	a5,a5,0x10
   11e3e:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e40:	0ff7f793          	andi	a5,a5,255
   11e44:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11e48:	fe843783          	ld	a5,-24(s0)
   11e4c:	439c                	lw	a5,0(a5)
   11e4e:	0087d79b          	srliw	a5,a5,0x8
   11e52:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e54:	0ff7f793          	andi	a5,a5,255
   11e58:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11e5c:	fe843783          	ld	a5,-24(s0)
   11e60:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e62:	0ff7f793          	andi	a5,a5,255
   11e66:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11e6a:	fe843783          	ld	a5,-24(s0)
   11e6e:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e72:	0087d79b          	srliw	a5,a5,0x8
   11e76:	17c2                	slli	a5,a5,0x30
   11e78:	93c1                	srli	a5,a5,0x30
   11e7a:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11e7e:	fe843783          	ld	a5,-24(s0)
   11e82:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e86:	2781                	sext.w	a5,a5
   11e88:	0ff7f793          	andi	a5,a5,255
   11e8c:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11e90:	fe843783          	ld	a5,-24(s0)
   11e94:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e98:	0087d79b          	srliw	a5,a5,0x8
   11e9c:	17c2                	slli	a5,a5,0x30
   11e9e:	93c1                	srli	a5,a5,0x30
   11ea0:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11ea4:	fe843783          	ld	a5,-24(s0)
   11ea8:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eac:	2781                	sext.w	a5,a5
   11eae:	0ff7f793          	andi	a5,a5,255
   11eb2:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11eb4:	fe843703          	ld	a4,-24(s0)
   11eb8:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ebc:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11ebe:	fe843683          	ld	a3,-24(s0)
   11ec2:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ec6:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ec8:	fe843603          	ld	a2,-24(s0)
   11ecc:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ed0:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ed2:	fe843583          	ld	a1,-24(s0)
   11ed6:	00b5c583          	lbu	a1,11(a1) # 100b <_start-0xeff5>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eda:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11edc:	fe843503          	ld	a0,-24(s0)
   11ee0:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ee4:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ee6:	fe843803          	ld	a6,-24(s0)
   11eea:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eee:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ef0:	fe843883          	ld	a7,-24(s0)
   11ef4:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ef8:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11efa:	fe843303          	ld	t1,-24(s0)
   11efe:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f02:	2301                	sext.w	t1,t1
   11f04:	e09a                	sd	t1,64(sp)
   11f06:	fc46                	sd	a7,56(sp)
   11f08:	f842                	sd	a6,48(sp)
   11f0a:	f42a                	sd	a0,40(sp)
   11f0c:	f02e                	sd	a1,32(sp)
   11f0e:	ec32                	sd	a2,24(sp)
   11f10:	e836                	sd	a3,16(sp)
   11f12:	e43a                	sd	a4,8(sp)
   11f14:	e03e                	sd	a5,0(sp)
   11f16:	8886                	mv	a7,ra
   11f18:	881e                	mv	a6,t2
   11f1a:	8796                	mv	a5,t0
   11f1c:	877e                	mv	a4,t6
   11f1e:	86fa                	mv	a3,t5
   11f20:	8676                	mv	a2,t4
   11f22:	85f2                	mv	a1,t3
   11f24:	6549                	lui	a0,0x12
   11f26:	5f850513          	addi	a0,a0,1528 # 125f8 <strnlen+0x27c>
   11f2a:	ef2ff0ef          	jal	ra,1161c <printf_uart>
        );
}
   11f2e:	0001                	nop
   11f30:	70a6                	ld	ra,104(sp)
   11f32:	7406                	ld	s0,96(sp)
   11f34:	6165                	addi	sp,sp,112
   11f36:	8082                	ret

0000000000011f38 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   11f38:	7179                	addi	sp,sp,-48
   11f3a:	f422                	sd	s0,40(sp)
   11f3c:	1800                	addi	s0,sp,48
   11f3e:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   11f42:	5b1937b7          	lui	a5,0x5b193
   11f46:	3007879b          	addiw	a5,a5,768
   11f4a:	fef42023          	sw	a5,-32(s0)
   11f4e:	c7800793          	li	a5,-904
   11f52:	fef41223          	sh	a5,-28(s0)
   11f56:	6791                	lui	a5,0x4
   11f58:	0cd7879b          	addiw	a5,a5,205
   11f5c:	fef41323          	sh	a5,-26(s0)
   11f60:	f8000793          	li	a5,-128
   11f64:	fef40423          	sb	a5,-24(s0)
   11f68:	4789                	li	a5,2
   11f6a:	fef404a3          	sb	a5,-23(s0)
   11f6e:	57a1                	li	a5,-24
   11f70:	fef40523          	sb	a5,-22(s0)
   11f74:	06c00793          	li	a5,108
   11f78:	fef405a3          	sb	a5,-21(s0)
   11f7c:	04500793          	li	a5,69
   11f80:	fef40623          	sb	a5,-20(s0)
   11f84:	05800793          	li	a5,88
   11f88:	fef406a3          	sb	a5,-19(s0)
   11f8c:	47ad                	li	a5,11
   11f8e:	fef40723          	sb	a5,-18(s0)
   11f92:	04700793          	li	a5,71
   11f96:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   11f9a:	fe042703          	lw	a4,-32(s0)
   11f9e:	fd843783          	ld	a5,-40(s0)
   11fa2:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   11fa4:	0af71863          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   11fa8:	fe445703          	lhu	a4,-28(s0)
   11fac:	fd843783          	ld	a5,-40(s0)
   11fb0:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   11fb4:	2701                	sext.w	a4,a4
   11fb6:	2781                	sext.w	a5,a5
   11fb8:	08f71e63          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   11fbc:	fe645703          	lhu	a4,-26(s0)
   11fc0:	fd843783          	ld	a5,-40(s0)
   11fc4:	0067d783          	lhu	a5,6(a5)
   11fc8:	2701                	sext.w	a4,a4
   11fca:	2781                	sext.w	a5,a5
   11fcc:	08f71463          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   11fd0:	fe844703          	lbu	a4,-24(s0)
   11fd4:	fd843783          	ld	a5,-40(s0)
   11fd8:	0087c783          	lbu	a5,8(a5)
   11fdc:	06f71c63          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   11fe0:	fe944703          	lbu	a4,-23(s0)
   11fe4:	fd843783          	ld	a5,-40(s0)
   11fe8:	0097c783          	lbu	a5,9(a5)
   11fec:	06f71463          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   11ff0:	fea44703          	lbu	a4,-22(s0)
   11ff4:	fd843783          	ld	a5,-40(s0)
   11ff8:	00a7c783          	lbu	a5,10(a5)
   11ffc:	04f71c63          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   12000:	feb44703          	lbu	a4,-21(s0)
   12004:	fd843783          	ld	a5,-40(s0)
   12008:	00b7c783          	lbu	a5,11(a5)
   1200c:	04f71463          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   12010:	fec44703          	lbu	a4,-20(s0)
   12014:	fd843783          	ld	a5,-40(s0)
   12018:	00c7c783          	lbu	a5,12(a5)
   1201c:	02f71c63          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   12020:	fed44703          	lbu	a4,-19(s0)
   12024:	fd843783          	ld	a5,-40(s0)
   12028:	00d7c783          	lbu	a5,13(a5)
   1202c:	02f71463          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   12030:	fee44703          	lbu	a4,-18(s0)
   12034:	fd843783          	ld	a5,-40(s0)
   12038:	00e7c783          	lbu	a5,14(a5)
   1203c:	00f71c63          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   12040:	fef44703          	lbu	a4,-17(s0)
   12044:	fd843783          	ld	a5,-40(s0)
   12048:	00f7c783          	lbu	a5,15(a5)
   1204c:	00f71463          	bne	a4,a5,12054 <is_uboot_guid+0x11c>
   12050:	4785                	li	a5,1
   12052:	a011                	j	12056 <is_uboot_guid+0x11e>
   12054:	4781                	li	a5,0
}
   12056:	853e                	mv	a0,a5
   12058:	7422                	ld	s0,40(sp)
   1205a:	6145                	addi	sp,sp,48
   1205c:	8082                	ret

000000000001205e <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   1205e:	9c010113          	addi	sp,sp,-1600
   12062:	62113c23          	sd	ra,1592(sp)
   12066:	62813823          	sd	s0,1584(sp)
   1206a:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   1206e:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   12072:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   12076:	080007b7          	lui	a5,0x8000
   1207a:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   1207e:	00000097          	auipc	ra,0x0
   12082:	89a080e7          	jalr	-1894(ra) # 11918 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   12086:	45b5                	li	a1,13
   12088:	67c9                	lui	a5,0x12
   1208a:	64078513          	addi	a0,a5,1600 # 12640 <strnlen+0x2c4>
   1208e:	fb3fe0ef          	jal	ra,11040 <print_uart>

    sd_start_reading(0);
   12092:	4501                	li	a0,0
   12094:	00000097          	auipc	ra,0x0
   12098:	96c080e7          	jalr	-1684(ra) # 11a00 <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   1209c:	dc040793          	addi	a5,s0,-576
   120a0:	20000593          	li	a1,512
   120a4:	853e                	mv	a0,a5
   120a6:	8efff0ef          	jal	ra,11994 <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   120aa:	bc040793          	addi	a5,s0,-1088
   120ae:	20000593          	li	a1,512
   120b2:	853e                	mv	a0,a5
   120b4:	8e1ff0ef          	jal	ra,11994 <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   120b8:	bc043703          	ld	a4,-1088(s0)
   120bc:	67c9                	lui	a5,0x12
   120be:	6a07b783          	ld	a5,1696(a5) # 126a0 <strnlen+0x324>
   120c2:	00f70663          	beq	a4,a5,120ce <run_from_sdcard+0x70>
        sd_stop_reading();
   120c6:	9b1ff0ef          	jal	ra,11a76 <sd_stop_reading>
        return -1;
   120ca:	57fd                	li	a5,-1
   120cc:	a2c5                	j	122ac <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   120ce:	fc042a23          	sw	zero,-44(s0)
   120d2:	a8c5                	j	121c2 <run_from_sdcard+0x164>
        i4 = i % 4;
   120d4:	fd442703          	lw	a4,-44(s0)
   120d8:	41f7579b          	sraiw	a5,a4,0x1f
   120dc:	01e7d79b          	srliw	a5,a5,0x1e
   120e0:	9f3d                	addw	a4,a4,a5
   120e2:	8b0d                	andi	a4,a4,3
   120e4:	40f707bb          	subw	a5,a4,a5
   120e8:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   120ec:	fc442783          	lw	a5,-60(s0)
   120f0:	2781                	sext.w	a5,a5
   120f2:	eb81                	bnez	a5,12102 <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   120f4:	9c040793          	addi	a5,s0,-1600
   120f8:	20000593          	li	a1,512
   120fc:	853e                	mv	a0,a5
   120fe:	897ff0ef          	jal	ra,11994 <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   12102:	9c040713          	addi	a4,s0,-1600
   12106:	fc442783          	lw	a5,-60(s0)
   1210a:	079e                	slli	a5,a5,0x7
   1210c:	97ba                	add	a5,a5,a4
   1210e:	853e                	mv	a0,a5
   12110:	00000097          	auipc	ra,0x0
   12114:	c86080e7          	jalr	-890(ra) # 11d96 <is_empty_gui>
   12118:	87aa                	mv	a5,a0
   1211a:	efd1                	bnez	a5,121b6 <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   1211c:	fd442783          	lw	a5,-44(s0)
   12120:	85be                	mv	a1,a5
   12122:	67c9                	lui	a5,0x12
   12124:	65078513          	addi	a0,a5,1616 # 12650 <strnlen+0x2d4>
   12128:	cf4ff0ef          	jal	ra,1161c <printf_uart>
        print_guid(&entry[i4].type);
   1212c:	9c040713          	addi	a4,s0,-1600
   12130:	fc442783          	lw	a5,-60(s0)
   12134:	079e                	slli	a5,a5,0x7
   12136:	97ba                	add	a5,a5,a4
   12138:	853e                	mv	a0,a5
   1213a:	ce1ff0ef          	jal	ra,11e1a <print_guid>
        print_uart(" : ", 3);
   1213e:	458d                	li	a1,3
   12140:	67c9                	lui	a5,0x12
   12142:	65878513          	addi	a0,a5,1624 # 12658 <strnlen+0x2dc>
   12146:	efbfe0ef          	jal	ra,11040 <print_uart>
        print_uart((const char *)entry[i4].name, sizeof(entry[i4].name));
   1214a:	9c040713          	addi	a4,s0,-1600
   1214e:	fc442783          	lw	a5,-60(s0)
   12152:	079e                	slli	a5,a5,0x7
   12154:	03078793          	addi	a5,a5,48
   12158:	97ba                	add	a5,a5,a4
   1215a:	07a1                	addi	a5,a5,8
   1215c:	04800593          	li	a1,72
   12160:	853e                	mv	a0,a5
   12162:	edffe0ef          	jal	ra,11040 <print_uart>
        print_uart("\r\n", 2);
   12166:	4589                	li	a1,2
   12168:	67c9                	lui	a5,0x12
   1216a:	66078513          	addi	a0,a5,1632 # 12660 <strnlen+0x2e4>
   1216e:	ed3fe0ef          	jal	ra,11040 <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   12172:	9c040713          	addi	a4,s0,-1600
   12176:	fc442783          	lw	a5,-60(s0)
   1217a:	079e                	slli	a5,a5,0x7
   1217c:	97ba                	add	a5,a5,a4
   1217e:	853e                	mv	a0,a5
   12180:	00000097          	auipc	ra,0x0
   12184:	db8080e7          	jalr	-584(ra) # 11f38 <is_uboot_guid>
   12188:	87aa                	mv	a5,a0
   1218a:	c79d                	beqz	a5,121b8 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   1218c:	fc442783          	lw	a5,-60(s0)
   12190:	079e                	slli	a5,a5,0x7
   12192:	ff040713          	addi	a4,s0,-16
   12196:	97ba                	add	a5,a5,a4
   12198:	9f07b783          	ld	a5,-1552(a5)
   1219c:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   121a0:	fc442783          	lw	a5,-60(s0)
   121a4:	079e                	slli	a5,a5,0x7
   121a6:	ff040713          	addi	a4,s0,-16
   121aa:	97ba                	add	a5,a5,a4
   121ac:	9f87b783          	ld	a5,-1544(a5)
   121b0:	fef43023          	sd	a5,-32(s0)
   121b4:	a011                	j	121b8 <run_from_sdcard+0x15a>
            continue;
   121b6:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   121b8:	fd442783          	lw	a5,-44(s0)
   121bc:	2785                	addiw	a5,a5,1
   121be:	fcf42a23          	sw	a5,-44(s0)
   121c2:	c1042703          	lw	a4,-1008(s0)
   121c6:	fd442783          	lw	a5,-44(s0)
   121ca:	f0e7e5e3          	bltu	a5,a4,120d4 <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   121ce:	8a9ff0ef          	jal	ra,11a76 <sd_stop_reading>

    if (lba_start == 0) {
   121d2:	fe843783          	ld	a5,-24(s0)
   121d6:	e399                	bnez	a5,121dc <run_from_sdcard+0x17e>
        return -1;
   121d8:	57fd                	li	a5,-1
   121da:	a8c9                	j	122ac <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   121dc:	fe843783          	ld	a5,-24(s0)
   121e0:	07a6                	slli	a5,a5,0x9
   121e2:	853e                	mv	a0,a5
   121e4:	00000097          	auipc	ra,0x0
   121e8:	81c080e7          	jalr	-2020(ra) # 11a00 <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   121ec:	fe043703          	ld	a4,-32(s0)
   121f0:	fe843783          	ld	a5,-24(s0)
   121f4:	40f707b3          	sub	a5,a4,a5
   121f8:	0785                	addi	a5,a5,1
   121fa:	8385                	srli	a5,a5,0x1
   121fc:	85be                	mv	a1,a5
   121fe:	67c9                	lui	a5,0x12
   12200:	66878513          	addi	a0,a5,1640 # 12668 <strnlen+0x2ec>
   12204:	c18ff0ef          	jal	ra,1161c <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12208:	fe843783          	ld	a5,-24(s0)
   1220c:	fcf43423          	sd	a5,-56(s0)
   12210:	a8bd                	j	1228e <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   12212:	9c040793          	addi	a5,s0,-1600
   12216:	20000593          	li	a1,512
   1221a:	853e                	mv	a0,a5
   1221c:	f78ff0ef          	jal	ra,11994 <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   12220:	9c040793          	addi	a5,s0,-1600
   12224:	6398                	ld	a4,0(a5)
   12226:	fd843783          	ld	a5,-40(s0)
   1222a:	639c                	ld	a5,0(a5)
   1222c:	00f71b63          	bne	a4,a5,12242 <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   12230:	67c9                	lui	a5,0x12
   12232:	67878593          	addi	a1,a5,1656 # 12678 <strnlen+0x2fc>
   12236:	67c9                	lui	a5,0x12
   12238:	68878513          	addi	a0,a5,1672 # 12688 <strnlen+0x30c>
   1223c:	be0ff0ef          	jal	ra,1161c <printf_uart>
            break;
   12240:	a8a9                	j	1229a <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   12242:	fd843783          	ld	a5,-40(s0)
   12246:	86be                	mv	a3,a5
   12248:	9c040793          	addi	a5,s0,-1600
   1224c:	20000713          	li	a4,512
   12250:	863a                	mv	a2,a4
   12252:	85be                	mv	a1,a5
   12254:	8536                	mv	a0,a3
   12256:	00000097          	auipc	ra,0x0
   1225a:	066080e7          	jalr	102(ra) # 122bc <memcpy>
        sram += sizeof(entry);
   1225e:	fd843783          	ld	a5,-40(s0)
   12262:	20078793          	addi	a5,a5,512
   12266:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   1226a:	fc843703          	ld	a4,-56(s0)
   1226e:	06400793          	li	a5,100
   12272:	02f777b3          	remu	a5,a4,a5
   12276:	e799                	bnez	a5,12284 <run_from_sdcard+0x226>
            print_uart(". ", 2);
   12278:	4589                	li	a1,2
   1227a:	67c9                	lui	a5,0x12
   1227c:	69878513          	addi	a0,a5,1688 # 12698 <strnlen+0x31c>
   12280:	dc1fe0ef          	jal	ra,11040 <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12284:	fc843783          	ld	a5,-56(s0)
   12288:	0785                	addi	a5,a5,1
   1228a:	fcf43423          	sd	a5,-56(s0)
   1228e:	fc843703          	ld	a4,-56(s0)
   12292:	fe043783          	ld	a5,-32(s0)
   12296:	f6e7fee3          	bleu	a4,a5,12212 <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   1229a:	4589                	li	a1,2
   1229c:	67c9                	lui	a5,0x12
   1229e:	66078513          	addi	a0,a5,1632 # 12660 <strnlen+0x2e4>
   122a2:	d9ffe0ef          	jal	ra,11040 <print_uart>

    sd_stop_reading();
   122a6:	fd0ff0ef          	jal	ra,11a76 <sd_stop_reading>
    return 0;
   122aa:	4781                	li	a5,0
}
   122ac:	853e                	mv	a0,a5
   122ae:	63813083          	ld	ra,1592(sp)
   122b2:	63013403          	ld	s0,1584(sp)
   122b6:	64010113          	addi	sp,sp,1600
   122ba:	8082                	ret

00000000000122bc <memcpy>:
   122bc:	00a5c7b3          	xor	a5,a1,a0
   122c0:	8b9d                	andi	a5,a5,7
   122c2:	00c50733          	add	a4,a0,a2
   122c6:	e781                	bnez	a5,122ce <memcpy+0x12>
   122c8:	479d                	li	a5,7
   122ca:	00c7ef63          	bltu	a5,a2,122e8 <memcpy+0x2c>
   122ce:	87aa                	mv	a5,a0
   122d0:	00e56963          	bltu	a0,a4,122e2 <memcpy+0x26>
   122d4:	8082                	ret
   122d6:	0005c683          	lbu	a3,0(a1)
   122da:	0785                	addi	a5,a5,1
   122dc:	0585                	addi	a1,a1,1
   122de:	fed78fa3          	sb	a3,-1(a5)
   122e2:	fee7eae3          	bltu	a5,a4,122d6 <memcpy+0x1a>
   122e6:	8082                	ret
   122e8:	00757793          	andi	a5,a0,7
   122ec:	ebbd                	bnez	a5,12362 <memcpy+0xa6>
   122ee:	87aa                	mv	a5,a0
   122f0:	ff877693          	andi	a3,a4,-8
   122f4:	fc068613          	addi	a2,a3,-64
   122f8:	06c7fc63          	bleu	a2,a5,12370 <memcpy+0xb4>
   122fc:	0005b383          	ld	t2,0(a1)
   12300:	0085b283          	ld	t0,8(a1)
   12304:	0105bf83          	ld	t6,16(a1)
   12308:	0185bf03          	ld	t5,24(a1)
   1230c:	0205be83          	ld	t4,32(a1)
   12310:	0285be03          	ld	t3,40(a1)
   12314:	0305b303          	ld	t1,48(a1)
   12318:	0385b883          	ld	a7,56(a1)
   1231c:	04858593          	addi	a1,a1,72
   12320:	04878793          	addi	a5,a5,72
   12324:	ff85b803          	ld	a6,-8(a1)
   12328:	fa77bc23          	sd	t2,-72(a5)
   1232c:	fc57b023          	sd	t0,-64(a5)
   12330:	fdf7b423          	sd	t6,-56(a5)
   12334:	fde7b823          	sd	t5,-48(a5)
   12338:	fdd7bc23          	sd	t4,-40(a5)
   1233c:	ffc7b023          	sd	t3,-32(a5)
   12340:	fe67b423          	sd	t1,-24(a5)
   12344:	ff17b823          	sd	a7,-16(a5)
   12348:	ff07bc23          	sd	a6,-8(a5)
   1234c:	b775                	j	122f8 <memcpy+0x3c>
   1234e:	0005c683          	lbu	a3,0(a1)
   12352:	0785                	addi	a5,a5,1
   12354:	0585                	addi	a1,a1,1
   12356:	fed78fa3          	sb	a3,-1(a5)
   1235a:	0077f693          	andi	a3,a5,7
   1235e:	fae5                	bnez	a3,1234e <memcpy+0x92>
   12360:	bf41                	j	122f0 <memcpy+0x34>
   12362:	87aa                	mv	a5,a0
   12364:	bfdd                	j	1235a <memcpy+0x9e>
   12366:	6190                	ld	a2,0(a1)
   12368:	07a1                	addi	a5,a5,8
   1236a:	05a1                	addi	a1,a1,8
   1236c:	fec7bc23          	sd	a2,-8(a5)
   12370:	fed7ebe3          	bltu	a5,a3,12366 <memcpy+0xaa>
   12374:	f6e7e7e3          	bltu	a5,a4,122e2 <memcpy+0x26>
   12378:	8082                	ret
	...

000000000001237c <strnlen>:
   1237c:	95aa                	add	a1,a1,a0
   1237e:	87aa                	mv	a5,a0
   12380:	00b78563          	beq	a5,a1,1238a <strnlen+0xe>
   12384:	0007c703          	lbu	a4,0(a5)
   12388:	e701                	bnez	a4,12390 <strnlen+0x14>
   1238a:	40a78533          	sub	a0,a5,a0
   1238e:	8082                	ret
   12390:	0785                	addi	a5,a5,1
   12392:	b7fd                	j	12380 <strnlen+0x4>
	...
