
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	10c0006f          	j	10110 <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0

  la t0, trap_table
   100c0:	00000297          	auipc	t0,0x0
   100c4:	f4428293          	addi	t0,t0,-188 # 10004 <trap_table>
  csrw mtvec, t0
   100c8:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100cc:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100d0:	08200137          	lui	sp,0x8200

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100d4:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100d8:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100dc:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100e0:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100e4:	40a10133          	sub	sp,sp,a0
  addi sp,sp,-256
   100e8:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ed5c0>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100ec:	7b311073          	csrw	0x7b3,sp

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100f0:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   100f4:	00050663          	beqz	a0,10100 <init0>
  wfi
   100f8:	10500073          	wfi
  j end_init0
   100fc:	0080006f          	j	10104 <end_init0>

0000000000010100 <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   10100:	6be000ef          	jal	ra,107be <_init>

0000000000010104 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10104:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10108:	34129073          	csrw	mepc,t0
  mret
   1010c:	30200073          	mret

0000000000010110 <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   10110:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10114:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10118:	100f5e63          	bgez	t5,10234 <handle_exception>

000000000001011c <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   1011c:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   10120:	00113023          	sd	ra,0(sp)
   10124:	00813423          	sd	s0,8(sp)
   10128:	00913823          	sd	s1,16(sp)
   1012c:	01213c23          	sd	s2,24(sp)
   10130:	03313023          	sd	s3,32(sp)
   10134:	03413423          	sd	s4,40(sp)
   10138:	03513823          	sd	s5,48(sp)
   1013c:	03613c23          	sd	s6,56(sp)
   10140:	05713023          	sd	s7,64(sp)
   10144:	05813423          	sd	s8,72(sp)
   10148:	05913823          	sd	s9,80(sp)
   1014c:	05a13c23          	sd	s10,88(sp)
   10150:	07b13023          	sd	s11,96(sp)
   10154:	06213423          	sd	sp,104(sp)
   10158:	07013c23          	sd	a6,120(sp)
   1015c:	09113023          	sd	a7,128(sp)
   10160:	08a13423          	sd	a0,136(sp)
   10164:	08b13823          	sd	a1,144(sp)
   10168:	08c13c23          	sd	a2,152(sp)
   1016c:	0ad13023          	sd	a3,160(sp)
   10170:	0ae13423          	sd	a4,168(sp)
   10174:	0af13823          	sd	a5,176(sp)
   10178:	0b013c23          	sd	a6,184(sp)
   1017c:	0d113023          	sd	a7,192(sp)
   10180:	0c513423          	sd	t0,200(sp)
   10184:	0c613823          	sd	t1,208(sp)
   10188:	0c713c23          	sd	t2,216(sp)
   1018c:	0fc13023          	sd	t3,224(sp)
   10190:	0fd13423          	sd	t4,232(sp)
   10194:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   10198:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   1019c:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101a0:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   101a4:	39f000ef          	jal	ra,10d42 <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   101a8:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   101ac:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   101b0:	00013083          	ld	ra,0(sp)
   101b4:	00813403          	ld	s0,8(sp)
   101b8:	01013483          	ld	s1,16(sp)
   101bc:	01813903          	ld	s2,24(sp)
   101c0:	02013983          	ld	s3,32(sp)
   101c4:	02813a03          	ld	s4,40(sp)
   101c8:	03013a83          	ld	s5,48(sp)
   101cc:	03813b03          	ld	s6,56(sp)
   101d0:	04013b83          	ld	s7,64(sp)
   101d4:	04813c03          	ld	s8,72(sp)
   101d8:	05013c83          	ld	s9,80(sp)
   101dc:	05813d03          	ld	s10,88(sp)
   101e0:	06013d83          	ld	s11,96(sp)
   101e4:	06813103          	ld	sp,104(sp)
   101e8:	07813803          	ld	a6,120(sp)
   101ec:	08013883          	ld	a7,128(sp)
   101f0:	08813503          	ld	a0,136(sp)
   101f4:	09013583          	ld	a1,144(sp)
   101f8:	09813603          	ld	a2,152(sp)
   101fc:	0a013683          	ld	a3,160(sp)
   10200:	0a813703          	ld	a4,168(sp)
   10204:	0b013783          	ld	a5,176(sp)
   10208:	0b813803          	ld	a6,184(sp)
   1020c:	0c013883          	ld	a7,192(sp)
   10210:	0c813283          	ld	t0,200(sp)
   10214:	0d013303          	ld	t1,208(sp)
   10218:	0d813383          	ld	t2,216(sp)
   1021c:	0e013e03          	ld	t3,224(sp)
   10220:	0e813e83          	ld	t4,232(sp)
   10224:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10228:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   1022c:	34002f73          	csrr	t5,mscratch
  mret
   10230:	30200073          	mret

0000000000010234 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10234:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10238:	1ef000ef          	jal	ra,10c26 <exception_handler_c>
  mret
   1023c:	30200073          	mret
	...

0000000000010242 <get_dev_bar>:
    uint64_t rsrv[1];           /// 0xfffff038
    uint8_t cfg_table[(1 << 12) - 0x40];/// 0xfffff040: RO: PNP configuration
} pnp_map;


static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10242:	715d                	addi	sp,sp,-80
   10244:	e4a2                	sd	s0,72(sp)
   10246:	0880                	addi	s0,sp,80
   10248:	faa43c23          	sd	a0,-72(s0)
   1024c:	87ae                	mv	a5,a1
   1024e:	8732                	mv	a4,a2
   10250:	faf41b23          	sh	a5,-74(s0)
   10254:	87ba                	mv	a5,a4
   10256:	faf41a23          	sh	a5,-76(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1025a:	fb843783          	ld	a5,-72(s0)
   1025e:	479c                	lw	a5,8(a5)
   10260:	0087d79b          	srliw	a5,a5,0x8
   10264:	2781                	sext.w	a5,a5
   10266:	2781                	sext.w	a5,a5
   10268:	0ff7f793          	andi	a5,a5,255
   1026c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10270:	fb843783          	ld	a5,-72(s0)
   10274:	479c                	lw	a5,8(a5)
   10276:	0107d79b          	srliw	a5,a5,0x10
   1027a:	2781                	sext.w	a5,a5
   1027c:	2781                	sext.w	a5,a5
   1027e:	0ff7f793          	andi	a5,a5,255
   10282:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10286:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   1028a:	fe042423          	sw	zero,-24(s0)
   1028e:	a82d                	j	102c8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10290:	fec42783          	lw	a5,-20(s0)
   10294:	04078793          	addi	a5,a5,64
   10298:	fb843703          	ld	a4,-72(s0)
   1029c:	97ba                	add	a5,a5,a4
   1029e:	639c                	ld	a5,0(a5)
   102a0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   102a4:	fb843703          	ld	a4,-72(s0)
   102a8:	fec42783          	lw	a5,-20(s0)
   102ac:	97ba                	add	a5,a5,a4
   102ae:	0407c783          	lbu	a5,64(a5)
   102b2:	2781                	sext.w	a5,a5
   102b4:	fec42703          	lw	a4,-20(s0)
   102b8:	9fb9                	addw	a5,a5,a4
   102ba:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   102be:	fe842783          	lw	a5,-24(s0)
   102c2:	2785                	addiw	a5,a5,1
   102c4:	fef42423          	sw	a5,-24(s0)
   102c8:	fe842703          	lw	a4,-24(s0)
   102cc:	fdc42783          	lw	a5,-36(s0)
   102d0:	2701                	sext.w	a4,a4
   102d2:	2781                	sext.w	a5,a5
   102d4:	faf74ee3          	blt	a4,a5,10290 <get_dev_bar+0x4e>
    }

    for (int i = 0; i < slv_total; i++) {
   102d8:	fe042223          	sw	zero,-28(s0)
   102dc:	a8b5                	j	10358 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   102de:	fec42783          	lw	a5,-20(s0)
   102e2:	04078793          	addi	a5,a5,64
   102e6:	fb843703          	ld	a4,-72(s0)
   102ea:	97ba                	add	a5,a5,a4
   102ec:	639c                	ld	a5,0(a5)
   102ee:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   102f2:	fec42783          	lw	a5,-20(s0)
   102f6:	27a1                	addiw	a5,a5,8
   102f8:	2781                	sext.w	a5,a5
   102fa:	04078793          	addi	a5,a5,64
   102fe:	fb843703          	ld	a4,-72(s0)
   10302:	97ba                	add	a5,a5,a4
   10304:	639c                	ld	a5,0(a5)
   10306:	fcf43423          	sd	a5,-56(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   1030a:	fc645783          	lhu	a5,-58(s0)
   1030e:	fb645703          	lhu	a4,-74(s0)
   10312:	2701                	sext.w	a4,a4
   10314:	2781                	sext.w	a5,a5
   10316:	00f71f63          	bne	a4,a5,10334 <get_dev_bar+0xf2>
   1031a:	fc445783          	lhu	a5,-60(s0)
   1031e:	fb445703          	lhu	a4,-76(s0)
   10322:	2701                	sext.w	a4,a4
   10324:	2781                	sext.w	a5,a5
   10326:	00f71763          	bne	a4,a5,10334 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1032a:	fcc42783          	lw	a5,-52(s0)
   1032e:	1782                	slli	a5,a5,0x20
   10330:	9381                	srli	a5,a5,0x20
   10332:	a825                	j	1036a <get_dev_bar+0x128>
        }
        off += pnp->cfg_table[off];
   10334:	fb843703          	ld	a4,-72(s0)
   10338:	fec42783          	lw	a5,-20(s0)
   1033c:	97ba                	add	a5,a5,a4
   1033e:	0407c783          	lbu	a5,64(a5)
   10342:	2781                	sext.w	a5,a5
   10344:	fec42703          	lw	a4,-20(s0)
   10348:	9fb9                	addw	a5,a5,a4
   1034a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1034e:	fe442783          	lw	a5,-28(s0)
   10352:	2785                	addiw	a5,a5,1
   10354:	fef42223          	sw	a5,-28(s0)
   10358:	fe442703          	lw	a4,-28(s0)
   1035c:	fe042783          	lw	a5,-32(s0)
   10360:	2701                	sext.w	a4,a4
   10362:	2781                	sext.w	a5,a5
   10364:	f6f74de3          	blt	a4,a5,102de <get_dev_bar+0x9c>
    }

    return DEV_NONE;
   10368:	57fd                	li	a5,-1
}
   1036a:	853e                	mv	a0,a5
   1036c:	6426                	ld	s0,72(sp)
   1036e:	6161                	addi	sp,sp,80
   10370:	8082                	ret

0000000000010372 <mpu_region_total>:
    mpu_ctrl_wrbits_type bits;
    uint64_t value;
} mpu_ctrl_type;

// Read CSR_MPU_ctrl vendor specific register
static int mpu_region_total() {
   10372:	1101                	addi	sp,sp,-32
   10374:	ec22                	sd	s0,24(sp)
   10376:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10378:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1037c:	bc4027f3          	csrr	a5,0xbc4
   10380:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10384:	fe843783          	ld	a5,-24(s0)
   10388:	83a1                	srli	a5,a5,0x8
   1038a:	2781                	sext.w	a5,a5
}
   1038c:	853e                	mv	a0,a5
   1038e:	6462                	ld	s0,24(sp)
   10390:	6105                	addi	sp,sp,32
   10392:	8082                	ret

0000000000010394 <mpu_disable_region>:

static void mpu_disable_region(int idx) {
   10394:	7179                	addi	sp,sp,-48
   10396:	f422                	sd	s0,40(sp)
   10398:	1800                	addi	s0,sp,48
   1039a:	87aa                	mv	a5,a0
   1039c:	fcf42e23          	sw	a5,-36(s0)
    mpu_ctrl_type ctrl;
    ctrl.value = 0;
   103a0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   103a4:	fdc42783          	lw	a5,-36(s0)
   103a8:	0ff7f793          	andi	a5,a5,255
   103ac:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   103b0:	fe844783          	lbu	a5,-24(s0)
   103b4:	f807e793          	ori	a5,a5,-128
   103b8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   103bc:	fe843783          	ld	a5,-24(s0)
   103c0:	bc479073          	csrw	0xbc4,a5
}
   103c4:	0001                	nop
   103c6:	7422                	ld	s0,40(sp)
   103c8:	6145                	addi	sp,sp,48
   103ca:	8082                	ret

00000000000103cc <mpu_enable_region>:

static void mpu_enable_region(int idx,
                       uint64_t bar,
                       uint64_t KB,
                       int cached,
                       const char *rwx) {
   103cc:	715d                	addi	sp,sp,-80
   103ce:	e4a2                	sd	s0,72(sp)
   103d0:	0880                	addi	s0,sp,80
   103d2:	87aa                	mv	a5,a0
   103d4:	fcb43023          	sd	a1,-64(s0)
   103d8:	fac43c23          	sd	a2,-72(s0)
   103dc:	fae43823          	sd	a4,-80(s0)
   103e0:	fcf42623          	sw	a5,-52(s0)
   103e4:	87b6                	mv	a5,a3
   103e6:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   103ea:	c0000793          	li	a5,-1024
   103ee:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   103f2:	fb043783          	ld	a5,-80(s0)
   103f6:	fef43023          	sd	a5,-32(s0)
    mpu_ctrl_type ctrl;

    asm("csrw 0xBC2, %0" : :"r"(bar));
   103fa:	fc043783          	ld	a5,-64(s0)
   103fe:	bc279073          	csrw	0xbc2,a5

    KB >>= 1;
   10402:	fb843783          	ld	a5,-72(s0)
   10406:	8385                	srli	a5,a5,0x1
   10408:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1040c:	a819                	j	10422 <mpu_enable_region+0x56>
        mask <<= 1;
   1040e:	fe843783          	ld	a5,-24(s0)
   10412:	0786                	slli	a5,a5,0x1
   10414:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10418:	fb843783          	ld	a5,-72(s0)
   1041c:	8385                	srli	a5,a5,0x1
   1041e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10422:	fb843783          	ld	a5,-72(s0)
   10426:	f7e5                	bnez	a5,1040e <mpu_enable_region+0x42>
    }
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10428:	fe843783          	ld	a5,-24(s0)
   1042c:	bc379073          	csrw	0xbc3,a5

    ctrl.value = 0;
   10430:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10434:	fcc42783          	lw	a5,-52(s0)
   10438:	0ff7f793          	andi	a5,a5,255
   1043c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10440:	fd844783          	lbu	a5,-40(s0)
   10444:	0107e793          	ori	a5,a5,16
   10448:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1044c:	fc842783          	lw	a5,-56(s0)
   10450:	8b85                	andi	a5,a5,1
   10452:	0ff7f793          	andi	a5,a5,255
   10456:	8b85                	andi	a5,a5,1
   10458:	0037969b          	slliw	a3,a5,0x3
   1045c:	fd844783          	lbu	a5,-40(s0)
   10460:	9bdd                	andi	a5,a5,-9
   10462:	873e                	mv	a4,a5
   10464:	87b6                	mv	a5,a3
   10466:	8fd9                	or	a5,a5,a4
   10468:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1046c:	fd844783          	lbu	a5,-40(s0)
   10470:	f807e793          	ori	a5,a5,-128
   10474:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10478:	a09d                	j	104de <mpu_enable_region+0x112>
        if (*p == 'r') {
   1047a:	fe043783          	ld	a5,-32(s0)
   1047e:	0007c783          	lbu	a5,0(a5)
   10482:	873e                	mv	a4,a5
   10484:	07200793          	li	a5,114
   10488:	00f71863          	bne	a4,a5,10498 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1048c:	fd844783          	lbu	a5,-40(s0)
   10490:	0027e793          	ori	a5,a5,2
   10494:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'w') {
   10498:	fe043783          	ld	a5,-32(s0)
   1049c:	0007c783          	lbu	a5,0(a5)
   104a0:	873e                	mv	a4,a5
   104a2:	07700793          	li	a5,119
   104a6:	00f71863          	bne	a4,a5,104b6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   104aa:	fd844783          	lbu	a5,-40(s0)
   104ae:	0017e793          	ori	a5,a5,1
   104b2:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'x') {
   104b6:	fe043783          	ld	a5,-32(s0)
   104ba:	0007c783          	lbu	a5,0(a5)
   104be:	873e                	mv	a4,a5
   104c0:	07800793          	li	a5,120
   104c4:	00f71863          	bne	a4,a5,104d4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   104c8:	fd844783          	lbu	a5,-40(s0)
   104cc:	0047e793          	ori	a5,a5,4
   104d0:	fcf40c23          	sb	a5,-40(s0)
        }
        p++;
   104d4:	fe043783          	ld	a5,-32(s0)
   104d8:	0785                	addi	a5,a5,1
   104da:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   104de:	fe043783          	ld	a5,-32(s0)
   104e2:	0007c783          	lbu	a5,0(a5)
   104e6:	fbd1                	bnez	a5,1047a <mpu_enable_region+0xae>
    }
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   104e8:	fd843783          	ld	a5,-40(s0)
   104ec:	bc479073          	csrw	0xbc4,a5
}
   104f0:	0001                	nop
   104f2:	6426                	ld	s0,72(sp)
   104f4:	6161                	addi	sp,sp,80
   104f6:	8082                	ret

00000000000104f8 <fw_get_cpuid>:
#include "sd_uefi.h"
#include "uart.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   104f8:	1101                	addi	sp,sp,-32
   104fa:	ec22                	sd	s0,24(sp)
   104fc:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   104fe:	f14027f3          	csrr	a5,mhartid
   10502:	fef42623          	sw	a5,-20(s0)
    return ret;
   10506:	fec42783          	lw	a5,-20(s0)
}
   1050a:	853e                	mv	a0,a5
   1050c:	6462                	ld	s0,24(sp)
   1050e:	6105                	addi	sp,sp,32
   10510:	8082                	ret

0000000000010512 <led_set>:

void led_set(int output) {
   10512:	1101                	addi	sp,sp,-32
   10514:	ec22                	sd	s0,24(sp)
   10516:	1000                	addi	s0,sp,32
   10518:	87aa                	mv	a5,a0
   1051a:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   1051e:	fec42783          	lw	a5,-20(s0)
   10522:	0047979b          	slliw	a5,a5,0x4
   10526:	0007871b          	sext.w	a4,a5
   1052a:	100607b7          	lui	a5,0x10060
   1052e:	2701                	sext.w	a4,a4
   10530:	c7d8                	sw	a4,12(a5)
}
   10532:	0001                	nop
   10534:	6462                	ld	s0,24(sp)
   10536:	6105                	addi	sp,sp,32
   10538:	8082                	ret

000000000001053a <get_dip>:

int get_dip(int idx) {
   1053a:	7179                	addi	sp,sp,-48
   1053c:	f422                	sd	s0,40(sp)
   1053e:	1800                	addi	s0,sp,48
   10540:	87aa                	mv	a5,a0
   10542:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   10546:	100607b7          	lui	a5,0x10060
   1054a:	439c                	lw	a5,0(a5)
   1054c:	0007871b          	sext.w	a4,a5
   10550:	fdc42783          	lw	a5,-36(s0)
   10554:	00f757bb          	srlw	a5,a4,a5
   10558:	2781                	sext.w	a5,a5
   1055a:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   1055e:	fec42783          	lw	a5,-20(s0)
   10562:	8b85                	andi	a5,a5,1
   10564:	2781                	sext.w	a5,a5
}
   10566:	853e                	mv	a0,a5
   10568:	7422                	ld	s0,40(sp)
   1056a:	6145                	addi	sp,sp,48
   1056c:	8082                	ret

000000000001056e <get_dips>:

int get_dips() {
   1056e:	1101                	addi	sp,sp,-32
   10570:	ec22                	sd	s0,24(sp)
   10572:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   10574:	100607b7          	lui	a5,0x10060
   10578:	439c                	lw	a5,0(a5)
   1057a:	2781                	sext.w	a5,a5
   1057c:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   10580:	fec42783          	lw	a5,-20(s0)
   10584:	8bbd                	andi	a5,a5,15
   10586:	2781                	sext.w	a5,a5
}
   10588:	853e                	mv	a0,a5
   1058a:	6462                	ld	s0,24(sp)
   1058c:	6105                	addi	sp,sp,32
   1058e:	8082                	ret

0000000000010590 <copy_image>:



void copy_image() { 
   10590:	715d                	addi	sp,sp,-80
   10592:	e486                	sd	ra,72(sp)
   10594:	e0a2                	sd	s0,64(sp)
   10596:	0880                	addi	s0,sp,80
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10598:	090007b7          	lui	a5,0x9000
   1059c:	fcf43c23          	sd	a5,-40(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   105a0:	080007b7          	lui	a5,0x8000
   105a4:	fcf43823          	sd	a5,-48(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   105a8:	100ff7b7          	lui	a5,0x100ff
   105ac:	fcf43423          	sd	a5,-56(s0)

    uint64_t qspi2 = ~0ull;
   105b0:	57fd                	li	a5,-1
   105b2:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   105b6:	00000097          	auipc	ra,0x0
   105ba:	fb8080e7          	jalr	-72(ra) # 1056e <get_dips>
   105be:	87aa                	mv	a5,a0
   105c0:	85be                	mv	a1,a5
   105c2:	67c9                	lui	a5,0x12
   105c4:	40078513          	addi	a0,a5,1024 # 12400 <strnlen+0x1c>
   105c8:	00001097          	auipc	ra,0x1
   105cc:	0bc080e7          	jalr	188(ra) # 11684 <printf_uart>
    if (get_dips() == 0xB) {
   105d0:	00000097          	auipc	ra,0x0
   105d4:	f9e080e7          	jalr	-98(ra) # 1056e <get_dips>
   105d8:	87aa                	mv	a5,a0
   105da:	873e                	mv	a4,a5
   105dc:	47ad                	li	a5,11
   105de:	04f71d63          	bne	a4,a5,10638 <copy_image+0xa8>
        // Load from SD-card
        qspi2 = get_dev_bar(pnp, VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   105e2:	07500613          	li	a2,117
   105e6:	0f100593          	li	a1,241
   105ea:	fc843503          	ld	a0,-56(s0)
   105ee:	c55ff0ef          	jal	ra,10242 <get_dev_bar>
   105f2:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   105f6:	fe843703          	ld	a4,-24(s0)
   105fa:	57fd                	li	a5,-1
   105fc:	02f70e63          	beq	a4,a5,10638 <copy_image+0xa8>
            print_uart("Select . .QSPI2\r\n", 17);
   10600:	45c5                	li	a1,17
   10602:	67c9                	lui	a5,0x12
   10604:	41078513          	addi	a0,a5,1040 # 12410 <strnlen+0x2c>
   10608:	00001097          	auipc	ra,0x1
   1060c:	aa0080e7          	jalr	-1376(ra) # 110a8 <print_uart>
            if (run_from_sdcard() == -1) {
   10610:	00002097          	auipc	ra,0x2
   10614:	ab6080e7          	jalr	-1354(ra) # 120c6 <run_from_sdcard>
   10618:	87aa                	mv	a5,a0
   1061a:	873e                	mv	a4,a5
   1061c:	57fd                	li	a5,-1
   1061e:	00f71d63          	bne	a4,a5,10638 <copy_image+0xa8>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   10622:	45c9                	li	a1,18
   10624:	67c9                	lui	a5,0x12
   10626:	42878513          	addi	a0,a5,1064 # 12428 <strnlen+0x44>
   1062a:	00001097          	auipc	ra,0x1
   1062e:	a7e080e7          	jalr	-1410(ra) # 110a8 <print_uart>
                qspi2 = ~0ull;
   10632:	57fd                	li	a5,-1
   10634:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   10638:	fe843703          	ld	a4,-24(s0)
   1063c:	57fd                	li	a5,-1
   1063e:	0af71163          	bne	a4,a5,106e0 <copy_image+0x150>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   10642:	fc843783          	ld	a5,-56(s0)
   10646:	43dc                	lw	a5,4(a5)
   10648:	efc1                	bnez	a5,106e0 <copy_image+0x150>
        // Check if SRAM already initialized in RTL simulation, then skip copying
        uint64_t *dst = (uint64_t *)sram;
   1064a:	fd043783          	ld	a5,-48(s0)
   1064e:	fcf43023          	sd	a5,-64(s0)
        uint64_t *src = (uint64_t *)fwrom;
   10652:	fd843783          	ld	a5,-40(s0)
   10656:	faf43c23          	sd	a5,-72(s0)
        int skip_rtl_sim = 1;
   1065a:	4785                	li	a5,1
   1065c:	fef42223          	sw	a5,-28(s0)
        for (int i = 0; i < 8; i++) {
   10660:	fe042023          	sw	zero,-32(s0)
   10664:	a80d                	j	10696 <copy_image+0x106>
            if (src[i] != dst[i]) {
   10666:	fe042783          	lw	a5,-32(s0)
   1066a:	078e                	slli	a5,a5,0x3
   1066c:	fb843703          	ld	a4,-72(s0)
   10670:	97ba                	add	a5,a5,a4
   10672:	6398                	ld	a4,0(a5)
   10674:	fe042783          	lw	a5,-32(s0)
   10678:	078e                	slli	a5,a5,0x3
   1067a:	fc043683          	ld	a3,-64(s0)
   1067e:	97b6                	add	a5,a5,a3
   10680:	639c                	ld	a5,0(a5)
   10682:	00f70563          	beq	a4,a5,1068c <copy_image+0xfc>
                skip_rtl_sim = 0;
   10686:	fe042223          	sw	zero,-28(s0)
                break;
   1068a:	a829                	j	106a4 <copy_image+0x114>
        for (int i = 0; i < 8; i++) {
   1068c:	fe042783          	lw	a5,-32(s0)
   10690:	2785                	addiw	a5,a5,1
   10692:	fef42023          	sw	a5,-32(s0)
   10696:	fe042783          	lw	a5,-32(s0)
   1069a:	0007871b          	sext.w	a4,a5
   1069e:	479d                	li	a5,7
   106a0:	fce7d3e3          	ble	a4,a5,10666 <copy_image+0xd6>
            }
        }
        if (skip_rtl_sim) {
   106a4:	fe442783          	lw	a5,-28(s0)
   106a8:	2781                	sext.w	a5,a5
   106aa:	cb91                	beqz	a5,106be <copy_image+0x12e>
            print_uart("NO.COPY. .rtl.sim\r\n", 19);
   106ac:	45cd                	li	a1,19
   106ae:	67c9                	lui	a5,0x12
   106b0:	44078513          	addi	a0,a5,1088 # 12440 <strnlen+0x5c>
   106b4:	00001097          	auipc	ra,0x1
   106b8:	9f4080e7          	jalr	-1548(ra) # 110a8 <print_uart>
   106bc:	a015                	j	106e0 <copy_image+0x150>
        } else {
            print_uart("Coping . .FWIMAGE\r\n", 19);
   106be:	45cd                	li	a1,19
   106c0:	67c9                	lui	a5,0x12
   106c2:	45878513          	addi	a0,a5,1112 # 12458 <strnlen+0x74>
   106c6:	00001097          	auipc	ra,0x1
   106ca:	9e2080e7          	jalr	-1566(ra) # 110a8 <print_uart>
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   106ce:	000407b7          	lui	a5,0x40
   106d2:	863e                	mv	a2,a5
   106d4:	fd843583          	ld	a1,-40(s0)
   106d8:	fd043503          	ld	a0,-48(s0)
   106dc:	449010ef          	jal	ra,12324 <memcpy>
        }
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   106e0:	fc843783          	ld	a5,-56(s0)
   106e4:	20211737          	lui	a4,0x20211
   106e8:	1237071b          	addiw	a4,a4,291
   106ec:	c3d8                	sw	a4,4(a5)
}
   106ee:	0001                	nop
   106f0:	60a6                	ld	ra,72(sp)
   106f2:	6406                	ld	s0,64(sp)
   106f4:	6161                	addi	sp,sp,80
   106f6:	8082                	ret

00000000000106f8 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   106f8:	1141                	addi	sp,sp,-16
   106fa:	e422                	sd	s0,8(sp)
   106fc:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   106fe:	0001                	nop
   10700:	6422                	ld	s0,8(sp)
   10702:	0141                	addi	sp,sp,16
   10704:	8082                	ret

0000000000010706 <init_mpu>:

void init_mpu() {
   10706:	1101                	addi	sp,sp,-32
   10708:	ec06                	sd	ra,24(sp)
   1070a:	e822                	sd	s0,16(sp)
   1070c:	1000                	addi	s0,sp,32
    int mpu_total = mpu_region_total();
   1070e:	00000097          	auipc	ra,0x0
   10712:	c64080e7          	jalr	-924(ra) # 10372 <mpu_region_total>
   10716:	87aa                	mv	a5,a0
   10718:	fef42423          	sw	a5,-24(s0)
    int dis_idx = 0;
   1071c:	fe042223          	sw	zero,-28(s0)

    // FU740 copmatible
    // [0] Lowest prioirty: region enable all memory as rwx
    mpu_enable_region(0,  // idx
   10720:	67c9                	lui	a5,0x12
   10722:	47078713          	addi	a4,a5,1136 # 12470 <strnlen+0x8c>
   10726:	4685                	li	a3,1
   10728:	567d                	li	a2,-1
   1072a:	4581                	li	a1,0
   1072c:	4501                	li	a0,0
   1072e:	00000097          	auipc	ra,0x0
   10732:	c9e080e7          	jalr	-866(ra) # 103cc <mpu_enable_region>
                      (~0ull), // KB (all memory ranges)
                      1, // cached
                      "rwx");

    // Uncached CLINT
    mpu_enable_region(1,  // idx
   10736:	67c9                	lui	a5,0x12
   10738:	47878713          	addi	a4,a5,1144 # 12478 <strnlen+0x94>
   1073c:	4681                	li	a3,0
   1073e:	6621                	lui	a2,0x8
   10740:	020005b7          	lui	a1,0x2000
   10744:	4505                	li	a0,1
   10746:	00000097          	auipc	ra,0x0
   1074a:	c86080e7          	jalr	-890(ra) # 103cc <mpu_enable_region>
                      (32768), // KB
                      0, // uncached
                      "rw");

    // Uncached PLIC
    mpu_enable_region(2,  // idx
   1074e:	67c9                	lui	a5,0x12
   10750:	47878713          	addi	a4,a5,1144 # 12478 <strnlen+0x94>
   10754:	4681                	li	a3,0
   10756:	6641                	lui	a2,0x10
   10758:	0c0005b7          	lui	a1,0xc000
   1075c:	4509                	li	a0,2
   1075e:	00000097          	auipc	ra,0x0
   10762:	c6e080e7          	jalr	-914(ra) # 103cc <mpu_enable_region>
                      (65536), // KB
                      0, // uncached
                      "rw");

    // Uncached peripheries (IO)
    mpu_enable_region(3,  // idx
   10766:	67c9                	lui	a5,0x12
   10768:	47878713          	addi	a4,a5,1144 # 12478 <strnlen+0x94>
   1076c:	4681                	li	a3,0
   1076e:	00040637          	lui	a2,0x40
   10772:	100005b7          	lui	a1,0x10000
   10776:	450d                	li	a0,3
   10778:	00000097          	auipc	ra,0x0
   1077c:	c54080e7          	jalr	-940(ra) # 103cc <mpu_enable_region>
                      (0x0000000010000000ull), // bar
                      (0x40000), // KB
                      0, // uncached
                      "rw");
    dis_idx = 4;
   10780:	4791                	li	a5,4
   10782:	fef42223          	sw	a5,-28(s0)

    for (int i = dis_idx; i < mpu_total; i++) {
   10786:	fe442783          	lw	a5,-28(s0)
   1078a:	fef42623          	sw	a5,-20(s0)
   1078e:	a819                	j	107a4 <init_mpu+0x9e>
        mpu_disable_region(i);
   10790:	fec42783          	lw	a5,-20(s0)
   10794:	853e                	mv	a0,a5
   10796:	bffff0ef          	jal	ra,10394 <mpu_disable_region>
    for (int i = dis_idx; i < mpu_total; i++) {
   1079a:	fec42783          	lw	a5,-20(s0)
   1079e:	2785                	addiw	a5,a5,1
   107a0:	fef42623          	sw	a5,-20(s0)
   107a4:	fec42703          	lw	a4,-20(s0)
   107a8:	fe842783          	lw	a5,-24(s0)
   107ac:	2701                	sext.w	a4,a4
   107ae:	2781                	sext.w	a5,a5
   107b0:	fef740e3          	blt	a4,a5,10790 <init_mpu+0x8a>
    }
}
   107b4:	0001                	nop
   107b6:	60e2                	ld	ra,24(sp)
   107b8:	6442                	ld	s0,16(sp)
   107ba:	6105                	addi	sp,sp,32
   107bc:	8082                	ret

00000000000107be <_init>:

void _init() {
   107be:	7139                	addi	sp,sp,-64
   107c0:	fc06                	sd	ra,56(sp)
   107c2:	f822                	sd	s0,48(sp)
   107c4:	0080                	addi	s0,sp,64
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   107c6:	100ff7b7          	lui	a5,0x100ff
   107ca:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   107ce:	100107b7          	lui	a5,0x10010
   107d2:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   107d6:	100607b7          	lui	a5,0x10060
   107da:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   107de:	47a1                	li	a5,8
   107e0:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   107e4:	fd043783          	ld	a5,-48(s0)
   107e8:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   107ec:	6785                	lui	a5,0x1
   107ee:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   107f2:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   107f6:	fd043783          	ld	a5,-48(s0)
   107fa:	3047b073          	csrc	mie,a5

    init_mpu();
   107fe:	00000097          	auipc	ra,0x0
   10802:	f08080e7          	jalr	-248(ra) # 10706 <init_mpu>

    txctrl.v = 0;
   10806:	fc042423          	sw	zero,-56(s0)
    txctrl.b.txen = 1;
   1080a:	fc844783          	lbu	a5,-56(s0)
   1080e:	0017e793          	ori	a5,a5,1
   10812:	fcf40423          	sb	a5,-56(s0)
    rxctrl.v = 0;
   10816:	fc042023          	sw	zero,-64(s0)
    rxctrl.b.rxen = 1;
   1081a:	fc044783          	lbu	a5,-64(s0)
   1081e:	0017e793          	ori	a5,a5,1
   10822:	fcf40023          	sb	a5,-64(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   10826:	fe043783          	ld	a5,-32(s0)
   1082a:	0ad00713          	li	a4,173
   1082e:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   10830:	fc842783          	lw	a5,-56(s0)
   10834:	0007871b          	sext.w	a4,a5
   10838:	fe043783          	ld	a5,-32(s0)
   1083c:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   1083e:	fc042783          	lw	a5,-64(s0)
   10842:	0007871b          	sext.w	a4,a5
   10846:	fe043783          	ld	a5,-32(s0)
   1084a:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   1084c:	fd843783          	ld	a5,-40(s0)
   10850:	473d                	li	a4,15
   10852:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   10854:	fd843783          	ld	a5,-40(s0)
   10858:	6705                	lui	a4,0x1
   1085a:	3741                	addiw	a4,a4,-16
   1085c:	c798                	sw	a4,8(a5)

    led_set(0x01);
   1085e:	4505                	li	a0,1
   10860:	cb3ff0ef          	jal	ra,10512 <led_set>

    copy_image();
   10864:	00000097          	auipc	ra,0x0
   10868:	d2c080e7          	jalr	-724(ra) # 10590 <copy_image>
    led_set(0x02);
   1086c:	4509                	li	a0,2
   1086e:	ca5ff0ef          	jal	ra,10512 <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   10872:	67c9                	lui	a5,0x12
   10874:	48078593          	addi	a1,a5,1152 # 12480 <strnlen+0x9c>
   10878:	67c9                	lui	a5,0x12
   1087a:	48878513          	addi	a0,a5,1160 # 12488 <strnlen+0xa4>
   1087e:	607000ef          	jal	ra,11684 <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   10882:	67c9                	lui	a5,0x12
   10884:	49878593          	addi	a1,a5,1176 # 12498 <strnlen+0xb4>
   10888:	67c9                	lui	a5,0x12
   1088a:	4a078513          	addi	a0,a5,1184 # 124a0 <strnlen+0xbc>
   1088e:	5f7000ef          	jal	ra,11684 <printf_uart>

    led_set(0x03);
   10892:	450d                	li	a0,3
   10894:	c7fff0ef          	jal	ra,10512 <led_set>
}
   10898:	0001                	nop
   1089a:	70e2                	ld	ra,56(sp)
   1089c:	7442                	ld	s0,48(sp)
   1089e:	6121                	addi	sp,sp,64
   108a0:	8082                	ret

00000000000108a2 <main>:

/** Not used actually */
int main() {
   108a2:	1141                	addi	sp,sp,-16
   108a4:	e422                	sd	s0,8(sp)
   108a6:	0800                	addi	s0,sp,16
    while (1) {}
   108a8:	a001                	j	108a8 <main+0x6>
	...

00000000000108ac <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   108ac:	715d                	addi	sp,sp,-80
   108ae:	e4a2                	sd	s0,72(sp)
   108b0:	0880                	addi	s0,sp,80
   108b2:	faa43c23          	sd	a0,-72(s0)
   108b6:	87ae                	mv	a5,a1
   108b8:	8732                	mv	a4,a2
   108ba:	faf41b23          	sh	a5,-74(s0)
   108be:	87ba                	mv	a5,a4
   108c0:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   108c4:	fb843783          	ld	a5,-72(s0)
   108c8:	479c                	lw	a5,8(a5)
   108ca:	0087d79b          	srliw	a5,a5,0x8
   108ce:	2781                	sext.w	a5,a5
   108d0:	2781                	sext.w	a5,a5
   108d2:	0ff7f793          	andi	a5,a5,255
   108d6:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   108da:	fb843783          	ld	a5,-72(s0)
   108de:	479c                	lw	a5,8(a5)
   108e0:	0107d79b          	srliw	a5,a5,0x10
   108e4:	2781                	sext.w	a5,a5
   108e6:	2781                	sext.w	a5,a5
   108e8:	0ff7f793          	andi	a5,a5,255
   108ec:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   108f0:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   108f4:	fe042423          	sw	zero,-24(s0)
   108f8:	a82d                	j	10932 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108fa:	fec42783          	lw	a5,-20(s0)
   108fe:	04078793          	addi	a5,a5,64
   10902:	fb843703          	ld	a4,-72(s0)
   10906:	97ba                	add	a5,a5,a4
   10908:	639c                	ld	a5,0(a5)
   1090a:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   1090e:	fb843703          	ld	a4,-72(s0)
   10912:	fec42783          	lw	a5,-20(s0)
   10916:	97ba                	add	a5,a5,a4
   10918:	0407c783          	lbu	a5,64(a5)
   1091c:	2781                	sext.w	a5,a5
   1091e:	fec42703          	lw	a4,-20(s0)
   10922:	9fb9                	addw	a5,a5,a4
   10924:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10928:	fe842783          	lw	a5,-24(s0)
   1092c:	2785                	addiw	a5,a5,1
   1092e:	fef42423          	sw	a5,-24(s0)
   10932:	fe842703          	lw	a4,-24(s0)
   10936:	fdc42783          	lw	a5,-36(s0)
   1093a:	2701                	sext.w	a4,a4
   1093c:	2781                	sext.w	a5,a5
   1093e:	faf74ee3          	blt	a4,a5,108fa <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10942:	fe042223          	sw	zero,-28(s0)
   10946:	a8b5                	j	109c2 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10948:	fec42783          	lw	a5,-20(s0)
   1094c:	04078793          	addi	a5,a5,64
   10950:	fb843703          	ld	a4,-72(s0)
   10954:	97ba                	add	a5,a5,a4
   10956:	639c                	ld	a5,0(a5)
   10958:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   1095c:	fec42783          	lw	a5,-20(s0)
   10960:	27a1                	addiw	a5,a5,8
   10962:	2781                	sext.w	a5,a5
   10964:	04078793          	addi	a5,a5,64
   10968:	fb843703          	ld	a4,-72(s0)
   1096c:	97ba                	add	a5,a5,a4
   1096e:	639c                	ld	a5,0(a5)
   10970:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10974:	fc645783          	lhu	a5,-58(s0)
   10978:	fb645703          	lhu	a4,-74(s0)
   1097c:	2701                	sext.w	a4,a4
   1097e:	2781                	sext.w	a5,a5
   10980:	00f71f63          	bne	a4,a5,1099e <get_dev_bar+0xf2>
   10984:	fc445783          	lhu	a5,-60(s0)
   10988:	fb445703          	lhu	a4,-76(s0)
   1098c:	2701                	sext.w	a4,a4
   1098e:	2781                	sext.w	a5,a5
   10990:	00f71763          	bne	a4,a5,1099e <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10994:	fcc42783          	lw	a5,-52(s0)
   10998:	1782                	slli	a5,a5,0x20
   1099a:	9381                	srli	a5,a5,0x20
   1099c:	a825                	j	109d4 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   1099e:	fb843703          	ld	a4,-72(s0)
   109a2:	fec42783          	lw	a5,-20(s0)
   109a6:	97ba                	add	a5,a5,a4
   109a8:	0407c783          	lbu	a5,64(a5)
   109ac:	2781                	sext.w	a5,a5
   109ae:	fec42703          	lw	a4,-20(s0)
   109b2:	9fb9                	addw	a5,a5,a4
   109b4:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   109b8:	fe442783          	lw	a5,-28(s0)
   109bc:	2785                	addiw	a5,a5,1
   109be:	fef42223          	sw	a5,-28(s0)
   109c2:	fe442703          	lw	a4,-28(s0)
   109c6:	fe042783          	lw	a5,-32(s0)
   109ca:	2701                	sext.w	a4,a4
   109cc:	2781                	sext.w	a5,a5
   109ce:	f6f74de3          	blt	a4,a5,10948 <get_dev_bar+0x9c>
    return DEV_NONE;
   109d2:	57fd                	li	a5,-1
}
   109d4:	853e                	mv	a0,a5
   109d6:	6426                	ld	s0,72(sp)
   109d8:	6161                	addi	sp,sp,80
   109da:	8082                	ret

00000000000109dc <mpu_region_total>:
static int mpu_region_total() {
   109dc:	1101                	addi	sp,sp,-32
   109de:	ec22                	sd	s0,24(sp)
   109e0:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   109e2:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   109e6:	bc4027f3          	csrr	a5,0xbc4
   109ea:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   109ee:	fe843783          	ld	a5,-24(s0)
   109f2:	83a1                	srli	a5,a5,0x8
   109f4:	2781                	sext.w	a5,a5
}
   109f6:	853e                	mv	a0,a5
   109f8:	6462                	ld	s0,24(sp)
   109fa:	6105                	addi	sp,sp,32
   109fc:	8082                	ret

00000000000109fe <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   109fe:	7179                	addi	sp,sp,-48
   10a00:	f422                	sd	s0,40(sp)
   10a02:	1800                	addi	s0,sp,48
   10a04:	87aa                	mv	a5,a0
   10a06:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10a0a:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10a0e:	fdc42783          	lw	a5,-36(s0)
   10a12:	0ff7f793          	andi	a5,a5,255
   10a16:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10a1a:	fe844783          	lbu	a5,-24(s0)
   10a1e:	f807e793          	ori	a5,a5,-128
   10a22:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10a26:	fe843783          	ld	a5,-24(s0)
   10a2a:	bc479073          	csrw	0xbc4,a5
}
   10a2e:	0001                	nop
   10a30:	7422                	ld	s0,40(sp)
   10a32:	6145                	addi	sp,sp,48
   10a34:	8082                	ret

0000000000010a36 <mpu_enable_region>:
                       const char *rwx) {
   10a36:	715d                	addi	sp,sp,-80
   10a38:	e4a2                	sd	s0,72(sp)
   10a3a:	0880                	addi	s0,sp,80
   10a3c:	87aa                	mv	a5,a0
   10a3e:	fcb43023          	sd	a1,-64(s0)
   10a42:	fac43c23          	sd	a2,-72(s0)
   10a46:	fae43823          	sd	a4,-80(s0)
   10a4a:	fcf42623          	sw	a5,-52(s0)
   10a4e:	87b6                	mv	a5,a3
   10a50:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10a54:	c0000793          	li	a5,-1024
   10a58:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10a5c:	fb043783          	ld	a5,-80(s0)
   10a60:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10a64:	fc043783          	ld	a5,-64(s0)
   10a68:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10a6c:	fb843783          	ld	a5,-72(s0)
   10a70:	8385                	srli	a5,a5,0x1
   10a72:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a76:	a819                	j	10a8c <mpu_enable_region+0x56>
        mask <<= 1;
   10a78:	fe843783          	ld	a5,-24(s0)
   10a7c:	0786                	slli	a5,a5,0x1
   10a7e:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10a82:	fb843783          	ld	a5,-72(s0)
   10a86:	8385                	srli	a5,a5,0x1
   10a88:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a8c:	fb843783          	ld	a5,-72(s0)
   10a90:	f7e5                	bnez	a5,10a78 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10a92:	fe843783          	ld	a5,-24(s0)
   10a96:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10a9a:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10a9e:	fcc42783          	lw	a5,-52(s0)
   10aa2:	0ff7f793          	andi	a5,a5,255
   10aa6:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10aaa:	fd844783          	lbu	a5,-40(s0)
   10aae:	0107e793          	ori	a5,a5,16
   10ab2:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10ab6:	fc842783          	lw	a5,-56(s0)
   10aba:	8b85                	andi	a5,a5,1
   10abc:	0ff7f793          	andi	a5,a5,255
   10ac0:	8b85                	andi	a5,a5,1
   10ac2:	0037969b          	slliw	a3,a5,0x3
   10ac6:	fd844783          	lbu	a5,-40(s0)
   10aca:	9bdd                	andi	a5,a5,-9
   10acc:	873e                	mv	a4,a5
   10ace:	87b6                	mv	a5,a3
   10ad0:	8fd9                	or	a5,a5,a4
   10ad2:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10ad6:	fd844783          	lbu	a5,-40(s0)
   10ada:	f807e793          	ori	a5,a5,-128
   10ade:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10ae2:	a09d                	j	10b48 <mpu_enable_region+0x112>
        if (*p == 'r') {
   10ae4:	fe043783          	ld	a5,-32(s0)
   10ae8:	0007c783          	lbu	a5,0(a5)
   10aec:	873e                	mv	a4,a5
   10aee:	07200793          	li	a5,114
   10af2:	00f71863          	bne	a4,a5,10b02 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10af6:	fd844783          	lbu	a5,-40(s0)
   10afa:	0027e793          	ori	a5,a5,2
   10afe:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10b02:	fe043783          	ld	a5,-32(s0)
   10b06:	0007c783          	lbu	a5,0(a5)
   10b0a:	873e                	mv	a4,a5
   10b0c:	07700793          	li	a5,119
   10b10:	00f71863          	bne	a4,a5,10b20 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10b14:	fd844783          	lbu	a5,-40(s0)
   10b18:	0017e793          	ori	a5,a5,1
   10b1c:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10b20:	fe043783          	ld	a5,-32(s0)
   10b24:	0007c783          	lbu	a5,0(a5)
   10b28:	873e                	mv	a4,a5
   10b2a:	07800793          	li	a5,120
   10b2e:	00f71863          	bne	a4,a5,10b3e <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10b32:	fd844783          	lbu	a5,-40(s0)
   10b36:	0047e793          	ori	a5,a5,4
   10b3a:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10b3e:	fe043783          	ld	a5,-32(s0)
   10b42:	0785                	addi	a5,a5,1
   10b44:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10b48:	fe043783          	ld	a5,-32(s0)
   10b4c:	0007c783          	lbu	a5,0(a5)
   10b50:	fbd1                	bnez	a5,10ae4 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10b52:	fd843783          	ld	a5,-40(s0)
   10b56:	bc479073          	csrw	0xbc4,a5
}
   10b5a:	0001                	nop
   10b5c:	6426                	ld	s0,72(sp)
   10b5e:	6161                	addi	sp,sp,80
   10b60:	8082                	ret

0000000000010b62 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10b62:	1101                	addi	sp,sp,-32
   10b64:	ec22                	sd	s0,24(sp)
   10b66:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10b68:	342027f3          	csrr	a5,mcause
   10b6c:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b70:	fec42783          	lw	a5,-20(s0)
}
   10b74:	853e                	mv	a0,a5
   10b76:	6462                	ld	s0,24(sp)
   10b78:	6105                	addi	sp,sp,32
   10b7a:	8082                	ret

0000000000010b7c <get_mepc>:

int get_mepc() {
   10b7c:	1101                	addi	sp,sp,-32
   10b7e:	ec22                	sd	s0,24(sp)
   10b80:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10b82:	341027f3          	csrr	a5,mepc
   10b86:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b8a:	fec42783          	lw	a5,-20(s0)
}
   10b8e:	853e                	mv	a0,a5
   10b90:	6462                	ld	s0,24(sp)
   10b92:	6105                	addi	sp,sp,32
   10b94:	8082                	ret

0000000000010b96 <env_call>:


void env_call(long long test_id) {
   10b96:	7179                	addi	sp,sp,-48
   10b98:	f406                	sd	ra,40(sp)
   10b9a:	f022                	sd	s0,32(sp)
   10b9c:	1800                	addi	s0,sp,48
   10b9e:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10ba2:	fd843783          	ld	a5,-40(s0)
   10ba6:	c7bd                	beqz	a5,10c14 <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10ba8:	45b5                	li	a1,13
   10baa:	67c9                	lui	a5,0x12
   10bac:	4b078513          	addi	a0,a5,1200 # 124b0 <strnlen+0xcc>
   10bb0:	00000097          	auipc	ra,0x0
   10bb4:	4f8080e7          	jalr	1272(ra) # 110a8 <print_uart>
        print_uart("a0=", 3);
   10bb8:	458d                	li	a1,3
   10bba:	67c9                	lui	a5,0x12
   10bbc:	4c078513          	addi	a0,a5,1216 # 124c0 <strnlen+0xdc>
   10bc0:	00000097          	auipc	ra,0x0
   10bc4:	4e8080e7          	jalr	1256(ra) # 110a8 <print_uart>
        print_uart_hex(test_id);
   10bc8:	fd843503          	ld	a0,-40(s0)
   10bcc:	54e000ef          	jal	ra,1111a <print_uart_hex>
        print_uart("\r\n", 2);
   10bd0:	4589                	li	a1,2
   10bd2:	67c9                	lui	a5,0x12
   10bd4:	4c878513          	addi	a0,a5,1224 # 124c8 <strnlen+0xe4>
   10bd8:	00000097          	auipc	ra,0x0
   10bdc:	4d0080e7          	jalr	1232(ra) # 110a8 <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10be0:	343027f3          	csrr	a5,mbadaddr
   10be4:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10be8:	45a5                	li	a1,9
   10bea:	67c9                	lui	a5,0x12
   10bec:	4d078513          	addi	a0,a5,1232 # 124d0 <strnlen+0xec>
   10bf0:	00000097          	auipc	ra,0x0
   10bf4:	4b8080e7          	jalr	1208(ra) # 110a8 <print_uart>
        print_uart_hex(mbadaddr);
   10bf8:	fec42783          	lw	a5,-20(s0)
   10bfc:	853e                	mv	a0,a5
   10bfe:	51c000ef          	jal	ra,1111a <print_uart_hex>
        print_uart("\r\n", 2);
   10c02:	4589                	li	a1,2
   10c04:	67c9                	lui	a5,0x12
   10c06:	4c878513          	addi	a0,a5,1224 # 124c8 <strnlen+0xe4>
   10c0a:	00000097          	auipc	ra,0x0
   10c0e:	49e080e7          	jalr	1182(ra) # 110a8 <print_uart>
   10c12:	a809                	j	10c24 <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10c14:	45b5                	li	a1,13
   10c16:	67c9                	lui	a5,0x12
   10c18:	4e078513          	addi	a0,a5,1248 # 124e0 <strnlen+0xfc>
   10c1c:	00000097          	auipc	ra,0x0
   10c20:	48c080e7          	jalr	1164(ra) # 110a8 <print_uart>
    }
    while (1) {}
   10c24:	a001                	j	10c24 <env_call+0x8e>

0000000000010c26 <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10c26:	7179                	addi	sp,sp,-48
   10c28:	f406                	sd	ra,40(sp)
   10c2a:	f022                	sd	s0,32(sp)
   10c2c:	1800                	addi	s0,sp,48
   10c2e:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10c32:	00000097          	auipc	ra,0x0
   10c36:	f30080e7          	jalr	-208(ra) # 10b62 <get_mcause>
   10c3a:	87aa                	mv	a5,a0
   10c3c:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10c40:	fec42783          	lw	a5,-20(s0)
   10c44:	37e1                	addiw	a5,a5,-8
   10c46:	0007871b          	sext.w	a4,a5
   10c4a:	4785                	li	a5,1
   10c4c:	00e7e963          	bltu	a5,a4,10c5e <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10c50:	fd843503          	ld	a0,-40(s0)
   10c54:	00000097          	auipc	ra,0x0
   10c58:	f42080e7          	jalr	-190(ra) # 10b96 <env_call>
        return;
   10c5c:	a0b9                	j	10caa <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10c5e:	459d                	li	a1,7
   10c60:	67c9                	lui	a5,0x12
   10c62:	4f078513          	addi	a0,a5,1264 # 124f0 <strnlen+0x10c>
   10c66:	442000ef          	jal	ra,110a8 <print_uart>
    print_uart_hex(mcause);
   10c6a:	fec42783          	lw	a5,-20(s0)
   10c6e:	853e                	mv	a0,a5
   10c70:	00000097          	auipc	ra,0x0
   10c74:	4aa080e7          	jalr	1194(ra) # 1111a <print_uart_hex>
    print_uart(",mepc:", 6);
   10c78:	4599                	li	a1,6
   10c7a:	67c9                	lui	a5,0x12
   10c7c:	4f878513          	addi	a0,a5,1272 # 124f8 <strnlen+0x114>
   10c80:	428000ef          	jal	ra,110a8 <print_uart>
    print_uart_hex(get_mepc());
   10c84:	ef9ff0ef          	jal	ra,10b7c <get_mepc>
   10c88:	87aa                	mv	a5,a0
   10c8a:	853e                	mv	a0,a5
   10c8c:	00000097          	auipc	ra,0x0
   10c90:	48e080e7          	jalr	1166(ra) # 1111a <print_uart_hex>
    print_uart("\r\n", 2);
   10c94:	4589                	li	a1,2
   10c96:	67c9                	lui	a5,0x12
   10c98:	4c878513          	addi	a0,a5,1224 # 124c8 <strnlen+0xe4>
   10c9c:	40c000ef          	jal	ra,110a8 <print_uart>

    /// Exception trap
    led_set(0xF0);
   10ca0:	0f000513          	li	a0,240
   10ca4:	86fff0ef          	jal	ra,10512 <led_set>
    while (1) {}
   10ca8:	a001                	j	10ca8 <exception_handler_c+0x82>
}
   10caa:	70a2                	ld	ra,40(sp)
   10cac:	7402                	ld	s0,32(sp)
   10cae:	6145                	addi	sp,sp,48
   10cb0:	8082                	ret

0000000000010cb2 <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   10cb2:	1141                	addi	sp,sp,-16
   10cb4:	e406                	sd	ra,8(sp)
   10cb6:	e022                	sd	s0,0(sp)
   10cb8:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10cba:	0f000513          	li	a0,240
   10cbe:	00000097          	auipc	ra,0x0
   10cc2:	854080e7          	jalr	-1964(ra) # 10512 <led_set>
    print_uart("fatal_error()\r\n", 15);
   10cc6:	45bd                	li	a1,15
   10cc8:	67c9                	lui	a5,0x12
   10cca:	50078513          	addi	a0,a5,1280 # 12500 <strnlen+0x11c>
   10cce:	00000097          	auipc	ra,0x0
   10cd2:	3da080e7          	jalr	986(ra) # 110a8 <print_uart>
    while (1) {}
   10cd6:	a001                	j	10cd6 <fatal_error+0x24>

0000000000010cd8 <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10cd8:	7179                	addi	sp,sp,-48
   10cda:	f422                	sd	s0,40(sp)
   10cdc:	1800                	addi	s0,sp,48
   10cde:	87aa                	mv	a5,a0
   10ce0:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10ce4:	0c0007b7          	lui	a5,0xc000
   10ce8:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10cec:	fe843703          	ld	a4,-24(s0)
   10cf0:	fdc42783          	lw	a5,-36(s0)
   10cf4:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed8c0>
   10cf8:	07b2                	slli	a5,a5,0xc
   10cfa:	97ba                	add	a5,a5,a4
   10cfc:	43dc                	lw	a5,4(a5)
   10cfe:	2781                	sext.w	a5,a5
}
   10d00:	853e                	mv	a0,a5
   10d02:	7422                	ld	s0,40(sp)
   10d04:	6145                	addi	sp,sp,48
   10d06:	8082                	ret

0000000000010d08 <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10d08:	7179                	addi	sp,sp,-48
   10d0a:	f422                	sd	s0,40(sp)
   10d0c:	1800                	addi	s0,sp,48
   10d0e:	87aa                	mv	a5,a0
   10d10:	872e                	mv	a4,a1
   10d12:	fcf42e23          	sw	a5,-36(s0)
   10d16:	87ba                	mv	a5,a4
   10d18:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10d1c:	0c0007b7          	lui	a5,0xc000
   10d20:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10d24:	fd842703          	lw	a4,-40(s0)
   10d28:	fe843683          	ld	a3,-24(s0)
   10d2c:	fdc42783          	lw	a5,-36(s0)
   10d30:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed8c0>
   10d34:	07b2                	slli	a5,a5,0xc
   10d36:	97b6                	add	a5,a5,a3
   10d38:	c3d8                	sw	a4,4(a5)
}
   10d3a:	0001                	nop
   10d3c:	7422                	ld	s0,40(sp)
   10d3e:	6145                	addi	sp,sp,48
   10d40:	8082                	ret

0000000000010d42 <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10d42:	7139                	addi	sp,sp,-64
   10d44:	fc06                	sd	ra,56(sp)
   10d46:	f822                	sd	s0,48(sp)
   10d48:	0080                	addi	s0,sp,64
   10d4a:	fca43c23          	sd	a0,-40(s0)
   10d4e:	fcb43823          	sd	a1,-48(s0)
   10d52:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10d56:	fd843783          	ld	a5,-40(s0)
   10d5a:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d5e:	fe744783          	lbu	a5,-25(s0)
   10d62:	f807f793          	andi	a5,a5,-128
   10d66:	0ff7f793          	andi	a5,a5,255
   10d6a:	cb85                	beqz	a5,10d9a <interrupt_handler_c+0x58>
   10d6c:	fe043703          	ld	a4,-32(s0)
   10d70:	57fd                	li	a5,-1
   10d72:	8385                	srli	a5,a5,0x1
   10d74:	8f7d                	and	a4,a4,a5
   10d76:	47ad                	li	a5,11
   10d78:	02f71163          	bne	a4,a5,10d9a <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10d7c:	4501                	li	a0,0
   10d7e:	f5bff0ef          	jal	ra,10cd8 <plic_claim>
   10d82:	87aa                	mv	a5,a0
   10d84:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10d88:	fec42783          	lw	a5,-20(s0)
   10d8c:	85be                	mv	a1,a5
   10d8e:	4501                	li	a0,0
   10d90:	00000097          	auipc	ra,0x0
   10d94:	f78080e7          	jalr	-136(ra) # 10d08 <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d98:	a029                	j	10da2 <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10d9a:	00000097          	auipc	ra,0x0
   10d9e:	f18080e7          	jalr	-232(ra) # 10cb2 <fatal_error>
    }

    return epc;
   10da2:	fd043783          	ld	a5,-48(s0)
}
   10da6:	853e                	mv	a0,a5
   10da8:	70e2                	ld	ra,56(sp)
   10daa:	7442                	ld	s0,48(sp)
   10dac:	6121                	addi	sp,sp,64
   10dae:	8082                	ret

0000000000010db0 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10db0:	715d                	addi	sp,sp,-80
   10db2:	e4a2                	sd	s0,72(sp)
   10db4:	0880                	addi	s0,sp,80
   10db6:	faa43c23          	sd	a0,-72(s0)
   10dba:	87ae                	mv	a5,a1
   10dbc:	8732                	mv	a4,a2
   10dbe:	faf41b23          	sh	a5,-74(s0)
   10dc2:	87ba                	mv	a5,a4
   10dc4:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   10dc8:	fb843783          	ld	a5,-72(s0)
   10dcc:	479c                	lw	a5,8(a5)
   10dce:	0087d79b          	srliw	a5,a5,0x8
   10dd2:	2781                	sext.w	a5,a5
   10dd4:	2781                	sext.w	a5,a5
   10dd6:	0ff7f793          	andi	a5,a5,255
   10dda:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10dde:	fb843783          	ld	a5,-72(s0)
   10de2:	479c                	lw	a5,8(a5)
   10de4:	0107d79b          	srliw	a5,a5,0x10
   10de8:	2781                	sext.w	a5,a5
   10dea:	2781                	sext.w	a5,a5
   10dec:	0ff7f793          	andi	a5,a5,255
   10df0:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10df4:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10df8:	fe042423          	sw	zero,-24(s0)
   10dfc:	a82d                	j	10e36 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10dfe:	fec42783          	lw	a5,-20(s0)
   10e02:	04078793          	addi	a5,a5,64
   10e06:	fb843703          	ld	a4,-72(s0)
   10e0a:	97ba                	add	a5,a5,a4
   10e0c:	639c                	ld	a5,0(a5)
   10e0e:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10e12:	fb843703          	ld	a4,-72(s0)
   10e16:	fec42783          	lw	a5,-20(s0)
   10e1a:	97ba                	add	a5,a5,a4
   10e1c:	0407c783          	lbu	a5,64(a5)
   10e20:	2781                	sext.w	a5,a5
   10e22:	fec42703          	lw	a4,-20(s0)
   10e26:	9fb9                	addw	a5,a5,a4
   10e28:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10e2c:	fe842783          	lw	a5,-24(s0)
   10e30:	2785                	addiw	a5,a5,1
   10e32:	fef42423          	sw	a5,-24(s0)
   10e36:	fe842703          	lw	a4,-24(s0)
   10e3a:	fdc42783          	lw	a5,-36(s0)
   10e3e:	2701                	sext.w	a4,a4
   10e40:	2781                	sext.w	a5,a5
   10e42:	faf74ee3          	blt	a4,a5,10dfe <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10e46:	fe042223          	sw	zero,-28(s0)
   10e4a:	a8b5                	j	10ec6 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10e4c:	fec42783          	lw	a5,-20(s0)
   10e50:	04078793          	addi	a5,a5,64
   10e54:	fb843703          	ld	a4,-72(s0)
   10e58:	97ba                	add	a5,a5,a4
   10e5a:	639c                	ld	a5,0(a5)
   10e5c:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10e60:	fec42783          	lw	a5,-20(s0)
   10e64:	27a1                	addiw	a5,a5,8
   10e66:	2781                	sext.w	a5,a5
   10e68:	04078793          	addi	a5,a5,64
   10e6c:	fb843703          	ld	a4,-72(s0)
   10e70:	97ba                	add	a5,a5,a4
   10e72:	639c                	ld	a5,0(a5)
   10e74:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10e78:	fc645783          	lhu	a5,-58(s0)
   10e7c:	fb645703          	lhu	a4,-74(s0)
   10e80:	2701                	sext.w	a4,a4
   10e82:	2781                	sext.w	a5,a5
   10e84:	00f71f63          	bne	a4,a5,10ea2 <get_dev_bar+0xf2>
   10e88:	fc445783          	lhu	a5,-60(s0)
   10e8c:	fb445703          	lhu	a4,-76(s0)
   10e90:	2701                	sext.w	a4,a4
   10e92:	2781                	sext.w	a5,a5
   10e94:	00f71763          	bne	a4,a5,10ea2 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10e98:	fcc42783          	lw	a5,-52(s0)
   10e9c:	1782                	slli	a5,a5,0x20
   10e9e:	9381                	srli	a5,a5,0x20
   10ea0:	a825                	j	10ed8 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10ea2:	fb843703          	ld	a4,-72(s0)
   10ea6:	fec42783          	lw	a5,-20(s0)
   10eaa:	97ba                	add	a5,a5,a4
   10eac:	0407c783          	lbu	a5,64(a5)
   10eb0:	2781                	sext.w	a5,a5
   10eb2:	fec42703          	lw	a4,-20(s0)
   10eb6:	9fb9                	addw	a5,a5,a4
   10eb8:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10ebc:	fe442783          	lw	a5,-28(s0)
   10ec0:	2785                	addiw	a5,a5,1
   10ec2:	fef42223          	sw	a5,-28(s0)
   10ec6:	fe442703          	lw	a4,-28(s0)
   10eca:	fe042783          	lw	a5,-32(s0)
   10ece:	2701                	sext.w	a4,a4
   10ed0:	2781                	sext.w	a5,a5
   10ed2:	f6f74de3          	blt	a4,a5,10e4c <get_dev_bar+0x9c>
    return DEV_NONE;
   10ed6:	57fd                	li	a5,-1
}
   10ed8:	853e                	mv	a0,a5
   10eda:	6426                	ld	s0,72(sp)
   10edc:	6161                	addi	sp,sp,80
   10ede:	8082                	ret

0000000000010ee0 <mpu_region_total>:
static int mpu_region_total() {
   10ee0:	1101                	addi	sp,sp,-32
   10ee2:	ec22                	sd	s0,24(sp)
   10ee4:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10ee6:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10eea:	bc4027f3          	csrr	a5,0xbc4
   10eee:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10ef2:	fe843783          	ld	a5,-24(s0)
   10ef6:	83a1                	srli	a5,a5,0x8
   10ef8:	2781                	sext.w	a5,a5
}
   10efa:	853e                	mv	a0,a5
   10efc:	6462                	ld	s0,24(sp)
   10efe:	6105                	addi	sp,sp,32
   10f00:	8082                	ret

0000000000010f02 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10f02:	7179                	addi	sp,sp,-48
   10f04:	f422                	sd	s0,40(sp)
   10f06:	1800                	addi	s0,sp,48
   10f08:	87aa                	mv	a5,a0
   10f0a:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10f0e:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10f12:	fdc42783          	lw	a5,-36(s0)
   10f16:	0ff7f793          	andi	a5,a5,255
   10f1a:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10f1e:	fe844783          	lbu	a5,-24(s0)
   10f22:	f807e793          	ori	a5,a5,-128
   10f26:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10f2a:	fe843783          	ld	a5,-24(s0)
   10f2e:	bc479073          	csrw	0xbc4,a5
}
   10f32:	0001                	nop
   10f34:	7422                	ld	s0,40(sp)
   10f36:	6145                	addi	sp,sp,48
   10f38:	8082                	ret

0000000000010f3a <mpu_enable_region>:
                       const char *rwx) {
   10f3a:	715d                	addi	sp,sp,-80
   10f3c:	e4a2                	sd	s0,72(sp)
   10f3e:	0880                	addi	s0,sp,80
   10f40:	87aa                	mv	a5,a0
   10f42:	fcb43023          	sd	a1,-64(s0)
   10f46:	fac43c23          	sd	a2,-72(s0)
   10f4a:	fae43823          	sd	a4,-80(s0)
   10f4e:	fcf42623          	sw	a5,-52(s0)
   10f52:	87b6                	mv	a5,a3
   10f54:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10f58:	c0000793          	li	a5,-1024
   10f5c:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10f60:	fb043783          	ld	a5,-80(s0)
   10f64:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10f68:	fc043783          	ld	a5,-64(s0)
   10f6c:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10f70:	fb843783          	ld	a5,-72(s0)
   10f74:	8385                	srli	a5,a5,0x1
   10f76:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f7a:	a819                	j	10f90 <mpu_enable_region+0x56>
        mask <<= 1;
   10f7c:	fe843783          	ld	a5,-24(s0)
   10f80:	0786                	slli	a5,a5,0x1
   10f82:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10f86:	fb843783          	ld	a5,-72(s0)
   10f8a:	8385                	srli	a5,a5,0x1
   10f8c:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f90:	fb843783          	ld	a5,-72(s0)
   10f94:	f7e5                	bnez	a5,10f7c <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10f96:	fe843783          	ld	a5,-24(s0)
   10f9a:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10f9e:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10fa2:	fcc42783          	lw	a5,-52(s0)
   10fa6:	0ff7f793          	andi	a5,a5,255
   10faa:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10fae:	fd844783          	lbu	a5,-40(s0)
   10fb2:	0107e793          	ori	a5,a5,16
   10fb6:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10fba:	fc842783          	lw	a5,-56(s0)
   10fbe:	8b85                	andi	a5,a5,1
   10fc0:	0ff7f793          	andi	a5,a5,255
   10fc4:	8b85                	andi	a5,a5,1
   10fc6:	0037969b          	slliw	a3,a5,0x3
   10fca:	fd844783          	lbu	a5,-40(s0)
   10fce:	9bdd                	andi	a5,a5,-9
   10fd0:	873e                	mv	a4,a5
   10fd2:	87b6                	mv	a5,a3
   10fd4:	8fd9                	or	a5,a5,a4
   10fd6:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10fda:	fd844783          	lbu	a5,-40(s0)
   10fde:	f807e793          	ori	a5,a5,-128
   10fe2:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10fe6:	a09d                	j	1104c <mpu_enable_region+0x112>
        if (*p == 'r') {
   10fe8:	fe043783          	ld	a5,-32(s0)
   10fec:	0007c783          	lbu	a5,0(a5)
   10ff0:	873e                	mv	a4,a5
   10ff2:	07200793          	li	a5,114
   10ff6:	00f71863          	bne	a4,a5,11006 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10ffa:	fd844783          	lbu	a5,-40(s0)
   10ffe:	0027e793          	ori	a5,a5,2
   11002:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11006:	fe043783          	ld	a5,-32(s0)
   1100a:	0007c783          	lbu	a5,0(a5)
   1100e:	873e                	mv	a4,a5
   11010:	07700793          	li	a5,119
   11014:	00f71863          	bne	a4,a5,11024 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11018:	fd844783          	lbu	a5,-40(s0)
   1101c:	0017e793          	ori	a5,a5,1
   11020:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11024:	fe043783          	ld	a5,-32(s0)
   11028:	0007c783          	lbu	a5,0(a5)
   1102c:	873e                	mv	a4,a5
   1102e:	07800793          	li	a5,120
   11032:	00f71863          	bne	a4,a5,11042 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11036:	fd844783          	lbu	a5,-40(s0)
   1103a:	0047e793          	ori	a5,a5,4
   1103e:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11042:	fe043783          	ld	a5,-32(s0)
   11046:	0785                	addi	a5,a5,1
   11048:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   1104c:	fe043783          	ld	a5,-32(s0)
   11050:	0007c783          	lbu	a5,0(a5)
   11054:	fbd1                	bnez	a5,10fe8 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11056:	fd843783          	ld	a5,-40(s0)
   1105a:	bc479073          	csrw	0xbc4,a5
}
   1105e:	0001                	nop
   11060:	6426                	ld	s0,72(sp)
   11062:	6161                	addi	sp,sp,80
   11064:	8082                	ret

0000000000011066 <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   11066:	7179                	addi	sp,sp,-48
   11068:	f422                	sd	s0,40(sp)
   1106a:	1800                	addi	s0,sp,48
   1106c:	87aa                	mv	a5,a0
   1106e:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   11072:	100107b7          	lui	a5,0x10010
   11076:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   1107a:	fe843783          	ld	a5,-24(s0)
   1107e:	439c                	lw	a5,0(a5)
   11080:	2781                	sext.w	a5,a5
   11082:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   11086:	fe344783          	lbu	a5,-29(s0)
   1108a:	f807f793          	andi	a5,a5,-128
   1108e:	0ff7f793          	andi	a5,a5,255
   11092:	f7e5                	bnez	a5,1107a <print_char+0x14>
    uart->txdata = ch;
   11094:	fdc42703          	lw	a4,-36(s0)
   11098:	fe843783          	ld	a5,-24(s0)
   1109c:	c398                	sw	a4,0(a5)
    return 0;
   1109e:	4781                	li	a5,0
}
   110a0:	853e                	mv	a0,a5
   110a2:	7422                	ld	s0,40(sp)
   110a4:	6145                	addi	sp,sp,48
   110a6:	8082                	ret

00000000000110a8 <print_uart>:

void print_uart(const char *buf, int sz) {
   110a8:	7139                	addi	sp,sp,-64
   110aa:	fc22                	sd	s0,56(sp)
   110ac:	0080                	addi	s0,sp,64
   110ae:	fca43423          	sd	a0,-56(s0)
   110b2:	87ae                	mv	a5,a1
   110b4:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   110b8:	100107b7          	lui	a5,0x10010
   110bc:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   110c0:	fe042623          	sw	zero,-20(s0)
   110c4:	a83d                	j	11102 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   110c6:	fe043783          	ld	a5,-32(s0)
   110ca:	439c                	lw	a5,0(a5)
   110cc:	2781                	sext.w	a5,a5
   110ce:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   110d2:	fdb44783          	lbu	a5,-37(s0)
   110d6:	f807f793          	andi	a5,a5,-128
   110da:	0ff7f793          	andi	a5,a5,255
   110de:	f7e5                	bnez	a5,110c6 <print_uart+0x1e>
        uart->txdata = buf[i];
   110e0:	fec42783          	lw	a5,-20(s0)
   110e4:	fc843703          	ld	a4,-56(s0)
   110e8:	97ba                	add	a5,a5,a4
   110ea:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffd6c0>
   110ee:	0007871b          	sext.w	a4,a5
   110f2:	fe043783          	ld	a5,-32(s0)
   110f6:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   110f8:	fec42783          	lw	a5,-20(s0)
   110fc:	2785                	addiw	a5,a5,1
   110fe:	fef42623          	sw	a5,-20(s0)
   11102:	fec42703          	lw	a4,-20(s0)
   11106:	fc442783          	lw	a5,-60(s0)
   1110a:	2701                	sext.w	a4,a4
   1110c:	2781                	sext.w	a5,a5
   1110e:	faf74ce3          	blt	a4,a5,110c6 <print_uart+0x1e>
    }
}
   11112:	0001                	nop
   11114:	7462                	ld	s0,56(sp)
   11116:	6121                	addi	sp,sp,64
   11118:	8082                	ret

000000000001111a <print_uart_hex>:

void print_uart_hex(long val) {
   1111a:	7139                	addi	sp,sp,-64
   1111c:	fc22                	sd	s0,56(sp)
   1111e:	0080                	addi	s0,sp,64
   11120:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   11124:	100107b7          	lui	a5,0x10010
   11128:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   1112c:	fe042423          	sw	zero,-24(s0)
   11130:	a041                	j	111b0 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   11132:	fe043783          	ld	a5,-32(s0)
   11136:	439c                	lw	a5,0(a5)
   11138:	2781                	sext.w	a5,a5
   1113a:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   1113e:	fdb44783          	lbu	a5,-37(s0)
   11142:	f807f793          	andi	a5,a5,-128
   11146:	0ff7f793          	andi	a5,a5,255
   1114a:	f7e5                	bnez	a5,11132 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   1114c:	473d                	li	a4,15
   1114e:	fe842783          	lw	a5,-24(s0)
   11152:	40f707bb          	subw	a5,a4,a5
   11156:	2781                	sext.w	a5,a5
   11158:	0027979b          	slliw	a5,a5,0x2
   1115c:	2781                	sext.w	a5,a5
   1115e:	fc843703          	ld	a4,-56(s0)
   11162:	40f757b3          	sra	a5,a4,a5
   11166:	0ff7f793          	andi	a5,a5,255
   1116a:	8bbd                	andi	a5,a5,15
   1116c:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   11170:	fdf44783          	lbu	a5,-33(s0)
   11174:	0ff7f713          	andi	a4,a5,255
   11178:	47a5                	li	a5,9
   1117a:	00e7e963          	bltu	a5,a4,1118c <print_uart_hex+0x72>
            s = t + '0';
   1117e:	fdf44783          	lbu	a5,-33(s0)
   11182:	0307879b          	addiw	a5,a5,48
   11186:	fef407a3          	sb	a5,-17(s0)
   1118a:	a039                	j	11198 <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   1118c:	fdf44783          	lbu	a5,-33(s0)
   11190:	0577879b          	addiw	a5,a5,87
   11194:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   11198:	fef44783          	lbu	a5,-17(s0)
   1119c:	0007871b          	sext.w	a4,a5
   111a0:	fe043783          	ld	a5,-32(s0)
   111a4:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   111a6:	fe842783          	lw	a5,-24(s0)
   111aa:	2785                	addiw	a5,a5,1
   111ac:	fef42423          	sw	a5,-24(s0)
   111b0:	fe842783          	lw	a5,-24(s0)
   111b4:	0007871b          	sext.w	a4,a5
   111b8:	47bd                	li	a5,15
   111ba:	f6e7dce3          	ble	a4,a5,11132 <print_uart_hex+0x18>
    }
}
   111be:	0001                	nop
   111c0:	7462                	ld	s0,56(sp)
   111c2:	6121                	addi	sp,sp,64
   111c4:	8082                	ret

00000000000111c6 <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   111c6:	7119                	addi	sp,sp,-128
   111c8:	fc86                	sd	ra,120(sp)
   111ca:	f8a2                	sd	s0,112(sp)
   111cc:	0100                	addi	s0,sp,128
   111ce:	f8a43c23          	sd	a0,-104(s0)
   111d2:	87ae                	mv	a5,a1
   111d4:	8736                	mv	a4,a3
   111d6:	f8f42a23          	sw	a5,-108(s0)
   111da:	87b2                	mv	a5,a2
   111dc:	f8f42823          	sw	a5,-112(s0)
   111e0:	87ba                	mv	a5,a4
   111e2:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   111e6:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   111ea:	f9442783          	lw	a5,-108(s0)
   111ee:	f9843703          	ld	a4,-104(s0)
   111f2:	02f776b3          	remu	a3,a4,a5
   111f6:	fec42783          	lw	a5,-20(s0)
   111fa:	0017871b          	addiw	a4,a5,1
   111fe:	fee42623          	sw	a4,-20(s0)
   11202:	0ff6f713          	andi	a4,a3,255
   11206:	ff040693          	addi	a3,s0,-16
   1120a:	97b6                	add	a5,a5,a3
   1120c:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffd678>
        if (num < base) {
   11210:	f9442783          	lw	a5,-108(s0)
   11214:	f9843703          	ld	a4,-104(s0)
   11218:	00f76b63          	bltu	a4,a5,1122e <printnum+0x68>
            break;
        }
        num /= base;
   1121c:	f9442783          	lw	a5,-108(s0)
   11220:	f9843703          	ld	a4,-104(s0)
   11224:	02f757b3          	divu	a5,a4,a5
   11228:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   1122c:	bf7d                	j	111ea <printnum+0x24>
            break;
   1122e:	0001                	nop
    }

    while (width-- > pos) {
   11230:	a801                	j	11240 <printnum+0x7a>
        print_char(padc);
   11232:	f8c42783          	lw	a5,-116(s0)
   11236:	853e                	mv	a0,a5
   11238:	00000097          	auipc	ra,0x0
   1123c:	e2e080e7          	jalr	-466(ra) # 11066 <print_char>
    while (width-- > pos) {
   11240:	f9042783          	lw	a5,-112(s0)
   11244:	fff7871b          	addiw	a4,a5,-1
   11248:	f8e42823          	sw	a4,-112(s0)
   1124c:	fec42703          	lw	a4,-20(s0)
   11250:	2701                	sext.w	a4,a4
   11252:	fef740e3          	blt	a4,a5,11232 <printnum+0x6c>
    }


    while (pos-- > 0) {
   11256:	a089                	j	11298 <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   11258:	fec42783          	lw	a5,-20(s0)
   1125c:	ff040713          	addi	a4,s0,-16
   11260:	97ba                	add	a5,a5,a4
   11262:	fb87c783          	lbu	a5,-72(a5)
   11266:	0007871b          	sext.w	a4,a5
   1126a:	fec42783          	lw	a5,-20(s0)
   1126e:	ff040693          	addi	a3,s0,-16
   11272:	97b6                	add	a5,a5,a3
   11274:	fb87c783          	lbu	a5,-72(a5)
   11278:	86be                	mv	a3,a5
   1127a:	47a5                	li	a5,9
   1127c:	00d7f563          	bleu	a3,a5,11286 <printnum+0xc0>
   11280:	05700793          	li	a5,87
   11284:	a019                	j	1128a <printnum+0xc4>
   11286:	03000793          	li	a5,48
   1128a:	9fb9                	addw	a5,a5,a4
   1128c:	2781                	sext.w	a5,a5
   1128e:	853e                	mv	a0,a5
   11290:	00000097          	auipc	ra,0x0
   11294:	dd6080e7          	jalr	-554(ra) # 11066 <print_char>
    while (pos-- > 0) {
   11298:	fec42783          	lw	a5,-20(s0)
   1129c:	fff7871b          	addiw	a4,a5,-1
   112a0:	fee42623          	sw	a4,-20(s0)
   112a4:	faf04ae3          	bgtz	a5,11258 <printnum+0x92>
    }
}
   112a8:	0001                	nop
   112aa:	70e6                	ld	ra,120(sp)
   112ac:	7446                	ld	s0,112(sp)
   112ae:	6109                	addi	sp,sp,128
   112b0:	8082                	ret

00000000000112b2 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   112b2:	1101                	addi	sp,sp,-32
   112b4:	ec22                	sd	s0,24(sp)
   112b6:	1000                	addi	s0,sp,32
   112b8:	fea43423          	sd	a0,-24(s0)
   112bc:	87ae                	mv	a5,a1
   112be:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   112c2:	fe442783          	lw	a5,-28(s0)
   112c6:	0007871b          	sext.w	a4,a5
   112ca:	4785                	li	a5,1
   112cc:	00e7dc63          	ble	a4,a5,112e4 <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   112d0:	fe843783          	ld	a5,-24(s0)
   112d4:	639c                	ld	a5,0(a5)
   112d6:	00878693          	addi	a3,a5,8
   112da:	fe843703          	ld	a4,-24(s0)
   112de:	e314                	sd	a3,0(a4)
   112e0:	639c                	ld	a5,0(a5)
   112e2:	a815                	j	11316 <getuint+0x64>
    } else if (lflag) {
   112e4:	fe442783          	lw	a5,-28(s0)
   112e8:	2781                	sext.w	a5,a5
   112ea:	cb99                	beqz	a5,11300 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   112ec:	fe843783          	ld	a5,-24(s0)
   112f0:	639c                	ld	a5,0(a5)
   112f2:	00878693          	addi	a3,a5,8
   112f6:	fe843703          	ld	a4,-24(s0)
   112fa:	e314                	sd	a3,0(a4)
   112fc:	639c                	ld	a5,0(a5)
   112fe:	a821                	j	11316 <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   11300:	fe843783          	ld	a5,-24(s0)
   11304:	639c                	ld	a5,0(a5)
   11306:	00878693          	addi	a3,a5,8
   1130a:	fe843703          	ld	a4,-24(s0)
   1130e:	e314                	sd	a3,0(a4)
   11310:	439c                	lw	a5,0(a5)
   11312:	1782                	slli	a5,a5,0x20
   11314:	9381                	srli	a5,a5,0x20
}
   11316:	853e                	mv	a0,a5
   11318:	6462                	ld	s0,24(sp)
   1131a:	6105                	addi	sp,sp,32
   1131c:	8082                	ret

000000000001131e <getint>:

static int64_t getint(va_list *ap, int lflag) {
   1131e:	1101                	addi	sp,sp,-32
   11320:	ec22                	sd	s0,24(sp)
   11322:	1000                	addi	s0,sp,32
   11324:	fea43423          	sd	a0,-24(s0)
   11328:	87ae                	mv	a5,a1
   1132a:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   1132e:	fe442783          	lw	a5,-28(s0)
   11332:	0007871b          	sext.w	a4,a5
   11336:	4785                	li	a5,1
   11338:	00e7dc63          	ble	a4,a5,11350 <getint+0x32>
        return va_arg(*ap, long long);
   1133c:	fe843783          	ld	a5,-24(s0)
   11340:	639c                	ld	a5,0(a5)
   11342:	00878693          	addi	a3,a5,8
   11346:	fe843703          	ld	a4,-24(s0)
   1134a:	e314                	sd	a3,0(a4)
   1134c:	639c                	ld	a5,0(a5)
   1134e:	a805                	j	1137e <getint+0x60>
    } else if (lflag) {
   11350:	fe442783          	lw	a5,-28(s0)
   11354:	2781                	sext.w	a5,a5
   11356:	cb99                	beqz	a5,1136c <getint+0x4e>
        return va_arg(*ap, long);
   11358:	fe843783          	ld	a5,-24(s0)
   1135c:	639c                	ld	a5,0(a5)
   1135e:	00878693          	addi	a3,a5,8
   11362:	fe843703          	ld	a4,-24(s0)
   11366:	e314                	sd	a3,0(a4)
   11368:	639c                	ld	a5,0(a5)
   1136a:	a811                	j	1137e <getint+0x60>
    }
    return va_arg(*ap, int);
   1136c:	fe843783          	ld	a5,-24(s0)
   11370:	639c                	ld	a5,0(a5)
   11372:	00878693          	addi	a3,a5,8
   11376:	fe843703          	ld	a4,-24(s0)
   1137a:	e314                	sd	a3,0(a4)
   1137c:	439c                	lw	a5,0(a5)
}
   1137e:	853e                	mv	a0,a5
   11380:	6462                	ld	s0,24(sp)
   11382:	6105                	addi	sp,sp,32
   11384:	8082                	ret

0000000000011386 <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   11386:	711d                	addi	sp,sp,-96
   11388:	ec86                	sd	ra,88(sp)
   1138a:	e8a2                	sd	s0,80(sp)
   1138c:	e4a6                	sd	s1,72(sp)
   1138e:	e0ca                	sd	s2,64(sp)
   11390:	1080                	addi	s0,sp,96
   11392:	faa43423          	sd	a0,-88(s0)
   11396:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   1139a:	a819                	j	113b0 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   1139c:	2c048d63          	beqz	s1,11676 <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   113a0:	fa843783          	ld	a5,-88(s0)
   113a4:	0785                	addi	a5,a5,1
   113a6:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   113aa:	8526                	mv	a0,s1
   113ac:	cbbff0ef          	jal	ra,11066 <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   113b0:	fa843783          	ld	a5,-88(s0)
   113b4:	0007c783          	lbu	a5,0(a5)
   113b8:	0007849b          	sext.w	s1,a5
   113bc:	8726                	mv	a4,s1
   113be:	02500793          	li	a5,37
   113c2:	fcf71de3          	bne	a4,a5,1139c <vprintfmt_lib+0x16>
        }
        fmt++;
   113c6:	fa843783          	ld	a5,-88(s0)
   113ca:	0785                	addi	a5,a5,1
   113cc:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   113d0:	fa843783          	ld	a5,-88(s0)
   113d4:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   113d8:	02000793          	li	a5,32
   113dc:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   113e0:	57fd                	li	a5,-1
   113e2:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   113e6:	57fd                	li	a5,-1
   113e8:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   113ec:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   113f0:	fa843783          	ld	a5,-88(s0)
   113f4:	00178713          	addi	a4,a5,1
   113f8:	fae43423          	sd	a4,-88(s0)
   113fc:	0007c783          	lbu	a5,0(a5)
   11400:	0007849b          	sext.w	s1,a5
   11404:	fdd4869b          	addiw	a3,s1,-35
   11408:	0006871b          	sext.w	a4,a3
   1140c:	05500793          	li	a5,85
   11410:	24e7e963          	bltu	a5,a4,11662 <vprintfmt_lib+0x2dc>
   11414:	02069793          	slli	a5,a3,0x20
   11418:	9381                	srli	a5,a5,0x20
   1141a:	00279713          	slli	a4,a5,0x2
   1141e:	67c9                	lui	a5,0x12
   11420:	51878793          	addi	a5,a5,1304 # 12518 <strnlen+0x134>
   11424:	97ba                	add	a5,a5,a4
   11426:	439c                	lw	a5,0(a5)
   11428:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   1142a:	02d00793          	li	a5,45
   1142e:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   11432:	bf7d                	j	113f0 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   11434:	03000793          	li	a5,48
   11438:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   1143c:	bf55                	j	113f0 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   1143e:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   11442:	fc842703          	lw	a4,-56(s0)
   11446:	87ba                	mv	a5,a4
   11448:	0027979b          	slliw	a5,a5,0x2
   1144c:	9fb9                	addw	a5,a5,a4
   1144e:	0017979b          	slliw	a5,a5,0x1
   11452:	2781                	sext.w	a5,a5
   11454:	9fa5                	addw	a5,a5,s1
   11456:	2781                	sext.w	a5,a5
   11458:	fd07879b          	addiw	a5,a5,-48
   1145c:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   11460:	fa843783          	ld	a5,-88(s0)
   11464:	0007c783          	lbu	a5,0(a5)
   11468:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   1146c:	8726                	mv	a4,s1
   1146e:	02f00793          	li	a5,47
   11472:	02e7df63          	ble	a4,a5,114b0 <vprintfmt_lib+0x12a>
   11476:	8726                	mv	a4,s1
   11478:	03900793          	li	a5,57
   1147c:	02e7ca63          	blt	a5,a4,114b0 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   11480:	fa843783          	ld	a5,-88(s0)
   11484:	0785                	addi	a5,a5,1
   11486:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   1148a:	bf65                	j	11442 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   1148c:	fa043783          	ld	a5,-96(s0)
   11490:	00878713          	addi	a4,a5,8
   11494:	fae43023          	sd	a4,-96(s0)
   11498:	439c                	lw	a5,0(a5)
   1149a:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   1149e:	a811                	j	114b2 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   114a0:	fcc42783          	lw	a5,-52(s0)
   114a4:	2781                	sext.w	a5,a5
   114a6:	f407d5e3          	bgez	a5,113f0 <vprintfmt_lib+0x6a>
                width = 0;
   114aa:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   114ae:	b789                	j	113f0 <vprintfmt_lib+0x6a>
            goto process_precision;
   114b0:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   114b2:	fcc42783          	lw	a5,-52(s0)
   114b6:	2781                	sext.w	a5,a5
   114b8:	f207dce3          	bgez	a5,113f0 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   114bc:	fc842783          	lw	a5,-56(s0)
   114c0:	fcf42623          	sw	a5,-52(s0)
   114c4:	57fd                	li	a5,-1
   114c6:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   114ca:	b71d                	j	113f0 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   114cc:	fd042783          	lw	a5,-48(s0)
   114d0:	2785                	addiw	a5,a5,1
   114d2:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   114d6:	bf29                	j	113f0 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   114d8:	fa043783          	ld	a5,-96(s0)
   114dc:	00878713          	addi	a4,a5,8
   114e0:	fae43023          	sd	a4,-96(s0)
   114e4:	439c                	lw	a5,0(a5)
   114e6:	853e                	mv	a0,a5
   114e8:	b7fff0ef          	jal	ra,11066 <print_char>
            break;
   114ec:	a261                	j	11674 <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   114ee:	fa043783          	ld	a5,-96(s0)
   114f2:	00878713          	addi	a4,a5,8
   114f6:	fae43023          	sd	a4,-96(s0)
   114fa:	0007b903          	ld	s2,0(a5)
   114fe:	00091563          	bnez	s2,11508 <vprintfmt_lib+0x182>
                p = "(null)";
   11502:	67c9                	lui	a5,0x12
   11504:	51078913          	addi	s2,a5,1296 # 12510 <strnlen+0x12c>
            }
            if (width > 0 && padc != '-') {
   11508:	fcc42783          	lw	a5,-52(s0)
   1150c:	2781                	sext.w	a5,a5
   1150e:	06f05263          	blez	a5,11572 <vprintfmt_lib+0x1ec>
   11512:	fc744783          	lbu	a5,-57(s0)
   11516:	0ff7f713          	andi	a4,a5,255
   1151a:	02d00793          	li	a5,45
   1151e:	04f70a63          	beq	a4,a5,11572 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   11522:	fc842783          	lw	a5,-56(s0)
   11526:	85be                	mv	a1,a5
   11528:	854a                	mv	a0,s2
   1152a:	6bb000ef          	jal	ra,123e4 <strnlen>
   1152e:	87aa                	mv	a5,a0
   11530:	873e                	mv	a4,a5
   11532:	fcc42783          	lw	a5,-52(s0)
   11536:	9f99                	subw	a5,a5,a4
   11538:	fcf42623          	sw	a5,-52(s0)
   1153c:	a821                	j	11554 <vprintfmt_lib+0x1ce>
                    print_char(padc);
   1153e:	fc744783          	lbu	a5,-57(s0)
   11542:	2781                	sext.w	a5,a5
   11544:	853e                	mv	a0,a5
   11546:	b21ff0ef          	jal	ra,11066 <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   1154a:	fcc42783          	lw	a5,-52(s0)
   1154e:	37fd                	addiw	a5,a5,-1
   11550:	fcf42623          	sw	a5,-52(s0)
   11554:	fcc42783          	lw	a5,-52(s0)
   11558:	2781                	sext.w	a5,a5
   1155a:	fef042e3          	bgtz	a5,1153e <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   1155e:	a811                	j	11572 <vprintfmt_lib+0x1ec>
                print_char(ch);
   11560:	8526                	mv	a0,s1
   11562:	b05ff0ef          	jal	ra,11066 <print_char>
                p++;
   11566:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   11568:	fcc42783          	lw	a5,-52(s0)
   1156c:	37fd                	addiw	a5,a5,-1
   1156e:	fcf42623          	sw	a5,-52(s0)
   11572:	00094783          	lbu	a5,0(s2)
   11576:	0007849b          	sext.w	s1,a5
   1157a:	c895                	beqz	s1,115ae <vprintfmt_lib+0x228>
   1157c:	fc842783          	lw	a5,-56(s0)
   11580:	2781                	sext.w	a5,a5
   11582:	fc07cfe3          	bltz	a5,11560 <vprintfmt_lib+0x1da>
   11586:	fc842783          	lw	a5,-56(s0)
   1158a:	37fd                	addiw	a5,a5,-1
   1158c:	fcf42423          	sw	a5,-56(s0)
   11590:	fc842783          	lw	a5,-56(s0)
   11594:	2781                	sext.w	a5,a5
   11596:	fc07d5e3          	bgez	a5,11560 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   1159a:	a811                	j	115ae <vprintfmt_lib+0x228>
                print_char(' ');
   1159c:	02000513          	li	a0,32
   115a0:	ac7ff0ef          	jal	ra,11066 <print_char>
            for (; width > 0; width--) {
   115a4:	fcc42783          	lw	a5,-52(s0)
   115a8:	37fd                	addiw	a5,a5,-1
   115aa:	fcf42623          	sw	a5,-52(s0)
   115ae:	fcc42783          	lw	a5,-52(s0)
   115b2:	2781                	sext.w	a5,a5
   115b4:	fef044e3          	bgtz	a5,1159c <vprintfmt_lib+0x216>
            }
            break;
   115b8:	a875                	j	11674 <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   115ba:	fd042703          	lw	a4,-48(s0)
   115be:	fa040793          	addi	a5,s0,-96
   115c2:	85ba                	mv	a1,a4
   115c4:	853e                	mv	a0,a5
   115c6:	00000097          	auipc	ra,0x0
   115ca:	d58080e7          	jalr	-680(ra) # 1131e <getint>
   115ce:	87aa                	mv	a5,a0
   115d0:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   115d4:	fd843783          	ld	a5,-40(s0)
   115d8:	0007dc63          	bgez	a5,115f0 <vprintfmt_lib+0x26a>
                print_char('-');
   115dc:	02d00513          	li	a0,45
   115e0:	a87ff0ef          	jal	ra,11066 <print_char>
                num = -(long long) num;
   115e4:	fd843783          	ld	a5,-40(s0)
   115e8:	40f007b3          	neg	a5,a5
   115ec:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   115f0:	47a9                	li	a5,10
   115f2:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   115f6:	a089                	j	11638 <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   115f8:	47a9                	li	a5,10
   115fa:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   115fe:	a01d                	j	11624 <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   11600:	47a1                	li	a5,8
   11602:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   11606:	a839                	j	11624 <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   11608:	4785                	li	a5,1
   1160a:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   1160e:	03000513          	li	a0,48
   11612:	a55ff0ef          	jal	ra,11066 <print_char>
            print_char('x');
   11616:	07800513          	li	a0,120
   1161a:	a4dff0ef          	jal	ra,11066 <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   1161e:	47c1                	li	a5,16
   11620:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   11624:	fd042703          	lw	a4,-48(s0)
   11628:	fa040793          	addi	a5,s0,-96
   1162c:	85ba                	mv	a1,a4
   1162e:	853e                	mv	a0,a5
   11630:	c83ff0ef          	jal	ra,112b2 <getuint>
   11634:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   11638:	fc744783          	lbu	a5,-57(s0)
   1163c:	0007869b          	sext.w	a3,a5
   11640:	fcc42703          	lw	a4,-52(s0)
   11644:	fd442783          	lw	a5,-44(s0)
   11648:	863a                	mv	a2,a4
   1164a:	85be                	mv	a1,a5
   1164c:	fd843503          	ld	a0,-40(s0)
   11650:	00000097          	auipc	ra,0x0
   11654:	b76080e7          	jalr	-1162(ra) # 111c6 <printnum>
            break;
   11658:	a831                	j	11674 <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   1165a:	8526                	mv	a0,s1
   1165c:	a0bff0ef          	jal	ra,11066 <print_char>
            break;
   11660:	a811                	j	11674 <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   11662:	02500513          	li	a0,37
   11666:	a01ff0ef          	jal	ra,11066 <print_char>
            fmt = last_fmt;
   1166a:	fb843783          	ld	a5,-72(s0)
   1166e:	faf43423          	sd	a5,-88(s0)
            break;
   11672:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   11674:	bb35                	j	113b0 <vprintfmt_lib+0x2a>
                return;
   11676:	0001                	nop
        }
    }
}
   11678:	60e6                	ld	ra,88(sp)
   1167a:	6446                	ld	s0,80(sp)
   1167c:	64a6                	ld	s1,72(sp)
   1167e:	6906                	ld	s2,64(sp)
   11680:	6125                	addi	sp,sp,96
   11682:	8082                	ret

0000000000011684 <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   11684:	7159                	addi	sp,sp,-112
   11686:	f406                	sd	ra,40(sp)
   11688:	f022                	sd	s0,32(sp)
   1168a:	1800                	addi	s0,sp,48
   1168c:	fca43c23          	sd	a0,-40(s0)
   11690:	e40c                	sd	a1,8(s0)
   11692:	e810                	sd	a2,16(s0)
   11694:	ec14                	sd	a3,24(s0)
   11696:	f018                	sd	a4,32(s0)
   11698:	f41c                	sd	a5,40(s0)
   1169a:	03043823          	sd	a6,48(s0)
   1169e:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   116a2:	04040793          	addi	a5,s0,64
   116a6:	fc878793          	addi	a5,a5,-56
   116aa:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   116ae:	fe843783          	ld	a5,-24(s0)
   116b2:	85be                	mv	a1,a5
   116b4:	fd843503          	ld	a0,-40(s0)
   116b8:	00000097          	auipc	ra,0x0
   116bc:	cce080e7          	jalr	-818(ra) # 11386 <vprintfmt_lib>

    va_end(arg);
}
   116c0:	0001                	nop
   116c2:	70a2                	ld	ra,40(sp)
   116c4:	7402                	ld	s0,32(sp)
   116c6:	6165                	addi	sp,sp,112
   116c8:	8082                	ret

00000000000116ca <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   116ca:	715d                	addi	sp,sp,-80
   116cc:	e4a2                	sd	s0,72(sp)
   116ce:	0880                	addi	s0,sp,80
   116d0:	faa43c23          	sd	a0,-72(s0)
   116d4:	87ae                	mv	a5,a1
   116d6:	8732                	mv	a4,a2
   116d8:	faf41b23          	sh	a5,-74(s0)
   116dc:	87ba                	mv	a5,a4
   116de:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   116e2:	fb843783          	ld	a5,-72(s0)
   116e6:	479c                	lw	a5,8(a5)
   116e8:	0087d79b          	srliw	a5,a5,0x8
   116ec:	2781                	sext.w	a5,a5
   116ee:	2781                	sext.w	a5,a5
   116f0:	0ff7f793          	andi	a5,a5,255
   116f4:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   116f8:	fb843783          	ld	a5,-72(s0)
   116fc:	479c                	lw	a5,8(a5)
   116fe:	0107d79b          	srliw	a5,a5,0x10
   11702:	2781                	sext.w	a5,a5
   11704:	2781                	sext.w	a5,a5
   11706:	0ff7f793          	andi	a5,a5,255
   1170a:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   1170e:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11712:	fe042423          	sw	zero,-24(s0)
   11716:	a82d                	j	11750 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11718:	fec42783          	lw	a5,-20(s0)
   1171c:	04078793          	addi	a5,a5,64
   11720:	fb843703          	ld	a4,-72(s0)
   11724:	97ba                	add	a5,a5,a4
   11726:	639c                	ld	a5,0(a5)
   11728:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   1172c:	fb843703          	ld	a4,-72(s0)
   11730:	fec42783          	lw	a5,-20(s0)
   11734:	97ba                	add	a5,a5,a4
   11736:	0407c783          	lbu	a5,64(a5)
   1173a:	2781                	sext.w	a5,a5
   1173c:	fec42703          	lw	a4,-20(s0)
   11740:	9fb9                	addw	a5,a5,a4
   11742:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11746:	fe842783          	lw	a5,-24(s0)
   1174a:	2785                	addiw	a5,a5,1
   1174c:	fef42423          	sw	a5,-24(s0)
   11750:	fe842703          	lw	a4,-24(s0)
   11754:	fdc42783          	lw	a5,-36(s0)
   11758:	2701                	sext.w	a4,a4
   1175a:	2781                	sext.w	a5,a5
   1175c:	faf74ee3          	blt	a4,a5,11718 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11760:	fe042223          	sw	zero,-28(s0)
   11764:	a8b5                	j	117e0 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11766:	fec42783          	lw	a5,-20(s0)
   1176a:	04078793          	addi	a5,a5,64
   1176e:	fb843703          	ld	a4,-72(s0)
   11772:	97ba                	add	a5,a5,a4
   11774:	639c                	ld	a5,0(a5)
   11776:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   1177a:	fec42783          	lw	a5,-20(s0)
   1177e:	27a1                	addiw	a5,a5,8
   11780:	2781                	sext.w	a5,a5
   11782:	04078793          	addi	a5,a5,64
   11786:	fb843703          	ld	a4,-72(s0)
   1178a:	97ba                	add	a5,a5,a4
   1178c:	639c                	ld	a5,0(a5)
   1178e:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11792:	fc645783          	lhu	a5,-58(s0)
   11796:	fb645703          	lhu	a4,-74(s0)
   1179a:	2701                	sext.w	a4,a4
   1179c:	2781                	sext.w	a5,a5
   1179e:	00f71f63          	bne	a4,a5,117bc <get_dev_bar+0xf2>
   117a2:	fc445783          	lhu	a5,-60(s0)
   117a6:	fb445703          	lhu	a4,-76(s0)
   117aa:	2701                	sext.w	a4,a4
   117ac:	2781                	sext.w	a5,a5
   117ae:	00f71763          	bne	a4,a5,117bc <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   117b2:	fcc42783          	lw	a5,-52(s0)
   117b6:	1782                	slli	a5,a5,0x20
   117b8:	9381                	srli	a5,a5,0x20
   117ba:	a825                	j	117f2 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   117bc:	fb843703          	ld	a4,-72(s0)
   117c0:	fec42783          	lw	a5,-20(s0)
   117c4:	97ba                	add	a5,a5,a4
   117c6:	0407c783          	lbu	a5,64(a5)
   117ca:	2781                	sext.w	a5,a5
   117cc:	fec42703          	lw	a4,-20(s0)
   117d0:	9fb9                	addw	a5,a5,a4
   117d2:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   117d6:	fe442783          	lw	a5,-28(s0)
   117da:	2785                	addiw	a5,a5,1
   117dc:	fef42223          	sw	a5,-28(s0)
   117e0:	fe442703          	lw	a4,-28(s0)
   117e4:	fe042783          	lw	a5,-32(s0)
   117e8:	2701                	sext.w	a4,a4
   117ea:	2781                	sext.w	a5,a5
   117ec:	f6f74de3          	blt	a4,a5,11766 <get_dev_bar+0x9c>
    return DEV_NONE;
   117f0:	57fd                	li	a5,-1
}
   117f2:	853e                	mv	a0,a5
   117f4:	6426                	ld	s0,72(sp)
   117f6:	6161                	addi	sp,sp,80
   117f8:	8082                	ret

00000000000117fa <mpu_region_total>:
static int mpu_region_total() {
   117fa:	1101                	addi	sp,sp,-32
   117fc:	ec22                	sd	s0,24(sp)
   117fe:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11800:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   11804:	bc4027f3          	csrr	a5,0xbc4
   11808:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   1180c:	fe843783          	ld	a5,-24(s0)
   11810:	83a1                	srli	a5,a5,0x8
   11812:	2781                	sext.w	a5,a5
}
   11814:	853e                	mv	a0,a5
   11816:	6462                	ld	s0,24(sp)
   11818:	6105                	addi	sp,sp,32
   1181a:	8082                	ret

000000000001181c <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   1181c:	7179                	addi	sp,sp,-48
   1181e:	f422                	sd	s0,40(sp)
   11820:	1800                	addi	s0,sp,48
   11822:	87aa                	mv	a5,a0
   11824:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   11828:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   1182c:	fdc42783          	lw	a5,-36(s0)
   11830:	0ff7f793          	andi	a5,a5,255
   11834:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   11838:	fe844783          	lbu	a5,-24(s0)
   1183c:	f807e793          	ori	a5,a5,-128
   11840:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11844:	fe843783          	ld	a5,-24(s0)
   11848:	bc479073          	csrw	0xbc4,a5
}
   1184c:	0001                	nop
   1184e:	7422                	ld	s0,40(sp)
   11850:	6145                	addi	sp,sp,48
   11852:	8082                	ret

0000000000011854 <mpu_enable_region>:
                       const char *rwx) {
   11854:	715d                	addi	sp,sp,-80
   11856:	e4a2                	sd	s0,72(sp)
   11858:	0880                	addi	s0,sp,80
   1185a:	87aa                	mv	a5,a0
   1185c:	fcb43023          	sd	a1,-64(s0)
   11860:	fac43c23          	sd	a2,-72(s0)
   11864:	fae43823          	sd	a4,-80(s0)
   11868:	fcf42623          	sw	a5,-52(s0)
   1186c:	87b6                	mv	a5,a3
   1186e:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11872:	c0000793          	li	a5,-1024
   11876:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   1187a:	fb043783          	ld	a5,-80(s0)
   1187e:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11882:	fc043783          	ld	a5,-64(s0)
   11886:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   1188a:	fb843783          	ld	a5,-72(s0)
   1188e:	8385                	srli	a5,a5,0x1
   11890:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11894:	a819                	j	118aa <mpu_enable_region+0x56>
        mask <<= 1;
   11896:	fe843783          	ld	a5,-24(s0)
   1189a:	0786                	slli	a5,a5,0x1
   1189c:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   118a0:	fb843783          	ld	a5,-72(s0)
   118a4:	8385                	srli	a5,a5,0x1
   118a6:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   118aa:	fb843783          	ld	a5,-72(s0)
   118ae:	f7e5                	bnez	a5,11896 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   118b0:	fe843783          	ld	a5,-24(s0)
   118b4:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   118b8:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   118bc:	fcc42783          	lw	a5,-52(s0)
   118c0:	0ff7f793          	andi	a5,a5,255
   118c4:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   118c8:	fd844783          	lbu	a5,-40(s0)
   118cc:	0107e793          	ori	a5,a5,16
   118d0:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   118d4:	fc842783          	lw	a5,-56(s0)
   118d8:	8b85                	andi	a5,a5,1
   118da:	0ff7f793          	andi	a5,a5,255
   118de:	8b85                	andi	a5,a5,1
   118e0:	0037969b          	slliw	a3,a5,0x3
   118e4:	fd844783          	lbu	a5,-40(s0)
   118e8:	9bdd                	andi	a5,a5,-9
   118ea:	873e                	mv	a4,a5
   118ec:	87b6                	mv	a5,a3
   118ee:	8fd9                	or	a5,a5,a4
   118f0:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   118f4:	fd844783          	lbu	a5,-40(s0)
   118f8:	f807e793          	ori	a5,a5,-128
   118fc:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11900:	a09d                	j	11966 <mpu_enable_region+0x112>
        if (*p == 'r') {
   11902:	fe043783          	ld	a5,-32(s0)
   11906:	0007c783          	lbu	a5,0(a5)
   1190a:	873e                	mv	a4,a5
   1190c:	07200793          	li	a5,114
   11910:	00f71863          	bne	a4,a5,11920 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11914:	fd844783          	lbu	a5,-40(s0)
   11918:	0027e793          	ori	a5,a5,2
   1191c:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11920:	fe043783          	ld	a5,-32(s0)
   11924:	0007c783          	lbu	a5,0(a5)
   11928:	873e                	mv	a4,a5
   1192a:	07700793          	li	a5,119
   1192e:	00f71863          	bne	a4,a5,1193e <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11932:	fd844783          	lbu	a5,-40(s0)
   11936:	0017e793          	ori	a5,a5,1
   1193a:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   1193e:	fe043783          	ld	a5,-32(s0)
   11942:	0007c783          	lbu	a5,0(a5)
   11946:	873e                	mv	a4,a5
   11948:	07800793          	li	a5,120
   1194c:	00f71863          	bne	a4,a5,1195c <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11950:	fd844783          	lbu	a5,-40(s0)
   11954:	0047e793          	ori	a5,a5,4
   11958:	fcf40c23          	sb	a5,-40(s0)
        p++;
   1195c:	fe043783          	ld	a5,-32(s0)
   11960:	0785                	addi	a5,a5,1
   11962:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11966:	fe043783          	ld	a5,-32(s0)
   1196a:	0007c783          	lbu	a5,0(a5)
   1196e:	fbd1                	bnez	a5,11902 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11970:	fd843783          	ld	a5,-40(s0)
   11974:	bc479073          	csrw	0xbc4,a5
}
   11978:	0001                	nop
   1197a:	6426                	ld	s0,72(sp)
   1197c:	6161                	addi	sp,sp,80
   1197e:	8082                	ret

0000000000011980 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   11980:	1141                	addi	sp,sp,-16
   11982:	e422                	sd	s0,8(sp)
   11984:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   11986:	0001                	nop
   11988:	6422                	ld	s0,8(sp)
   1198a:	0141                	addi	sp,sp,16
   1198c:	8082                	ret

000000000001198e <sd_get_byte>:

uint8_t sd_get_byte() {
   1198e:	1101                	addi	sp,sp,-32
   11990:	ec22                	sd	s0,24(sp)
   11992:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11994:	100507b7          	lui	a5,0x10050
   11998:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   1199c:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   119a0:	fe843783          	ld	a5,-24(s0)
   119a4:	47fc                	lw	a5,76(a5)
   119a6:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   119aa:	fe442783          	lw	a5,-28(s0)
   119ae:	fe07c9e3          	bltz	a5,119a0 <sd_get_byte+0x12>
    return (uint8_t)rx;
   119b2:	fe442783          	lw	a5,-28(s0)
   119b6:	0ff7f793          	andi	a5,a5,255
}
   119ba:	853e                	mv	a0,a5
   119bc:	6462                	ld	s0,24(sp)
   119be:	6105                	addi	sp,sp,32
   119c0:	8082                	ret

00000000000119c2 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   119c2:	7179                	addi	sp,sp,-48
   119c4:	f422                	sd	s0,40(sp)
   119c6:	1800                	addi	s0,sp,48
   119c8:	87aa                	mv	a5,a0
   119ca:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   119ce:	100507b7          	lui	a5,0x10050
   119d2:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   119d6:	0001                	nop
   119d8:	fe843783          	ld	a5,-24(s0)
   119dc:	47bc                	lw	a5,72(a5)
   119de:	2781                	sext.w	a5,a5
   119e0:	2781                	sext.w	a5,a5
   119e2:	fe07cbe3          	bltz	a5,119d8 <sd_set_byte+0x16>
    p->txdata = v;
   119e6:	fdf44783          	lbu	a5,-33(s0)
   119ea:	0007871b          	sext.w	a4,a5
   119ee:	fe843783          	ld	a5,-24(s0)
   119f2:	c7b8                	sw	a4,72(a5)
}
   119f4:	0001                	nop
   119f6:	7422                	ld	s0,40(sp)
   119f8:	6145                	addi	sp,sp,48
   119fa:	8082                	ret

00000000000119fc <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   119fc:	7179                	addi	sp,sp,-48
   119fe:	f406                	sd	ra,40(sp)
   11a00:	f022                	sd	s0,32(sp)
   11a02:	1800                	addi	s0,sp,48
   11a04:	fca43c23          	sd	a0,-40(s0)
   11a08:	87ae                	mv	a5,a1
   11a0a:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a0e:	100507b7          	lui	a5,0x10050
   11a12:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   11a16:	f79ff0ef          	jal	ra,1198e <sd_get_byte>
   11a1a:	87aa                	mv	a5,a0
   11a1c:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   11a20:	a831                	j	11a3c <sd_read_block+0x40>
       *buf = sd_get_byte();
   11a22:	f6dff0ef          	jal	ra,1198e <sd_get_byte>
   11a26:	87aa                	mv	a5,a0
   11a28:	873e                	mv	a4,a5
   11a2a:	fd843783          	ld	a5,-40(s0)
   11a2e:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003d6c0>
       buf++;
   11a32:	fd843783          	ld	a5,-40(s0)
   11a36:	0785                	addi	a5,a5,1
   11a38:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   11a3c:	fd442783          	lw	a5,-44(s0)
   11a40:	fff7871b          	addiw	a4,a5,-1
   11a44:	fce42a23          	sw	a4,-44(s0)
   11a48:	ffe9                	bnez	a5,11a22 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   11a4a:	f45ff0ef          	jal	ra,1198e <sd_get_byte>
   11a4e:	87aa                	mv	a5,a0
   11a50:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   11a54:	f3bff0ef          	jal	ra,1198e <sd_get_byte>
   11a58:	87aa                	mv	a5,a0
   11a5a:	fef40323          	sb	a5,-26(s0)
}
   11a5e:	0001                	nop
   11a60:	70a2                	ld	ra,40(sp)
   11a62:	7402                	ld	s0,32(sp)
   11a64:	6145                	addi	sp,sp,48
   11a66:	8082                	ret

0000000000011a68 <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   11a68:	7179                	addi	sp,sp,-48
   11a6a:	f406                	sd	ra,40(sp)
   11a6c:	f022                	sd	s0,32(sp)
   11a6e:	1800                	addi	s0,sp,48
   11a70:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a74:	100507b7          	lui	a5,0x10050
   11a78:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   11a7c:	05200513          	li	a0,82
   11a80:	f43ff0ef          	jal	ra,119c2 <sd_set_byte>
    sd_set_byte(0x00);
   11a84:	4501                	li	a0,0
   11a86:	f3dff0ef          	jal	ra,119c2 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11a8a:	fd843783          	ld	a5,-40(s0)
   11a8e:	83c1                	srli	a5,a5,0x10
   11a90:	0ff7f793          	andi	a5,a5,255
   11a94:	853e                	mv	a0,a5
   11a96:	f2dff0ef          	jal	ra,119c2 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11a9a:	fd843783          	ld	a5,-40(s0)
   11a9e:	83a1                	srli	a5,a5,0x8
   11aa0:	0ff7f793          	andi	a5,a5,255
   11aa4:	853e                	mv	a0,a5
   11aa6:	f1dff0ef          	jal	ra,119c2 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11aaa:	fd843783          	ld	a5,-40(s0)
   11aae:	0ff7f793          	andi	a5,a5,255
   11ab2:	853e                	mv	a0,a5
   11ab4:	f0fff0ef          	jal	ra,119c2 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11ab8:	0ff00513          	li	a0,255
   11abc:	f07ff0ef          	jal	ra,119c2 <sd_set_byte>

    cmdresp = sd_get_byte();
   11ac0:	00000097          	auipc	ra,0x0
   11ac4:	ece080e7          	jalr	-306(ra) # 1198e <sd_get_byte>
   11ac8:	87aa                	mv	a5,a0
   11aca:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11ace:	fe744783          	lbu	a5,-25(s0)
   11ad2:	2781                	sext.w	a5,a5
}
   11ad4:	853e                	mv	a0,a5
   11ad6:	70a2                	ld	ra,40(sp)
   11ad8:	7402                	ld	s0,32(sp)
   11ada:	6145                	addi	sp,sp,48
   11adc:	8082                	ret

0000000000011ade <sd_stop_reading>:

int sd_stop_reading() {
   11ade:	1101                	addi	sp,sp,-32
   11ae0:	ec06                	sd	ra,24(sp)
   11ae2:	e822                	sd	s0,16(sp)
   11ae4:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11ae6:	100507b7          	lui	a5,0x10050
   11aea:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   11aee:	04c00513          	li	a0,76
   11af2:	00000097          	auipc	ra,0x0
   11af6:	ed0080e7          	jalr	-304(ra) # 119c2 <sd_set_byte>
    sd_set_byte(0);
   11afa:	4501                	li	a0,0
   11afc:	00000097          	auipc	ra,0x0
   11b00:	ec6080e7          	jalr	-314(ra) # 119c2 <sd_set_byte>
    sd_set_byte(0);
   11b04:	4501                	li	a0,0
   11b06:	00000097          	auipc	ra,0x0
   11b0a:	ebc080e7          	jalr	-324(ra) # 119c2 <sd_set_byte>
    sd_set_byte(0);
   11b0e:	4501                	li	a0,0
   11b10:	00000097          	auipc	ra,0x0
   11b14:	eb2080e7          	jalr	-334(ra) # 119c2 <sd_set_byte>
    sd_set_byte(0);
   11b18:	4501                	li	a0,0
   11b1a:	00000097          	auipc	ra,0x0
   11b1e:	ea8080e7          	jalr	-344(ra) # 119c2 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11b22:	0ff00513          	li	a0,255
   11b26:	00000097          	auipc	ra,0x0
   11b2a:	e9c080e7          	jalr	-356(ra) # 119c2 <sd_set_byte>
    cmdresp = sd_get_byte();
   11b2e:	e61ff0ef          	jal	ra,1198e <sd_get_byte>
   11b32:	87aa                	mv	a5,a0
   11b34:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   11b38:	fe744783          	lbu	a5,-25(s0)
   11b3c:	2781                	sext.w	a5,a5
}
   11b3e:	853e                	mv	a0,a5
   11b40:	60e2                	ld	ra,24(sp)
   11b42:	6442                	ld	s0,16(sp)
   11b44:	6105                	addi	sp,sp,32
   11b46:	8082                	ret

0000000000011b48 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11b48:	715d                	addi	sp,sp,-80
   11b4a:	e4a2                	sd	s0,72(sp)
   11b4c:	0880                	addi	s0,sp,80
   11b4e:	faa43c23          	sd	a0,-72(s0)
   11b52:	87ae                	mv	a5,a1
   11b54:	8732                	mv	a4,a2
   11b56:	faf41b23          	sh	a5,-74(s0)
   11b5a:	87ba                	mv	a5,a4
   11b5c:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11b60:	fb843783          	ld	a5,-72(s0)
   11b64:	479c                	lw	a5,8(a5)
   11b66:	0087d79b          	srliw	a5,a5,0x8
   11b6a:	2781                	sext.w	a5,a5
   11b6c:	2781                	sext.w	a5,a5
   11b6e:	0ff7f793          	andi	a5,a5,255
   11b72:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   11b76:	fb843783          	ld	a5,-72(s0)
   11b7a:	479c                	lw	a5,8(a5)
   11b7c:	0107d79b          	srliw	a5,a5,0x10
   11b80:	2781                	sext.w	a5,a5
   11b82:	2781                	sext.w	a5,a5
   11b84:	0ff7f793          	andi	a5,a5,255
   11b88:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   11b8c:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b90:	fe042423          	sw	zero,-24(s0)
   11b94:	a82d                	j	11bce <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b96:	fec42783          	lw	a5,-20(s0)
   11b9a:	04078793          	addi	a5,a5,64 # 10050040 <_end+0x1003d700>
   11b9e:	fb843703          	ld	a4,-72(s0)
   11ba2:	97ba                	add	a5,a5,a4
   11ba4:	639c                	ld	a5,0(a5)
   11ba6:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   11baa:	fb843703          	ld	a4,-72(s0)
   11bae:	fec42783          	lw	a5,-20(s0)
   11bb2:	97ba                	add	a5,a5,a4
   11bb4:	0407c783          	lbu	a5,64(a5)
   11bb8:	2781                	sext.w	a5,a5
   11bba:	fec42703          	lw	a4,-20(s0)
   11bbe:	9fb9                	addw	a5,a5,a4
   11bc0:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11bc4:	fe842783          	lw	a5,-24(s0)
   11bc8:	2785                	addiw	a5,a5,1
   11bca:	fef42423          	sw	a5,-24(s0)
   11bce:	fe842703          	lw	a4,-24(s0)
   11bd2:	fdc42783          	lw	a5,-36(s0)
   11bd6:	2701                	sext.w	a4,a4
   11bd8:	2781                	sext.w	a5,a5
   11bda:	faf74ee3          	blt	a4,a5,11b96 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11bde:	fe042223          	sw	zero,-28(s0)
   11be2:	a8b5                	j	11c5e <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11be4:	fec42783          	lw	a5,-20(s0)
   11be8:	04078793          	addi	a5,a5,64
   11bec:	fb843703          	ld	a4,-72(s0)
   11bf0:	97ba                	add	a5,a5,a4
   11bf2:	639c                	ld	a5,0(a5)
   11bf4:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11bf8:	fec42783          	lw	a5,-20(s0)
   11bfc:	27a1                	addiw	a5,a5,8
   11bfe:	2781                	sext.w	a5,a5
   11c00:	04078793          	addi	a5,a5,64
   11c04:	fb843703          	ld	a4,-72(s0)
   11c08:	97ba                	add	a5,a5,a4
   11c0a:	639c                	ld	a5,0(a5)
   11c0c:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11c10:	fc645783          	lhu	a5,-58(s0)
   11c14:	fb645703          	lhu	a4,-74(s0)
   11c18:	2701                	sext.w	a4,a4
   11c1a:	2781                	sext.w	a5,a5
   11c1c:	00f71f63          	bne	a4,a5,11c3a <get_dev_bar+0xf2>
   11c20:	fc445783          	lhu	a5,-60(s0)
   11c24:	fb445703          	lhu	a4,-76(s0)
   11c28:	2701                	sext.w	a4,a4
   11c2a:	2781                	sext.w	a5,a5
   11c2c:	00f71763          	bne	a4,a5,11c3a <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11c30:	fcc42783          	lw	a5,-52(s0)
   11c34:	1782                	slli	a5,a5,0x20
   11c36:	9381                	srli	a5,a5,0x20
   11c38:	a825                	j	11c70 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11c3a:	fb843703          	ld	a4,-72(s0)
   11c3e:	fec42783          	lw	a5,-20(s0)
   11c42:	97ba                	add	a5,a5,a4
   11c44:	0407c783          	lbu	a5,64(a5)
   11c48:	2781                	sext.w	a5,a5
   11c4a:	fec42703          	lw	a4,-20(s0)
   11c4e:	9fb9                	addw	a5,a5,a4
   11c50:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   11c54:	fe442783          	lw	a5,-28(s0)
   11c58:	2785                	addiw	a5,a5,1
   11c5a:	fef42223          	sw	a5,-28(s0)
   11c5e:	fe442703          	lw	a4,-28(s0)
   11c62:	fe042783          	lw	a5,-32(s0)
   11c66:	2701                	sext.w	a4,a4
   11c68:	2781                	sext.w	a5,a5
   11c6a:	f6f74de3          	blt	a4,a5,11be4 <get_dev_bar+0x9c>
    return DEV_NONE;
   11c6e:	57fd                	li	a5,-1
}
   11c70:	853e                	mv	a0,a5
   11c72:	6426                	ld	s0,72(sp)
   11c74:	6161                	addi	sp,sp,80
   11c76:	8082                	ret

0000000000011c78 <mpu_region_total>:
static int mpu_region_total() {
   11c78:	1101                	addi	sp,sp,-32
   11c7a:	ec22                	sd	s0,24(sp)
   11c7c:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11c7e:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   11c82:	bc4027f3          	csrr	a5,0xbc4
   11c86:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   11c8a:	fe843783          	ld	a5,-24(s0)
   11c8e:	83a1                	srli	a5,a5,0x8
   11c90:	2781                	sext.w	a5,a5
}
   11c92:	853e                	mv	a0,a5
   11c94:	6462                	ld	s0,24(sp)
   11c96:	6105                	addi	sp,sp,32
   11c98:	8082                	ret

0000000000011c9a <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   11c9a:	7179                	addi	sp,sp,-48
   11c9c:	f422                	sd	s0,40(sp)
   11c9e:	1800                	addi	s0,sp,48
   11ca0:	87aa                	mv	a5,a0
   11ca2:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   11ca6:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   11caa:	fdc42783          	lw	a5,-36(s0)
   11cae:	0ff7f793          	andi	a5,a5,255
   11cb2:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   11cb6:	fe844783          	lbu	a5,-24(s0)
   11cba:	f807e793          	ori	a5,a5,-128
   11cbe:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11cc2:	fe843783          	ld	a5,-24(s0)
   11cc6:	bc479073          	csrw	0xbc4,a5
}
   11cca:	0001                	nop
   11ccc:	7422                	ld	s0,40(sp)
   11cce:	6145                	addi	sp,sp,48
   11cd0:	8082                	ret

0000000000011cd2 <mpu_enable_region>:
                       const char *rwx) {
   11cd2:	715d                	addi	sp,sp,-80
   11cd4:	e4a2                	sd	s0,72(sp)
   11cd6:	0880                	addi	s0,sp,80
   11cd8:	87aa                	mv	a5,a0
   11cda:	fcb43023          	sd	a1,-64(s0)
   11cde:	fac43c23          	sd	a2,-72(s0)
   11ce2:	fae43823          	sd	a4,-80(s0)
   11ce6:	fcf42623          	sw	a5,-52(s0)
   11cea:	87b6                	mv	a5,a3
   11cec:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11cf0:	c0000793          	li	a5,-1024
   11cf4:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11cf8:	fb043783          	ld	a5,-80(s0)
   11cfc:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11d00:	fc043783          	ld	a5,-64(s0)
   11d04:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11d08:	fb843783          	ld	a5,-72(s0)
   11d0c:	8385                	srli	a5,a5,0x1
   11d0e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11d12:	a819                	j	11d28 <mpu_enable_region+0x56>
        mask <<= 1;
   11d14:	fe843783          	ld	a5,-24(s0)
   11d18:	0786                	slli	a5,a5,0x1
   11d1a:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11d1e:	fb843783          	ld	a5,-72(s0)
   11d22:	8385                	srli	a5,a5,0x1
   11d24:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11d28:	fb843783          	ld	a5,-72(s0)
   11d2c:	f7e5                	bnez	a5,11d14 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11d2e:	fe843783          	ld	a5,-24(s0)
   11d32:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   11d36:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11d3a:	fcc42783          	lw	a5,-52(s0)
   11d3e:	0ff7f793          	andi	a5,a5,255
   11d42:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   11d46:	fd844783          	lbu	a5,-40(s0)
   11d4a:	0107e793          	ori	a5,a5,16
   11d4e:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   11d52:	fc842783          	lw	a5,-56(s0)
   11d56:	8b85                	andi	a5,a5,1
   11d58:	0ff7f793          	andi	a5,a5,255
   11d5c:	8b85                	andi	a5,a5,1
   11d5e:	0037969b          	slliw	a3,a5,0x3
   11d62:	fd844783          	lbu	a5,-40(s0)
   11d66:	9bdd                	andi	a5,a5,-9
   11d68:	873e                	mv	a4,a5
   11d6a:	87b6                	mv	a5,a3
   11d6c:	8fd9                	or	a5,a5,a4
   11d6e:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   11d72:	fd844783          	lbu	a5,-40(s0)
   11d76:	f807e793          	ori	a5,a5,-128
   11d7a:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11d7e:	a09d                	j	11de4 <mpu_enable_region+0x112>
        if (*p == 'r') {
   11d80:	fe043783          	ld	a5,-32(s0)
   11d84:	0007c783          	lbu	a5,0(a5)
   11d88:	873e                	mv	a4,a5
   11d8a:	07200793          	li	a5,114
   11d8e:	00f71863          	bne	a4,a5,11d9e <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11d92:	fd844783          	lbu	a5,-40(s0)
   11d96:	0027e793          	ori	a5,a5,2
   11d9a:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11d9e:	fe043783          	ld	a5,-32(s0)
   11da2:	0007c783          	lbu	a5,0(a5)
   11da6:	873e                	mv	a4,a5
   11da8:	07700793          	li	a5,119
   11dac:	00f71863          	bne	a4,a5,11dbc <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11db0:	fd844783          	lbu	a5,-40(s0)
   11db4:	0017e793          	ori	a5,a5,1
   11db8:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11dbc:	fe043783          	ld	a5,-32(s0)
   11dc0:	0007c783          	lbu	a5,0(a5)
   11dc4:	873e                	mv	a4,a5
   11dc6:	07800793          	li	a5,120
   11dca:	00f71863          	bne	a4,a5,11dda <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11dce:	fd844783          	lbu	a5,-40(s0)
   11dd2:	0047e793          	ori	a5,a5,4
   11dd6:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11dda:	fe043783          	ld	a5,-32(s0)
   11dde:	0785                	addi	a5,a5,1
   11de0:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11de4:	fe043783          	ld	a5,-32(s0)
   11de8:	0007c783          	lbu	a5,0(a5)
   11dec:	fbd1                	bnez	a5,11d80 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11dee:	fd843783          	ld	a5,-40(s0)
   11df2:	bc479073          	csrw	0xbc4,a5
}
   11df6:	0001                	nop
   11df8:	6426                	ld	s0,72(sp)
   11dfa:	6161                	addi	sp,sp,80
   11dfc:	8082                	ret

0000000000011dfe <is_empty_gui>:
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"
#include <string.h>

int is_empty_gui(const struct gpt_guid *guid) {
   11dfe:	1101                	addi	sp,sp,-32
   11e00:	ec22                	sd	s0,24(sp)
   11e02:	1000                	addi	s0,sp,32
   11e04:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11e08:	fe843783          	ld	a5,-24(s0)
   11e0c:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11e0e:	e7ad                	bnez	a5,11e78 <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11e10:	fe843783          	ld	a5,-24(s0)
   11e14:	0047d783          	lhu	a5,4(a5)
   11e18:	e3a5                	bnez	a5,11e78 <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11e1a:	fe843783          	ld	a5,-24(s0)
   11e1e:	0067d783          	lhu	a5,6(a5)
   11e22:	ebb9                	bnez	a5,11e78 <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11e24:	fe843783          	ld	a5,-24(s0)
   11e28:	0087c783          	lbu	a5,8(a5)
   11e2c:	e7b1                	bnez	a5,11e78 <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11e2e:	fe843783          	ld	a5,-24(s0)
   11e32:	0097c783          	lbu	a5,9(a5)
   11e36:	e3a9                	bnez	a5,11e78 <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11e38:	fe843783          	ld	a5,-24(s0)
   11e3c:	00a7c783          	lbu	a5,10(a5)
   11e40:	ef85                	bnez	a5,11e78 <is_empty_gui+0x7a>
   11e42:	fe843783          	ld	a5,-24(s0)
   11e46:	00b7c783          	lbu	a5,11(a5)
   11e4a:	e79d                	bnez	a5,11e78 <is_empty_gui+0x7a>
   11e4c:	fe843783          	ld	a5,-24(s0)
   11e50:	00c7c783          	lbu	a5,12(a5)
   11e54:	e395                	bnez	a5,11e78 <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11e56:	fe843783          	ld	a5,-24(s0)
   11e5a:	00d7c783          	lbu	a5,13(a5)
   11e5e:	ef89                	bnez	a5,11e78 <is_empty_gui+0x7a>
   11e60:	fe843783          	ld	a5,-24(s0)
   11e64:	00e7c783          	lbu	a5,14(a5)
   11e68:	eb81                	bnez	a5,11e78 <is_empty_gui+0x7a>
   11e6a:	fe843783          	ld	a5,-24(s0)
   11e6e:	00f7c783          	lbu	a5,15(a5)
   11e72:	e399                	bnez	a5,11e78 <is_empty_gui+0x7a>
   11e74:	4785                	li	a5,1
   11e76:	a011                	j	11e7a <is_empty_gui+0x7c>
   11e78:	4781                	li	a5,0
}
   11e7a:	853e                	mv	a0,a5
   11e7c:	6462                	ld	s0,24(sp)
   11e7e:	6105                	addi	sp,sp,32
   11e80:	8082                	ret

0000000000011e82 <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11e82:	7159                	addi	sp,sp,-112
   11e84:	f486                	sd	ra,104(sp)
   11e86:	f0a2                	sd	s0,96(sp)
   11e88:	1880                	addi	s0,sp,112
   11e8a:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e8e:	fe843783          	ld	a5,-24(s0)
   11e92:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e94:	0187d79b          	srliw	a5,a5,0x18
   11e98:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e9c:	fe843783          	ld	a5,-24(s0)
   11ea0:	439c                	lw	a5,0(a5)
   11ea2:	0107d79b          	srliw	a5,a5,0x10
   11ea6:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ea8:	0ff7f793          	andi	a5,a5,255
   11eac:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11eb0:	fe843783          	ld	a5,-24(s0)
   11eb4:	439c                	lw	a5,0(a5)
   11eb6:	0087d79b          	srliw	a5,a5,0x8
   11eba:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ebc:	0ff7f793          	andi	a5,a5,255
   11ec0:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11ec4:	fe843783          	ld	a5,-24(s0)
   11ec8:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eca:	0ff7f793          	andi	a5,a5,255
   11ece:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11ed2:	fe843783          	ld	a5,-24(s0)
   11ed6:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eda:	0087d79b          	srliw	a5,a5,0x8
   11ede:	17c2                	slli	a5,a5,0x30
   11ee0:	93c1                	srli	a5,a5,0x30
   11ee2:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11ee6:	fe843783          	ld	a5,-24(s0)
   11eea:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eee:	2781                	sext.w	a5,a5
   11ef0:	0ff7f793          	andi	a5,a5,255
   11ef4:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11ef8:	fe843783          	ld	a5,-24(s0)
   11efc:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f00:	0087d79b          	srliw	a5,a5,0x8
   11f04:	17c2                	slli	a5,a5,0x30
   11f06:	93c1                	srli	a5,a5,0x30
   11f08:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11f0c:	fe843783          	ld	a5,-24(s0)
   11f10:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f14:	2781                	sext.w	a5,a5
   11f16:	0ff7f793          	andi	a5,a5,255
   11f1a:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11f1c:	fe843703          	ld	a4,-24(s0)
   11f20:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f24:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11f26:	fe843683          	ld	a3,-24(s0)
   11f2a:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f2e:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f30:	fe843603          	ld	a2,-24(s0)
   11f34:	00a64603          	lbu	a2,10(a2) # 4000a <_end+0x2d6ca>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f38:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f3a:	fe843583          	ld	a1,-24(s0)
   11f3e:	00b5c583          	lbu	a1,11(a1) # 1000000b <_end+0xffed6cb>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f42:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f44:	fe843503          	ld	a0,-24(s0)
   11f48:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f4c:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f4e:	fe843803          	ld	a6,-24(s0)
   11f52:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f56:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f58:	fe843883          	ld	a7,-24(s0)
   11f5c:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f60:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f62:	fe843303          	ld	t1,-24(s0)
   11f66:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f6a:	2301                	sext.w	t1,t1
   11f6c:	e09a                	sd	t1,64(sp)
   11f6e:	fc46                	sd	a7,56(sp)
   11f70:	f842                	sd	a6,48(sp)
   11f72:	f42a                	sd	a0,40(sp)
   11f74:	f02e                	sd	a1,32(sp)
   11f76:	ec32                	sd	a2,24(sp)
   11f78:	e836                	sd	a3,16(sp)
   11f7a:	e43a                	sd	a4,8(sp)
   11f7c:	e03e                	sd	a5,0(sp)
   11f7e:	8886                	mv	a7,ra
   11f80:	881e                	mv	a6,t2
   11f82:	8796                	mv	a5,t0
   11f84:	877e                	mv	a4,t6
   11f86:	86fa                	mv	a3,t5
   11f88:	8676                	mv	a2,t4
   11f8a:	85f2                	mv	a1,t3
   11f8c:	6549                	lui	a0,0x12
   11f8e:	67050513          	addi	a0,a0,1648 # 12670 <strnlen+0x28c>
   11f92:	ef2ff0ef          	jal	ra,11684 <printf_uart>
        );
}
   11f96:	0001                	nop
   11f98:	70a6                	ld	ra,104(sp)
   11f9a:	7406                	ld	s0,96(sp)
   11f9c:	6165                	addi	sp,sp,112
   11f9e:	8082                	ret

0000000000011fa0 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   11fa0:	7179                	addi	sp,sp,-48
   11fa2:	f422                	sd	s0,40(sp)
   11fa4:	1800                	addi	s0,sp,48
   11fa6:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   11faa:	5b1937b7          	lui	a5,0x5b193
   11fae:	3007879b          	addiw	a5,a5,768
   11fb2:	fef42023          	sw	a5,-32(s0)
   11fb6:	c7800793          	li	a5,-904
   11fba:	fef41223          	sh	a5,-28(s0)
   11fbe:	6791                	lui	a5,0x4
   11fc0:	0cd7879b          	addiw	a5,a5,205
   11fc4:	fef41323          	sh	a5,-26(s0)
   11fc8:	f8000793          	li	a5,-128
   11fcc:	fef40423          	sb	a5,-24(s0)
   11fd0:	4789                	li	a5,2
   11fd2:	fef404a3          	sb	a5,-23(s0)
   11fd6:	57a1                	li	a5,-24
   11fd8:	fef40523          	sb	a5,-22(s0)
   11fdc:	06c00793          	li	a5,108
   11fe0:	fef405a3          	sb	a5,-21(s0)
   11fe4:	04500793          	li	a5,69
   11fe8:	fef40623          	sb	a5,-20(s0)
   11fec:	05800793          	li	a5,88
   11ff0:	fef406a3          	sb	a5,-19(s0)
   11ff4:	47ad                	li	a5,11
   11ff6:	fef40723          	sb	a5,-18(s0)
   11ffa:	04700793          	li	a5,71
   11ffe:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   12002:	fe042703          	lw	a4,-32(s0)
   12006:	fd843783          	ld	a5,-40(s0)
   1200a:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   1200c:	0af71863          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   12010:	fe445703          	lhu	a4,-28(s0)
   12014:	fd843783          	ld	a5,-40(s0)
   12018:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   1201c:	2701                	sext.w	a4,a4
   1201e:	2781                	sext.w	a5,a5
   12020:	08f71e63          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   12024:	fe645703          	lhu	a4,-26(s0)
   12028:	fd843783          	ld	a5,-40(s0)
   1202c:	0067d783          	lhu	a5,6(a5)
   12030:	2701                	sext.w	a4,a4
   12032:	2781                	sext.w	a5,a5
   12034:	08f71463          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   12038:	fe844703          	lbu	a4,-24(s0)
   1203c:	fd843783          	ld	a5,-40(s0)
   12040:	0087c783          	lbu	a5,8(a5)
   12044:	06f71c63          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   12048:	fe944703          	lbu	a4,-23(s0)
   1204c:	fd843783          	ld	a5,-40(s0)
   12050:	0097c783          	lbu	a5,9(a5)
   12054:	06f71463          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   12058:	fea44703          	lbu	a4,-22(s0)
   1205c:	fd843783          	ld	a5,-40(s0)
   12060:	00a7c783          	lbu	a5,10(a5)
   12064:	04f71c63          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   12068:	feb44703          	lbu	a4,-21(s0)
   1206c:	fd843783          	ld	a5,-40(s0)
   12070:	00b7c783          	lbu	a5,11(a5)
   12074:	04f71463          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   12078:	fec44703          	lbu	a4,-20(s0)
   1207c:	fd843783          	ld	a5,-40(s0)
   12080:	00c7c783          	lbu	a5,12(a5)
   12084:	02f71c63          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   12088:	fed44703          	lbu	a4,-19(s0)
   1208c:	fd843783          	ld	a5,-40(s0)
   12090:	00d7c783          	lbu	a5,13(a5)
   12094:	02f71463          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   12098:	fee44703          	lbu	a4,-18(s0)
   1209c:	fd843783          	ld	a5,-40(s0)
   120a0:	00e7c783          	lbu	a5,14(a5)
   120a4:	00f71c63          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   120a8:	fef44703          	lbu	a4,-17(s0)
   120ac:	fd843783          	ld	a5,-40(s0)
   120b0:	00f7c783          	lbu	a5,15(a5)
   120b4:	00f71463          	bne	a4,a5,120bc <is_uboot_guid+0x11c>
   120b8:	4785                	li	a5,1
   120ba:	a011                	j	120be <is_uboot_guid+0x11e>
   120bc:	4781                	li	a5,0
}
   120be:	853e                	mv	a0,a5
   120c0:	7422                	ld	s0,40(sp)
   120c2:	6145                	addi	sp,sp,48
   120c4:	8082                	ret

00000000000120c6 <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   120c6:	9c010113          	addi	sp,sp,-1600
   120ca:	62113c23          	sd	ra,1592(sp)
   120ce:	62813823          	sd	s0,1584(sp)
   120d2:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   120d6:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   120da:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   120de:	080007b7          	lui	a5,0x8000
   120e2:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   120e6:	00000097          	auipc	ra,0x0
   120ea:	89a080e7          	jalr	-1894(ra) # 11980 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   120ee:	45b5                	li	a1,13
   120f0:	67c9                	lui	a5,0x12
   120f2:	6b878513          	addi	a0,a5,1720 # 126b8 <strnlen+0x2d4>
   120f6:	fb3fe0ef          	jal	ra,110a8 <print_uart>

    sd_start_reading(0);
   120fa:	4501                	li	a0,0
   120fc:	00000097          	auipc	ra,0x0
   12100:	96c080e7          	jalr	-1684(ra) # 11a68 <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   12104:	dc040793          	addi	a5,s0,-576
   12108:	20000593          	li	a1,512
   1210c:	853e                	mv	a0,a5
   1210e:	8efff0ef          	jal	ra,119fc <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   12112:	bc040793          	addi	a5,s0,-1088
   12116:	20000593          	li	a1,512
   1211a:	853e                	mv	a0,a5
   1211c:	8e1ff0ef          	jal	ra,119fc <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   12120:	bc043703          	ld	a4,-1088(s0)
   12124:	67c9                	lui	a5,0x12
   12126:	7187b783          	ld	a5,1816(a5) # 12718 <strnlen+0x334>
   1212a:	00f70663          	beq	a4,a5,12136 <run_from_sdcard+0x70>
        sd_stop_reading();
   1212e:	9b1ff0ef          	jal	ra,11ade <sd_stop_reading>
        return -1;
   12132:	57fd                	li	a5,-1
   12134:	a2c5                	j	12314 <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   12136:	fc042a23          	sw	zero,-44(s0)
   1213a:	a8c5                	j	1222a <run_from_sdcard+0x164>
        i4 = i % 4;
   1213c:	fd442703          	lw	a4,-44(s0)
   12140:	41f7579b          	sraiw	a5,a4,0x1f
   12144:	01e7d79b          	srliw	a5,a5,0x1e
   12148:	9f3d                	addw	a4,a4,a5
   1214a:	8b0d                	andi	a4,a4,3
   1214c:	40f707bb          	subw	a5,a4,a5
   12150:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   12154:	fc442783          	lw	a5,-60(s0)
   12158:	2781                	sext.w	a5,a5
   1215a:	eb81                	bnez	a5,1216a <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   1215c:	9c040793          	addi	a5,s0,-1600
   12160:	20000593          	li	a1,512
   12164:	853e                	mv	a0,a5
   12166:	897ff0ef          	jal	ra,119fc <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   1216a:	9c040713          	addi	a4,s0,-1600
   1216e:	fc442783          	lw	a5,-60(s0)
   12172:	079e                	slli	a5,a5,0x7
   12174:	97ba                	add	a5,a5,a4
   12176:	853e                	mv	a0,a5
   12178:	00000097          	auipc	ra,0x0
   1217c:	c86080e7          	jalr	-890(ra) # 11dfe <is_empty_gui>
   12180:	87aa                	mv	a5,a0
   12182:	efd1                	bnez	a5,1221e <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   12184:	fd442783          	lw	a5,-44(s0)
   12188:	85be                	mv	a1,a5
   1218a:	67c9                	lui	a5,0x12
   1218c:	6c878513          	addi	a0,a5,1736 # 126c8 <strnlen+0x2e4>
   12190:	cf4ff0ef          	jal	ra,11684 <printf_uart>
        print_guid(&entry[i4].type);
   12194:	9c040713          	addi	a4,s0,-1600
   12198:	fc442783          	lw	a5,-60(s0)
   1219c:	079e                	slli	a5,a5,0x7
   1219e:	97ba                	add	a5,a5,a4
   121a0:	853e                	mv	a0,a5
   121a2:	ce1ff0ef          	jal	ra,11e82 <print_guid>
        print_uart(" : ", 3);
   121a6:	458d                	li	a1,3
   121a8:	67c9                	lui	a5,0x12
   121aa:	6d078513          	addi	a0,a5,1744 # 126d0 <strnlen+0x2ec>
   121ae:	efbfe0ef          	jal	ra,110a8 <print_uart>
        print_uart((const char *)entry[i4].name, sizeof(entry[i4].name));
   121b2:	9c040713          	addi	a4,s0,-1600
   121b6:	fc442783          	lw	a5,-60(s0)
   121ba:	079e                	slli	a5,a5,0x7
   121bc:	03078793          	addi	a5,a5,48
   121c0:	97ba                	add	a5,a5,a4
   121c2:	07a1                	addi	a5,a5,8
   121c4:	04800593          	li	a1,72
   121c8:	853e                	mv	a0,a5
   121ca:	edffe0ef          	jal	ra,110a8 <print_uart>
        print_uart("\r\n", 2);
   121ce:	4589                	li	a1,2
   121d0:	67c9                	lui	a5,0x12
   121d2:	6d878513          	addi	a0,a5,1752 # 126d8 <strnlen+0x2f4>
   121d6:	ed3fe0ef          	jal	ra,110a8 <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   121da:	9c040713          	addi	a4,s0,-1600
   121de:	fc442783          	lw	a5,-60(s0)
   121e2:	079e                	slli	a5,a5,0x7
   121e4:	97ba                	add	a5,a5,a4
   121e6:	853e                	mv	a0,a5
   121e8:	00000097          	auipc	ra,0x0
   121ec:	db8080e7          	jalr	-584(ra) # 11fa0 <is_uboot_guid>
   121f0:	87aa                	mv	a5,a0
   121f2:	c79d                	beqz	a5,12220 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   121f4:	fc442783          	lw	a5,-60(s0)
   121f8:	079e                	slli	a5,a5,0x7
   121fa:	ff040713          	addi	a4,s0,-16
   121fe:	97ba                	add	a5,a5,a4
   12200:	9f07b783          	ld	a5,-1552(a5)
   12204:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   12208:	fc442783          	lw	a5,-60(s0)
   1220c:	079e                	slli	a5,a5,0x7
   1220e:	ff040713          	addi	a4,s0,-16
   12212:	97ba                	add	a5,a5,a4
   12214:	9f87b783          	ld	a5,-1544(a5)
   12218:	fef43023          	sd	a5,-32(s0)
   1221c:	a011                	j	12220 <run_from_sdcard+0x15a>
            continue;
   1221e:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   12220:	fd442783          	lw	a5,-44(s0)
   12224:	2785                	addiw	a5,a5,1
   12226:	fcf42a23          	sw	a5,-44(s0)
   1222a:	c1042703          	lw	a4,-1008(s0)
   1222e:	fd442783          	lw	a5,-44(s0)
   12232:	f0e7e5e3          	bltu	a5,a4,1213c <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   12236:	8a9ff0ef          	jal	ra,11ade <sd_stop_reading>

    if (lba_start == 0) {
   1223a:	fe843783          	ld	a5,-24(s0)
   1223e:	e399                	bnez	a5,12244 <run_from_sdcard+0x17e>
        return -1;
   12240:	57fd                	li	a5,-1
   12242:	a8c9                	j	12314 <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   12244:	fe843783          	ld	a5,-24(s0)
   12248:	07a6                	slli	a5,a5,0x9
   1224a:	853e                	mv	a0,a5
   1224c:	00000097          	auipc	ra,0x0
   12250:	81c080e7          	jalr	-2020(ra) # 11a68 <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   12254:	fe043703          	ld	a4,-32(s0)
   12258:	fe843783          	ld	a5,-24(s0)
   1225c:	40f707b3          	sub	a5,a4,a5
   12260:	0785                	addi	a5,a5,1
   12262:	8385                	srli	a5,a5,0x1
   12264:	85be                	mv	a1,a5
   12266:	67c9                	lui	a5,0x12
   12268:	6e078513          	addi	a0,a5,1760 # 126e0 <strnlen+0x2fc>
   1226c:	c18ff0ef          	jal	ra,11684 <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12270:	fe843783          	ld	a5,-24(s0)
   12274:	fcf43423          	sd	a5,-56(s0)
   12278:	a8bd                	j	122f6 <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   1227a:	9c040793          	addi	a5,s0,-1600
   1227e:	20000593          	li	a1,512
   12282:	853e                	mv	a0,a5
   12284:	f78ff0ef          	jal	ra,119fc <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   12288:	9c040793          	addi	a5,s0,-1600
   1228c:	6398                	ld	a4,0(a5)
   1228e:	fd843783          	ld	a5,-40(s0)
   12292:	639c                	ld	a5,0(a5)
   12294:	00f71b63          	bne	a4,a5,122aa <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   12298:	67c9                	lui	a5,0x12
   1229a:	6f078593          	addi	a1,a5,1776 # 126f0 <strnlen+0x30c>
   1229e:	67c9                	lui	a5,0x12
   122a0:	70078513          	addi	a0,a5,1792 # 12700 <strnlen+0x31c>
   122a4:	be0ff0ef          	jal	ra,11684 <printf_uart>
            break;
   122a8:	a8a9                	j	12302 <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   122aa:	fd843783          	ld	a5,-40(s0)
   122ae:	86be                	mv	a3,a5
   122b0:	9c040793          	addi	a5,s0,-1600
   122b4:	20000713          	li	a4,512
   122b8:	863a                	mv	a2,a4
   122ba:	85be                	mv	a1,a5
   122bc:	8536                	mv	a0,a3
   122be:	00000097          	auipc	ra,0x0
   122c2:	066080e7          	jalr	102(ra) # 12324 <memcpy>
        sram += sizeof(entry);
   122c6:	fd843783          	ld	a5,-40(s0)
   122ca:	20078793          	addi	a5,a5,512
   122ce:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   122d2:	fc843703          	ld	a4,-56(s0)
   122d6:	06400793          	li	a5,100
   122da:	02f777b3          	remu	a5,a4,a5
   122de:	e799                	bnez	a5,122ec <run_from_sdcard+0x226>
            print_uart(". ", 2);
   122e0:	4589                	li	a1,2
   122e2:	67c9                	lui	a5,0x12
   122e4:	71078513          	addi	a0,a5,1808 # 12710 <strnlen+0x32c>
   122e8:	dc1fe0ef          	jal	ra,110a8 <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   122ec:	fc843783          	ld	a5,-56(s0)
   122f0:	0785                	addi	a5,a5,1
   122f2:	fcf43423          	sd	a5,-56(s0)
   122f6:	fc843703          	ld	a4,-56(s0)
   122fa:	fe043783          	ld	a5,-32(s0)
   122fe:	f6e7fee3          	bleu	a4,a5,1227a <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   12302:	4589                	li	a1,2
   12304:	67c9                	lui	a5,0x12
   12306:	6d878513          	addi	a0,a5,1752 # 126d8 <strnlen+0x2f4>
   1230a:	d9ffe0ef          	jal	ra,110a8 <print_uart>

    sd_stop_reading();
   1230e:	fd0ff0ef          	jal	ra,11ade <sd_stop_reading>
    return 0;
   12312:	4781                	li	a5,0
}
   12314:	853e                	mv	a0,a5
   12316:	63813083          	ld	ra,1592(sp)
   1231a:	63013403          	ld	s0,1584(sp)
   1231e:	64010113          	addi	sp,sp,1600
   12322:	8082                	ret

0000000000012324 <memcpy>:
   12324:	00a5c7b3          	xor	a5,a1,a0
   12328:	8b9d                	andi	a5,a5,7
   1232a:	00c50733          	add	a4,a0,a2
   1232e:	e781                	bnez	a5,12336 <memcpy+0x12>
   12330:	479d                	li	a5,7
   12332:	00c7ef63          	bltu	a5,a2,12350 <memcpy+0x2c>
   12336:	87aa                	mv	a5,a0
   12338:	00e56963          	bltu	a0,a4,1234a <memcpy+0x26>
   1233c:	8082                	ret
   1233e:	0005c683          	lbu	a3,0(a1)
   12342:	0785                	addi	a5,a5,1
   12344:	0585                	addi	a1,a1,1
   12346:	fed78fa3          	sb	a3,-1(a5)
   1234a:	fee7eae3          	bltu	a5,a4,1233e <memcpy+0x1a>
   1234e:	8082                	ret
   12350:	00757793          	andi	a5,a0,7
   12354:	ebbd                	bnez	a5,123ca <memcpy+0xa6>
   12356:	87aa                	mv	a5,a0
   12358:	ff877693          	andi	a3,a4,-8
   1235c:	fc068613          	addi	a2,a3,-64
   12360:	06c7fc63          	bleu	a2,a5,123d8 <memcpy+0xb4>
   12364:	0005b383          	ld	t2,0(a1)
   12368:	0085b283          	ld	t0,8(a1)
   1236c:	0105bf83          	ld	t6,16(a1)
   12370:	0185bf03          	ld	t5,24(a1)
   12374:	0205be83          	ld	t4,32(a1)
   12378:	0285be03          	ld	t3,40(a1)
   1237c:	0305b303          	ld	t1,48(a1)
   12380:	0385b883          	ld	a7,56(a1)
   12384:	04858593          	addi	a1,a1,72
   12388:	04878793          	addi	a5,a5,72
   1238c:	ff85b803          	ld	a6,-8(a1)
   12390:	fa77bc23          	sd	t2,-72(a5)
   12394:	fc57b023          	sd	t0,-64(a5)
   12398:	fdf7b423          	sd	t6,-56(a5)
   1239c:	fde7b823          	sd	t5,-48(a5)
   123a0:	fdd7bc23          	sd	t4,-40(a5)
   123a4:	ffc7b023          	sd	t3,-32(a5)
   123a8:	fe67b423          	sd	t1,-24(a5)
   123ac:	ff17b823          	sd	a7,-16(a5)
   123b0:	ff07bc23          	sd	a6,-8(a5)
   123b4:	b775                	j	12360 <memcpy+0x3c>
   123b6:	0005c683          	lbu	a3,0(a1)
   123ba:	0785                	addi	a5,a5,1
   123bc:	0585                	addi	a1,a1,1
   123be:	fed78fa3          	sb	a3,-1(a5)
   123c2:	0077f693          	andi	a3,a5,7
   123c6:	fae5                	bnez	a3,123b6 <memcpy+0x92>
   123c8:	bf41                	j	12358 <memcpy+0x34>
   123ca:	87aa                	mv	a5,a0
   123cc:	bfdd                	j	123c2 <memcpy+0x9e>
   123ce:	6190                	ld	a2,0(a1)
   123d0:	07a1                	addi	a5,a5,8
   123d2:	05a1                	addi	a1,a1,8
   123d4:	fec7bc23          	sd	a2,-8(a5)
   123d8:	fed7ebe3          	bltu	a5,a3,123ce <memcpy+0xaa>
   123dc:	f6e7e7e3          	bltu	a5,a4,1234a <memcpy+0x26>
   123e0:	8082                	ret
	...

00000000000123e4 <strnlen>:
   123e4:	95aa                	add	a1,a1,a0
   123e6:	87aa                	mv	a5,a0
   123e8:	00b78563          	beq	a5,a1,123f2 <strnlen+0xe>
   123ec:	0007c703          	lbu	a4,0(a5)
   123f0:	e701                	bnez	a4,123f8 <strnlen+0x14>
   123f2:	40a78533          	sub	a0,a5,a0
   123f6:	8082                	ret
   123f8:	0785                	addi	a5,a5,1
   123fa:	b7fd                	j	123e8 <strnlen+0x4>
	...
