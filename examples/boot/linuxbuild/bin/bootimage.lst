
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1040006f          	j	10108 <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrs (pseudo asm instruction) - set bit   
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  la t0, trap_table
   100b4:	00000297          	auipc	t0,0x0
   100b8:	f5028293          	addi	t0,t0,-176 # 10004 <trap_table>
  csrw mtvec, t0
   100bc:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100c0:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100c4:	08200137          	lui	sp,0x8200

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100c8:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100cc:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100d0:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100d4:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100d8:	40a10133          	sub	sp,sp,a0
  addi sp,sp,-256
   100dc:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ecbe4>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100e0:	7b311073          	csrw	0x7b3,sp

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100e4:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   100e8:	00050663          	beqz	a0,100f4 <init0>
  wfi
   100ec:	10500073          	wfi
  j end_init0
   100f0:	0080006f          	j	100f8 <end_init0>

00000000000100f4 <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   100f4:	63c000ef          	jal	ra,10730 <_init>

00000000000100f8 <end_init0>:
end_init0:

  # a0 = hart id
  # a1 = fdt header
  csrr a0, mhartid
   100f8:	f1402573          	csrr	a0,mhartid
  la a1, dtb_start
   100fc:	00002597          	auipc	a1,0x2
   10100:	5cc58593          	addi	a1,a1,1484 # 126c8 <dtb_start>
  mret
   10104:	30200073          	mret

0000000000010108 <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   10108:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   1010c:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10110:	100f5e63          	bgez	t5,1022c <handle_exception>

0000000000010114 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10114:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   10118:	00113023          	sd	ra,0(sp)
   1011c:	00813423          	sd	s0,8(sp)
   10120:	00913823          	sd	s1,16(sp)
   10124:	01213c23          	sd	s2,24(sp)
   10128:	03313023          	sd	s3,32(sp)
   1012c:	03413423          	sd	s4,40(sp)
   10130:	03513823          	sd	s5,48(sp)
   10134:	03613c23          	sd	s6,56(sp)
   10138:	05713023          	sd	s7,64(sp)
   1013c:	05813423          	sd	s8,72(sp)
   10140:	05913823          	sd	s9,80(sp)
   10144:	05a13c23          	sd	s10,88(sp)
   10148:	07b13023          	sd	s11,96(sp)
   1014c:	06213423          	sd	sp,104(sp)
   10150:	07013c23          	sd	a6,120(sp)
   10154:	09113023          	sd	a7,128(sp)
   10158:	08a13423          	sd	a0,136(sp)
   1015c:	08b13823          	sd	a1,144(sp)
   10160:	08c13c23          	sd	a2,152(sp)
   10164:	0ad13023          	sd	a3,160(sp)
   10168:	0ae13423          	sd	a4,168(sp)
   1016c:	0af13823          	sd	a5,176(sp)
   10170:	0b013c23          	sd	a6,184(sp)
   10174:	0d113023          	sd	a7,192(sp)
   10178:	0c513423          	sd	t0,200(sp)
   1017c:	0c613823          	sd	t1,208(sp)
   10180:	0c713c23          	sd	t2,216(sp)
   10184:	0fc13023          	sd	t3,224(sp)
   10188:	0fd13423          	sd	t4,232(sp)
   1018c:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   10190:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   10194:	341025f3          	csrr	a1,mepc
  mv a2, sp
   10198:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   1019c:	35d000ef          	jal	ra,10cf8 <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   101a0:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   101a4:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   101a8:	00013083          	ld	ra,0(sp)
   101ac:	00813403          	ld	s0,8(sp)
   101b0:	01013483          	ld	s1,16(sp)
   101b4:	01813903          	ld	s2,24(sp)
   101b8:	02013983          	ld	s3,32(sp)
   101bc:	02813a03          	ld	s4,40(sp)
   101c0:	03013a83          	ld	s5,48(sp)
   101c4:	03813b03          	ld	s6,56(sp)
   101c8:	04013b83          	ld	s7,64(sp)
   101cc:	04813c03          	ld	s8,72(sp)
   101d0:	05013c83          	ld	s9,80(sp)
   101d4:	05813d03          	ld	s10,88(sp)
   101d8:	06013d83          	ld	s11,96(sp)
   101dc:	06813103          	ld	sp,104(sp)
   101e0:	07813803          	ld	a6,120(sp)
   101e4:	08013883          	ld	a7,128(sp)
   101e8:	08813503          	ld	a0,136(sp)
   101ec:	09013583          	ld	a1,144(sp)
   101f0:	09813603          	ld	a2,152(sp)
   101f4:	0a013683          	ld	a3,160(sp)
   101f8:	0a813703          	ld	a4,168(sp)
   101fc:	0b013783          	ld	a5,176(sp)
   10200:	0b813803          	ld	a6,184(sp)
   10204:	0c013883          	ld	a7,192(sp)
   10208:	0c813283          	ld	t0,200(sp)
   1020c:	0d013303          	ld	t1,208(sp)
   10210:	0d813383          	ld	t2,216(sp)
   10214:	0e013e03          	ld	t3,224(sp)
   10218:	0e813e83          	ld	t4,232(sp)
   1021c:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10220:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10224:	34002f73          	csrr	t5,mscratch
  mret
   10228:	30200073          	mret

000000000001022c <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   1022c:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10230:	1ad000ef          	jal	ra,10bdc <exception_handler_c>
  mret
   10234:	30200073          	mret
	...

0000000000010242 <get_dev_bar>:
    uint64_t fwdbg3;            /// 0xfffff038: RW: FW debug register 3
    uint8_t cfg_table[(1 << 12) - 0x40];/// 0xfffff040: RO: PNP configuration
} pnp_map;


static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10242:	715d                	addi	sp,sp,-80
   10244:	e4a2                	sd	s0,72(sp)
   10246:	0880                	addi	s0,sp,80
   10248:	faa43c23          	sd	a0,-72(s0)
   1024c:	87ae                	mv	a5,a1
   1024e:	8732                	mv	a4,a2
   10250:	faf41b23          	sh	a5,-74(s0)
   10254:	87ba                	mv	a5,a4
   10256:	faf41a23          	sh	a5,-76(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1025a:	fb843783          	ld	a5,-72(s0)
   1025e:	479c                	lw	a5,8(a5)
   10260:	0087d79b          	srliw	a5,a5,0x8
   10264:	2781                	sext.w	a5,a5
   10266:	2781                	sext.w	a5,a5
   10268:	0ff7f793          	andi	a5,a5,255
   1026c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10270:	fb843783          	ld	a5,-72(s0)
   10274:	479c                	lw	a5,8(a5)
   10276:	0107d79b          	srliw	a5,a5,0x10
   1027a:	2781                	sext.w	a5,a5
   1027c:	2781                	sext.w	a5,a5
   1027e:	0ff7f793          	andi	a5,a5,255
   10282:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10286:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   1028a:	fe042423          	sw	zero,-24(s0)
   1028e:	a82d                	j	102c8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10290:	fec42783          	lw	a5,-20(s0)
   10294:	04078793          	addi	a5,a5,64
   10298:	fb843703          	ld	a4,-72(s0)
   1029c:	97ba                	add	a5,a5,a4
   1029e:	639c                	ld	a5,0(a5)
   102a0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   102a4:	fb843703          	ld	a4,-72(s0)
   102a8:	fec42783          	lw	a5,-20(s0)
   102ac:	97ba                	add	a5,a5,a4
   102ae:	0407c783          	lbu	a5,64(a5)
   102b2:	2781                	sext.w	a5,a5
   102b4:	fec42703          	lw	a4,-20(s0)
   102b8:	9fb9                	addw	a5,a5,a4
   102ba:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   102be:	fe842783          	lw	a5,-24(s0)
   102c2:	2785                	addiw	a5,a5,1
   102c4:	fef42423          	sw	a5,-24(s0)
   102c8:	fe842703          	lw	a4,-24(s0)
   102cc:	fdc42783          	lw	a5,-36(s0)
   102d0:	2701                	sext.w	a4,a4
   102d2:	2781                	sext.w	a5,a5
   102d4:	faf74ee3          	blt	a4,a5,10290 <get_dev_bar+0x4e>
    }

    for (int i = 0; i < slv_total; i++) {
   102d8:	fe042223          	sw	zero,-28(s0)
   102dc:	a8b5                	j	10358 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   102de:	fec42783          	lw	a5,-20(s0)
   102e2:	04078793          	addi	a5,a5,64
   102e6:	fb843703          	ld	a4,-72(s0)
   102ea:	97ba                	add	a5,a5,a4
   102ec:	639c                	ld	a5,0(a5)
   102ee:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   102f2:	fec42783          	lw	a5,-20(s0)
   102f6:	27a1                	addiw	a5,a5,8
   102f8:	2781                	sext.w	a5,a5
   102fa:	04078793          	addi	a5,a5,64
   102fe:	fb843703          	ld	a4,-72(s0)
   10302:	97ba                	add	a5,a5,a4
   10304:	639c                	ld	a5,0(a5)
   10306:	fcf43423          	sd	a5,-56(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   1030a:	fc645783          	lhu	a5,-58(s0)
   1030e:	fb645703          	lhu	a4,-74(s0)
   10312:	2701                	sext.w	a4,a4
   10314:	2781                	sext.w	a5,a5
   10316:	00f71f63          	bne	a4,a5,10334 <get_dev_bar+0xf2>
   1031a:	fc445783          	lhu	a5,-60(s0)
   1031e:	fb445703          	lhu	a4,-76(s0)
   10322:	2701                	sext.w	a4,a4
   10324:	2781                	sext.w	a5,a5
   10326:	00f71763          	bne	a4,a5,10334 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1032a:	fcc42783          	lw	a5,-52(s0)
   1032e:	1782                	slli	a5,a5,0x20
   10330:	9381                	srli	a5,a5,0x20
   10332:	a825                	j	1036a <get_dev_bar+0x128>
        }
        off += pnp->cfg_table[off];
   10334:	fb843703          	ld	a4,-72(s0)
   10338:	fec42783          	lw	a5,-20(s0)
   1033c:	97ba                	add	a5,a5,a4
   1033e:	0407c783          	lbu	a5,64(a5)
   10342:	2781                	sext.w	a5,a5
   10344:	fec42703          	lw	a4,-20(s0)
   10348:	9fb9                	addw	a5,a5,a4
   1034a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1034e:	fe442783          	lw	a5,-28(s0)
   10352:	2785                	addiw	a5,a5,1
   10354:	fef42223          	sw	a5,-28(s0)
   10358:	fe442703          	lw	a4,-28(s0)
   1035c:	fe042783          	lw	a5,-32(s0)
   10360:	2701                	sext.w	a4,a4
   10362:	2781                	sext.w	a5,a5
   10364:	f6f74de3          	blt	a4,a5,102de <get_dev_bar+0x9c>
    }

    return DEV_NONE;
   10368:	57fd                	li	a5,-1
}
   1036a:	853e                	mv	a0,a5
   1036c:	6426                	ld	s0,72(sp)
   1036e:	6161                	addi	sp,sp,80
   10370:	8082                	ret

0000000000010372 <mpu_region_total>:
    mpu_ctrl_wrbits_type bits;
    uint64_t value;
} mpu_ctrl_type;

// Read CSR_MPU_ctrl vendor specific register
static int mpu_region_total() {
   10372:	1101                	addi	sp,sp,-32
   10374:	ec22                	sd	s0,24(sp)
   10376:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10378:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1037c:	bc4027f3          	csrr	a5,0xbc4
   10380:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10384:	fe843783          	ld	a5,-24(s0)
   10388:	83a1                	srli	a5,a5,0x8
   1038a:	2781                	sext.w	a5,a5
}
   1038c:	853e                	mv	a0,a5
   1038e:	6462                	ld	s0,24(sp)
   10390:	6105                	addi	sp,sp,32
   10392:	8082                	ret

0000000000010394 <mpu_disable_region>:

static void mpu_disable_region(int idx) {
   10394:	7179                	addi	sp,sp,-48
   10396:	f422                	sd	s0,40(sp)
   10398:	1800                	addi	s0,sp,48
   1039a:	87aa                	mv	a5,a0
   1039c:	fcf42e23          	sw	a5,-36(s0)
    mpu_ctrl_type ctrl;
    ctrl.value = 0;
   103a0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   103a4:	fdc42783          	lw	a5,-36(s0)
   103a8:	0ff7f793          	andi	a5,a5,255
   103ac:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   103b0:	fe844783          	lbu	a5,-24(s0)
   103b4:	f807e793          	ori	a5,a5,-128
   103b8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   103bc:	fe843783          	ld	a5,-24(s0)
   103c0:	bc479073          	csrw	0xbc4,a5
}
   103c4:	0001                	nop
   103c6:	7422                	ld	s0,40(sp)
   103c8:	6145                	addi	sp,sp,48
   103ca:	8082                	ret

00000000000103cc <mpu_enable_region>:

static void mpu_enable_region(int idx,
                       uint64_t bar,
                       uint64_t KB,
                       int cached,
                       const char *rwx) {
   103cc:	715d                	addi	sp,sp,-80
   103ce:	e4a2                	sd	s0,72(sp)
   103d0:	0880                	addi	s0,sp,80
   103d2:	87aa                	mv	a5,a0
   103d4:	fcb43023          	sd	a1,-64(s0)
   103d8:	fac43c23          	sd	a2,-72(s0)
   103dc:	fae43823          	sd	a4,-80(s0)
   103e0:	fcf42623          	sw	a5,-52(s0)
   103e4:	87b6                	mv	a5,a3
   103e6:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   103ea:	c0000793          	li	a5,-1024
   103ee:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   103f2:	fb043783          	ld	a5,-80(s0)
   103f6:	fef43023          	sd	a5,-32(s0)
    mpu_ctrl_type ctrl;

    asm("csrw 0xBC2, %0" : :"r"(bar));
   103fa:	fc043783          	ld	a5,-64(s0)
   103fe:	bc279073          	csrw	0xbc2,a5

    KB >>= 1;
   10402:	fb843783          	ld	a5,-72(s0)
   10406:	8385                	srli	a5,a5,0x1
   10408:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1040c:	a819                	j	10422 <mpu_enable_region+0x56>
        mask <<= 1;
   1040e:	fe843783          	ld	a5,-24(s0)
   10412:	0786                	slli	a5,a5,0x1
   10414:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10418:	fb843783          	ld	a5,-72(s0)
   1041c:	8385                	srli	a5,a5,0x1
   1041e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10422:	fb843783          	ld	a5,-72(s0)
   10426:	f7e5                	bnez	a5,1040e <mpu_enable_region+0x42>
    }
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10428:	fe843783          	ld	a5,-24(s0)
   1042c:	bc379073          	csrw	0xbc3,a5

    ctrl.value = 0;
   10430:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10434:	fcc42783          	lw	a5,-52(s0)
   10438:	0ff7f793          	andi	a5,a5,255
   1043c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10440:	fd844783          	lbu	a5,-40(s0)
   10444:	0107e793          	ori	a5,a5,16
   10448:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1044c:	fc842783          	lw	a5,-56(s0)
   10450:	8b85                	andi	a5,a5,1
   10452:	0ff7f793          	andi	a5,a5,255
   10456:	8b85                	andi	a5,a5,1
   10458:	0037969b          	slliw	a3,a5,0x3
   1045c:	fd844783          	lbu	a5,-40(s0)
   10460:	9bdd                	andi	a5,a5,-9
   10462:	873e                	mv	a4,a5
   10464:	87b6                	mv	a5,a3
   10466:	8fd9                	or	a5,a5,a4
   10468:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1046c:	fd844783          	lbu	a5,-40(s0)
   10470:	f807e793          	ori	a5,a5,-128
   10474:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10478:	a09d                	j	104de <mpu_enable_region+0x112>
        if (*p == 'r') {
   1047a:	fe043783          	ld	a5,-32(s0)
   1047e:	0007c783          	lbu	a5,0(a5)
   10482:	873e                	mv	a4,a5
   10484:	07200793          	li	a5,114
   10488:	00f71863          	bne	a4,a5,10498 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1048c:	fd844783          	lbu	a5,-40(s0)
   10490:	0027e793          	ori	a5,a5,2
   10494:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'w') {
   10498:	fe043783          	ld	a5,-32(s0)
   1049c:	0007c783          	lbu	a5,0(a5)
   104a0:	873e                	mv	a4,a5
   104a2:	07700793          	li	a5,119
   104a6:	00f71863          	bne	a4,a5,104b6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   104aa:	fd844783          	lbu	a5,-40(s0)
   104ae:	0017e793          	ori	a5,a5,1
   104b2:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'x') {
   104b6:	fe043783          	ld	a5,-32(s0)
   104ba:	0007c783          	lbu	a5,0(a5)
   104be:	873e                	mv	a4,a5
   104c0:	07800793          	li	a5,120
   104c4:	00f71863          	bne	a4,a5,104d4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   104c8:	fd844783          	lbu	a5,-40(s0)
   104cc:	0047e793          	ori	a5,a5,4
   104d0:	fcf40c23          	sb	a5,-40(s0)
        }
        p++;
   104d4:	fe043783          	ld	a5,-32(s0)
   104d8:	0785                	addi	a5,a5,1
   104da:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   104de:	fe043783          	ld	a5,-32(s0)
   104e2:	0007c783          	lbu	a5,0(a5)
   104e6:	fbd1                	bnez	a5,1047a <mpu_enable_region+0xae>
    }
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   104e8:	fd843783          	ld	a5,-40(s0)
   104ec:	bc479073          	csrw	0xbc4,a5
}
   104f0:	0001                	nop
   104f2:	6426                	ld	s0,72(sp)
   104f4:	6161                	addi	sp,sp,80
   104f6:	8082                	ret

00000000000104f8 <fw_get_cpuid>:
#include "sd_uefi.h"
#include "uart.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   104f8:	1101                	addi	sp,sp,-32
   104fa:	ec22                	sd	s0,24(sp)
   104fc:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   104fe:	f14027f3          	csrr	a5,mhartid
   10502:	fef42623          	sw	a5,-20(s0)
    return ret;
   10506:	fec42783          	lw	a5,-20(s0)
}
   1050a:	853e                	mv	a0,a5
   1050c:	6462                	ld	s0,24(sp)
   1050e:	6105                	addi	sp,sp,32
   10510:	8082                	ret

0000000000010512 <led_set>:

void led_set(int output) {
   10512:	1101                	addi	sp,sp,-32
   10514:	ec22                	sd	s0,24(sp)
   10516:	1000                	addi	s0,sp,32
   10518:	87aa                	mv	a5,a0
   1051a:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   1051e:	fec42783          	lw	a5,-20(s0)
   10522:	0047979b          	slliw	a5,a5,0x4
   10526:	0007871b          	sext.w	a4,a5
   1052a:	100607b7          	lui	a5,0x10060
   1052e:	2701                	sext.w	a4,a4
   10530:	c7d8                	sw	a4,12(a5)
}
   10532:	0001                	nop
   10534:	6462                	ld	s0,24(sp)
   10536:	6105                	addi	sp,sp,32
   10538:	8082                	ret

000000000001053a <get_dip>:

int get_dip(int idx) {
   1053a:	7179                	addi	sp,sp,-48
   1053c:	f422                	sd	s0,40(sp)
   1053e:	1800                	addi	s0,sp,48
   10540:	87aa                	mv	a5,a0
   10542:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   10546:	100607b7          	lui	a5,0x10060
   1054a:	439c                	lw	a5,0(a5)
   1054c:	0007871b          	sext.w	a4,a5
   10550:	fdc42783          	lw	a5,-36(s0)
   10554:	00f757bb          	srlw	a5,a4,a5
   10558:	2781                	sext.w	a5,a5
   1055a:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   1055e:	fec42783          	lw	a5,-20(s0)
   10562:	8b85                	andi	a5,a5,1
   10564:	2781                	sext.w	a5,a5
}
   10566:	853e                	mv	a0,a5
   10568:	7422                	ld	s0,40(sp)
   1056a:	6145                	addi	sp,sp,48
   1056c:	8082                	ret

000000000001056e <get_dips>:

int get_dips() {
   1056e:	1101                	addi	sp,sp,-32
   10570:	ec22                	sd	s0,24(sp)
   10572:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   10574:	100607b7          	lui	a5,0x10060
   10578:	439c                	lw	a5,0(a5)
   1057a:	2781                	sext.w	a5,a5
   1057c:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   10580:	fec42783          	lw	a5,-20(s0)
   10584:	8bbd                	andi	a5,a5,15
   10586:	2781                	sext.w	a5,a5
}
   10588:	853e                	mv	a0,a5
   1058a:	6462                	ld	s0,24(sp)
   1058c:	6105                	addi	sp,sp,32
   1058e:	8082                	ret

0000000000010590 <copy_image>:



void copy_image() { 
   10590:	715d                	addi	sp,sp,-80
   10592:	e486                	sd	ra,72(sp)
   10594:	e0a2                	sd	s0,64(sp)
   10596:	0880                	addi	s0,sp,80
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10598:	090007b7          	lui	a5,0x9000
   1059c:	fcf43c23          	sd	a5,-40(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   105a0:	080007b7          	lui	a5,0x8000
   105a4:	fcf43823          	sd	a5,-48(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   105a8:	100ff7b7          	lui	a5,0x100ff
   105ac:	fcf43423          	sd	a5,-56(s0)

    uint64_t qspi2 = ~0ull;
   105b0:	57fd                	li	a5,-1
   105b2:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   105b6:	00000097          	auipc	ra,0x0
   105ba:	fb8080e7          	jalr	-72(ra) # 1056e <get_dips>
   105be:	87aa                	mv	a5,a0
   105c0:	85be                	mv	a1,a5
   105c2:	67c9                	lui	a5,0x12
   105c4:	3b878513          	addi	a0,a5,952 # 123b8 <strnlen+0x1e>
   105c8:	00001097          	auipc	ra,0x1
   105cc:	072080e7          	jalr	114(ra) # 1163a <printf_uart>
    if (get_dips() == 0xB) {
   105d0:	00000097          	auipc	ra,0x0
   105d4:	f9e080e7          	jalr	-98(ra) # 1056e <get_dips>
   105d8:	87aa                	mv	a5,a0
   105da:	873e                	mv	a4,a5
   105dc:	47ad                	li	a5,11
   105de:	04f71d63          	bne	a4,a5,10638 <copy_image+0xa8>
        // Load from SD-card
        qspi2 = get_dev_bar(pnp, VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   105e2:	07500613          	li	a2,117
   105e6:	0f100593          	li	a1,241
   105ea:	fc843503          	ld	a0,-56(s0)
   105ee:	c55ff0ef          	jal	ra,10242 <get_dev_bar>
   105f2:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   105f6:	fe843703          	ld	a4,-24(s0)
   105fa:	57fd                	li	a5,-1
   105fc:	02f70e63          	beq	a4,a5,10638 <copy_image+0xa8>
            print_uart("Select . .QSPI2\r\n", 17);
   10600:	45c5                	li	a1,17
   10602:	67c9                	lui	a5,0x12
   10604:	3c878513          	addi	a0,a5,968 # 123c8 <strnlen+0x2e>
   10608:	00001097          	auipc	ra,0x1
   1060c:	a56080e7          	jalr	-1450(ra) # 1105e <print_uart>
            if (run_from_sdcard() == -1) {
   10610:	00002097          	auipc	ra,0x2
   10614:	a6c080e7          	jalr	-1428(ra) # 1207c <run_from_sdcard>
   10618:	87aa                	mv	a5,a0
   1061a:	873e                	mv	a4,a5
   1061c:	57fd                	li	a5,-1
   1061e:	00f71d63          	bne	a4,a5,10638 <copy_image+0xa8>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   10622:	45c9                	li	a1,18
   10624:	67c9                	lui	a5,0x12
   10626:	3e078513          	addi	a0,a5,992 # 123e0 <strnlen+0x46>
   1062a:	00001097          	auipc	ra,0x1
   1062e:	a34080e7          	jalr	-1484(ra) # 1105e <print_uart>
                qspi2 = ~0ull;
   10632:	57fd                	li	a5,-1
   10634:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   10638:	fe843703          	ld	a4,-24(s0)
   1063c:	57fd                	li	a5,-1
   1063e:	0af71163          	bne	a4,a5,106e0 <copy_image+0x150>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   10642:	fc843783          	ld	a5,-56(s0)
   10646:	43dc                	lw	a5,4(a5)
   10648:	efc1                	bnez	a5,106e0 <copy_image+0x150>
        // Check if SRAM already initialized in RTL simulation, then skip copying
        uint64_t *dst = (uint64_t *)sram;
   1064a:	fd043783          	ld	a5,-48(s0)
   1064e:	fcf43023          	sd	a5,-64(s0)
        uint64_t *src = (uint64_t *)fwrom;
   10652:	fd843783          	ld	a5,-40(s0)
   10656:	faf43c23          	sd	a5,-72(s0)
        int skip_rtl_sim = 1;
   1065a:	4785                	li	a5,1
   1065c:	fef42223          	sw	a5,-28(s0)
        for (int i = 0; i < 8; i++) {
   10660:	fe042023          	sw	zero,-32(s0)
   10664:	a80d                	j	10696 <copy_image+0x106>
            if (src[i] != dst[i]) {
   10666:	fe042783          	lw	a5,-32(s0)
   1066a:	078e                	slli	a5,a5,0x3
   1066c:	fb843703          	ld	a4,-72(s0)
   10670:	97ba                	add	a5,a5,a4
   10672:	6398                	ld	a4,0(a5)
   10674:	fe042783          	lw	a5,-32(s0)
   10678:	078e                	slli	a5,a5,0x3
   1067a:	fc043683          	ld	a3,-64(s0)
   1067e:	97b6                	add	a5,a5,a3
   10680:	639c                	ld	a5,0(a5)
   10682:	00f70563          	beq	a4,a5,1068c <copy_image+0xfc>
                skip_rtl_sim = 0;
   10686:	fe042223          	sw	zero,-28(s0)
                break;
   1068a:	a829                	j	106a4 <copy_image+0x114>
        for (int i = 0; i < 8; i++) {
   1068c:	fe042783          	lw	a5,-32(s0)
   10690:	2785                	addiw	a5,a5,1
   10692:	fef42023          	sw	a5,-32(s0)
   10696:	fe042783          	lw	a5,-32(s0)
   1069a:	0007871b          	sext.w	a4,a5
   1069e:	479d                	li	a5,7
   106a0:	fce7d3e3          	ble	a4,a5,10666 <copy_image+0xd6>
            }
        }
        if (skip_rtl_sim) {
   106a4:	fe442783          	lw	a5,-28(s0)
   106a8:	2781                	sext.w	a5,a5
   106aa:	cb91                	beqz	a5,106be <copy_image+0x12e>
            print_uart("NO.COPY. .rtl.sim\r\n", 19);
   106ac:	45cd                	li	a1,19
   106ae:	67c9                	lui	a5,0x12
   106b0:	3f878513          	addi	a0,a5,1016 # 123f8 <strnlen+0x5e>
   106b4:	00001097          	auipc	ra,0x1
   106b8:	9aa080e7          	jalr	-1622(ra) # 1105e <print_uart>
   106bc:	a015                	j	106e0 <copy_image+0x150>
        } else {
            print_uart("Coping . .FWIMAGE\r\n", 19);
   106be:	45cd                	li	a1,19
   106c0:	67c9                	lui	a5,0x12
   106c2:	41078513          	addi	a0,a5,1040 # 12410 <strnlen+0x76>
   106c6:	00001097          	auipc	ra,0x1
   106ca:	998080e7          	jalr	-1640(ra) # 1105e <print_uart>
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   106ce:	000407b7          	lui	a5,0x40
   106d2:	863e                	mv	a2,a5
   106d4:	fd843583          	ld	a1,-40(s0)
   106d8:	fd043503          	ld	a0,-48(s0)
   106dc:	3ff010ef          	jal	ra,122da <memcpy>
        }
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   106e0:	fc843783          	ld	a5,-56(s0)
   106e4:	20211737          	lui	a4,0x20211
   106e8:	1237071b          	addiw	a4,a4,291
   106ec:	c3d8                	sw	a4,4(a5)
}
   106ee:	0001                	nop
   106f0:	60a6                	ld	ra,72(sp)
   106f2:	6406                	ld	s0,64(sp)
   106f4:	6161                	addi	sp,sp,80
   106f6:	8082                	ret

00000000000106f8 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   106f8:	1141                	addi	sp,sp,-16
   106fa:	e422                	sd	s0,8(sp)
   106fc:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   106fe:	0001                	nop
   10700:	6422                	ld	s0,8(sp)
   10702:	0141                	addi	sp,sp,16
   10704:	8082                	ret

0000000000010706 <init_pmp>:

// Enable U,S,MPRV for all regions
void init_pmp() {
   10706:	1101                	addi	sp,sp,-32
   10708:	ec22                	sd	s0,24(sp)
   1070a:	1000                	addi	s0,sp,32
    uint64_t a0 = -1;  // Give S-mode free rein of everything else.
   1070c:	57fd                	li	a5,-1
   1070e:	fef43423          	sd	a5,-24(s0)
    uint64_t cfg = (PMP_NAPOT | PMP_R | PMP_W | PMP_X) << 0; // [] channel: whole memory range
   10712:	47fd                	li	a5,31
   10714:	fef43023          	sd	a5,-32(s0)

    // Plug it all in.
    asm volatile ("csrw pmpaddr0, %[a0]\n\t"
   10718:	fe843783          	ld	a5,-24(s0)
   1071c:	fe043703          	ld	a4,-32(s0)
   10720:	3b079073          	csrw	pmpaddr0,a5
   10724:	3a071073          	csrw	pmpcfg0,a4
                  "csrw pmpcfg0, %[cfg]"
                  :: [a0] "r" (a0),
                     [cfg] "r" (cfg));
}
   10728:	0001                	nop
   1072a:	6462                	ld	s0,24(sp)
   1072c:	6105                	addi	sp,sp,32
   1072e:	8082                	ret

0000000000010730 <_init>:

void _init() {
   10730:	715d                	addi	sp,sp,-80
   10732:	e486                	sd	ra,72(sp)
   10734:	e0a2                	sd	s0,64(sp)
   10736:	0880                	addi	s0,sp,80
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10738:	100ff7b7          	lui	a5,0x100ff
   1073c:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10740:	100107b7          	lui	a5,0x10010
   10744:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   10748:	100607b7          	lui	a5,0x10060
   1074c:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   10750:	47a1                	li	a5,8
   10752:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   10756:	fd043783          	ld	a5,-48(s0)
   1075a:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   1075e:	6785                	lui	a5,0x1
   10760:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   10764:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   10768:	fd043783          	ld	a5,-48(s0)
   1076c:	3047b073          	csrc	mie,a5

    t1 = 0x00000007;
   10770:	479d                	li	a5,7
   10772:	fcf43823          	sd	a5,-48(s0)
    asm("csrw mcounteren, %0" : :"r"(t1));  // allow counter access from S-mode
   10776:	fd043783          	ld	a5,-48(s0)
   1077a:	30679073          	csrw	mcounteren,a5
    asm("csrw scounteren, %0" : :"r"(t1));  // allow counter access from U-mode
   1077e:	fd043783          	ld	a5,-48(s0)
   10782:	10679073          	csrw	scounteren,a5

    init_pmp();
   10786:	00000097          	auipc	ra,0x0
   1078a:	f80080e7          	jalr	-128(ra) # 10706 <init_pmp>

    txctrl.v = 0;
   1078e:	fc042023          	sw	zero,-64(s0)
    txctrl.b.txen = 1;
   10792:	fc044783          	lbu	a5,-64(s0)
   10796:	0017e793          	ori	a5,a5,1
   1079a:	fcf40023          	sb	a5,-64(s0)
    rxctrl.v = 0;
   1079e:	fa042c23          	sw	zero,-72(s0)
    rxctrl.b.rxen = 1;
   107a2:	fb844783          	lbu	a5,-72(s0)
   107a6:	0017e793          	ori	a5,a5,1
   107aa:	faf40c23          	sb	a5,-72(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   107ae:	fe043783          	ld	a5,-32(s0)
   107b2:	0ad00713          	li	a4,173
   107b6:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   107b8:	fc042783          	lw	a5,-64(s0)
   107bc:	0007871b          	sext.w	a4,a5
   107c0:	fe043783          	ld	a5,-32(s0)
   107c4:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   107c6:	fb842783          	lw	a5,-72(s0)
   107ca:	0007871b          	sext.w	a4,a5
   107ce:	fe043783          	ld	a5,-32(s0)
   107d2:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   107d4:	fd843783          	ld	a5,-40(s0)
   107d8:	473d                	li	a4,15
   107da:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   107dc:	fd843783          	ld	a5,-40(s0)
   107e0:	6705                	lui	a4,0x1
   107e2:	3741                	addiw	a4,a4,-16
   107e4:	c798                	sw	a4,8(a5)

    led_set(0x01);
   107e6:	4505                	li	a0,1
   107e8:	d2bff0ef          	jal	ra,10512 <led_set>

    copy_image();
   107ec:	00000097          	auipc	ra,0x0
   107f0:	da4080e7          	jalr	-604(ra) # 10590 <copy_image>
    led_set(0x02);
   107f4:	4509                	li	a0,2
   107f6:	d1dff0ef          	jal	ra,10512 <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   107fa:	67c9                	lui	a5,0x12
   107fc:	42878593          	addi	a1,a5,1064 # 12428 <strnlen+0x8e>
   10800:	67c9                	lui	a5,0x12
   10802:	43078513          	addi	a0,a5,1072 # 12430 <strnlen+0x96>
   10806:	635000ef          	jal	ra,1163a <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   1080a:	67c9                	lui	a5,0x12
   1080c:	44078593          	addi	a1,a5,1088 # 12440 <strnlen+0xa6>
   10810:	67c9                	lui	a5,0x12
   10812:	44878513          	addi	a0,a5,1096 # 12448 <strnlen+0xae>
   10816:	625000ef          	jal	ra,1163a <printf_uart>

    led_set(0x03);
   1081a:	450d                	li	a0,3
   1081c:	cf7ff0ef          	jal	ra,10512 <led_set>

    if (get_dips() == 0x0F) {
   10820:	d4fff0ef          	jal	ra,1056e <get_dips>
   10824:	87aa                	mv	a5,a0
   10826:	873e                	mv	a4,a5
   10828:	47bd                	li	a5,15
   1082a:	00f71e63          	bne	a4,a5,10846 <_init+0x116>
        write_csr(mepc, 0x0000000080000000ull);  // sim: jump to ddr (bbl-q should be init)
   1082e:	4785                	li	a5,1
   10830:	07fe                	slli	a5,a5,0x1f
   10832:	34179073          	csrw	mepc,a5
        set_csr(mstatus, MSTATUS_MPP_M);           //      run bbl-q in machine mode
   10836:	6789                	lui	a5,0x2
   10838:	8007879b          	addiw	a5,a5,-2048
   1083c:	3007a7f3          	csrrs	a5,mstatus,a5
   10840:	fcf43423          	sd	a5,-56(s0)
    } else {
        write_csr(mepc, 0x0000000008000000ull);  // jump to entry point in SRAM = 0x08000000
    }
}
   10844:	a029                	j	1084e <_init+0x11e>
        write_csr(mepc, 0x0000000008000000ull);  // jump to entry point in SRAM = 0x08000000
   10846:	080007b7          	lui	a5,0x8000
   1084a:	34179073          	csrw	mepc,a5
}
   1084e:	0001                	nop
   10850:	60a6                	ld	ra,72(sp)
   10852:	6406                	ld	s0,64(sp)
   10854:	6161                	addi	sp,sp,80
   10856:	8082                	ret

0000000000010858 <main>:

/** Not used actually */
int main() {
   10858:	1141                	addi	sp,sp,-16
   1085a:	e422                	sd	s0,8(sp)
   1085c:	0800                	addi	s0,sp,16
    while (1) {}
   1085e:	a001                	j	1085e <main+0x6>
	...

0000000000010862 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10862:	715d                	addi	sp,sp,-80
   10864:	e4a2                	sd	s0,72(sp)
   10866:	0880                	addi	s0,sp,80
   10868:	faa43c23          	sd	a0,-72(s0)
   1086c:	87ae                	mv	a5,a1
   1086e:	8732                	mv	a4,a2
   10870:	faf41b23          	sh	a5,-74(s0)
   10874:	87ba                	mv	a5,a4
   10876:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1087a:	fb843783          	ld	a5,-72(s0)
   1087e:	479c                	lw	a5,8(a5)
   10880:	0087d79b          	srliw	a5,a5,0x8
   10884:	2781                	sext.w	a5,a5
   10886:	2781                	sext.w	a5,a5
   10888:	0ff7f793          	andi	a5,a5,255
   1088c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10890:	fb843783          	ld	a5,-72(s0)
   10894:	479c                	lw	a5,8(a5)
   10896:	0107d79b          	srliw	a5,a5,0x10
   1089a:	2781                	sext.w	a5,a5
   1089c:	2781                	sext.w	a5,a5
   1089e:	0ff7f793          	andi	a5,a5,255
   108a2:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   108a6:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   108aa:	fe042423          	sw	zero,-24(s0)
   108ae:	a82d                	j	108e8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108b0:	fec42783          	lw	a5,-20(s0)
   108b4:	04078793          	addi	a5,a5,64 # 8000040 <_end+0x7fecd24>
   108b8:	fb843703          	ld	a4,-72(s0)
   108bc:	97ba                	add	a5,a5,a4
   108be:	639c                	ld	a5,0(a5)
   108c0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   108c4:	fb843703          	ld	a4,-72(s0)
   108c8:	fec42783          	lw	a5,-20(s0)
   108cc:	97ba                	add	a5,a5,a4
   108ce:	0407c783          	lbu	a5,64(a5)
   108d2:	2781                	sext.w	a5,a5
   108d4:	fec42703          	lw	a4,-20(s0)
   108d8:	9fb9                	addw	a5,a5,a4
   108da:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   108de:	fe842783          	lw	a5,-24(s0)
   108e2:	2785                	addiw	a5,a5,1
   108e4:	fef42423          	sw	a5,-24(s0)
   108e8:	fe842703          	lw	a4,-24(s0)
   108ec:	fdc42783          	lw	a5,-36(s0)
   108f0:	2701                	sext.w	a4,a4
   108f2:	2781                	sext.w	a5,a5
   108f4:	faf74ee3          	blt	a4,a5,108b0 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   108f8:	fe042223          	sw	zero,-28(s0)
   108fc:	a8b5                	j	10978 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108fe:	fec42783          	lw	a5,-20(s0)
   10902:	04078793          	addi	a5,a5,64
   10906:	fb843703          	ld	a4,-72(s0)
   1090a:	97ba                	add	a5,a5,a4
   1090c:	639c                	ld	a5,0(a5)
   1090e:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10912:	fec42783          	lw	a5,-20(s0)
   10916:	27a1                	addiw	a5,a5,8
   10918:	2781                	sext.w	a5,a5
   1091a:	04078793          	addi	a5,a5,64
   1091e:	fb843703          	ld	a4,-72(s0)
   10922:	97ba                	add	a5,a5,a4
   10924:	639c                	ld	a5,0(a5)
   10926:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   1092a:	fc645783          	lhu	a5,-58(s0)
   1092e:	fb645703          	lhu	a4,-74(s0)
   10932:	2701                	sext.w	a4,a4
   10934:	2781                	sext.w	a5,a5
   10936:	00f71f63          	bne	a4,a5,10954 <get_dev_bar+0xf2>
   1093a:	fc445783          	lhu	a5,-60(s0)
   1093e:	fb445703          	lhu	a4,-76(s0)
   10942:	2701                	sext.w	a4,a4
   10944:	2781                	sext.w	a5,a5
   10946:	00f71763          	bne	a4,a5,10954 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1094a:	fcc42783          	lw	a5,-52(s0)
   1094e:	1782                	slli	a5,a5,0x20
   10950:	9381                	srli	a5,a5,0x20
   10952:	a825                	j	1098a <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10954:	fb843703          	ld	a4,-72(s0)
   10958:	fec42783          	lw	a5,-20(s0)
   1095c:	97ba                	add	a5,a5,a4
   1095e:	0407c783          	lbu	a5,64(a5)
   10962:	2781                	sext.w	a5,a5
   10964:	fec42703          	lw	a4,-20(s0)
   10968:	9fb9                	addw	a5,a5,a4
   1096a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1096e:	fe442783          	lw	a5,-28(s0)
   10972:	2785                	addiw	a5,a5,1
   10974:	fef42223          	sw	a5,-28(s0)
   10978:	fe442703          	lw	a4,-28(s0)
   1097c:	fe042783          	lw	a5,-32(s0)
   10980:	2701                	sext.w	a4,a4
   10982:	2781                	sext.w	a5,a5
   10984:	f6f74de3          	blt	a4,a5,108fe <get_dev_bar+0x9c>
    return DEV_NONE;
   10988:	57fd                	li	a5,-1
}
   1098a:	853e                	mv	a0,a5
   1098c:	6426                	ld	s0,72(sp)
   1098e:	6161                	addi	sp,sp,80
   10990:	8082                	ret

0000000000010992 <mpu_region_total>:
static int mpu_region_total() {
   10992:	1101                	addi	sp,sp,-32
   10994:	ec22                	sd	s0,24(sp)
   10996:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10998:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1099c:	bc4027f3          	csrr	a5,0xbc4
   109a0:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   109a4:	fe843783          	ld	a5,-24(s0)
   109a8:	83a1                	srli	a5,a5,0x8
   109aa:	2781                	sext.w	a5,a5
}
   109ac:	853e                	mv	a0,a5
   109ae:	6462                	ld	s0,24(sp)
   109b0:	6105                	addi	sp,sp,32
   109b2:	8082                	ret

00000000000109b4 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   109b4:	7179                	addi	sp,sp,-48
   109b6:	f422                	sd	s0,40(sp)
   109b8:	1800                	addi	s0,sp,48
   109ba:	87aa                	mv	a5,a0
   109bc:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   109c0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   109c4:	fdc42783          	lw	a5,-36(s0)
   109c8:	0ff7f793          	andi	a5,a5,255
   109cc:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   109d0:	fe844783          	lbu	a5,-24(s0)
   109d4:	f807e793          	ori	a5,a5,-128
   109d8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   109dc:	fe843783          	ld	a5,-24(s0)
   109e0:	bc479073          	csrw	0xbc4,a5
}
   109e4:	0001                	nop
   109e6:	7422                	ld	s0,40(sp)
   109e8:	6145                	addi	sp,sp,48
   109ea:	8082                	ret

00000000000109ec <mpu_enable_region>:
                       const char *rwx) {
   109ec:	715d                	addi	sp,sp,-80
   109ee:	e4a2                	sd	s0,72(sp)
   109f0:	0880                	addi	s0,sp,80
   109f2:	87aa                	mv	a5,a0
   109f4:	fcb43023          	sd	a1,-64(s0)
   109f8:	fac43c23          	sd	a2,-72(s0)
   109fc:	fae43823          	sd	a4,-80(s0)
   10a00:	fcf42623          	sw	a5,-52(s0)
   10a04:	87b6                	mv	a5,a3
   10a06:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10a0a:	c0000793          	li	a5,-1024
   10a0e:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10a12:	fb043783          	ld	a5,-80(s0)
   10a16:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10a1a:	fc043783          	ld	a5,-64(s0)
   10a1e:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10a22:	fb843783          	ld	a5,-72(s0)
   10a26:	8385                	srli	a5,a5,0x1
   10a28:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a2c:	a819                	j	10a42 <mpu_enable_region+0x56>
        mask <<= 1;
   10a2e:	fe843783          	ld	a5,-24(s0)
   10a32:	0786                	slli	a5,a5,0x1
   10a34:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10a38:	fb843783          	ld	a5,-72(s0)
   10a3c:	8385                	srli	a5,a5,0x1
   10a3e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a42:	fb843783          	ld	a5,-72(s0)
   10a46:	f7e5                	bnez	a5,10a2e <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10a48:	fe843783          	ld	a5,-24(s0)
   10a4c:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10a50:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10a54:	fcc42783          	lw	a5,-52(s0)
   10a58:	0ff7f793          	andi	a5,a5,255
   10a5c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10a60:	fd844783          	lbu	a5,-40(s0)
   10a64:	0107e793          	ori	a5,a5,16
   10a68:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10a6c:	fc842783          	lw	a5,-56(s0)
   10a70:	8b85                	andi	a5,a5,1
   10a72:	0ff7f793          	andi	a5,a5,255
   10a76:	8b85                	andi	a5,a5,1
   10a78:	0037969b          	slliw	a3,a5,0x3
   10a7c:	fd844783          	lbu	a5,-40(s0)
   10a80:	9bdd                	andi	a5,a5,-9
   10a82:	873e                	mv	a4,a5
   10a84:	87b6                	mv	a5,a3
   10a86:	8fd9                	or	a5,a5,a4
   10a88:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10a8c:	fd844783          	lbu	a5,-40(s0)
   10a90:	f807e793          	ori	a5,a5,-128
   10a94:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10a98:	a09d                	j	10afe <mpu_enable_region+0x112>
        if (*p == 'r') {
   10a9a:	fe043783          	ld	a5,-32(s0)
   10a9e:	0007c783          	lbu	a5,0(a5)
   10aa2:	873e                	mv	a4,a5
   10aa4:	07200793          	li	a5,114
   10aa8:	00f71863          	bne	a4,a5,10ab8 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10aac:	fd844783          	lbu	a5,-40(s0)
   10ab0:	0027e793          	ori	a5,a5,2
   10ab4:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10ab8:	fe043783          	ld	a5,-32(s0)
   10abc:	0007c783          	lbu	a5,0(a5)
   10ac0:	873e                	mv	a4,a5
   10ac2:	07700793          	li	a5,119
   10ac6:	00f71863          	bne	a4,a5,10ad6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10aca:	fd844783          	lbu	a5,-40(s0)
   10ace:	0017e793          	ori	a5,a5,1
   10ad2:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10ad6:	fe043783          	ld	a5,-32(s0)
   10ada:	0007c783          	lbu	a5,0(a5)
   10ade:	873e                	mv	a4,a5
   10ae0:	07800793          	li	a5,120
   10ae4:	00f71863          	bne	a4,a5,10af4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10ae8:	fd844783          	lbu	a5,-40(s0)
   10aec:	0047e793          	ori	a5,a5,4
   10af0:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10af4:	fe043783          	ld	a5,-32(s0)
   10af8:	0785                	addi	a5,a5,1
   10afa:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10afe:	fe043783          	ld	a5,-32(s0)
   10b02:	0007c783          	lbu	a5,0(a5)
   10b06:	fbd1                	bnez	a5,10a9a <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10b08:	fd843783          	ld	a5,-40(s0)
   10b0c:	bc479073          	csrw	0xbc4,a5
}
   10b10:	0001                	nop
   10b12:	6426                	ld	s0,72(sp)
   10b14:	6161                	addi	sp,sp,80
   10b16:	8082                	ret

0000000000010b18 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10b18:	1101                	addi	sp,sp,-32
   10b1a:	ec22                	sd	s0,24(sp)
   10b1c:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10b1e:	342027f3          	csrr	a5,mcause
   10b22:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b26:	fec42783          	lw	a5,-20(s0)
}
   10b2a:	853e                	mv	a0,a5
   10b2c:	6462                	ld	s0,24(sp)
   10b2e:	6105                	addi	sp,sp,32
   10b30:	8082                	ret

0000000000010b32 <get_mepc>:

int get_mepc() {
   10b32:	1101                	addi	sp,sp,-32
   10b34:	ec22                	sd	s0,24(sp)
   10b36:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10b38:	341027f3          	csrr	a5,mepc
   10b3c:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b40:	fec42783          	lw	a5,-20(s0)
}
   10b44:	853e                	mv	a0,a5
   10b46:	6462                	ld	s0,24(sp)
   10b48:	6105                	addi	sp,sp,32
   10b4a:	8082                	ret

0000000000010b4c <env_call>:


void env_call(long long test_id) {
   10b4c:	7179                	addi	sp,sp,-48
   10b4e:	f406                	sd	ra,40(sp)
   10b50:	f022                	sd	s0,32(sp)
   10b52:	1800                	addi	s0,sp,48
   10b54:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10b58:	fd843783          	ld	a5,-40(s0)
   10b5c:	c7bd                	beqz	a5,10bca <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10b5e:	45b5                	li	a1,13
   10b60:	67c9                	lui	a5,0x12
   10b62:	45878513          	addi	a0,a5,1112 # 12458 <strnlen+0xbe>
   10b66:	00000097          	auipc	ra,0x0
   10b6a:	4f8080e7          	jalr	1272(ra) # 1105e <print_uart>
        print_uart("a0=", 3);
   10b6e:	458d                	li	a1,3
   10b70:	67c9                	lui	a5,0x12
   10b72:	46878513          	addi	a0,a5,1128 # 12468 <strnlen+0xce>
   10b76:	00000097          	auipc	ra,0x0
   10b7a:	4e8080e7          	jalr	1256(ra) # 1105e <print_uart>
        print_uart_hex(test_id);
   10b7e:	fd843503          	ld	a0,-40(s0)
   10b82:	54e000ef          	jal	ra,110d0 <print_uart_hex>
        print_uart("\r\n", 2);
   10b86:	4589                	li	a1,2
   10b88:	67c9                	lui	a5,0x12
   10b8a:	47078513          	addi	a0,a5,1136 # 12470 <strnlen+0xd6>
   10b8e:	00000097          	auipc	ra,0x0
   10b92:	4d0080e7          	jalr	1232(ra) # 1105e <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10b96:	343027f3          	csrr	a5,mbadaddr
   10b9a:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10b9e:	45a5                	li	a1,9
   10ba0:	67c9                	lui	a5,0x12
   10ba2:	47878513          	addi	a0,a5,1144 # 12478 <strnlen+0xde>
   10ba6:	00000097          	auipc	ra,0x0
   10baa:	4b8080e7          	jalr	1208(ra) # 1105e <print_uart>
        print_uart_hex(mbadaddr);
   10bae:	fec42783          	lw	a5,-20(s0)
   10bb2:	853e                	mv	a0,a5
   10bb4:	51c000ef          	jal	ra,110d0 <print_uart_hex>
        print_uart("\r\n", 2);
   10bb8:	4589                	li	a1,2
   10bba:	67c9                	lui	a5,0x12
   10bbc:	47078513          	addi	a0,a5,1136 # 12470 <strnlen+0xd6>
   10bc0:	00000097          	auipc	ra,0x0
   10bc4:	49e080e7          	jalr	1182(ra) # 1105e <print_uart>
   10bc8:	a809                	j	10bda <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10bca:	45b5                	li	a1,13
   10bcc:	67c9                	lui	a5,0x12
   10bce:	48878513          	addi	a0,a5,1160 # 12488 <strnlen+0xee>
   10bd2:	00000097          	auipc	ra,0x0
   10bd6:	48c080e7          	jalr	1164(ra) # 1105e <print_uart>
    }
    while (1) {}
   10bda:	a001                	j	10bda <env_call+0x8e>

0000000000010bdc <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10bdc:	7179                	addi	sp,sp,-48
   10bde:	f406                	sd	ra,40(sp)
   10be0:	f022                	sd	s0,32(sp)
   10be2:	1800                	addi	s0,sp,48
   10be4:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10be8:	00000097          	auipc	ra,0x0
   10bec:	f30080e7          	jalr	-208(ra) # 10b18 <get_mcause>
   10bf0:	87aa                	mv	a5,a0
   10bf2:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10bf6:	fec42783          	lw	a5,-20(s0)
   10bfa:	37e1                	addiw	a5,a5,-8
   10bfc:	0007871b          	sext.w	a4,a5
   10c00:	4785                	li	a5,1
   10c02:	00e7e963          	bltu	a5,a4,10c14 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10c06:	fd843503          	ld	a0,-40(s0)
   10c0a:	00000097          	auipc	ra,0x0
   10c0e:	f42080e7          	jalr	-190(ra) # 10b4c <env_call>
        return;
   10c12:	a0b9                	j	10c60 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10c14:	459d                	li	a1,7
   10c16:	67c9                	lui	a5,0x12
   10c18:	49878513          	addi	a0,a5,1176 # 12498 <strnlen+0xfe>
   10c1c:	442000ef          	jal	ra,1105e <print_uart>
    print_uart_hex(mcause);
   10c20:	fec42783          	lw	a5,-20(s0)
   10c24:	853e                	mv	a0,a5
   10c26:	00000097          	auipc	ra,0x0
   10c2a:	4aa080e7          	jalr	1194(ra) # 110d0 <print_uart_hex>
    print_uart(",mepc:", 6);
   10c2e:	4599                	li	a1,6
   10c30:	67c9                	lui	a5,0x12
   10c32:	4a078513          	addi	a0,a5,1184 # 124a0 <strnlen+0x106>
   10c36:	428000ef          	jal	ra,1105e <print_uart>
    print_uart_hex(get_mepc());
   10c3a:	ef9ff0ef          	jal	ra,10b32 <get_mepc>
   10c3e:	87aa                	mv	a5,a0
   10c40:	853e                	mv	a0,a5
   10c42:	00000097          	auipc	ra,0x0
   10c46:	48e080e7          	jalr	1166(ra) # 110d0 <print_uart_hex>
    print_uart("\r\n", 2);
   10c4a:	4589                	li	a1,2
   10c4c:	67c9                	lui	a5,0x12
   10c4e:	47078513          	addi	a0,a5,1136 # 12470 <strnlen+0xd6>
   10c52:	40c000ef          	jal	ra,1105e <print_uart>

    /// Exception trap
    led_set(0xF0);
   10c56:	0f000513          	li	a0,240
   10c5a:	8b9ff0ef          	jal	ra,10512 <led_set>
    while (1) {}
   10c5e:	a001                	j	10c5e <exception_handler_c+0x82>
}
   10c60:	70a2                	ld	ra,40(sp)
   10c62:	7402                	ld	s0,32(sp)
   10c64:	6145                	addi	sp,sp,48
   10c66:	8082                	ret

0000000000010c68 <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   10c68:	1141                	addi	sp,sp,-16
   10c6a:	e406                	sd	ra,8(sp)
   10c6c:	e022                	sd	s0,0(sp)
   10c6e:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10c70:	0f000513          	li	a0,240
   10c74:	00000097          	auipc	ra,0x0
   10c78:	89e080e7          	jalr	-1890(ra) # 10512 <led_set>
    print_uart("fatal_error()\r\n", 15);
   10c7c:	45bd                	li	a1,15
   10c7e:	67c9                	lui	a5,0x12
   10c80:	4a878513          	addi	a0,a5,1192 # 124a8 <strnlen+0x10e>
   10c84:	00000097          	auipc	ra,0x0
   10c88:	3da080e7          	jalr	986(ra) # 1105e <print_uart>
    while (1) {}
   10c8c:	a001                	j	10c8c <fatal_error+0x24>

0000000000010c8e <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10c8e:	7179                	addi	sp,sp,-48
   10c90:	f422                	sd	s0,40(sp)
   10c92:	1800                	addi	s0,sp,48
   10c94:	87aa                	mv	a5,a0
   10c96:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10c9a:	0c0007b7          	lui	a5,0xc000
   10c9e:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10ca2:	fe843703          	ld	a4,-24(s0)
   10ca6:	fdc42783          	lw	a5,-36(s0)
   10caa:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfecee4>
   10cae:	07b2                	slli	a5,a5,0xc
   10cb0:	97ba                	add	a5,a5,a4
   10cb2:	43dc                	lw	a5,4(a5)
   10cb4:	2781                	sext.w	a5,a5
}
   10cb6:	853e                	mv	a0,a5
   10cb8:	7422                	ld	s0,40(sp)
   10cba:	6145                	addi	sp,sp,48
   10cbc:	8082                	ret

0000000000010cbe <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10cbe:	7179                	addi	sp,sp,-48
   10cc0:	f422                	sd	s0,40(sp)
   10cc2:	1800                	addi	s0,sp,48
   10cc4:	87aa                	mv	a5,a0
   10cc6:	872e                	mv	a4,a1
   10cc8:	fcf42e23          	sw	a5,-36(s0)
   10ccc:	87ba                	mv	a5,a4
   10cce:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10cd2:	0c0007b7          	lui	a5,0xc000
   10cd6:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10cda:	fd842703          	lw	a4,-40(s0)
   10cde:	fe843683          	ld	a3,-24(s0)
   10ce2:	fdc42783          	lw	a5,-36(s0)
   10ce6:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfecee4>
   10cea:	07b2                	slli	a5,a5,0xc
   10cec:	97b6                	add	a5,a5,a3
   10cee:	c3d8                	sw	a4,4(a5)
}
   10cf0:	0001                	nop
   10cf2:	7422                	ld	s0,40(sp)
   10cf4:	6145                	addi	sp,sp,48
   10cf6:	8082                	ret

0000000000010cf8 <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10cf8:	7139                	addi	sp,sp,-64
   10cfa:	fc06                	sd	ra,56(sp)
   10cfc:	f822                	sd	s0,48(sp)
   10cfe:	0080                	addi	s0,sp,64
   10d00:	fca43c23          	sd	a0,-40(s0)
   10d04:	fcb43823          	sd	a1,-48(s0)
   10d08:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10d0c:	fd843783          	ld	a5,-40(s0)
   10d10:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d14:	fe744783          	lbu	a5,-25(s0)
   10d18:	f807f793          	andi	a5,a5,-128
   10d1c:	0ff7f793          	andi	a5,a5,255
   10d20:	cb85                	beqz	a5,10d50 <interrupt_handler_c+0x58>
   10d22:	fe043703          	ld	a4,-32(s0)
   10d26:	57fd                	li	a5,-1
   10d28:	8385                	srli	a5,a5,0x1
   10d2a:	8f7d                	and	a4,a4,a5
   10d2c:	47ad                	li	a5,11
   10d2e:	02f71163          	bne	a4,a5,10d50 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10d32:	4501                	li	a0,0
   10d34:	f5bff0ef          	jal	ra,10c8e <plic_claim>
   10d38:	87aa                	mv	a5,a0
   10d3a:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10d3e:	fec42783          	lw	a5,-20(s0)
   10d42:	85be                	mv	a1,a5
   10d44:	4501                	li	a0,0
   10d46:	00000097          	auipc	ra,0x0
   10d4a:	f78080e7          	jalr	-136(ra) # 10cbe <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d4e:	a029                	j	10d58 <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10d50:	00000097          	auipc	ra,0x0
   10d54:	f18080e7          	jalr	-232(ra) # 10c68 <fatal_error>
    }

    return epc;
   10d58:	fd043783          	ld	a5,-48(s0)
}
   10d5c:	853e                	mv	a0,a5
   10d5e:	70e2                	ld	ra,56(sp)
   10d60:	7442                	ld	s0,48(sp)
   10d62:	6121                	addi	sp,sp,64
   10d64:	8082                	ret

0000000000010d66 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10d66:	715d                	addi	sp,sp,-80
   10d68:	e4a2                	sd	s0,72(sp)
   10d6a:	0880                	addi	s0,sp,80
   10d6c:	faa43c23          	sd	a0,-72(s0)
   10d70:	87ae                	mv	a5,a1
   10d72:	8732                	mv	a4,a2
   10d74:	faf41b23          	sh	a5,-74(s0)
   10d78:	87ba                	mv	a5,a4
   10d7a:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   10d7e:	fb843783          	ld	a5,-72(s0)
   10d82:	479c                	lw	a5,8(a5)
   10d84:	0087d79b          	srliw	a5,a5,0x8
   10d88:	2781                	sext.w	a5,a5
   10d8a:	2781                	sext.w	a5,a5
   10d8c:	0ff7f793          	andi	a5,a5,255
   10d90:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10d94:	fb843783          	ld	a5,-72(s0)
   10d98:	479c                	lw	a5,8(a5)
   10d9a:	0107d79b          	srliw	a5,a5,0x10
   10d9e:	2781                	sext.w	a5,a5
   10da0:	2781                	sext.w	a5,a5
   10da2:	0ff7f793          	andi	a5,a5,255
   10da6:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10daa:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10dae:	fe042423          	sw	zero,-24(s0)
   10db2:	a82d                	j	10dec <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10db4:	fec42783          	lw	a5,-20(s0)
   10db8:	04078793          	addi	a5,a5,64
   10dbc:	fb843703          	ld	a4,-72(s0)
   10dc0:	97ba                	add	a5,a5,a4
   10dc2:	639c                	ld	a5,0(a5)
   10dc4:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10dc8:	fb843703          	ld	a4,-72(s0)
   10dcc:	fec42783          	lw	a5,-20(s0)
   10dd0:	97ba                	add	a5,a5,a4
   10dd2:	0407c783          	lbu	a5,64(a5)
   10dd6:	2781                	sext.w	a5,a5
   10dd8:	fec42703          	lw	a4,-20(s0)
   10ddc:	9fb9                	addw	a5,a5,a4
   10dde:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10de2:	fe842783          	lw	a5,-24(s0)
   10de6:	2785                	addiw	a5,a5,1
   10de8:	fef42423          	sw	a5,-24(s0)
   10dec:	fe842703          	lw	a4,-24(s0)
   10df0:	fdc42783          	lw	a5,-36(s0)
   10df4:	2701                	sext.w	a4,a4
   10df6:	2781                	sext.w	a5,a5
   10df8:	faf74ee3          	blt	a4,a5,10db4 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10dfc:	fe042223          	sw	zero,-28(s0)
   10e00:	a8b5                	j	10e7c <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10e02:	fec42783          	lw	a5,-20(s0)
   10e06:	04078793          	addi	a5,a5,64
   10e0a:	fb843703          	ld	a4,-72(s0)
   10e0e:	97ba                	add	a5,a5,a4
   10e10:	639c                	ld	a5,0(a5)
   10e12:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10e16:	fec42783          	lw	a5,-20(s0)
   10e1a:	27a1                	addiw	a5,a5,8
   10e1c:	2781                	sext.w	a5,a5
   10e1e:	04078793          	addi	a5,a5,64
   10e22:	fb843703          	ld	a4,-72(s0)
   10e26:	97ba                	add	a5,a5,a4
   10e28:	639c                	ld	a5,0(a5)
   10e2a:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10e2e:	fc645783          	lhu	a5,-58(s0)
   10e32:	fb645703          	lhu	a4,-74(s0)
   10e36:	2701                	sext.w	a4,a4
   10e38:	2781                	sext.w	a5,a5
   10e3a:	00f71f63          	bne	a4,a5,10e58 <get_dev_bar+0xf2>
   10e3e:	fc445783          	lhu	a5,-60(s0)
   10e42:	fb445703          	lhu	a4,-76(s0)
   10e46:	2701                	sext.w	a4,a4
   10e48:	2781                	sext.w	a5,a5
   10e4a:	00f71763          	bne	a4,a5,10e58 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10e4e:	fcc42783          	lw	a5,-52(s0)
   10e52:	1782                	slli	a5,a5,0x20
   10e54:	9381                	srli	a5,a5,0x20
   10e56:	a825                	j	10e8e <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10e58:	fb843703          	ld	a4,-72(s0)
   10e5c:	fec42783          	lw	a5,-20(s0)
   10e60:	97ba                	add	a5,a5,a4
   10e62:	0407c783          	lbu	a5,64(a5)
   10e66:	2781                	sext.w	a5,a5
   10e68:	fec42703          	lw	a4,-20(s0)
   10e6c:	9fb9                	addw	a5,a5,a4
   10e6e:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10e72:	fe442783          	lw	a5,-28(s0)
   10e76:	2785                	addiw	a5,a5,1
   10e78:	fef42223          	sw	a5,-28(s0)
   10e7c:	fe442703          	lw	a4,-28(s0)
   10e80:	fe042783          	lw	a5,-32(s0)
   10e84:	2701                	sext.w	a4,a4
   10e86:	2781                	sext.w	a5,a5
   10e88:	f6f74de3          	blt	a4,a5,10e02 <get_dev_bar+0x9c>
    return DEV_NONE;
   10e8c:	57fd                	li	a5,-1
}
   10e8e:	853e                	mv	a0,a5
   10e90:	6426                	ld	s0,72(sp)
   10e92:	6161                	addi	sp,sp,80
   10e94:	8082                	ret

0000000000010e96 <mpu_region_total>:
static int mpu_region_total() {
   10e96:	1101                	addi	sp,sp,-32
   10e98:	ec22                	sd	s0,24(sp)
   10e9a:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10e9c:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10ea0:	bc4027f3          	csrr	a5,0xbc4
   10ea4:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10ea8:	fe843783          	ld	a5,-24(s0)
   10eac:	83a1                	srli	a5,a5,0x8
   10eae:	2781                	sext.w	a5,a5
}
   10eb0:	853e                	mv	a0,a5
   10eb2:	6462                	ld	s0,24(sp)
   10eb4:	6105                	addi	sp,sp,32
   10eb6:	8082                	ret

0000000000010eb8 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10eb8:	7179                	addi	sp,sp,-48
   10eba:	f422                	sd	s0,40(sp)
   10ebc:	1800                	addi	s0,sp,48
   10ebe:	87aa                	mv	a5,a0
   10ec0:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10ec4:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10ec8:	fdc42783          	lw	a5,-36(s0)
   10ecc:	0ff7f793          	andi	a5,a5,255
   10ed0:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10ed4:	fe844783          	lbu	a5,-24(s0)
   10ed8:	f807e793          	ori	a5,a5,-128
   10edc:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10ee0:	fe843783          	ld	a5,-24(s0)
   10ee4:	bc479073          	csrw	0xbc4,a5
}
   10ee8:	0001                	nop
   10eea:	7422                	ld	s0,40(sp)
   10eec:	6145                	addi	sp,sp,48
   10eee:	8082                	ret

0000000000010ef0 <mpu_enable_region>:
                       const char *rwx) {
   10ef0:	715d                	addi	sp,sp,-80
   10ef2:	e4a2                	sd	s0,72(sp)
   10ef4:	0880                	addi	s0,sp,80
   10ef6:	87aa                	mv	a5,a0
   10ef8:	fcb43023          	sd	a1,-64(s0)
   10efc:	fac43c23          	sd	a2,-72(s0)
   10f00:	fae43823          	sd	a4,-80(s0)
   10f04:	fcf42623          	sw	a5,-52(s0)
   10f08:	87b6                	mv	a5,a3
   10f0a:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10f0e:	c0000793          	li	a5,-1024
   10f12:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10f16:	fb043783          	ld	a5,-80(s0)
   10f1a:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10f1e:	fc043783          	ld	a5,-64(s0)
   10f22:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10f26:	fb843783          	ld	a5,-72(s0)
   10f2a:	8385                	srli	a5,a5,0x1
   10f2c:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f30:	a819                	j	10f46 <mpu_enable_region+0x56>
        mask <<= 1;
   10f32:	fe843783          	ld	a5,-24(s0)
   10f36:	0786                	slli	a5,a5,0x1
   10f38:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10f3c:	fb843783          	ld	a5,-72(s0)
   10f40:	8385                	srli	a5,a5,0x1
   10f42:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f46:	fb843783          	ld	a5,-72(s0)
   10f4a:	f7e5                	bnez	a5,10f32 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10f4c:	fe843783          	ld	a5,-24(s0)
   10f50:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10f54:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10f58:	fcc42783          	lw	a5,-52(s0)
   10f5c:	0ff7f793          	andi	a5,a5,255
   10f60:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10f64:	fd844783          	lbu	a5,-40(s0)
   10f68:	0107e793          	ori	a5,a5,16
   10f6c:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10f70:	fc842783          	lw	a5,-56(s0)
   10f74:	8b85                	andi	a5,a5,1
   10f76:	0ff7f793          	andi	a5,a5,255
   10f7a:	8b85                	andi	a5,a5,1
   10f7c:	0037969b          	slliw	a3,a5,0x3
   10f80:	fd844783          	lbu	a5,-40(s0)
   10f84:	9bdd                	andi	a5,a5,-9
   10f86:	873e                	mv	a4,a5
   10f88:	87b6                	mv	a5,a3
   10f8a:	8fd9                	or	a5,a5,a4
   10f8c:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10f90:	fd844783          	lbu	a5,-40(s0)
   10f94:	f807e793          	ori	a5,a5,-128
   10f98:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10f9c:	a09d                	j	11002 <mpu_enable_region+0x112>
        if (*p == 'r') {
   10f9e:	fe043783          	ld	a5,-32(s0)
   10fa2:	0007c783          	lbu	a5,0(a5)
   10fa6:	873e                	mv	a4,a5
   10fa8:	07200793          	li	a5,114
   10fac:	00f71863          	bne	a4,a5,10fbc <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10fb0:	fd844783          	lbu	a5,-40(s0)
   10fb4:	0027e793          	ori	a5,a5,2
   10fb8:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10fbc:	fe043783          	ld	a5,-32(s0)
   10fc0:	0007c783          	lbu	a5,0(a5)
   10fc4:	873e                	mv	a4,a5
   10fc6:	07700793          	li	a5,119
   10fca:	00f71863          	bne	a4,a5,10fda <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10fce:	fd844783          	lbu	a5,-40(s0)
   10fd2:	0017e793          	ori	a5,a5,1
   10fd6:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10fda:	fe043783          	ld	a5,-32(s0)
   10fde:	0007c783          	lbu	a5,0(a5)
   10fe2:	873e                	mv	a4,a5
   10fe4:	07800793          	li	a5,120
   10fe8:	00f71863          	bne	a4,a5,10ff8 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10fec:	fd844783          	lbu	a5,-40(s0)
   10ff0:	0047e793          	ori	a5,a5,4
   10ff4:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10ff8:	fe043783          	ld	a5,-32(s0)
   10ffc:	0785                	addi	a5,a5,1
   10ffe:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11002:	fe043783          	ld	a5,-32(s0)
   11006:	0007c783          	lbu	a5,0(a5)
   1100a:	fbd1                	bnez	a5,10f9e <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   1100c:	fd843783          	ld	a5,-40(s0)
   11010:	bc479073          	csrw	0xbc4,a5
}
   11014:	0001                	nop
   11016:	6426                	ld	s0,72(sp)
   11018:	6161                	addi	sp,sp,80
   1101a:	8082                	ret

000000000001101c <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   1101c:	7179                	addi	sp,sp,-48
   1101e:	f422                	sd	s0,40(sp)
   11020:	1800                	addi	s0,sp,48
   11022:	87aa                	mv	a5,a0
   11024:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   11028:	100107b7          	lui	a5,0x10010
   1102c:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   11030:	fe843783          	ld	a5,-24(s0)
   11034:	439c                	lw	a5,0(a5)
   11036:	2781                	sext.w	a5,a5
   11038:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   1103c:	fe344783          	lbu	a5,-29(s0)
   11040:	f807f793          	andi	a5,a5,-128
   11044:	0ff7f793          	andi	a5,a5,255
   11048:	f7e5                	bnez	a5,11030 <print_char+0x14>
    uart->txdata = ch;
   1104a:	fdc42703          	lw	a4,-36(s0)
   1104e:	fe843783          	ld	a5,-24(s0)
   11052:	c398                	sw	a4,0(a5)
    return 0;
   11054:	4781                	li	a5,0
}
   11056:	853e                	mv	a0,a5
   11058:	7422                	ld	s0,40(sp)
   1105a:	6145                	addi	sp,sp,48
   1105c:	8082                	ret

000000000001105e <print_uart>:

void print_uart(const char *buf, int sz) {
   1105e:	7139                	addi	sp,sp,-64
   11060:	fc22                	sd	s0,56(sp)
   11062:	0080                	addi	s0,sp,64
   11064:	fca43423          	sd	a0,-56(s0)
   11068:	87ae                	mv	a5,a1
   1106a:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   1106e:	100107b7          	lui	a5,0x10010
   11072:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   11076:	fe042623          	sw	zero,-20(s0)
   1107a:	a83d                	j	110b8 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   1107c:	fe043783          	ld	a5,-32(s0)
   11080:	439c                	lw	a5,0(a5)
   11082:	2781                	sext.w	a5,a5
   11084:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   11088:	fdb44783          	lbu	a5,-37(s0)
   1108c:	f807f793          	andi	a5,a5,-128
   11090:	0ff7f793          	andi	a5,a5,255
   11094:	f7e5                	bnez	a5,1107c <print_uart+0x1e>
        uart->txdata = buf[i];
   11096:	fec42783          	lw	a5,-20(s0)
   1109a:	fc843703          	ld	a4,-56(s0)
   1109e:	97ba                	add	a5,a5,a4
   110a0:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffcce4>
   110a4:	0007871b          	sext.w	a4,a5
   110a8:	fe043783          	ld	a5,-32(s0)
   110ac:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   110ae:	fec42783          	lw	a5,-20(s0)
   110b2:	2785                	addiw	a5,a5,1
   110b4:	fef42623          	sw	a5,-20(s0)
   110b8:	fec42703          	lw	a4,-20(s0)
   110bc:	fc442783          	lw	a5,-60(s0)
   110c0:	2701                	sext.w	a4,a4
   110c2:	2781                	sext.w	a5,a5
   110c4:	faf74ce3          	blt	a4,a5,1107c <print_uart+0x1e>
    }
}
   110c8:	0001                	nop
   110ca:	7462                	ld	s0,56(sp)
   110cc:	6121                	addi	sp,sp,64
   110ce:	8082                	ret

00000000000110d0 <print_uart_hex>:

void print_uart_hex(long val) {
   110d0:	7139                	addi	sp,sp,-64
   110d2:	fc22                	sd	s0,56(sp)
   110d4:	0080                	addi	s0,sp,64
   110d6:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   110da:	100107b7          	lui	a5,0x10010
   110de:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   110e2:	fe042423          	sw	zero,-24(s0)
   110e6:	a041                	j	11166 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   110e8:	fe043783          	ld	a5,-32(s0)
   110ec:	439c                	lw	a5,0(a5)
   110ee:	2781                	sext.w	a5,a5
   110f0:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   110f4:	fdb44783          	lbu	a5,-37(s0)
   110f8:	f807f793          	andi	a5,a5,-128
   110fc:	0ff7f793          	andi	a5,a5,255
   11100:	f7e5                	bnez	a5,110e8 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   11102:	473d                	li	a4,15
   11104:	fe842783          	lw	a5,-24(s0)
   11108:	40f707bb          	subw	a5,a4,a5
   1110c:	2781                	sext.w	a5,a5
   1110e:	0027979b          	slliw	a5,a5,0x2
   11112:	2781                	sext.w	a5,a5
   11114:	fc843703          	ld	a4,-56(s0)
   11118:	40f757b3          	sra	a5,a4,a5
   1111c:	0ff7f793          	andi	a5,a5,255
   11120:	8bbd                	andi	a5,a5,15
   11122:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   11126:	fdf44783          	lbu	a5,-33(s0)
   1112a:	0ff7f713          	andi	a4,a5,255
   1112e:	47a5                	li	a5,9
   11130:	00e7e963          	bltu	a5,a4,11142 <print_uart_hex+0x72>
            s = t + '0';
   11134:	fdf44783          	lbu	a5,-33(s0)
   11138:	0307879b          	addiw	a5,a5,48
   1113c:	fef407a3          	sb	a5,-17(s0)
   11140:	a039                	j	1114e <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   11142:	fdf44783          	lbu	a5,-33(s0)
   11146:	0577879b          	addiw	a5,a5,87
   1114a:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   1114e:	fef44783          	lbu	a5,-17(s0)
   11152:	0007871b          	sext.w	a4,a5
   11156:	fe043783          	ld	a5,-32(s0)
   1115a:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   1115c:	fe842783          	lw	a5,-24(s0)
   11160:	2785                	addiw	a5,a5,1
   11162:	fef42423          	sw	a5,-24(s0)
   11166:	fe842783          	lw	a5,-24(s0)
   1116a:	0007871b          	sext.w	a4,a5
   1116e:	47bd                	li	a5,15
   11170:	f6e7dce3          	ble	a4,a5,110e8 <print_uart_hex+0x18>
    }
}
   11174:	0001                	nop
   11176:	7462                	ld	s0,56(sp)
   11178:	6121                	addi	sp,sp,64
   1117a:	8082                	ret

000000000001117c <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   1117c:	7119                	addi	sp,sp,-128
   1117e:	fc86                	sd	ra,120(sp)
   11180:	f8a2                	sd	s0,112(sp)
   11182:	0100                	addi	s0,sp,128
   11184:	f8a43c23          	sd	a0,-104(s0)
   11188:	87ae                	mv	a5,a1
   1118a:	8736                	mv	a4,a3
   1118c:	f8f42a23          	sw	a5,-108(s0)
   11190:	87b2                	mv	a5,a2
   11192:	f8f42823          	sw	a5,-112(s0)
   11196:	87ba                	mv	a5,a4
   11198:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   1119c:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   111a0:	f9442783          	lw	a5,-108(s0)
   111a4:	f9843703          	ld	a4,-104(s0)
   111a8:	02f776b3          	remu	a3,a4,a5
   111ac:	fec42783          	lw	a5,-20(s0)
   111b0:	0017871b          	addiw	a4,a5,1
   111b4:	fee42623          	sw	a4,-20(s0)
   111b8:	0ff6f713          	andi	a4,a3,255
   111bc:	ff040693          	addi	a3,s0,-16
   111c0:	97b6                	add	a5,a5,a3
   111c2:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffcc9c>
        if (num < base) {
   111c6:	f9442783          	lw	a5,-108(s0)
   111ca:	f9843703          	ld	a4,-104(s0)
   111ce:	00f76b63          	bltu	a4,a5,111e4 <printnum+0x68>
            break;
        }
        num /= base;
   111d2:	f9442783          	lw	a5,-108(s0)
   111d6:	f9843703          	ld	a4,-104(s0)
   111da:	02f757b3          	divu	a5,a4,a5
   111de:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   111e2:	bf7d                	j	111a0 <printnum+0x24>
            break;
   111e4:	0001                	nop
    }

    while (width-- > pos) {
   111e6:	a801                	j	111f6 <printnum+0x7a>
        print_char(padc);
   111e8:	f8c42783          	lw	a5,-116(s0)
   111ec:	853e                	mv	a0,a5
   111ee:	00000097          	auipc	ra,0x0
   111f2:	e2e080e7          	jalr	-466(ra) # 1101c <print_char>
    while (width-- > pos) {
   111f6:	f9042783          	lw	a5,-112(s0)
   111fa:	fff7871b          	addiw	a4,a5,-1
   111fe:	f8e42823          	sw	a4,-112(s0)
   11202:	fec42703          	lw	a4,-20(s0)
   11206:	2701                	sext.w	a4,a4
   11208:	fef740e3          	blt	a4,a5,111e8 <printnum+0x6c>
    }


    while (pos-- > 0) {
   1120c:	a089                	j	1124e <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   1120e:	fec42783          	lw	a5,-20(s0)
   11212:	ff040713          	addi	a4,s0,-16
   11216:	97ba                	add	a5,a5,a4
   11218:	fb87c783          	lbu	a5,-72(a5)
   1121c:	0007871b          	sext.w	a4,a5
   11220:	fec42783          	lw	a5,-20(s0)
   11224:	ff040693          	addi	a3,s0,-16
   11228:	97b6                	add	a5,a5,a3
   1122a:	fb87c783          	lbu	a5,-72(a5)
   1122e:	86be                	mv	a3,a5
   11230:	47a5                	li	a5,9
   11232:	00d7f563          	bleu	a3,a5,1123c <printnum+0xc0>
   11236:	05700793          	li	a5,87
   1123a:	a019                	j	11240 <printnum+0xc4>
   1123c:	03000793          	li	a5,48
   11240:	9fb9                	addw	a5,a5,a4
   11242:	2781                	sext.w	a5,a5
   11244:	853e                	mv	a0,a5
   11246:	00000097          	auipc	ra,0x0
   1124a:	dd6080e7          	jalr	-554(ra) # 1101c <print_char>
    while (pos-- > 0) {
   1124e:	fec42783          	lw	a5,-20(s0)
   11252:	fff7871b          	addiw	a4,a5,-1
   11256:	fee42623          	sw	a4,-20(s0)
   1125a:	faf04ae3          	bgtz	a5,1120e <printnum+0x92>
    }
}
   1125e:	0001                	nop
   11260:	70e6                	ld	ra,120(sp)
   11262:	7446                	ld	s0,112(sp)
   11264:	6109                	addi	sp,sp,128
   11266:	8082                	ret

0000000000011268 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   11268:	1101                	addi	sp,sp,-32
   1126a:	ec22                	sd	s0,24(sp)
   1126c:	1000                	addi	s0,sp,32
   1126e:	fea43423          	sd	a0,-24(s0)
   11272:	87ae                	mv	a5,a1
   11274:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   11278:	fe442783          	lw	a5,-28(s0)
   1127c:	0007871b          	sext.w	a4,a5
   11280:	4785                	li	a5,1
   11282:	00e7dc63          	ble	a4,a5,1129a <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   11286:	fe843783          	ld	a5,-24(s0)
   1128a:	639c                	ld	a5,0(a5)
   1128c:	00878693          	addi	a3,a5,8
   11290:	fe843703          	ld	a4,-24(s0)
   11294:	e314                	sd	a3,0(a4)
   11296:	639c                	ld	a5,0(a5)
   11298:	a815                	j	112cc <getuint+0x64>
    } else if (lflag) {
   1129a:	fe442783          	lw	a5,-28(s0)
   1129e:	2781                	sext.w	a5,a5
   112a0:	cb99                	beqz	a5,112b6 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   112a2:	fe843783          	ld	a5,-24(s0)
   112a6:	639c                	ld	a5,0(a5)
   112a8:	00878693          	addi	a3,a5,8
   112ac:	fe843703          	ld	a4,-24(s0)
   112b0:	e314                	sd	a3,0(a4)
   112b2:	639c                	ld	a5,0(a5)
   112b4:	a821                	j	112cc <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   112b6:	fe843783          	ld	a5,-24(s0)
   112ba:	639c                	ld	a5,0(a5)
   112bc:	00878693          	addi	a3,a5,8
   112c0:	fe843703          	ld	a4,-24(s0)
   112c4:	e314                	sd	a3,0(a4)
   112c6:	439c                	lw	a5,0(a5)
   112c8:	1782                	slli	a5,a5,0x20
   112ca:	9381                	srli	a5,a5,0x20
}
   112cc:	853e                	mv	a0,a5
   112ce:	6462                	ld	s0,24(sp)
   112d0:	6105                	addi	sp,sp,32
   112d2:	8082                	ret

00000000000112d4 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   112d4:	1101                	addi	sp,sp,-32
   112d6:	ec22                	sd	s0,24(sp)
   112d8:	1000                	addi	s0,sp,32
   112da:	fea43423          	sd	a0,-24(s0)
   112de:	87ae                	mv	a5,a1
   112e0:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   112e4:	fe442783          	lw	a5,-28(s0)
   112e8:	0007871b          	sext.w	a4,a5
   112ec:	4785                	li	a5,1
   112ee:	00e7dc63          	ble	a4,a5,11306 <getint+0x32>
        return va_arg(*ap, long long);
   112f2:	fe843783          	ld	a5,-24(s0)
   112f6:	639c                	ld	a5,0(a5)
   112f8:	00878693          	addi	a3,a5,8
   112fc:	fe843703          	ld	a4,-24(s0)
   11300:	e314                	sd	a3,0(a4)
   11302:	639c                	ld	a5,0(a5)
   11304:	a805                	j	11334 <getint+0x60>
    } else if (lflag) {
   11306:	fe442783          	lw	a5,-28(s0)
   1130a:	2781                	sext.w	a5,a5
   1130c:	cb99                	beqz	a5,11322 <getint+0x4e>
        return va_arg(*ap, long);
   1130e:	fe843783          	ld	a5,-24(s0)
   11312:	639c                	ld	a5,0(a5)
   11314:	00878693          	addi	a3,a5,8
   11318:	fe843703          	ld	a4,-24(s0)
   1131c:	e314                	sd	a3,0(a4)
   1131e:	639c                	ld	a5,0(a5)
   11320:	a811                	j	11334 <getint+0x60>
    }
    return va_arg(*ap, int);
   11322:	fe843783          	ld	a5,-24(s0)
   11326:	639c                	ld	a5,0(a5)
   11328:	00878693          	addi	a3,a5,8
   1132c:	fe843703          	ld	a4,-24(s0)
   11330:	e314                	sd	a3,0(a4)
   11332:	439c                	lw	a5,0(a5)
}
   11334:	853e                	mv	a0,a5
   11336:	6462                	ld	s0,24(sp)
   11338:	6105                	addi	sp,sp,32
   1133a:	8082                	ret

000000000001133c <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   1133c:	711d                	addi	sp,sp,-96
   1133e:	ec86                	sd	ra,88(sp)
   11340:	e8a2                	sd	s0,80(sp)
   11342:	e4a6                	sd	s1,72(sp)
   11344:	e0ca                	sd	s2,64(sp)
   11346:	1080                	addi	s0,sp,96
   11348:	faa43423          	sd	a0,-88(s0)
   1134c:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   11350:	a819                	j	11366 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   11352:	2c048d63          	beqz	s1,1162c <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   11356:	fa843783          	ld	a5,-88(s0)
   1135a:	0785                	addi	a5,a5,1
   1135c:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   11360:	8526                	mv	a0,s1
   11362:	cbbff0ef          	jal	ra,1101c <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   11366:	fa843783          	ld	a5,-88(s0)
   1136a:	0007c783          	lbu	a5,0(a5)
   1136e:	0007849b          	sext.w	s1,a5
   11372:	8726                	mv	a4,s1
   11374:	02500793          	li	a5,37
   11378:	fcf71de3          	bne	a4,a5,11352 <vprintfmt_lib+0x16>
        }
        fmt++;
   1137c:	fa843783          	ld	a5,-88(s0)
   11380:	0785                	addi	a5,a5,1
   11382:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   11386:	fa843783          	ld	a5,-88(s0)
   1138a:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   1138e:	02000793          	li	a5,32
   11392:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   11396:	57fd                	li	a5,-1
   11398:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   1139c:	57fd                	li	a5,-1
   1139e:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   113a2:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   113a6:	fa843783          	ld	a5,-88(s0)
   113aa:	00178713          	addi	a4,a5,1
   113ae:	fae43423          	sd	a4,-88(s0)
   113b2:	0007c783          	lbu	a5,0(a5)
   113b6:	0007849b          	sext.w	s1,a5
   113ba:	fdd4869b          	addiw	a3,s1,-35
   113be:	0006871b          	sext.w	a4,a3
   113c2:	05500793          	li	a5,85
   113c6:	24e7e963          	bltu	a5,a4,11618 <vprintfmt_lib+0x2dc>
   113ca:	02069793          	slli	a5,a3,0x20
   113ce:	9381                	srli	a5,a5,0x20
   113d0:	00279713          	slli	a4,a5,0x2
   113d4:	67c9                	lui	a5,0x12
   113d6:	4c078793          	addi	a5,a5,1216 # 124c0 <strnlen+0x126>
   113da:	97ba                	add	a5,a5,a4
   113dc:	439c                	lw	a5,0(a5)
   113de:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   113e0:	02d00793          	li	a5,45
   113e4:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   113e8:	bf7d                	j	113a6 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   113ea:	03000793          	li	a5,48
   113ee:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   113f2:	bf55                	j	113a6 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   113f4:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   113f8:	fc842703          	lw	a4,-56(s0)
   113fc:	87ba                	mv	a5,a4
   113fe:	0027979b          	slliw	a5,a5,0x2
   11402:	9fb9                	addw	a5,a5,a4
   11404:	0017979b          	slliw	a5,a5,0x1
   11408:	2781                	sext.w	a5,a5
   1140a:	9fa5                	addw	a5,a5,s1
   1140c:	2781                	sext.w	a5,a5
   1140e:	fd07879b          	addiw	a5,a5,-48
   11412:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   11416:	fa843783          	ld	a5,-88(s0)
   1141a:	0007c783          	lbu	a5,0(a5)
   1141e:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   11422:	8726                	mv	a4,s1
   11424:	02f00793          	li	a5,47
   11428:	02e7df63          	ble	a4,a5,11466 <vprintfmt_lib+0x12a>
   1142c:	8726                	mv	a4,s1
   1142e:	03900793          	li	a5,57
   11432:	02e7ca63          	blt	a5,a4,11466 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   11436:	fa843783          	ld	a5,-88(s0)
   1143a:	0785                	addi	a5,a5,1
   1143c:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   11440:	bf65                	j	113f8 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   11442:	fa043783          	ld	a5,-96(s0)
   11446:	00878713          	addi	a4,a5,8
   1144a:	fae43023          	sd	a4,-96(s0)
   1144e:	439c                	lw	a5,0(a5)
   11450:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   11454:	a811                	j	11468 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   11456:	fcc42783          	lw	a5,-52(s0)
   1145a:	2781                	sext.w	a5,a5
   1145c:	f407d5e3          	bgez	a5,113a6 <vprintfmt_lib+0x6a>
                width = 0;
   11460:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   11464:	b789                	j	113a6 <vprintfmt_lib+0x6a>
            goto process_precision;
   11466:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   11468:	fcc42783          	lw	a5,-52(s0)
   1146c:	2781                	sext.w	a5,a5
   1146e:	f207dce3          	bgez	a5,113a6 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   11472:	fc842783          	lw	a5,-56(s0)
   11476:	fcf42623          	sw	a5,-52(s0)
   1147a:	57fd                	li	a5,-1
   1147c:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   11480:	b71d                	j	113a6 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   11482:	fd042783          	lw	a5,-48(s0)
   11486:	2785                	addiw	a5,a5,1
   11488:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   1148c:	bf29                	j	113a6 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   1148e:	fa043783          	ld	a5,-96(s0)
   11492:	00878713          	addi	a4,a5,8
   11496:	fae43023          	sd	a4,-96(s0)
   1149a:	439c                	lw	a5,0(a5)
   1149c:	853e                	mv	a0,a5
   1149e:	b7fff0ef          	jal	ra,1101c <print_char>
            break;
   114a2:	a261                	j	1162a <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   114a4:	fa043783          	ld	a5,-96(s0)
   114a8:	00878713          	addi	a4,a5,8
   114ac:	fae43023          	sd	a4,-96(s0)
   114b0:	0007b903          	ld	s2,0(a5)
   114b4:	00091563          	bnez	s2,114be <vprintfmt_lib+0x182>
                p = "(null)";
   114b8:	67c9                	lui	a5,0x12
   114ba:	4b878913          	addi	s2,a5,1208 # 124b8 <strnlen+0x11e>
            }
            if (width > 0 && padc != '-') {
   114be:	fcc42783          	lw	a5,-52(s0)
   114c2:	2781                	sext.w	a5,a5
   114c4:	06f05263          	blez	a5,11528 <vprintfmt_lib+0x1ec>
   114c8:	fc744783          	lbu	a5,-57(s0)
   114cc:	0ff7f713          	andi	a4,a5,255
   114d0:	02d00793          	li	a5,45
   114d4:	04f70a63          	beq	a4,a5,11528 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   114d8:	fc842783          	lw	a5,-56(s0)
   114dc:	85be                	mv	a1,a5
   114de:	854a                	mv	a0,s2
   114e0:	6bb000ef          	jal	ra,1239a <strnlen>
   114e4:	87aa                	mv	a5,a0
   114e6:	873e                	mv	a4,a5
   114e8:	fcc42783          	lw	a5,-52(s0)
   114ec:	9f99                	subw	a5,a5,a4
   114ee:	fcf42623          	sw	a5,-52(s0)
   114f2:	a821                	j	1150a <vprintfmt_lib+0x1ce>
                    print_char(padc);
   114f4:	fc744783          	lbu	a5,-57(s0)
   114f8:	2781                	sext.w	a5,a5
   114fa:	853e                	mv	a0,a5
   114fc:	b21ff0ef          	jal	ra,1101c <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   11500:	fcc42783          	lw	a5,-52(s0)
   11504:	37fd                	addiw	a5,a5,-1
   11506:	fcf42623          	sw	a5,-52(s0)
   1150a:	fcc42783          	lw	a5,-52(s0)
   1150e:	2781                	sext.w	a5,a5
   11510:	fef042e3          	bgtz	a5,114f4 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   11514:	a811                	j	11528 <vprintfmt_lib+0x1ec>
                print_char(ch);
   11516:	8526                	mv	a0,s1
   11518:	b05ff0ef          	jal	ra,1101c <print_char>
                p++;
   1151c:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   1151e:	fcc42783          	lw	a5,-52(s0)
   11522:	37fd                	addiw	a5,a5,-1
   11524:	fcf42623          	sw	a5,-52(s0)
   11528:	00094783          	lbu	a5,0(s2)
   1152c:	0007849b          	sext.w	s1,a5
   11530:	c895                	beqz	s1,11564 <vprintfmt_lib+0x228>
   11532:	fc842783          	lw	a5,-56(s0)
   11536:	2781                	sext.w	a5,a5
   11538:	fc07cfe3          	bltz	a5,11516 <vprintfmt_lib+0x1da>
   1153c:	fc842783          	lw	a5,-56(s0)
   11540:	37fd                	addiw	a5,a5,-1
   11542:	fcf42423          	sw	a5,-56(s0)
   11546:	fc842783          	lw	a5,-56(s0)
   1154a:	2781                	sext.w	a5,a5
   1154c:	fc07d5e3          	bgez	a5,11516 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   11550:	a811                	j	11564 <vprintfmt_lib+0x228>
                print_char(' ');
   11552:	02000513          	li	a0,32
   11556:	ac7ff0ef          	jal	ra,1101c <print_char>
            for (; width > 0; width--) {
   1155a:	fcc42783          	lw	a5,-52(s0)
   1155e:	37fd                	addiw	a5,a5,-1
   11560:	fcf42623          	sw	a5,-52(s0)
   11564:	fcc42783          	lw	a5,-52(s0)
   11568:	2781                	sext.w	a5,a5
   1156a:	fef044e3          	bgtz	a5,11552 <vprintfmt_lib+0x216>
            }
            break;
   1156e:	a875                	j	1162a <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   11570:	fd042703          	lw	a4,-48(s0)
   11574:	fa040793          	addi	a5,s0,-96
   11578:	85ba                	mv	a1,a4
   1157a:	853e                	mv	a0,a5
   1157c:	00000097          	auipc	ra,0x0
   11580:	d58080e7          	jalr	-680(ra) # 112d4 <getint>
   11584:	87aa                	mv	a5,a0
   11586:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   1158a:	fd843783          	ld	a5,-40(s0)
   1158e:	0007dc63          	bgez	a5,115a6 <vprintfmt_lib+0x26a>
                print_char('-');
   11592:	02d00513          	li	a0,45
   11596:	a87ff0ef          	jal	ra,1101c <print_char>
                num = -(long long) num;
   1159a:	fd843783          	ld	a5,-40(s0)
   1159e:	40f007b3          	neg	a5,a5
   115a2:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   115a6:	47a9                	li	a5,10
   115a8:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   115ac:	a089                	j	115ee <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   115ae:	47a9                	li	a5,10
   115b0:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   115b4:	a01d                	j	115da <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   115b6:	47a1                	li	a5,8
   115b8:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   115bc:	a839                	j	115da <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   115be:	4785                	li	a5,1
   115c0:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   115c4:	03000513          	li	a0,48
   115c8:	a55ff0ef          	jal	ra,1101c <print_char>
            print_char('x');
   115cc:	07800513          	li	a0,120
   115d0:	a4dff0ef          	jal	ra,1101c <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   115d4:	47c1                	li	a5,16
   115d6:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   115da:	fd042703          	lw	a4,-48(s0)
   115de:	fa040793          	addi	a5,s0,-96
   115e2:	85ba                	mv	a1,a4
   115e4:	853e                	mv	a0,a5
   115e6:	c83ff0ef          	jal	ra,11268 <getuint>
   115ea:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   115ee:	fc744783          	lbu	a5,-57(s0)
   115f2:	0007869b          	sext.w	a3,a5
   115f6:	fcc42703          	lw	a4,-52(s0)
   115fa:	fd442783          	lw	a5,-44(s0)
   115fe:	863a                	mv	a2,a4
   11600:	85be                	mv	a1,a5
   11602:	fd843503          	ld	a0,-40(s0)
   11606:	00000097          	auipc	ra,0x0
   1160a:	b76080e7          	jalr	-1162(ra) # 1117c <printnum>
            break;
   1160e:	a831                	j	1162a <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   11610:	8526                	mv	a0,s1
   11612:	a0bff0ef          	jal	ra,1101c <print_char>
            break;
   11616:	a811                	j	1162a <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   11618:	02500513          	li	a0,37
   1161c:	a01ff0ef          	jal	ra,1101c <print_char>
            fmt = last_fmt;
   11620:	fb843783          	ld	a5,-72(s0)
   11624:	faf43423          	sd	a5,-88(s0)
            break;
   11628:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   1162a:	bb35                	j	11366 <vprintfmt_lib+0x2a>
                return;
   1162c:	0001                	nop
        }
    }
}
   1162e:	60e6                	ld	ra,88(sp)
   11630:	6446                	ld	s0,80(sp)
   11632:	64a6                	ld	s1,72(sp)
   11634:	6906                	ld	s2,64(sp)
   11636:	6125                	addi	sp,sp,96
   11638:	8082                	ret

000000000001163a <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   1163a:	7159                	addi	sp,sp,-112
   1163c:	f406                	sd	ra,40(sp)
   1163e:	f022                	sd	s0,32(sp)
   11640:	1800                	addi	s0,sp,48
   11642:	fca43c23          	sd	a0,-40(s0)
   11646:	e40c                	sd	a1,8(s0)
   11648:	e810                	sd	a2,16(s0)
   1164a:	ec14                	sd	a3,24(s0)
   1164c:	f018                	sd	a4,32(s0)
   1164e:	f41c                	sd	a5,40(s0)
   11650:	03043823          	sd	a6,48(s0)
   11654:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   11658:	04040793          	addi	a5,s0,64
   1165c:	fc878793          	addi	a5,a5,-56
   11660:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   11664:	fe843783          	ld	a5,-24(s0)
   11668:	85be                	mv	a1,a5
   1166a:	fd843503          	ld	a0,-40(s0)
   1166e:	00000097          	auipc	ra,0x0
   11672:	cce080e7          	jalr	-818(ra) # 1133c <vprintfmt_lib>

    va_end(arg);
}
   11676:	0001                	nop
   11678:	70a2                	ld	ra,40(sp)
   1167a:	7402                	ld	s0,32(sp)
   1167c:	6165                	addi	sp,sp,112
   1167e:	8082                	ret

0000000000011680 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11680:	715d                	addi	sp,sp,-80
   11682:	e4a2                	sd	s0,72(sp)
   11684:	0880                	addi	s0,sp,80
   11686:	faa43c23          	sd	a0,-72(s0)
   1168a:	87ae                	mv	a5,a1
   1168c:	8732                	mv	a4,a2
   1168e:	faf41b23          	sh	a5,-74(s0)
   11692:	87ba                	mv	a5,a4
   11694:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11698:	fb843783          	ld	a5,-72(s0)
   1169c:	479c                	lw	a5,8(a5)
   1169e:	0087d79b          	srliw	a5,a5,0x8
   116a2:	2781                	sext.w	a5,a5
   116a4:	2781                	sext.w	a5,a5
   116a6:	0ff7f793          	andi	a5,a5,255
   116aa:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   116ae:	fb843783          	ld	a5,-72(s0)
   116b2:	479c                	lw	a5,8(a5)
   116b4:	0107d79b          	srliw	a5,a5,0x10
   116b8:	2781                	sext.w	a5,a5
   116ba:	2781                	sext.w	a5,a5
   116bc:	0ff7f793          	andi	a5,a5,255
   116c0:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   116c4:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   116c8:	fe042423          	sw	zero,-24(s0)
   116cc:	a82d                	j	11706 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   116ce:	fec42783          	lw	a5,-20(s0)
   116d2:	04078793          	addi	a5,a5,64
   116d6:	fb843703          	ld	a4,-72(s0)
   116da:	97ba                	add	a5,a5,a4
   116dc:	639c                	ld	a5,0(a5)
   116de:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   116e2:	fb843703          	ld	a4,-72(s0)
   116e6:	fec42783          	lw	a5,-20(s0)
   116ea:	97ba                	add	a5,a5,a4
   116ec:	0407c783          	lbu	a5,64(a5)
   116f0:	2781                	sext.w	a5,a5
   116f2:	fec42703          	lw	a4,-20(s0)
   116f6:	9fb9                	addw	a5,a5,a4
   116f8:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   116fc:	fe842783          	lw	a5,-24(s0)
   11700:	2785                	addiw	a5,a5,1
   11702:	fef42423          	sw	a5,-24(s0)
   11706:	fe842703          	lw	a4,-24(s0)
   1170a:	fdc42783          	lw	a5,-36(s0)
   1170e:	2701                	sext.w	a4,a4
   11710:	2781                	sext.w	a5,a5
   11712:	faf74ee3          	blt	a4,a5,116ce <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11716:	fe042223          	sw	zero,-28(s0)
   1171a:	a8b5                	j	11796 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1171c:	fec42783          	lw	a5,-20(s0)
   11720:	04078793          	addi	a5,a5,64
   11724:	fb843703          	ld	a4,-72(s0)
   11728:	97ba                	add	a5,a5,a4
   1172a:	639c                	ld	a5,0(a5)
   1172c:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11730:	fec42783          	lw	a5,-20(s0)
   11734:	27a1                	addiw	a5,a5,8
   11736:	2781                	sext.w	a5,a5
   11738:	04078793          	addi	a5,a5,64
   1173c:	fb843703          	ld	a4,-72(s0)
   11740:	97ba                	add	a5,a5,a4
   11742:	639c                	ld	a5,0(a5)
   11744:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11748:	fc645783          	lhu	a5,-58(s0)
   1174c:	fb645703          	lhu	a4,-74(s0)
   11750:	2701                	sext.w	a4,a4
   11752:	2781                	sext.w	a5,a5
   11754:	00f71f63          	bne	a4,a5,11772 <get_dev_bar+0xf2>
   11758:	fc445783          	lhu	a5,-60(s0)
   1175c:	fb445703          	lhu	a4,-76(s0)
   11760:	2701                	sext.w	a4,a4
   11762:	2781                	sext.w	a5,a5
   11764:	00f71763          	bne	a4,a5,11772 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11768:	fcc42783          	lw	a5,-52(s0)
   1176c:	1782                	slli	a5,a5,0x20
   1176e:	9381                	srli	a5,a5,0x20
   11770:	a825                	j	117a8 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11772:	fb843703          	ld	a4,-72(s0)
   11776:	fec42783          	lw	a5,-20(s0)
   1177a:	97ba                	add	a5,a5,a4
   1177c:	0407c783          	lbu	a5,64(a5)
   11780:	2781                	sext.w	a5,a5
   11782:	fec42703          	lw	a4,-20(s0)
   11786:	9fb9                	addw	a5,a5,a4
   11788:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1178c:	fe442783          	lw	a5,-28(s0)
   11790:	2785                	addiw	a5,a5,1
   11792:	fef42223          	sw	a5,-28(s0)
   11796:	fe442703          	lw	a4,-28(s0)
   1179a:	fe042783          	lw	a5,-32(s0)
   1179e:	2701                	sext.w	a4,a4
   117a0:	2781                	sext.w	a5,a5
   117a2:	f6f74de3          	blt	a4,a5,1171c <get_dev_bar+0x9c>
    return DEV_NONE;
   117a6:	57fd                	li	a5,-1
}
   117a8:	853e                	mv	a0,a5
   117aa:	6426                	ld	s0,72(sp)
   117ac:	6161                	addi	sp,sp,80
   117ae:	8082                	ret

00000000000117b0 <mpu_region_total>:
static int mpu_region_total() {
   117b0:	1101                	addi	sp,sp,-32
   117b2:	ec22                	sd	s0,24(sp)
   117b4:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   117b6:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   117ba:	bc4027f3          	csrr	a5,0xbc4
   117be:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   117c2:	fe843783          	ld	a5,-24(s0)
   117c6:	83a1                	srli	a5,a5,0x8
   117c8:	2781                	sext.w	a5,a5
}
   117ca:	853e                	mv	a0,a5
   117cc:	6462                	ld	s0,24(sp)
   117ce:	6105                	addi	sp,sp,32
   117d0:	8082                	ret

00000000000117d2 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   117d2:	7179                	addi	sp,sp,-48
   117d4:	f422                	sd	s0,40(sp)
   117d6:	1800                	addi	s0,sp,48
   117d8:	87aa                	mv	a5,a0
   117da:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   117de:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   117e2:	fdc42783          	lw	a5,-36(s0)
   117e6:	0ff7f793          	andi	a5,a5,255
   117ea:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   117ee:	fe844783          	lbu	a5,-24(s0)
   117f2:	f807e793          	ori	a5,a5,-128
   117f6:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   117fa:	fe843783          	ld	a5,-24(s0)
   117fe:	bc479073          	csrw	0xbc4,a5
}
   11802:	0001                	nop
   11804:	7422                	ld	s0,40(sp)
   11806:	6145                	addi	sp,sp,48
   11808:	8082                	ret

000000000001180a <mpu_enable_region>:
                       const char *rwx) {
   1180a:	715d                	addi	sp,sp,-80
   1180c:	e4a2                	sd	s0,72(sp)
   1180e:	0880                	addi	s0,sp,80
   11810:	87aa                	mv	a5,a0
   11812:	fcb43023          	sd	a1,-64(s0)
   11816:	fac43c23          	sd	a2,-72(s0)
   1181a:	fae43823          	sd	a4,-80(s0)
   1181e:	fcf42623          	sw	a5,-52(s0)
   11822:	87b6                	mv	a5,a3
   11824:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11828:	c0000793          	li	a5,-1024
   1182c:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11830:	fb043783          	ld	a5,-80(s0)
   11834:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11838:	fc043783          	ld	a5,-64(s0)
   1183c:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11840:	fb843783          	ld	a5,-72(s0)
   11844:	8385                	srli	a5,a5,0x1
   11846:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1184a:	a819                	j	11860 <mpu_enable_region+0x56>
        mask <<= 1;
   1184c:	fe843783          	ld	a5,-24(s0)
   11850:	0786                	slli	a5,a5,0x1
   11852:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11856:	fb843783          	ld	a5,-72(s0)
   1185a:	8385                	srli	a5,a5,0x1
   1185c:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11860:	fb843783          	ld	a5,-72(s0)
   11864:	f7e5                	bnez	a5,1184c <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11866:	fe843783          	ld	a5,-24(s0)
   1186a:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   1186e:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11872:	fcc42783          	lw	a5,-52(s0)
   11876:	0ff7f793          	andi	a5,a5,255
   1187a:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   1187e:	fd844783          	lbu	a5,-40(s0)
   11882:	0107e793          	ori	a5,a5,16
   11886:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1188a:	fc842783          	lw	a5,-56(s0)
   1188e:	8b85                	andi	a5,a5,1
   11890:	0ff7f793          	andi	a5,a5,255
   11894:	8b85                	andi	a5,a5,1
   11896:	0037969b          	slliw	a3,a5,0x3
   1189a:	fd844783          	lbu	a5,-40(s0)
   1189e:	9bdd                	andi	a5,a5,-9
   118a0:	873e                	mv	a4,a5
   118a2:	87b6                	mv	a5,a3
   118a4:	8fd9                	or	a5,a5,a4
   118a6:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   118aa:	fd844783          	lbu	a5,-40(s0)
   118ae:	f807e793          	ori	a5,a5,-128
   118b2:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   118b6:	a09d                	j	1191c <mpu_enable_region+0x112>
        if (*p == 'r') {
   118b8:	fe043783          	ld	a5,-32(s0)
   118bc:	0007c783          	lbu	a5,0(a5)
   118c0:	873e                	mv	a4,a5
   118c2:	07200793          	li	a5,114
   118c6:	00f71863          	bne	a4,a5,118d6 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   118ca:	fd844783          	lbu	a5,-40(s0)
   118ce:	0027e793          	ori	a5,a5,2
   118d2:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   118d6:	fe043783          	ld	a5,-32(s0)
   118da:	0007c783          	lbu	a5,0(a5)
   118de:	873e                	mv	a4,a5
   118e0:	07700793          	li	a5,119
   118e4:	00f71863          	bne	a4,a5,118f4 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   118e8:	fd844783          	lbu	a5,-40(s0)
   118ec:	0017e793          	ori	a5,a5,1
   118f0:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   118f4:	fe043783          	ld	a5,-32(s0)
   118f8:	0007c783          	lbu	a5,0(a5)
   118fc:	873e                	mv	a4,a5
   118fe:	07800793          	li	a5,120
   11902:	00f71863          	bne	a4,a5,11912 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11906:	fd844783          	lbu	a5,-40(s0)
   1190a:	0047e793          	ori	a5,a5,4
   1190e:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11912:	fe043783          	ld	a5,-32(s0)
   11916:	0785                	addi	a5,a5,1
   11918:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   1191c:	fe043783          	ld	a5,-32(s0)
   11920:	0007c783          	lbu	a5,0(a5)
   11924:	fbd1                	bnez	a5,118b8 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11926:	fd843783          	ld	a5,-40(s0)
   1192a:	bc479073          	csrw	0xbc4,a5
}
   1192e:	0001                	nop
   11930:	6426                	ld	s0,72(sp)
   11932:	6161                	addi	sp,sp,80
   11934:	8082                	ret

0000000000011936 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   11936:	1141                	addi	sp,sp,-16
   11938:	e422                	sd	s0,8(sp)
   1193a:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   1193c:	0001                	nop
   1193e:	6422                	ld	s0,8(sp)
   11940:	0141                	addi	sp,sp,16
   11942:	8082                	ret

0000000000011944 <sd_get_byte>:

uint8_t sd_get_byte() {
   11944:	1101                	addi	sp,sp,-32
   11946:	ec22                	sd	s0,24(sp)
   11948:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   1194a:	100507b7          	lui	a5,0x10050
   1194e:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   11952:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   11956:	fe843783          	ld	a5,-24(s0)
   1195a:	47fc                	lw	a5,76(a5)
   1195c:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   11960:	fe442783          	lw	a5,-28(s0)
   11964:	fe07c9e3          	bltz	a5,11956 <sd_get_byte+0x12>
    return (uint8_t)rx;
   11968:	fe442783          	lw	a5,-28(s0)
   1196c:	0ff7f793          	andi	a5,a5,255
}
   11970:	853e                	mv	a0,a5
   11972:	6462                	ld	s0,24(sp)
   11974:	6105                	addi	sp,sp,32
   11976:	8082                	ret

0000000000011978 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   11978:	7179                	addi	sp,sp,-48
   1197a:	f422                	sd	s0,40(sp)
   1197c:	1800                	addi	s0,sp,48
   1197e:	87aa                	mv	a5,a0
   11980:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11984:	100507b7          	lui	a5,0x10050
   11988:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   1198c:	0001                	nop
   1198e:	fe843783          	ld	a5,-24(s0)
   11992:	47bc                	lw	a5,72(a5)
   11994:	2781                	sext.w	a5,a5
   11996:	2781                	sext.w	a5,a5
   11998:	fe07cbe3          	bltz	a5,1198e <sd_set_byte+0x16>
    p->txdata = v;
   1199c:	fdf44783          	lbu	a5,-33(s0)
   119a0:	0007871b          	sext.w	a4,a5
   119a4:	fe843783          	ld	a5,-24(s0)
   119a8:	c7b8                	sw	a4,72(a5)
}
   119aa:	0001                	nop
   119ac:	7422                	ld	s0,40(sp)
   119ae:	6145                	addi	sp,sp,48
   119b0:	8082                	ret

00000000000119b2 <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   119b2:	7179                	addi	sp,sp,-48
   119b4:	f406                	sd	ra,40(sp)
   119b6:	f022                	sd	s0,32(sp)
   119b8:	1800                	addi	s0,sp,48
   119ba:	fca43c23          	sd	a0,-40(s0)
   119be:	87ae                	mv	a5,a1
   119c0:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   119c4:	100507b7          	lui	a5,0x10050
   119c8:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   119cc:	f79ff0ef          	jal	ra,11944 <sd_get_byte>
   119d0:	87aa                	mv	a5,a0
   119d2:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   119d6:	a831                	j	119f2 <sd_read_block+0x40>
       *buf = sd_get_byte();
   119d8:	f6dff0ef          	jal	ra,11944 <sd_get_byte>
   119dc:	87aa                	mv	a5,a0
   119de:	873e                	mv	a4,a5
   119e0:	fd843783          	ld	a5,-40(s0)
   119e4:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003cce4>
       buf++;
   119e8:	fd843783          	ld	a5,-40(s0)
   119ec:	0785                	addi	a5,a5,1
   119ee:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   119f2:	fd442783          	lw	a5,-44(s0)
   119f6:	fff7871b          	addiw	a4,a5,-1
   119fa:	fce42a23          	sw	a4,-44(s0)
   119fe:	ffe9                	bnez	a5,119d8 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   11a00:	f45ff0ef          	jal	ra,11944 <sd_get_byte>
   11a04:	87aa                	mv	a5,a0
   11a06:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   11a0a:	f3bff0ef          	jal	ra,11944 <sd_get_byte>
   11a0e:	87aa                	mv	a5,a0
   11a10:	fef40323          	sb	a5,-26(s0)
}
   11a14:	0001                	nop
   11a16:	70a2                	ld	ra,40(sp)
   11a18:	7402                	ld	s0,32(sp)
   11a1a:	6145                	addi	sp,sp,48
   11a1c:	8082                	ret

0000000000011a1e <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   11a1e:	7179                	addi	sp,sp,-48
   11a20:	f406                	sd	ra,40(sp)
   11a22:	f022                	sd	s0,32(sp)
   11a24:	1800                	addi	s0,sp,48
   11a26:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a2a:	100507b7          	lui	a5,0x10050
   11a2e:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   11a32:	05200513          	li	a0,82
   11a36:	f43ff0ef          	jal	ra,11978 <sd_set_byte>
    sd_set_byte(0x00);
   11a3a:	4501                	li	a0,0
   11a3c:	f3dff0ef          	jal	ra,11978 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11a40:	fd843783          	ld	a5,-40(s0)
   11a44:	83c1                	srli	a5,a5,0x10
   11a46:	0ff7f793          	andi	a5,a5,255
   11a4a:	853e                	mv	a0,a5
   11a4c:	f2dff0ef          	jal	ra,11978 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11a50:	fd843783          	ld	a5,-40(s0)
   11a54:	83a1                	srli	a5,a5,0x8
   11a56:	0ff7f793          	andi	a5,a5,255
   11a5a:	853e                	mv	a0,a5
   11a5c:	f1dff0ef          	jal	ra,11978 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11a60:	fd843783          	ld	a5,-40(s0)
   11a64:	0ff7f793          	andi	a5,a5,255
   11a68:	853e                	mv	a0,a5
   11a6a:	f0fff0ef          	jal	ra,11978 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11a6e:	0ff00513          	li	a0,255
   11a72:	f07ff0ef          	jal	ra,11978 <sd_set_byte>

    cmdresp = sd_get_byte();
   11a76:	00000097          	auipc	ra,0x0
   11a7a:	ece080e7          	jalr	-306(ra) # 11944 <sd_get_byte>
   11a7e:	87aa                	mv	a5,a0
   11a80:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11a84:	fe744783          	lbu	a5,-25(s0)
   11a88:	2781                	sext.w	a5,a5
}
   11a8a:	853e                	mv	a0,a5
   11a8c:	70a2                	ld	ra,40(sp)
   11a8e:	7402                	ld	s0,32(sp)
   11a90:	6145                	addi	sp,sp,48
   11a92:	8082                	ret

0000000000011a94 <sd_stop_reading>:

int sd_stop_reading() {
   11a94:	1101                	addi	sp,sp,-32
   11a96:	ec06                	sd	ra,24(sp)
   11a98:	e822                	sd	s0,16(sp)
   11a9a:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a9c:	100507b7          	lui	a5,0x10050
   11aa0:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   11aa4:	04c00513          	li	a0,76
   11aa8:	00000097          	auipc	ra,0x0
   11aac:	ed0080e7          	jalr	-304(ra) # 11978 <sd_set_byte>
    sd_set_byte(0);
   11ab0:	4501                	li	a0,0
   11ab2:	00000097          	auipc	ra,0x0
   11ab6:	ec6080e7          	jalr	-314(ra) # 11978 <sd_set_byte>
    sd_set_byte(0);
   11aba:	4501                	li	a0,0
   11abc:	00000097          	auipc	ra,0x0
   11ac0:	ebc080e7          	jalr	-324(ra) # 11978 <sd_set_byte>
    sd_set_byte(0);
   11ac4:	4501                	li	a0,0
   11ac6:	00000097          	auipc	ra,0x0
   11aca:	eb2080e7          	jalr	-334(ra) # 11978 <sd_set_byte>
    sd_set_byte(0);
   11ace:	4501                	li	a0,0
   11ad0:	00000097          	auipc	ra,0x0
   11ad4:	ea8080e7          	jalr	-344(ra) # 11978 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11ad8:	0ff00513          	li	a0,255
   11adc:	00000097          	auipc	ra,0x0
   11ae0:	e9c080e7          	jalr	-356(ra) # 11978 <sd_set_byte>
    cmdresp = sd_get_byte();
   11ae4:	e61ff0ef          	jal	ra,11944 <sd_get_byte>
   11ae8:	87aa                	mv	a5,a0
   11aea:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   11aee:	fe744783          	lbu	a5,-25(s0)
   11af2:	2781                	sext.w	a5,a5
}
   11af4:	853e                	mv	a0,a5
   11af6:	60e2                	ld	ra,24(sp)
   11af8:	6442                	ld	s0,16(sp)
   11afa:	6105                	addi	sp,sp,32
   11afc:	8082                	ret

0000000000011afe <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11afe:	715d                	addi	sp,sp,-80
   11b00:	e4a2                	sd	s0,72(sp)
   11b02:	0880                	addi	s0,sp,80
   11b04:	faa43c23          	sd	a0,-72(s0)
   11b08:	87ae                	mv	a5,a1
   11b0a:	8732                	mv	a4,a2
   11b0c:	faf41b23          	sh	a5,-74(s0)
   11b10:	87ba                	mv	a5,a4
   11b12:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11b16:	fb843783          	ld	a5,-72(s0)
   11b1a:	479c                	lw	a5,8(a5)
   11b1c:	0087d79b          	srliw	a5,a5,0x8
   11b20:	2781                	sext.w	a5,a5
   11b22:	2781                	sext.w	a5,a5
   11b24:	0ff7f793          	andi	a5,a5,255
   11b28:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   11b2c:	fb843783          	ld	a5,-72(s0)
   11b30:	479c                	lw	a5,8(a5)
   11b32:	0107d79b          	srliw	a5,a5,0x10
   11b36:	2781                	sext.w	a5,a5
   11b38:	2781                	sext.w	a5,a5
   11b3a:	0ff7f793          	andi	a5,a5,255
   11b3e:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   11b42:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b46:	fe042423          	sw	zero,-24(s0)
   11b4a:	a82d                	j	11b84 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b4c:	fec42783          	lw	a5,-20(s0)
   11b50:	04078793          	addi	a5,a5,64 # 10050040 <_end+0x1003cd24>
   11b54:	fb843703          	ld	a4,-72(s0)
   11b58:	97ba                	add	a5,a5,a4
   11b5a:	639c                	ld	a5,0(a5)
   11b5c:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   11b60:	fb843703          	ld	a4,-72(s0)
   11b64:	fec42783          	lw	a5,-20(s0)
   11b68:	97ba                	add	a5,a5,a4
   11b6a:	0407c783          	lbu	a5,64(a5)
   11b6e:	2781                	sext.w	a5,a5
   11b70:	fec42703          	lw	a4,-20(s0)
   11b74:	9fb9                	addw	a5,a5,a4
   11b76:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11b7a:	fe842783          	lw	a5,-24(s0)
   11b7e:	2785                	addiw	a5,a5,1
   11b80:	fef42423          	sw	a5,-24(s0)
   11b84:	fe842703          	lw	a4,-24(s0)
   11b88:	fdc42783          	lw	a5,-36(s0)
   11b8c:	2701                	sext.w	a4,a4
   11b8e:	2781                	sext.w	a5,a5
   11b90:	faf74ee3          	blt	a4,a5,11b4c <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11b94:	fe042223          	sw	zero,-28(s0)
   11b98:	a8b5                	j	11c14 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11b9a:	fec42783          	lw	a5,-20(s0)
   11b9e:	04078793          	addi	a5,a5,64
   11ba2:	fb843703          	ld	a4,-72(s0)
   11ba6:	97ba                	add	a5,a5,a4
   11ba8:	639c                	ld	a5,0(a5)
   11baa:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11bae:	fec42783          	lw	a5,-20(s0)
   11bb2:	27a1                	addiw	a5,a5,8
   11bb4:	2781                	sext.w	a5,a5
   11bb6:	04078793          	addi	a5,a5,64
   11bba:	fb843703          	ld	a4,-72(s0)
   11bbe:	97ba                	add	a5,a5,a4
   11bc0:	639c                	ld	a5,0(a5)
   11bc2:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11bc6:	fc645783          	lhu	a5,-58(s0)
   11bca:	fb645703          	lhu	a4,-74(s0)
   11bce:	2701                	sext.w	a4,a4
   11bd0:	2781                	sext.w	a5,a5
   11bd2:	00f71f63          	bne	a4,a5,11bf0 <get_dev_bar+0xf2>
   11bd6:	fc445783          	lhu	a5,-60(s0)
   11bda:	fb445703          	lhu	a4,-76(s0)
   11bde:	2701                	sext.w	a4,a4
   11be0:	2781                	sext.w	a5,a5
   11be2:	00f71763          	bne	a4,a5,11bf0 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11be6:	fcc42783          	lw	a5,-52(s0)
   11bea:	1782                	slli	a5,a5,0x20
   11bec:	9381                	srli	a5,a5,0x20
   11bee:	a825                	j	11c26 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11bf0:	fb843703          	ld	a4,-72(s0)
   11bf4:	fec42783          	lw	a5,-20(s0)
   11bf8:	97ba                	add	a5,a5,a4
   11bfa:	0407c783          	lbu	a5,64(a5)
   11bfe:	2781                	sext.w	a5,a5
   11c00:	fec42703          	lw	a4,-20(s0)
   11c04:	9fb9                	addw	a5,a5,a4
   11c06:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   11c0a:	fe442783          	lw	a5,-28(s0)
   11c0e:	2785                	addiw	a5,a5,1
   11c10:	fef42223          	sw	a5,-28(s0)
   11c14:	fe442703          	lw	a4,-28(s0)
   11c18:	fe042783          	lw	a5,-32(s0)
   11c1c:	2701                	sext.w	a4,a4
   11c1e:	2781                	sext.w	a5,a5
   11c20:	f6f74de3          	blt	a4,a5,11b9a <get_dev_bar+0x9c>
    return DEV_NONE;
   11c24:	57fd                	li	a5,-1
}
   11c26:	853e                	mv	a0,a5
   11c28:	6426                	ld	s0,72(sp)
   11c2a:	6161                	addi	sp,sp,80
   11c2c:	8082                	ret

0000000000011c2e <mpu_region_total>:
static int mpu_region_total() {
   11c2e:	1101                	addi	sp,sp,-32
   11c30:	ec22                	sd	s0,24(sp)
   11c32:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11c34:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   11c38:	bc4027f3          	csrr	a5,0xbc4
   11c3c:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   11c40:	fe843783          	ld	a5,-24(s0)
   11c44:	83a1                	srli	a5,a5,0x8
   11c46:	2781                	sext.w	a5,a5
}
   11c48:	853e                	mv	a0,a5
   11c4a:	6462                	ld	s0,24(sp)
   11c4c:	6105                	addi	sp,sp,32
   11c4e:	8082                	ret

0000000000011c50 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   11c50:	7179                	addi	sp,sp,-48
   11c52:	f422                	sd	s0,40(sp)
   11c54:	1800                	addi	s0,sp,48
   11c56:	87aa                	mv	a5,a0
   11c58:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   11c5c:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   11c60:	fdc42783          	lw	a5,-36(s0)
   11c64:	0ff7f793          	andi	a5,a5,255
   11c68:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   11c6c:	fe844783          	lbu	a5,-24(s0)
   11c70:	f807e793          	ori	a5,a5,-128
   11c74:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11c78:	fe843783          	ld	a5,-24(s0)
   11c7c:	bc479073          	csrw	0xbc4,a5
}
   11c80:	0001                	nop
   11c82:	7422                	ld	s0,40(sp)
   11c84:	6145                	addi	sp,sp,48
   11c86:	8082                	ret

0000000000011c88 <mpu_enable_region>:
                       const char *rwx) {
   11c88:	715d                	addi	sp,sp,-80
   11c8a:	e4a2                	sd	s0,72(sp)
   11c8c:	0880                	addi	s0,sp,80
   11c8e:	87aa                	mv	a5,a0
   11c90:	fcb43023          	sd	a1,-64(s0)
   11c94:	fac43c23          	sd	a2,-72(s0)
   11c98:	fae43823          	sd	a4,-80(s0)
   11c9c:	fcf42623          	sw	a5,-52(s0)
   11ca0:	87b6                	mv	a5,a3
   11ca2:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11ca6:	c0000793          	li	a5,-1024
   11caa:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11cae:	fb043783          	ld	a5,-80(s0)
   11cb2:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11cb6:	fc043783          	ld	a5,-64(s0)
   11cba:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11cbe:	fb843783          	ld	a5,-72(s0)
   11cc2:	8385                	srli	a5,a5,0x1
   11cc4:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11cc8:	a819                	j	11cde <mpu_enable_region+0x56>
        mask <<= 1;
   11cca:	fe843783          	ld	a5,-24(s0)
   11cce:	0786                	slli	a5,a5,0x1
   11cd0:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11cd4:	fb843783          	ld	a5,-72(s0)
   11cd8:	8385                	srli	a5,a5,0x1
   11cda:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11cde:	fb843783          	ld	a5,-72(s0)
   11ce2:	f7e5                	bnez	a5,11cca <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11ce4:	fe843783          	ld	a5,-24(s0)
   11ce8:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   11cec:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11cf0:	fcc42783          	lw	a5,-52(s0)
   11cf4:	0ff7f793          	andi	a5,a5,255
   11cf8:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   11cfc:	fd844783          	lbu	a5,-40(s0)
   11d00:	0107e793          	ori	a5,a5,16
   11d04:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   11d08:	fc842783          	lw	a5,-56(s0)
   11d0c:	8b85                	andi	a5,a5,1
   11d0e:	0ff7f793          	andi	a5,a5,255
   11d12:	8b85                	andi	a5,a5,1
   11d14:	0037969b          	slliw	a3,a5,0x3
   11d18:	fd844783          	lbu	a5,-40(s0)
   11d1c:	9bdd                	andi	a5,a5,-9
   11d1e:	873e                	mv	a4,a5
   11d20:	87b6                	mv	a5,a3
   11d22:	8fd9                	or	a5,a5,a4
   11d24:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   11d28:	fd844783          	lbu	a5,-40(s0)
   11d2c:	f807e793          	ori	a5,a5,-128
   11d30:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11d34:	a09d                	j	11d9a <mpu_enable_region+0x112>
        if (*p == 'r') {
   11d36:	fe043783          	ld	a5,-32(s0)
   11d3a:	0007c783          	lbu	a5,0(a5)
   11d3e:	873e                	mv	a4,a5
   11d40:	07200793          	li	a5,114
   11d44:	00f71863          	bne	a4,a5,11d54 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11d48:	fd844783          	lbu	a5,-40(s0)
   11d4c:	0027e793          	ori	a5,a5,2
   11d50:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11d54:	fe043783          	ld	a5,-32(s0)
   11d58:	0007c783          	lbu	a5,0(a5)
   11d5c:	873e                	mv	a4,a5
   11d5e:	07700793          	li	a5,119
   11d62:	00f71863          	bne	a4,a5,11d72 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11d66:	fd844783          	lbu	a5,-40(s0)
   11d6a:	0017e793          	ori	a5,a5,1
   11d6e:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11d72:	fe043783          	ld	a5,-32(s0)
   11d76:	0007c783          	lbu	a5,0(a5)
   11d7a:	873e                	mv	a4,a5
   11d7c:	07800793          	li	a5,120
   11d80:	00f71863          	bne	a4,a5,11d90 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11d84:	fd844783          	lbu	a5,-40(s0)
   11d88:	0047e793          	ori	a5,a5,4
   11d8c:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11d90:	fe043783          	ld	a5,-32(s0)
   11d94:	0785                	addi	a5,a5,1
   11d96:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11d9a:	fe043783          	ld	a5,-32(s0)
   11d9e:	0007c783          	lbu	a5,0(a5)
   11da2:	fbd1                	bnez	a5,11d36 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11da4:	fd843783          	ld	a5,-40(s0)
   11da8:	bc479073          	csrw	0xbc4,a5
}
   11dac:	0001                	nop
   11dae:	6426                	ld	s0,72(sp)
   11db0:	6161                	addi	sp,sp,80
   11db2:	8082                	ret

0000000000011db4 <is_empty_gui>:
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"
#include <string.h>

int is_empty_gui(const struct gpt_guid *guid) {
   11db4:	1101                	addi	sp,sp,-32
   11db6:	ec22                	sd	s0,24(sp)
   11db8:	1000                	addi	s0,sp,32
   11dba:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11dbe:	fe843783          	ld	a5,-24(s0)
   11dc2:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11dc4:	e7ad                	bnez	a5,11e2e <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11dc6:	fe843783          	ld	a5,-24(s0)
   11dca:	0047d783          	lhu	a5,4(a5)
   11dce:	e3a5                	bnez	a5,11e2e <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11dd0:	fe843783          	ld	a5,-24(s0)
   11dd4:	0067d783          	lhu	a5,6(a5)
   11dd8:	ebb9                	bnez	a5,11e2e <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11dda:	fe843783          	ld	a5,-24(s0)
   11dde:	0087c783          	lbu	a5,8(a5)
   11de2:	e7b1                	bnez	a5,11e2e <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11de4:	fe843783          	ld	a5,-24(s0)
   11de8:	0097c783          	lbu	a5,9(a5)
   11dec:	e3a9                	bnez	a5,11e2e <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11dee:	fe843783          	ld	a5,-24(s0)
   11df2:	00a7c783          	lbu	a5,10(a5)
   11df6:	ef85                	bnez	a5,11e2e <is_empty_gui+0x7a>
   11df8:	fe843783          	ld	a5,-24(s0)
   11dfc:	00b7c783          	lbu	a5,11(a5)
   11e00:	e79d                	bnez	a5,11e2e <is_empty_gui+0x7a>
   11e02:	fe843783          	ld	a5,-24(s0)
   11e06:	00c7c783          	lbu	a5,12(a5)
   11e0a:	e395                	bnez	a5,11e2e <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11e0c:	fe843783          	ld	a5,-24(s0)
   11e10:	00d7c783          	lbu	a5,13(a5)
   11e14:	ef89                	bnez	a5,11e2e <is_empty_gui+0x7a>
   11e16:	fe843783          	ld	a5,-24(s0)
   11e1a:	00e7c783          	lbu	a5,14(a5)
   11e1e:	eb81                	bnez	a5,11e2e <is_empty_gui+0x7a>
   11e20:	fe843783          	ld	a5,-24(s0)
   11e24:	00f7c783          	lbu	a5,15(a5)
   11e28:	e399                	bnez	a5,11e2e <is_empty_gui+0x7a>
   11e2a:	4785                	li	a5,1
   11e2c:	a011                	j	11e30 <is_empty_gui+0x7c>
   11e2e:	4781                	li	a5,0
}
   11e30:	853e                	mv	a0,a5
   11e32:	6462                	ld	s0,24(sp)
   11e34:	6105                	addi	sp,sp,32
   11e36:	8082                	ret

0000000000011e38 <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11e38:	7159                	addi	sp,sp,-112
   11e3a:	f486                	sd	ra,104(sp)
   11e3c:	f0a2                	sd	s0,96(sp)
   11e3e:	1880                	addi	s0,sp,112
   11e40:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e44:	fe843783          	ld	a5,-24(s0)
   11e48:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e4a:	0187d79b          	srliw	a5,a5,0x18
   11e4e:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11e52:	fe843783          	ld	a5,-24(s0)
   11e56:	439c                	lw	a5,0(a5)
   11e58:	0107d79b          	srliw	a5,a5,0x10
   11e5c:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e5e:	0ff7f793          	andi	a5,a5,255
   11e62:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11e66:	fe843783          	ld	a5,-24(s0)
   11e6a:	439c                	lw	a5,0(a5)
   11e6c:	0087d79b          	srliw	a5,a5,0x8
   11e70:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e72:	0ff7f793          	andi	a5,a5,255
   11e76:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11e7a:	fe843783          	ld	a5,-24(s0)
   11e7e:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e80:	0ff7f793          	andi	a5,a5,255
   11e84:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11e88:	fe843783          	ld	a5,-24(s0)
   11e8c:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11e90:	0087d79b          	srliw	a5,a5,0x8
   11e94:	17c2                	slli	a5,a5,0x30
   11e96:	93c1                	srli	a5,a5,0x30
   11e98:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11e9c:	fe843783          	ld	a5,-24(s0)
   11ea0:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ea4:	2781                	sext.w	a5,a5
   11ea6:	0ff7f793          	andi	a5,a5,255
   11eaa:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11eae:	fe843783          	ld	a5,-24(s0)
   11eb2:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eb6:	0087d79b          	srliw	a5,a5,0x8
   11eba:	17c2                	slli	a5,a5,0x30
   11ebc:	93c1                	srli	a5,a5,0x30
   11ebe:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11ec2:	fe843783          	ld	a5,-24(s0)
   11ec6:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eca:	2781                	sext.w	a5,a5
   11ecc:	0ff7f793          	andi	a5,a5,255
   11ed0:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11ed2:	fe843703          	ld	a4,-24(s0)
   11ed6:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eda:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11edc:	fe843683          	ld	a3,-24(s0)
   11ee0:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ee4:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ee6:	fe843603          	ld	a2,-24(s0)
   11eea:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eee:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11ef0:	fe843583          	ld	a1,-24(s0)
   11ef4:	00b5c583          	lbu	a1,11(a1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ef8:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11efa:	fe843503          	ld	a0,-24(s0)
   11efe:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f02:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f04:	fe843803          	ld	a6,-24(s0)
   11f08:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f0c:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f0e:	fe843883          	ld	a7,-24(s0)
   11f12:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f16:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f18:	fe843303          	ld	t1,-24(s0)
   11f1c:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f20:	2301                	sext.w	t1,t1
   11f22:	e09a                	sd	t1,64(sp)
   11f24:	fc46                	sd	a7,56(sp)
   11f26:	f842                	sd	a6,48(sp)
   11f28:	f42a                	sd	a0,40(sp)
   11f2a:	f02e                	sd	a1,32(sp)
   11f2c:	ec32                	sd	a2,24(sp)
   11f2e:	e836                	sd	a3,16(sp)
   11f30:	e43a                	sd	a4,8(sp)
   11f32:	e03e                	sd	a5,0(sp)
   11f34:	8886                	mv	a7,ra
   11f36:	881e                	mv	a6,t2
   11f38:	8796                	mv	a5,t0
   11f3a:	877e                	mv	a4,t6
   11f3c:	86fa                	mv	a3,t5
   11f3e:	8676                	mv	a2,t4
   11f40:	85f2                	mv	a1,t3
   11f42:	6549                	lui	a0,0x12
   11f44:	61850513          	addi	a0,a0,1560 # 12618 <strnlen+0x27e>
   11f48:	ef2ff0ef          	jal	ra,1163a <printf_uart>
        );
}
   11f4c:	0001                	nop
   11f4e:	70a6                	ld	ra,104(sp)
   11f50:	7406                	ld	s0,96(sp)
   11f52:	6165                	addi	sp,sp,112
   11f54:	8082                	ret

0000000000011f56 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   11f56:	7179                	addi	sp,sp,-48
   11f58:	f422                	sd	s0,40(sp)
   11f5a:	1800                	addi	s0,sp,48
   11f5c:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   11f60:	5b1937b7          	lui	a5,0x5b193
   11f64:	3007879b          	addiw	a5,a5,768
   11f68:	fef42023          	sw	a5,-32(s0)
   11f6c:	c7800793          	li	a5,-904
   11f70:	fef41223          	sh	a5,-28(s0)
   11f74:	6791                	lui	a5,0x4
   11f76:	0cd7879b          	addiw	a5,a5,205
   11f7a:	fef41323          	sh	a5,-26(s0)
   11f7e:	f8000793          	li	a5,-128
   11f82:	fef40423          	sb	a5,-24(s0)
   11f86:	4789                	li	a5,2
   11f88:	fef404a3          	sb	a5,-23(s0)
   11f8c:	57a1                	li	a5,-24
   11f8e:	fef40523          	sb	a5,-22(s0)
   11f92:	06c00793          	li	a5,108
   11f96:	fef405a3          	sb	a5,-21(s0)
   11f9a:	04500793          	li	a5,69
   11f9e:	fef40623          	sb	a5,-20(s0)
   11fa2:	05800793          	li	a5,88
   11fa6:	fef406a3          	sb	a5,-19(s0)
   11faa:	47ad                	li	a5,11
   11fac:	fef40723          	sb	a5,-18(s0)
   11fb0:	04700793          	li	a5,71
   11fb4:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   11fb8:	fe042703          	lw	a4,-32(s0)
   11fbc:	fd843783          	ld	a5,-40(s0)
   11fc0:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   11fc2:	0af71863          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   11fc6:	fe445703          	lhu	a4,-28(s0)
   11fca:	fd843783          	ld	a5,-40(s0)
   11fce:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   11fd2:	2701                	sext.w	a4,a4
   11fd4:	2781                	sext.w	a5,a5
   11fd6:	08f71e63          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   11fda:	fe645703          	lhu	a4,-26(s0)
   11fde:	fd843783          	ld	a5,-40(s0)
   11fe2:	0067d783          	lhu	a5,6(a5)
   11fe6:	2701                	sext.w	a4,a4
   11fe8:	2781                	sext.w	a5,a5
   11fea:	08f71463          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   11fee:	fe844703          	lbu	a4,-24(s0)
   11ff2:	fd843783          	ld	a5,-40(s0)
   11ff6:	0087c783          	lbu	a5,8(a5)
   11ffa:	06f71c63          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   11ffe:	fe944703          	lbu	a4,-23(s0)
   12002:	fd843783          	ld	a5,-40(s0)
   12006:	0097c783          	lbu	a5,9(a5)
   1200a:	06f71463          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   1200e:	fea44703          	lbu	a4,-22(s0)
   12012:	fd843783          	ld	a5,-40(s0)
   12016:	00a7c783          	lbu	a5,10(a5)
   1201a:	04f71c63          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   1201e:	feb44703          	lbu	a4,-21(s0)
   12022:	fd843783          	ld	a5,-40(s0)
   12026:	00b7c783          	lbu	a5,11(a5)
   1202a:	04f71463          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   1202e:	fec44703          	lbu	a4,-20(s0)
   12032:	fd843783          	ld	a5,-40(s0)
   12036:	00c7c783          	lbu	a5,12(a5)
   1203a:	02f71c63          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   1203e:	fed44703          	lbu	a4,-19(s0)
   12042:	fd843783          	ld	a5,-40(s0)
   12046:	00d7c783          	lbu	a5,13(a5)
   1204a:	02f71463          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   1204e:	fee44703          	lbu	a4,-18(s0)
   12052:	fd843783          	ld	a5,-40(s0)
   12056:	00e7c783          	lbu	a5,14(a5)
   1205a:	00f71c63          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   1205e:	fef44703          	lbu	a4,-17(s0)
   12062:	fd843783          	ld	a5,-40(s0)
   12066:	00f7c783          	lbu	a5,15(a5)
   1206a:	00f71463          	bne	a4,a5,12072 <is_uboot_guid+0x11c>
   1206e:	4785                	li	a5,1
   12070:	a011                	j	12074 <is_uboot_guid+0x11e>
   12072:	4781                	li	a5,0
}
   12074:	853e                	mv	a0,a5
   12076:	7422                	ld	s0,40(sp)
   12078:	6145                	addi	sp,sp,48
   1207a:	8082                	ret

000000000001207c <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   1207c:	9c010113          	addi	sp,sp,-1600
   12080:	62113c23          	sd	ra,1592(sp)
   12084:	62813823          	sd	s0,1584(sp)
   12088:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   1208c:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   12090:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   12094:	080007b7          	lui	a5,0x8000
   12098:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   1209c:	00000097          	auipc	ra,0x0
   120a0:	89a080e7          	jalr	-1894(ra) # 11936 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   120a4:	45b5                	li	a1,13
   120a6:	67c9                	lui	a5,0x12
   120a8:	66078513          	addi	a0,a5,1632 # 12660 <strnlen+0x2c6>
   120ac:	fb3fe0ef          	jal	ra,1105e <print_uart>

    sd_start_reading(0);
   120b0:	4501                	li	a0,0
   120b2:	00000097          	auipc	ra,0x0
   120b6:	96c080e7          	jalr	-1684(ra) # 11a1e <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   120ba:	dc040793          	addi	a5,s0,-576
   120be:	20000593          	li	a1,512
   120c2:	853e                	mv	a0,a5
   120c4:	8efff0ef          	jal	ra,119b2 <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   120c8:	bc040793          	addi	a5,s0,-1088
   120cc:	20000593          	li	a1,512
   120d0:	853e                	mv	a0,a5
   120d2:	8e1ff0ef          	jal	ra,119b2 <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   120d6:	bc043703          	ld	a4,-1088(s0)
   120da:	67c9                	lui	a5,0x12
   120dc:	6c07b783          	ld	a5,1728(a5) # 126c0 <strnlen+0x326>
   120e0:	00f70663          	beq	a4,a5,120ec <run_from_sdcard+0x70>
        sd_stop_reading();
   120e4:	9b1ff0ef          	jal	ra,11a94 <sd_stop_reading>
        return -1;
   120e8:	57fd                	li	a5,-1
   120ea:	a2c5                	j	122ca <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   120ec:	fc042a23          	sw	zero,-44(s0)
   120f0:	a8c5                	j	121e0 <run_from_sdcard+0x164>
        i4 = i % 4;
   120f2:	fd442703          	lw	a4,-44(s0)
   120f6:	41f7579b          	sraiw	a5,a4,0x1f
   120fa:	01e7d79b          	srliw	a5,a5,0x1e
   120fe:	9f3d                	addw	a4,a4,a5
   12100:	8b0d                	andi	a4,a4,3
   12102:	40f707bb          	subw	a5,a4,a5
   12106:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   1210a:	fc442783          	lw	a5,-60(s0)
   1210e:	2781                	sext.w	a5,a5
   12110:	eb81                	bnez	a5,12120 <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   12112:	9c040793          	addi	a5,s0,-1600
   12116:	20000593          	li	a1,512
   1211a:	853e                	mv	a0,a5
   1211c:	897ff0ef          	jal	ra,119b2 <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   12120:	9c040713          	addi	a4,s0,-1600
   12124:	fc442783          	lw	a5,-60(s0)
   12128:	079e                	slli	a5,a5,0x7
   1212a:	97ba                	add	a5,a5,a4
   1212c:	853e                	mv	a0,a5
   1212e:	00000097          	auipc	ra,0x0
   12132:	c86080e7          	jalr	-890(ra) # 11db4 <is_empty_gui>
   12136:	87aa                	mv	a5,a0
   12138:	efd1                	bnez	a5,121d4 <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   1213a:	fd442783          	lw	a5,-44(s0)
   1213e:	85be                	mv	a1,a5
   12140:	67c9                	lui	a5,0x12
   12142:	67078513          	addi	a0,a5,1648 # 12670 <strnlen+0x2d6>
   12146:	cf4ff0ef          	jal	ra,1163a <printf_uart>
        print_guid(&entry[i4].type);
   1214a:	9c040713          	addi	a4,s0,-1600
   1214e:	fc442783          	lw	a5,-60(s0)
   12152:	079e                	slli	a5,a5,0x7
   12154:	97ba                	add	a5,a5,a4
   12156:	853e                	mv	a0,a5
   12158:	ce1ff0ef          	jal	ra,11e38 <print_guid>
        print_uart(" : ", 3);
   1215c:	458d                	li	a1,3
   1215e:	67c9                	lui	a5,0x12
   12160:	67878513          	addi	a0,a5,1656 # 12678 <strnlen+0x2de>
   12164:	efbfe0ef          	jal	ra,1105e <print_uart>
        print_uart((const char *)entry[i4].name, sizeof(entry[i4].name));
   12168:	9c040713          	addi	a4,s0,-1600
   1216c:	fc442783          	lw	a5,-60(s0)
   12170:	079e                	slli	a5,a5,0x7
   12172:	03078793          	addi	a5,a5,48
   12176:	97ba                	add	a5,a5,a4
   12178:	07a1                	addi	a5,a5,8
   1217a:	04800593          	li	a1,72
   1217e:	853e                	mv	a0,a5
   12180:	edffe0ef          	jal	ra,1105e <print_uart>
        print_uart("\r\n", 2);
   12184:	4589                	li	a1,2
   12186:	67c9                	lui	a5,0x12
   12188:	68078513          	addi	a0,a5,1664 # 12680 <strnlen+0x2e6>
   1218c:	ed3fe0ef          	jal	ra,1105e <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   12190:	9c040713          	addi	a4,s0,-1600
   12194:	fc442783          	lw	a5,-60(s0)
   12198:	079e                	slli	a5,a5,0x7
   1219a:	97ba                	add	a5,a5,a4
   1219c:	853e                	mv	a0,a5
   1219e:	00000097          	auipc	ra,0x0
   121a2:	db8080e7          	jalr	-584(ra) # 11f56 <is_uboot_guid>
   121a6:	87aa                	mv	a5,a0
   121a8:	c79d                	beqz	a5,121d6 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   121aa:	fc442783          	lw	a5,-60(s0)
   121ae:	079e                	slli	a5,a5,0x7
   121b0:	ff040713          	addi	a4,s0,-16
   121b4:	97ba                	add	a5,a5,a4
   121b6:	9f07b783          	ld	a5,-1552(a5)
   121ba:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   121be:	fc442783          	lw	a5,-60(s0)
   121c2:	079e                	slli	a5,a5,0x7
   121c4:	ff040713          	addi	a4,s0,-16
   121c8:	97ba                	add	a5,a5,a4
   121ca:	9f87b783          	ld	a5,-1544(a5)
   121ce:	fef43023          	sd	a5,-32(s0)
   121d2:	a011                	j	121d6 <run_from_sdcard+0x15a>
            continue;
   121d4:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   121d6:	fd442783          	lw	a5,-44(s0)
   121da:	2785                	addiw	a5,a5,1
   121dc:	fcf42a23          	sw	a5,-44(s0)
   121e0:	c1042703          	lw	a4,-1008(s0)
   121e4:	fd442783          	lw	a5,-44(s0)
   121e8:	f0e7e5e3          	bltu	a5,a4,120f2 <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   121ec:	8a9ff0ef          	jal	ra,11a94 <sd_stop_reading>

    if (lba_start == 0) {
   121f0:	fe843783          	ld	a5,-24(s0)
   121f4:	e399                	bnez	a5,121fa <run_from_sdcard+0x17e>
        return -1;
   121f6:	57fd                	li	a5,-1
   121f8:	a8c9                	j	122ca <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   121fa:	fe843783          	ld	a5,-24(s0)
   121fe:	07a6                	slli	a5,a5,0x9
   12200:	853e                	mv	a0,a5
   12202:	00000097          	auipc	ra,0x0
   12206:	81c080e7          	jalr	-2020(ra) # 11a1e <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   1220a:	fe043703          	ld	a4,-32(s0)
   1220e:	fe843783          	ld	a5,-24(s0)
   12212:	40f707b3          	sub	a5,a4,a5
   12216:	0785                	addi	a5,a5,1
   12218:	8385                	srli	a5,a5,0x1
   1221a:	85be                	mv	a1,a5
   1221c:	67c9                	lui	a5,0x12
   1221e:	68878513          	addi	a0,a5,1672 # 12688 <strnlen+0x2ee>
   12222:	c18ff0ef          	jal	ra,1163a <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12226:	fe843783          	ld	a5,-24(s0)
   1222a:	fcf43423          	sd	a5,-56(s0)
   1222e:	a8bd                	j	122ac <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   12230:	9c040793          	addi	a5,s0,-1600
   12234:	20000593          	li	a1,512
   12238:	853e                	mv	a0,a5
   1223a:	f78ff0ef          	jal	ra,119b2 <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   1223e:	9c040793          	addi	a5,s0,-1600
   12242:	6398                	ld	a4,0(a5)
   12244:	fd843783          	ld	a5,-40(s0)
   12248:	639c                	ld	a5,0(a5)
   1224a:	00f71b63          	bne	a4,a5,12260 <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   1224e:	67c9                	lui	a5,0x12
   12250:	69878593          	addi	a1,a5,1688 # 12698 <strnlen+0x2fe>
   12254:	67c9                	lui	a5,0x12
   12256:	6a878513          	addi	a0,a5,1704 # 126a8 <strnlen+0x30e>
   1225a:	be0ff0ef          	jal	ra,1163a <printf_uart>
            break;
   1225e:	a8a9                	j	122b8 <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   12260:	fd843783          	ld	a5,-40(s0)
   12264:	86be                	mv	a3,a5
   12266:	9c040793          	addi	a5,s0,-1600
   1226a:	20000713          	li	a4,512
   1226e:	863a                	mv	a2,a4
   12270:	85be                	mv	a1,a5
   12272:	8536                	mv	a0,a3
   12274:	00000097          	auipc	ra,0x0
   12278:	066080e7          	jalr	102(ra) # 122da <memcpy>
        sram += sizeof(entry);
   1227c:	fd843783          	ld	a5,-40(s0)
   12280:	20078793          	addi	a5,a5,512
   12284:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   12288:	fc843703          	ld	a4,-56(s0)
   1228c:	06400793          	li	a5,100
   12290:	02f777b3          	remu	a5,a4,a5
   12294:	e799                	bnez	a5,122a2 <run_from_sdcard+0x226>
            print_uart(". ", 2);
   12296:	4589                	li	a1,2
   12298:	67c9                	lui	a5,0x12
   1229a:	6b878513          	addi	a0,a5,1720 # 126b8 <strnlen+0x31e>
   1229e:	dc1fe0ef          	jal	ra,1105e <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   122a2:	fc843783          	ld	a5,-56(s0)
   122a6:	0785                	addi	a5,a5,1
   122a8:	fcf43423          	sd	a5,-56(s0)
   122ac:	fc843703          	ld	a4,-56(s0)
   122b0:	fe043783          	ld	a5,-32(s0)
   122b4:	f6e7fee3          	bleu	a4,a5,12230 <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   122b8:	4589                	li	a1,2
   122ba:	67c9                	lui	a5,0x12
   122bc:	68078513          	addi	a0,a5,1664 # 12680 <strnlen+0x2e6>
   122c0:	d9ffe0ef          	jal	ra,1105e <print_uart>

    sd_stop_reading();
   122c4:	fd0ff0ef          	jal	ra,11a94 <sd_stop_reading>
    return 0;
   122c8:	4781                	li	a5,0
}
   122ca:	853e                	mv	a0,a5
   122cc:	63813083          	ld	ra,1592(sp)
   122d0:	63013403          	ld	s0,1584(sp)
   122d4:	64010113          	addi	sp,sp,1600
   122d8:	8082                	ret

00000000000122da <memcpy>:
   122da:	00a5c7b3          	xor	a5,a1,a0
   122de:	8b9d                	andi	a5,a5,7
   122e0:	00c50733          	add	a4,a0,a2
   122e4:	e781                	bnez	a5,122ec <memcpy+0x12>
   122e6:	479d                	li	a5,7
   122e8:	00c7ef63          	bltu	a5,a2,12306 <memcpy+0x2c>
   122ec:	87aa                	mv	a5,a0
   122ee:	00e56963          	bltu	a0,a4,12300 <memcpy+0x26>
   122f2:	8082                	ret
   122f4:	0005c683          	lbu	a3,0(a1)
   122f8:	0785                	addi	a5,a5,1
   122fa:	0585                	addi	a1,a1,1
   122fc:	fed78fa3          	sb	a3,-1(a5)
   12300:	fee7eae3          	bltu	a5,a4,122f4 <memcpy+0x1a>
   12304:	8082                	ret
   12306:	00757793          	andi	a5,a0,7
   1230a:	ebbd                	bnez	a5,12380 <memcpy+0xa6>
   1230c:	87aa                	mv	a5,a0
   1230e:	ff877693          	andi	a3,a4,-8
   12312:	fc068613          	addi	a2,a3,-64
   12316:	06c7fc63          	bleu	a2,a5,1238e <memcpy+0xb4>
   1231a:	0005b383          	ld	t2,0(a1)
   1231e:	0085b283          	ld	t0,8(a1)
   12322:	0105bf83          	ld	t6,16(a1)
   12326:	0185bf03          	ld	t5,24(a1)
   1232a:	0205be83          	ld	t4,32(a1)
   1232e:	0285be03          	ld	t3,40(a1)
   12332:	0305b303          	ld	t1,48(a1)
   12336:	0385b883          	ld	a7,56(a1)
   1233a:	04858593          	addi	a1,a1,72
   1233e:	04878793          	addi	a5,a5,72
   12342:	ff85b803          	ld	a6,-8(a1)
   12346:	fa77bc23          	sd	t2,-72(a5)
   1234a:	fc57b023          	sd	t0,-64(a5)
   1234e:	fdf7b423          	sd	t6,-56(a5)
   12352:	fde7b823          	sd	t5,-48(a5)
   12356:	fdd7bc23          	sd	t4,-40(a5)
   1235a:	ffc7b023          	sd	t3,-32(a5)
   1235e:	fe67b423          	sd	t1,-24(a5)
   12362:	ff17b823          	sd	a7,-16(a5)
   12366:	ff07bc23          	sd	a6,-8(a5)
   1236a:	b775                	j	12316 <memcpy+0x3c>
   1236c:	0005c683          	lbu	a3,0(a1)
   12370:	0785                	addi	a5,a5,1
   12372:	0585                	addi	a1,a1,1
   12374:	fed78fa3          	sb	a3,-1(a5)
   12378:	0077f693          	andi	a3,a5,7
   1237c:	fae5                	bnez	a3,1236c <memcpy+0x92>
   1237e:	bf41                	j	1230e <memcpy+0x34>
   12380:	87aa                	mv	a5,a0
   12382:	bfdd                	j	12378 <memcpy+0x9e>
   12384:	6190                	ld	a2,0(a1)
   12386:	07a1                	addi	a5,a5,8
   12388:	05a1                	addi	a1,a1,8
   1238a:	fec7bc23          	sd	a2,-8(a5)
   1238e:	fed7ebe3          	bltu	a5,a3,12384 <memcpy+0xaa>
   12392:	f6e7e7e3          	bltu	a5,a4,12300 <memcpy+0x26>
   12396:	8082                	ret
	...

000000000001239a <strnlen>:
   1239a:	95aa                	add	a1,a1,a0
   1239c:	87aa                	mv	a5,a0
   1239e:	00b78563          	beq	a5,a1,123a8 <strnlen+0xe>
   123a2:	0007c703          	lbu	a4,0(a5)
   123a6:	e701                	bnez	a4,123ae <strnlen+0x14>
   123a8:	40a78533          	sub	a0,a5,a0
   123ac:	8082                	ret
   123ae:	0785                	addi	a5,a5,1
   123b0:	b7fd                	j	1239e <strnlen+0x4>
	...
