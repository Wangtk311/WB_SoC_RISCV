
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1680006f          	j	1016c <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0

  la t0, trap_table
   100c0:	00000297          	auipc	t0,0x0
   100c4:	f4428293          	addi	t0,t0,-188 # 10004 <trap_table>
  csrw mtvec, t0
   100c8:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100cc:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100d0:	08200137          	lui	sp,0x8200
  addi sp,sp,-256
   100d4:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ee274>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100d8:	7b311073          	csrw	0x7b3,sp

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100dc:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100e0:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100e4:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100e8:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100ec:	40a10133          	sub	sp,sp,a0

  ## Initialize MPU regions

  ## Make all cachable, rwx (default):
  li a1, 0x0ull
   100f0:	00000593          	li	a1,0
  csrw CSR_mpu_addr, a1
   100f4:	bc259073          	csrw	0xbc2,a1
  csrw CSR_mpu_mask, a1
   100f8:	bc359073          	csrw	0xbc3,a1
  li a1, (0 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_CACHABLE | MPU_CTRL_FL_EXEC | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   100fc:	01f00593          	li	a1,31
  csrw CSR_mpu_ctrl, a1
   10100:	bc459073          	csrw	0xbc4,a1
  ## Uncached CLINT:
  li a1, 0x0000000002000000ull
   10104:	020005b7          	lui	a1,0x2000
  csrw CSR_mpu_addr, a1
   10108:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFFE000000ull
   1010c:	fe0005b7          	lui	a1,0xfe000
  csrw CSR_mpu_mask, a1
   10110:	bc359073          	csrw	0xbc3,a1
  li a1, (1 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   10114:	11300593          	li	a1,275
  csrw CSR_mpu_ctrl, a1
   10118:	bc459073          	csrw	0xbc4,a1
  ## Uncached PLIC:
  li a1, 0x000000000C000000ull
   1011c:	0c0005b7          	lui	a1,0xc000
  csrw CSR_mpu_addr, a1
   10120:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFFC000000ull
   10124:	fc0005b7          	lui	a1,0xfc000
  csrw CSR_mpu_mask, a1
   10128:	bc359073          	csrw	0xbc3,a1
  li a1, (2 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   1012c:	21300593          	li	a1,531
  csrw CSR_mpu_ctrl, a1
   10130:	bc459073          	csrw	0xbc4,a1
  ## Uncached peripheries (IO):
  li a1, 0x0000000010000000ull
   10134:	100005b7          	lui	a1,0x10000
  csrw CSR_mpu_addr, a1
   10138:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFF0000000ull
   1013c:	f00005b7          	lui	a1,0xf0000
  csrw CSR_mpu_mask, a1
   10140:	bc359073          	csrw	0xbc3,a1
  li a1, (3 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_EXEC | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   10144:	31700593          	li	a1,791
  csrw CSR_mpu_ctrl, a1
   10148:	bc459073          	csrw	0xbc4,a1

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   1014c:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   10150:	00050663          	beqz	a0,1015c <init0>
  wfi
   10154:	10500073          	wfi
  j end_init0
   10158:	0080006f          	j	10160 <end_init0>

000000000001015c <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   1015c:	2ea000ef          	jal	ra,10446 <_init>

0000000000010160 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10160:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10164:	34129073          	csrw	mepc,t0
  mret
   10168:	30200073          	mret

000000000001016c <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   1016c:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10170:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10174:	100f5e63          	bgez	t5,10290 <handle_exception>

0000000000010178 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10178:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1017c:	00113023          	sd	ra,0(sp)
   10180:	00813423          	sd	s0,8(sp)
   10184:	00913823          	sd	s1,16(sp)
   10188:	01213c23          	sd	s2,24(sp)
   1018c:	03313023          	sd	s3,32(sp)
   10190:	03413423          	sd	s4,40(sp)
   10194:	03513823          	sd	s5,48(sp)
   10198:	03613c23          	sd	s6,56(sp)
   1019c:	05713023          	sd	s7,64(sp)
   101a0:	05813423          	sd	s8,72(sp)
   101a4:	05913823          	sd	s9,80(sp)
   101a8:	05a13c23          	sd	s10,88(sp)
   101ac:	07b13023          	sd	s11,96(sp)
   101b0:	06213423          	sd	sp,104(sp)
   101b4:	07013c23          	sd	a6,120(sp)
   101b8:	09113023          	sd	a7,128(sp)
   101bc:	08a13423          	sd	a0,136(sp)
   101c0:	08b13823          	sd	a1,144(sp)
   101c4:	08c13c23          	sd	a2,152(sp)
   101c8:	0ad13023          	sd	a3,160(sp)
   101cc:	0ae13423          	sd	a4,168(sp)
   101d0:	0af13823          	sd	a5,176(sp)
   101d4:	0b013c23          	sd	a6,184(sp)
   101d8:	0d113023          	sd	a7,192(sp)
   101dc:	0c513423          	sd	t0,200(sp)
   101e0:	0c613823          	sd	t1,208(sp)
   101e4:	0c713c23          	sd	t2,216(sp)
   101e8:	0fc13023          	sd	t3,224(sp)
   101ec:	0fd13423          	sd	t4,232(sp)
   101f0:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   101f4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   101f8:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101fc:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   10200:	536000ef          	jal	ra,10736 <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   10204:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   10208:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   1020c:	00013083          	ld	ra,0(sp)
   10210:	00813403          	ld	s0,8(sp)
   10214:	01013483          	ld	s1,16(sp)
   10218:	01813903          	ld	s2,24(sp)
   1021c:	02013983          	ld	s3,32(sp)
   10220:	02813a03          	ld	s4,40(sp)
   10224:	03013a83          	ld	s5,48(sp)
   10228:	03813b03          	ld	s6,56(sp)
   1022c:	04013b83          	ld	s7,64(sp)
   10230:	04813c03          	ld	s8,72(sp)
   10234:	05013c83          	ld	s9,80(sp)
   10238:	05813d03          	ld	s10,88(sp)
   1023c:	06013d83          	ld	s11,96(sp)
   10240:	06813103          	ld	sp,104(sp)
   10244:	07813803          	ld	a6,120(sp)
   10248:	08013883          	ld	a7,128(sp)
   1024c:	08813503          	ld	a0,136(sp)
   10250:	09013583          	ld	a1,144(sp)
   10254:	09813603          	ld	a2,152(sp)
   10258:	0a013683          	ld	a3,160(sp)
   1025c:	0a813703          	ld	a4,168(sp)
   10260:	0b013783          	ld	a5,176(sp)
   10264:	0b813803          	ld	a6,184(sp)
   10268:	0c013883          	ld	a7,192(sp)
   1026c:	0c813283          	ld	t0,200(sp)
   10270:	0d013303          	ld	t1,208(sp)
   10274:	0d813383          	ld	t2,216(sp)
   10278:	0e013e03          	ld	t3,224(sp)
   1027c:	0e813e83          	ld	t4,232(sp)
   10280:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10284:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10288:	34002f73          	csrr	t5,mscratch
  mret
   1028c:	30200073          	mret

0000000000010290 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10290:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10294:	386000ef          	jal	ra,1061a <exception_handler_c>
  mret
   10298:	30200073          	mret
   1029c:	0000                	unimp
   1029e:	0000                	unimp
	...

00000000000102a2 <fw_get_cpuid>:

uint64_t get_dev_bar(uint16_t vid, uint16_t did);

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   102a2:	1101                	addi	sp,sp,-32
   102a4:	ec22                	sd	s0,24(sp)
   102a6:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   102a8:	f14027f3          	csrr	a5,mhartid
   102ac:	fef42623          	sw	a5,-20(s0)
    return ret;
   102b0:	fec42783          	lw	a5,-20(s0)
}
   102b4:	853e                	mv	a0,a5
   102b6:	6462                	ld	s0,24(sp)
   102b8:	6105                	addi	sp,sp,32
   102ba:	8082                	ret

00000000000102bc <led_set>:

void led_set(int output) {
   102bc:	1101                	addi	sp,sp,-32
   102be:	ec22                	sd	s0,24(sp)
   102c0:	1000                	addi	s0,sp,32
   102c2:	87aa                	mv	a5,a0
   102c4:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   102c8:	fec42783          	lw	a5,-20(s0)
   102cc:	0047979b          	slliw	a5,a5,0x4
   102d0:	0007871b          	sext.w	a4,a5
   102d4:	100607b7          	lui	a5,0x10060
   102d8:	2701                	sext.w	a4,a4
   102da:	c7d8                	sw	a4,12(a5)
}
   102dc:	0001                	nop
   102de:	6462                	ld	s0,24(sp)
   102e0:	6105                	addi	sp,sp,32
   102e2:	8082                	ret

00000000000102e4 <get_dip>:

int get_dip(int idx) {
   102e4:	7179                	addi	sp,sp,-48
   102e6:	f422                	sd	s0,40(sp)
   102e8:	1800                	addi	s0,sp,48
   102ea:	87aa                	mv	a5,a0
   102ec:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   102f0:	100607b7          	lui	a5,0x10060
   102f4:	439c                	lw	a5,0(a5)
   102f6:	0007871b          	sext.w	a4,a5
   102fa:	fdc42783          	lw	a5,-36(s0)
   102fe:	00f757bb          	srlw	a5,a4,a5
   10302:	2781                	sext.w	a5,a5
   10304:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   10308:	fec42783          	lw	a5,-20(s0)
   1030c:	8b85                	andi	a5,a5,1
   1030e:	2781                	sext.w	a5,a5
}
   10310:	853e                	mv	a0,a5
   10312:	7422                	ld	s0,40(sp)
   10314:	6145                	addi	sp,sp,48
   10316:	8082                	ret

0000000000010318 <get_dips>:

int get_dips() {
   10318:	1101                	addi	sp,sp,-32
   1031a:	ec22                	sd	s0,24(sp)
   1031c:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   1031e:	100607b7          	lui	a5,0x10060
   10322:	439c                	lw	a5,0(a5)
   10324:	2781                	sext.w	a5,a5
   10326:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   1032a:	fec42783          	lw	a5,-20(s0)
   1032e:	8bbd                	andi	a5,a5,15
   10330:	2781                	sext.w	a5,a5
}
   10332:	853e                	mv	a0,a5
   10334:	6462                	ld	s0,24(sp)
   10336:	6105                	addi	sp,sp,32
   10338:	8082                	ret

000000000001033a <copy_image>:



void copy_image() { 
   1033a:	7139                	addi	sp,sp,-64
   1033c:	fc06                	sd	ra,56(sp)
   1033e:	f822                	sd	s0,48(sp)
   10340:	0080                	addi	s0,sp,64
    uint32_t tech;
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10342:	090007b7          	lui	a5,0x9000
   10346:	fef43023          	sd	a5,-32(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   1034a:	080007b7          	lui	a5,0x8000
   1034e:	fcf43c23          	sd	a5,-40(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10352:	100ff7b7          	lui	a5,0x100ff
   10356:	fcf43823          	sd	a5,-48(s0)

    /** 
     * Speed-up RTL simulation by skipping coping stage.
     * Or skip this stage to avoid rewritting of externally loaded image.
     */
    tech = pnp->tech & 0xFF;
   1035a:	fd043783          	ld	a5,-48(s0)
   1035e:	479c                	lw	a5,8(a5)
   10360:	0ff7f793          	andi	a5,a5,255
   10364:	fcf42623          	sw	a5,-52(s0)


    uint64_t qspi2 = ~0ull;
   10368:	57fd                	li	a5,-1
   1036a:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   1036e:	00000097          	auipc	ra,0x0
   10372:	faa080e7          	jalr	-86(ra) # 10318 <get_dips>
   10376:	87aa                	mv	a5,a0
   10378:	85be                	mv	a1,a5
   1037a:	67c5                	lui	a5,0x11
   1037c:	70878513          	addi	a0,a5,1800 # 11708 <strnlen+0x1c>
   10380:	00001097          	auipc	ra,0x1
   10384:	b78080e7          	jalr	-1160(ra) # 10ef8 <printf_uart>
    if (get_dips() == 0xB) {
   10388:	00000097          	auipc	ra,0x0
   1038c:	f90080e7          	jalr	-112(ra) # 10318 <get_dips>
   10390:	87aa                	mv	a5,a0
   10392:	873e                	mv	a4,a5
   10394:	47ad                	li	a5,11
   10396:	04f71b63          	bne	a4,a5,103ec <copy_image+0xb2>
        // Load from SD-card
        qspi2 = get_dev_bar(VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   1039a:	07500593          	li	a1,117
   1039e:	0f100513          	li	a0,241
   103a2:	402000ef          	jal	ra,107a4 <get_dev_bar>
   103a6:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   103aa:	fe843703          	ld	a4,-24(s0)
   103ae:	57fd                	li	a5,-1
   103b0:	02f70e63          	beq	a4,a5,103ec <copy_image+0xb2>
            print_uart("Select . .QSPI2\r\n", 17);
   103b4:	45c5                	li	a1,17
   103b6:	67c5                	lui	a5,0x11
   103b8:	71878513          	addi	a0,a5,1816 # 11718 <strnlen+0x2c>
   103bc:	00000097          	auipc	ra,0x0
   103c0:	560080e7          	jalr	1376(ra) # 1091c <print_uart>
            if (run_from_sdcard() == -1) {
   103c4:	00001097          	auipc	ra,0x1
   103c8:	00a080e7          	jalr	10(ra) # 113ce <run_from_sdcard>
   103cc:	87aa                	mv	a5,a0
   103ce:	873e                	mv	a4,a5
   103d0:	57fd                	li	a5,-1
   103d2:	00f71d63          	bne	a4,a5,103ec <copy_image+0xb2>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   103d6:	45c9                	li	a1,18
   103d8:	67c5                	lui	a5,0x11
   103da:	73078513          	addi	a0,a5,1840 # 11730 <strnlen+0x44>
   103de:	00000097          	auipc	ra,0x0
   103e2:	53e080e7          	jalr	1342(ra) # 1091c <print_uart>
                qspi2 = ~0ull;
   103e6:	57fd                	li	a5,-1
   103e8:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   103ec:	fe843703          	ld	a4,-24(s0)
   103f0:	57fd                	li	a5,-1
   103f2:	02f71763          	bne	a4,a5,10420 <copy_image+0xe6>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   103f6:	fd043783          	ld	a5,-48(s0)
   103fa:	43dc                	lw	a5,4(a5)
   103fc:	e395                	bnez	a5,10420 <copy_image+0xe6>
        print_uart("Coping . .FWIMAGE\r\n", 19);
   103fe:	45cd                	li	a1,19
   10400:	67c5                	lui	a5,0x11
   10402:	74878513          	addi	a0,a5,1864 # 11748 <strnlen+0x5c>
   10406:	00000097          	auipc	ra,0x0
   1040a:	516080e7          	jalr	1302(ra) # 1091c <print_uart>
        memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   1040e:	000407b7          	lui	a5,0x40
   10412:	863e                	mv	a2,a5
   10414:	fe043583          	ld	a1,-32(s0)
   10418:	fd843503          	ld	a0,-40(s0)
   1041c:	210010ef          	jal	ra,1162c <memcpy>
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   10420:	fd043783          	ld	a5,-48(s0)
   10424:	20211737          	lui	a4,0x20211
   10428:	1237071b          	addiw	a4,a4,291
   1042c:	c3d8                	sw	a4,4(a5)
}
   1042e:	0001                	nop
   10430:	70e2                	ld	ra,56(sp)
   10432:	7442                	ld	s0,48(sp)
   10434:	6121                	addi	sp,sp,64
   10436:	8082                	ret

0000000000010438 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   10438:	1141                	addi	sp,sp,-16
   1043a:	e422                	sd	s0,8(sp)
   1043c:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   1043e:	0001                	nop
   10440:	6422                	ld	s0,8(sp)
   10442:	0141                	addi	sp,sp,16
   10444:	8082                	ret

0000000000010446 <_init>:

void _init() {
   10446:	7139                	addi	sp,sp,-64
   10448:	fc06                	sd	ra,56(sp)
   1044a:	f822                	sd	s0,48(sp)
   1044c:	0080                	addi	s0,sp,64
    uint32_t tech;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   1044e:	100ff7b7          	lui	a5,0x100ff
   10452:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10456:	100107b7          	lui	a5,0x10010
   1045a:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   1045e:	100607b7          	lui	a5,0x10060
   10462:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   10466:	47a1                	li	a5,8
   10468:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   1046c:	fd043783          	ld	a5,-48(s0)
   10470:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   10474:	6785                	lui	a5,0x1
   10476:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   1047a:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   1047e:	fd043783          	ld	a5,-48(s0)
   10482:	3047b073          	csrc	mie,a5

    txctrl.v = 0;
   10486:	fc042423          	sw	zero,-56(s0)
    txctrl.b.txen = 1;
   1048a:	fc844783          	lbu	a5,-56(s0)
   1048e:	0017e793          	ori	a5,a5,1
   10492:	fcf40423          	sb	a5,-56(s0)
    rxctrl.v = 0;
   10496:	fc042023          	sw	zero,-64(s0)
    rxctrl.b.rxen = 1;
   1049a:	fc044783          	lbu	a5,-64(s0)
   1049e:	0017e793          	ori	a5,a5,1
   104a2:	fcf40023          	sb	a5,-64(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   104a6:	fe043783          	ld	a5,-32(s0)
   104aa:	0ad00713          	li	a4,173
   104ae:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   104b0:	fc842783          	lw	a5,-56(s0)
   104b4:	0007871b          	sext.w	a4,a5
   104b8:	fe043783          	ld	a5,-32(s0)
   104bc:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   104be:	fc042783          	lw	a5,-64(s0)
   104c2:	0007871b          	sext.w	a4,a5
   104c6:	fe043783          	ld	a5,-32(s0)
   104ca:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   104cc:	fd843783          	ld	a5,-40(s0)
   104d0:	473d                	li	a4,15
   104d2:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   104d4:	fd843783          	ld	a5,-40(s0)
   104d8:	6705                	lui	a4,0x1
   104da:	3741                	addiw	a4,a4,-16
   104dc:	c798                	sw	a4,8(a5)

    led_set(0x01);
   104de:	4505                	li	a0,1
   104e0:	00000097          	auipc	ra,0x0
   104e4:	ddc080e7          	jalr	-548(ra) # 102bc <led_set>

    copy_image();
   104e8:	e53ff0ef          	jal	ra,1033a <copy_image>
    led_set(0x02);
   104ec:	4509                	li	a0,2
   104ee:	00000097          	auipc	ra,0x0
   104f2:	dce080e7          	jalr	-562(ra) # 102bc <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   104f6:	67c5                	lui	a5,0x11
   104f8:	76078593          	addi	a1,a5,1888 # 11760 <strnlen+0x74>
   104fc:	67c5                	lui	a5,0x11
   104fe:	76878513          	addi	a0,a5,1896 # 11768 <strnlen+0x7c>
   10502:	00001097          	auipc	ra,0x1
   10506:	9f6080e7          	jalr	-1546(ra) # 10ef8 <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   1050a:	67c5                	lui	a5,0x11
   1050c:	77878593          	addi	a1,a5,1912 # 11778 <strnlen+0x8c>
   10510:	67c5                	lui	a5,0x11
   10512:	78078513          	addi	a0,a5,1920 # 11780 <strnlen+0x94>
   10516:	00001097          	auipc	ra,0x1
   1051a:	9e2080e7          	jalr	-1566(ra) # 10ef8 <printf_uart>

    tech = (pnp->tech >> 24) & 0xff;
   1051e:	fe843783          	ld	a5,-24(s0)
   10522:	479c                	lw	a5,8(a5)
   10524:	0187d79b          	srliw	a5,a5,0x18
   10528:	fcf42623          	sw	a5,-52(s0)
    led_set(tech);
   1052c:	fcc42783          	lw	a5,-52(s0)
   10530:	853e                	mv	a0,a5
   10532:	00000097          	auipc	ra,0x0
   10536:	d8a080e7          	jalr	-630(ra) # 102bc <led_set>
    led_set(0x03);
   1053a:	450d                	li	a0,3
   1053c:	00000097          	auipc	ra,0x0
   10540:	d80080e7          	jalr	-640(ra) # 102bc <led_set>
}
   10544:	0001                	nop
   10546:	70e2                	ld	ra,56(sp)
   10548:	7442                	ld	s0,48(sp)
   1054a:	6121                	addi	sp,sp,64
   1054c:	8082                	ret

000000000001054e <main>:

/** Not used actually */
int main() {
   1054e:	1141                	addi	sp,sp,-16
   10550:	e422                	sd	s0,8(sp)
   10552:	0800                	addi	s0,sp,16
    while (1) {}
   10554:	a001                	j	10554 <main+0x6>

0000000000010556 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10556:	1101                	addi	sp,sp,-32
   10558:	ec22                	sd	s0,24(sp)
   1055a:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   1055c:	342027f3          	csrr	a5,mcause
   10560:	fef42623          	sw	a5,-20(s0)
    return ret;
   10564:	fec42783          	lw	a5,-20(s0)
}
   10568:	853e                	mv	a0,a5
   1056a:	6462                	ld	s0,24(sp)
   1056c:	6105                	addi	sp,sp,32
   1056e:	8082                	ret

0000000000010570 <get_mepc>:

int get_mepc() {
   10570:	1101                	addi	sp,sp,-32
   10572:	ec22                	sd	s0,24(sp)
   10574:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10576:	341027f3          	csrr	a5,mepc
   1057a:	fef42623          	sw	a5,-20(s0)
    return ret;
   1057e:	fec42783          	lw	a5,-20(s0)
}
   10582:	853e                	mv	a0,a5
   10584:	6462                	ld	s0,24(sp)
   10586:	6105                	addi	sp,sp,32
   10588:	8082                	ret

000000000001058a <env_call>:


void env_call(long long test_id) {
   1058a:	7179                	addi	sp,sp,-48
   1058c:	f406                	sd	ra,40(sp)
   1058e:	f022                	sd	s0,32(sp)
   10590:	1800                	addi	s0,sp,48
   10592:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10596:	fd843783          	ld	a5,-40(s0)
   1059a:	c7bd                	beqz	a5,10608 <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   1059c:	45b5                	li	a1,13
   1059e:	67c5                	lui	a5,0x11
   105a0:	79078513          	addi	a0,a5,1936 # 11790 <strnlen+0xa4>
   105a4:	00000097          	auipc	ra,0x0
   105a8:	378080e7          	jalr	888(ra) # 1091c <print_uart>
        print_uart("a0=", 3);
   105ac:	458d                	li	a1,3
   105ae:	67c5                	lui	a5,0x11
   105b0:	7a078513          	addi	a0,a5,1952 # 117a0 <strnlen+0xb4>
   105b4:	00000097          	auipc	ra,0x0
   105b8:	368080e7          	jalr	872(ra) # 1091c <print_uart>
        print_uart_hex(test_id);
   105bc:	fd843503          	ld	a0,-40(s0)
   105c0:	3ce000ef          	jal	ra,1098e <print_uart_hex>
        print_uart("\r\n", 2);
   105c4:	4589                	li	a1,2
   105c6:	67c5                	lui	a5,0x11
   105c8:	7a878513          	addi	a0,a5,1960 # 117a8 <strnlen+0xbc>
   105cc:	00000097          	auipc	ra,0x0
   105d0:	350080e7          	jalr	848(ra) # 1091c <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   105d4:	343027f3          	csrr	a5,mbadaddr
   105d8:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   105dc:	45a5                	li	a1,9
   105de:	67c5                	lui	a5,0x11
   105e0:	7b078513          	addi	a0,a5,1968 # 117b0 <strnlen+0xc4>
   105e4:	00000097          	auipc	ra,0x0
   105e8:	338080e7          	jalr	824(ra) # 1091c <print_uart>
        print_uart_hex(mbadaddr);
   105ec:	fec42783          	lw	a5,-20(s0)
   105f0:	853e                	mv	a0,a5
   105f2:	39c000ef          	jal	ra,1098e <print_uart_hex>
        print_uart("\r\n", 2);
   105f6:	4589                	li	a1,2
   105f8:	67c5                	lui	a5,0x11
   105fa:	7a878513          	addi	a0,a5,1960 # 117a8 <strnlen+0xbc>
   105fe:	00000097          	auipc	ra,0x0
   10602:	31e080e7          	jalr	798(ra) # 1091c <print_uart>
   10606:	a809                	j	10618 <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10608:	45b5                	li	a1,13
   1060a:	67c5                	lui	a5,0x11
   1060c:	7c078513          	addi	a0,a5,1984 # 117c0 <strnlen+0xd4>
   10610:	00000097          	auipc	ra,0x0
   10614:	30c080e7          	jalr	780(ra) # 1091c <print_uart>
    }
    while (1) {}
   10618:	a001                	j	10618 <env_call+0x8e>

000000000001061a <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   1061a:	7179                	addi	sp,sp,-48
   1061c:	f406                	sd	ra,40(sp)
   1061e:	f022                	sd	s0,32(sp)
   10620:	1800                	addi	s0,sp,48
   10622:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10626:	00000097          	auipc	ra,0x0
   1062a:	f30080e7          	jalr	-208(ra) # 10556 <get_mcause>
   1062e:	87aa                	mv	a5,a0
   10630:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10634:	fec42783          	lw	a5,-20(s0)
   10638:	37e1                	addiw	a5,a5,-8
   1063a:	0007871b          	sext.w	a4,a5
   1063e:	4785                	li	a5,1
   10640:	00e7e963          	bltu	a5,a4,10652 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10644:	fd843503          	ld	a0,-40(s0)
   10648:	00000097          	auipc	ra,0x0
   1064c:	f42080e7          	jalr	-190(ra) # 1058a <env_call>
        return;
   10650:	a0b9                	j	1069e <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10652:	459d                	li	a1,7
   10654:	67c5                	lui	a5,0x11
   10656:	7d078513          	addi	a0,a5,2000 # 117d0 <strnlen+0xe4>
   1065a:	2c2000ef          	jal	ra,1091c <print_uart>
    print_uart_hex(mcause);
   1065e:	fec42783          	lw	a5,-20(s0)
   10662:	853e                	mv	a0,a5
   10664:	00000097          	auipc	ra,0x0
   10668:	32a080e7          	jalr	810(ra) # 1098e <print_uart_hex>
    print_uart(",mepc:", 6);
   1066c:	4599                	li	a1,6
   1066e:	67c5                	lui	a5,0x11
   10670:	7d878513          	addi	a0,a5,2008 # 117d8 <strnlen+0xec>
   10674:	2a8000ef          	jal	ra,1091c <print_uart>
    print_uart_hex(get_mepc());
   10678:	ef9ff0ef          	jal	ra,10570 <get_mepc>
   1067c:	87aa                	mv	a5,a0
   1067e:	853e                	mv	a0,a5
   10680:	00000097          	auipc	ra,0x0
   10684:	30e080e7          	jalr	782(ra) # 1098e <print_uart_hex>
    print_uart("\r\n", 2);
   10688:	4589                	li	a1,2
   1068a:	67c5                	lui	a5,0x11
   1068c:	7a878513          	addi	a0,a5,1960 # 117a8 <strnlen+0xbc>
   10690:	28c000ef          	jal	ra,1091c <print_uart>

    /// Exception trap
    led_set(0xF0);
   10694:	0f000513          	li	a0,240
   10698:	c25ff0ef          	jal	ra,102bc <led_set>
    while (1) {}
   1069c:	a001                	j	1069c <exception_handler_c+0x82>
}
   1069e:	70a2                	ld	ra,40(sp)
   106a0:	7402                	ld	s0,32(sp)
   106a2:	6145                	addi	sp,sp,48
   106a4:	8082                	ret

00000000000106a6 <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   106a6:	1141                	addi	sp,sp,-16
   106a8:	e406                	sd	ra,8(sp)
   106aa:	e022                	sd	s0,0(sp)
   106ac:	0800                	addi	s0,sp,16
    led_set(0xF0);
   106ae:	0f000513          	li	a0,240
   106b2:	00000097          	auipc	ra,0x0
   106b6:	c0a080e7          	jalr	-1014(ra) # 102bc <led_set>
    print_uart("fatal_error()\r\n", 15);
   106ba:	45bd                	li	a1,15
   106bc:	67c5                	lui	a5,0x11
   106be:	7e078513          	addi	a0,a5,2016 # 117e0 <strnlen+0xf4>
   106c2:	00000097          	auipc	ra,0x0
   106c6:	25a080e7          	jalr	602(ra) # 1091c <print_uart>
    while (1) {}
   106ca:	a001                	j	106ca <fatal_error+0x24>

00000000000106cc <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   106cc:	7179                	addi	sp,sp,-48
   106ce:	f422                	sd	s0,40(sp)
   106d0:	1800                	addi	s0,sp,48
   106d2:	87aa                	mv	a5,a0
   106d4:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   106d8:	0c0007b7          	lui	a5,0xc000
   106dc:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   106e0:	fe843703          	ld	a4,-24(s0)
   106e4:	fdc42783          	lw	a5,-36(s0)
   106e8:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee574>
   106ec:	07b2                	slli	a5,a5,0xc
   106ee:	97ba                	add	a5,a5,a4
   106f0:	43dc                	lw	a5,4(a5)
   106f2:	2781                	sext.w	a5,a5
}
   106f4:	853e                	mv	a0,a5
   106f6:	7422                	ld	s0,40(sp)
   106f8:	6145                	addi	sp,sp,48
   106fa:	8082                	ret

00000000000106fc <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   106fc:	7179                	addi	sp,sp,-48
   106fe:	f422                	sd	s0,40(sp)
   10700:	1800                	addi	s0,sp,48
   10702:	87aa                	mv	a5,a0
   10704:	872e                	mv	a4,a1
   10706:	fcf42e23          	sw	a5,-36(s0)
   1070a:	87ba                	mv	a5,a4
   1070c:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10710:	0c0007b7          	lui	a5,0xc000
   10714:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10718:	fd842703          	lw	a4,-40(s0)
   1071c:	fe843683          	ld	a3,-24(s0)
   10720:	fdc42783          	lw	a5,-36(s0)
   10724:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee574>
   10728:	07b2                	slli	a5,a5,0xc
   1072a:	97b6                	add	a5,a5,a3
   1072c:	c3d8                	sw	a4,4(a5)
}
   1072e:	0001                	nop
   10730:	7422                	ld	s0,40(sp)
   10732:	6145                	addi	sp,sp,48
   10734:	8082                	ret

0000000000010736 <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10736:	7139                	addi	sp,sp,-64
   10738:	fc06                	sd	ra,56(sp)
   1073a:	f822                	sd	s0,48(sp)
   1073c:	0080                	addi	s0,sp,64
   1073e:	fca43c23          	sd	a0,-40(s0)
   10742:	fcb43823          	sd	a1,-48(s0)
   10746:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   1074a:	fd843783          	ld	a5,-40(s0)
   1074e:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10752:	fe744783          	lbu	a5,-25(s0)
   10756:	f807f793          	andi	a5,a5,-128
   1075a:	0ff7f793          	andi	a5,a5,255
   1075e:	cb85                	beqz	a5,1078e <interrupt_handler_c+0x58>
   10760:	fe043703          	ld	a4,-32(s0)
   10764:	57fd                	li	a5,-1
   10766:	8385                	srli	a5,a5,0x1
   10768:	8f7d                	and	a4,a4,a5
   1076a:	47ad                	li	a5,11
   1076c:	02f71163          	bne	a4,a5,1078e <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10770:	4501                	li	a0,0
   10772:	f5bff0ef          	jal	ra,106cc <plic_claim>
   10776:	87aa                	mv	a5,a0
   10778:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   1077c:	fec42783          	lw	a5,-20(s0)
   10780:	85be                	mv	a1,a5
   10782:	4501                	li	a0,0
   10784:	00000097          	auipc	ra,0x0
   10788:	f78080e7          	jalr	-136(ra) # 106fc <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   1078c:	a029                	j	10796 <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   1078e:	00000097          	auipc	ra,0x0
   10792:	f18080e7          	jalr	-232(ra) # 106a6 <fatal_error>
    }

    return epc;
   10796:	fd043783          	ld	a5,-48(s0)
}
   1079a:	853e                	mv	a0,a5
   1079c:	70e2                	ld	ra,56(sp)
   1079e:	7442                	ld	s0,48(sp)
   107a0:	6121                	addi	sp,sp,64
   107a2:	8082                	ret

00000000000107a4 <get_dev_bar>:
typedef union slave_cfg_type {
    slave_cfg_bits_type u;
    uint64_t v[2];
} slave_cfg_type;

uint64_t get_dev_bar(uint16_t vid, uint16_t did) {
   107a4:	711d                	addi	sp,sp,-96
   107a6:	eca2                	sd	s0,88(sp)
   107a8:	1080                	addi	s0,sp,96
   107aa:	87aa                	mv	a5,a0
   107ac:	872e                	mv	a4,a1
   107ae:	faf41723          	sh	a5,-82(s0)
   107b2:	87ba                	mv	a5,a4
   107b4:	faf41623          	sh	a5,-84(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   107b8:	100ff7b7          	lui	a5,0x100ff
   107bc:	fcf43c23          	sd	a5,-40(s0)
    int slv_total = (pnp->tech >> 8) & 0xFF;
   107c0:	fd843783          	ld	a5,-40(s0)
   107c4:	479c                	lw	a5,8(a5)
   107c6:	0087d79b          	srliw	a5,a5,0x8
   107ca:	2781                	sext.w	a5,a5
   107cc:	2781                	sext.w	a5,a5
   107ce:	0ff7f793          	andi	a5,a5,255
   107d2:	fcf42a23          	sw	a5,-44(s0)
    int mst_total = (pnp->tech >> 16) & 0xFF;
   107d6:	fd843783          	ld	a5,-40(s0)
   107da:	479c                	lw	a5,8(a5)
   107dc:	0107d79b          	srliw	a5,a5,0x10
   107e0:	2781                	sext.w	a5,a5
   107e2:	2781                	sext.w	a5,a5
   107e4:	0ff7f793          	andi	a5,a5,255
   107e8:	fcf42823          	sw	a5,-48(s0)
    int off = 0;
   107ec:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   107f0:	fe042423          	sw	zero,-24(s0)
   107f4:	a82d                	j	1082e <get_dev_bar+0x8a>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   107f6:	fec42783          	lw	a5,-20(s0)
   107fa:	04078793          	addi	a5,a5,64 # 100ff040 <_end+0x100ed3b4>
   107fe:	fd843703          	ld	a4,-40(s0)
   10802:	97ba                	add	a5,a5,a4
   10804:	639c                	ld	a5,0(a5)
   10806:	fcf43423          	sd	a5,-56(s0)
        off += pnp->cfg_table[off];
   1080a:	fd843703          	ld	a4,-40(s0)
   1080e:	fec42783          	lw	a5,-20(s0)
   10812:	97ba                	add	a5,a5,a4
   10814:	0407c783          	lbu	a5,64(a5)
   10818:	2781                	sext.w	a5,a5
   1081a:	fec42703          	lw	a4,-20(s0)
   1081e:	9fb9                	addw	a5,a5,a4
   10820:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10824:	fe842783          	lw	a5,-24(s0)
   10828:	2785                	addiw	a5,a5,1
   1082a:	fef42423          	sw	a5,-24(s0)
   1082e:	fe842703          	lw	a4,-24(s0)
   10832:	fd042783          	lw	a5,-48(s0)
   10836:	2701                	sext.w	a4,a4
   10838:	2781                	sext.w	a5,a5
   1083a:	faf74ee3          	blt	a4,a5,107f6 <get_dev_bar+0x52>
    }

    for (int i = 0; i < slv_total; i++) {
   1083e:	fe042223          	sw	zero,-28(s0)
   10842:	a8b5                	j	108be <get_dev_bar+0x11a>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10844:	fec42783          	lw	a5,-20(s0)
   10848:	04078793          	addi	a5,a5,64
   1084c:	fd843703          	ld	a4,-40(s0)
   10850:	97ba                	add	a5,a5,a4
   10852:	639c                	ld	a5,0(a5)
   10854:	faf43c23          	sd	a5,-72(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10858:	fec42783          	lw	a5,-20(s0)
   1085c:	27a1                	addiw	a5,a5,8
   1085e:	2781                	sext.w	a5,a5
   10860:	04078793          	addi	a5,a5,64
   10864:	fd843703          	ld	a4,-40(s0)
   10868:	97ba                	add	a5,a5,a4
   1086a:	639c                	ld	a5,0(a5)
   1086c:	fcf43023          	sd	a5,-64(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   10870:	fbe45783          	lhu	a5,-66(s0)
   10874:	fae45703          	lhu	a4,-82(s0)
   10878:	2701                	sext.w	a4,a4
   1087a:	2781                	sext.w	a5,a5
   1087c:	00f71f63          	bne	a4,a5,1089a <get_dev_bar+0xf6>
   10880:	fbc45783          	lhu	a5,-68(s0)
   10884:	fac45703          	lhu	a4,-84(s0)
   10888:	2701                	sext.w	a4,a4
   1088a:	2781                	sext.w	a5,a5
   1088c:	00f71763          	bne	a4,a5,1089a <get_dev_bar+0xf6>
            return scfg.u.xaddr;
   10890:	fc442783          	lw	a5,-60(s0)
   10894:	1782                	slli	a5,a5,0x20
   10896:	9381                	srli	a5,a5,0x20
   10898:	a825                	j	108d0 <get_dev_bar+0x12c>
        }
        off += pnp->cfg_table[off];
   1089a:	fd843703          	ld	a4,-40(s0)
   1089e:	fec42783          	lw	a5,-20(s0)
   108a2:	97ba                	add	a5,a5,a4
   108a4:	0407c783          	lbu	a5,64(a5)
   108a8:	2781                	sext.w	a5,a5
   108aa:	fec42703          	lw	a4,-20(s0)
   108ae:	9fb9                	addw	a5,a5,a4
   108b0:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   108b4:	fe442783          	lw	a5,-28(s0)
   108b8:	2785                	addiw	a5,a5,1
   108ba:	fef42223          	sw	a5,-28(s0)
   108be:	fe442703          	lw	a4,-28(s0)
   108c2:	fd442783          	lw	a5,-44(s0)
   108c6:	2701                	sext.w	a4,a4
   108c8:	2781                	sext.w	a5,a5
   108ca:	f6f74de3          	blt	a4,a5,10844 <get_dev_bar+0xa0>
    }

    return ~0ull;
   108ce:	57fd                	li	a5,-1
}
   108d0:	853e                	mv	a0,a5
   108d2:	6466                	ld	s0,88(sp)
   108d4:	6125                	addi	sp,sp,96
   108d6:	8082                	ret
	...

00000000000108da <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   108da:	7179                	addi	sp,sp,-48
   108dc:	f422                	sd	s0,40(sp)
   108de:	1800                	addi	s0,sp,48
   108e0:	87aa                	mv	a5,a0
   108e2:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   108e6:	100107b7          	lui	a5,0x10010
   108ea:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   108ee:	fe843783          	ld	a5,-24(s0)
   108f2:	439c                	lw	a5,0(a5)
   108f4:	2781                	sext.w	a5,a5
   108f6:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   108fa:	fe344783          	lbu	a5,-29(s0)
   108fe:	f807f793          	andi	a5,a5,-128
   10902:	0ff7f793          	andi	a5,a5,255
   10906:	f7e5                	bnez	a5,108ee <print_char+0x14>
    uart->txdata = ch;
   10908:	fdc42703          	lw	a4,-36(s0)
   1090c:	fe843783          	ld	a5,-24(s0)
   10910:	c398                	sw	a4,0(a5)
    return 0;
   10912:	4781                	li	a5,0
}
   10914:	853e                	mv	a0,a5
   10916:	7422                	ld	s0,40(sp)
   10918:	6145                	addi	sp,sp,48
   1091a:	8082                	ret

000000000001091c <print_uart>:

void print_uart(const char *buf, int sz) {
   1091c:	7139                	addi	sp,sp,-64
   1091e:	fc22                	sd	s0,56(sp)
   10920:	0080                	addi	s0,sp,64
   10922:	fca43423          	sd	a0,-56(s0)
   10926:	87ae                	mv	a5,a1
   10928:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   1092c:	100107b7          	lui	a5,0x10010
   10930:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   10934:	fe042623          	sw	zero,-20(s0)
   10938:	a83d                	j	10976 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   1093a:	fe043783          	ld	a5,-32(s0)
   1093e:	439c                	lw	a5,0(a5)
   10940:	2781                	sext.w	a5,a5
   10942:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   10946:	fdb44783          	lbu	a5,-37(s0)
   1094a:	f807f793          	andi	a5,a5,-128
   1094e:	0ff7f793          	andi	a5,a5,255
   10952:	f7e5                	bnez	a5,1093a <print_uart+0x1e>
        uart->txdata = buf[i];
   10954:	fec42783          	lw	a5,-20(s0)
   10958:	fc843703          	ld	a4,-56(s0)
   1095c:	97ba                	add	a5,a5,a4
   1095e:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffe374>
   10962:	0007871b          	sext.w	a4,a5
   10966:	fe043783          	ld	a5,-32(s0)
   1096a:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   1096c:	fec42783          	lw	a5,-20(s0)
   10970:	2785                	addiw	a5,a5,1
   10972:	fef42623          	sw	a5,-20(s0)
   10976:	fec42703          	lw	a4,-20(s0)
   1097a:	fc442783          	lw	a5,-60(s0)
   1097e:	2701                	sext.w	a4,a4
   10980:	2781                	sext.w	a5,a5
   10982:	faf74ce3          	blt	a4,a5,1093a <print_uart+0x1e>
    }
}
   10986:	0001                	nop
   10988:	7462                	ld	s0,56(sp)
   1098a:	6121                	addi	sp,sp,64
   1098c:	8082                	ret

000000000001098e <print_uart_hex>:

void print_uart_hex(long val) {
   1098e:	7139                	addi	sp,sp,-64
   10990:	fc22                	sd	s0,56(sp)
   10992:	0080                	addi	s0,sp,64
   10994:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10998:	100107b7          	lui	a5,0x10010
   1099c:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   109a0:	fe042423          	sw	zero,-24(s0)
   109a4:	a041                	j	10a24 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   109a6:	fe043783          	ld	a5,-32(s0)
   109aa:	439c                	lw	a5,0(a5)
   109ac:	2781                	sext.w	a5,a5
   109ae:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   109b2:	fdb44783          	lbu	a5,-37(s0)
   109b6:	f807f793          	andi	a5,a5,-128
   109ba:	0ff7f793          	andi	a5,a5,255
   109be:	f7e5                	bnez	a5,109a6 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   109c0:	473d                	li	a4,15
   109c2:	fe842783          	lw	a5,-24(s0)
   109c6:	40f707bb          	subw	a5,a4,a5
   109ca:	2781                	sext.w	a5,a5
   109cc:	0027979b          	slliw	a5,a5,0x2
   109d0:	2781                	sext.w	a5,a5
   109d2:	fc843703          	ld	a4,-56(s0)
   109d6:	40f757b3          	sra	a5,a4,a5
   109da:	0ff7f793          	andi	a5,a5,255
   109de:	8bbd                	andi	a5,a5,15
   109e0:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   109e4:	fdf44783          	lbu	a5,-33(s0)
   109e8:	0ff7f713          	andi	a4,a5,255
   109ec:	47a5                	li	a5,9
   109ee:	00e7e963          	bltu	a5,a4,10a00 <print_uart_hex+0x72>
            s = t + '0';
   109f2:	fdf44783          	lbu	a5,-33(s0)
   109f6:	0307879b          	addiw	a5,a5,48
   109fa:	fef407a3          	sb	a5,-17(s0)
   109fe:	a039                	j	10a0c <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   10a00:	fdf44783          	lbu	a5,-33(s0)
   10a04:	0577879b          	addiw	a5,a5,87
   10a08:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   10a0c:	fef44783          	lbu	a5,-17(s0)
   10a10:	0007871b          	sext.w	a4,a5
   10a14:	fe043783          	ld	a5,-32(s0)
   10a18:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   10a1a:	fe842783          	lw	a5,-24(s0)
   10a1e:	2785                	addiw	a5,a5,1
   10a20:	fef42423          	sw	a5,-24(s0)
   10a24:	fe842783          	lw	a5,-24(s0)
   10a28:	0007871b          	sext.w	a4,a5
   10a2c:	47bd                	li	a5,15
   10a2e:	f6e7dce3          	ble	a4,a5,109a6 <print_uart_hex+0x18>
    }
}
   10a32:	0001                	nop
   10a34:	7462                	ld	s0,56(sp)
   10a36:	6121                	addi	sp,sp,64
   10a38:	8082                	ret

0000000000010a3a <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   10a3a:	7119                	addi	sp,sp,-128
   10a3c:	fc86                	sd	ra,120(sp)
   10a3e:	f8a2                	sd	s0,112(sp)
   10a40:	0100                	addi	s0,sp,128
   10a42:	f8a43c23          	sd	a0,-104(s0)
   10a46:	87ae                	mv	a5,a1
   10a48:	8736                	mv	a4,a3
   10a4a:	f8f42a23          	sw	a5,-108(s0)
   10a4e:	87b2                	mv	a5,a2
   10a50:	f8f42823          	sw	a5,-112(s0)
   10a54:	87ba                	mv	a5,a4
   10a56:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   10a5a:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   10a5e:	f9442783          	lw	a5,-108(s0)
   10a62:	f9843703          	ld	a4,-104(s0)
   10a66:	02f776b3          	remu	a3,a4,a5
   10a6a:	fec42783          	lw	a5,-20(s0)
   10a6e:	0017871b          	addiw	a4,a5,1
   10a72:	fee42623          	sw	a4,-20(s0)
   10a76:	0ff6f713          	andi	a4,a3,255
   10a7a:	ff040693          	addi	a3,s0,-16
   10a7e:	97b6                	add	a5,a5,a3
   10a80:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffe32c>
        if (num < base) {
   10a84:	f9442783          	lw	a5,-108(s0)
   10a88:	f9843703          	ld	a4,-104(s0)
   10a8c:	00f76b63          	bltu	a4,a5,10aa2 <printnum+0x68>
            break;
        }
        num /= base;
   10a90:	f9442783          	lw	a5,-108(s0)
   10a94:	f9843703          	ld	a4,-104(s0)
   10a98:	02f757b3          	divu	a5,a4,a5
   10a9c:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   10aa0:	bf7d                	j	10a5e <printnum+0x24>
            break;
   10aa2:	0001                	nop
    }

    while (width-- > pos) {
   10aa4:	a801                	j	10ab4 <printnum+0x7a>
        print_char(padc);
   10aa6:	f8c42783          	lw	a5,-116(s0)
   10aaa:	853e                	mv	a0,a5
   10aac:	00000097          	auipc	ra,0x0
   10ab0:	e2e080e7          	jalr	-466(ra) # 108da <print_char>
    while (width-- > pos) {
   10ab4:	f9042783          	lw	a5,-112(s0)
   10ab8:	fff7871b          	addiw	a4,a5,-1
   10abc:	f8e42823          	sw	a4,-112(s0)
   10ac0:	fec42703          	lw	a4,-20(s0)
   10ac4:	2701                	sext.w	a4,a4
   10ac6:	fef740e3          	blt	a4,a5,10aa6 <printnum+0x6c>
    }


    while (pos-- > 0) {
   10aca:	a089                	j	10b0c <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   10acc:	fec42783          	lw	a5,-20(s0)
   10ad0:	ff040713          	addi	a4,s0,-16
   10ad4:	97ba                	add	a5,a5,a4
   10ad6:	fb87c783          	lbu	a5,-72(a5)
   10ada:	0007871b          	sext.w	a4,a5
   10ade:	fec42783          	lw	a5,-20(s0)
   10ae2:	ff040693          	addi	a3,s0,-16
   10ae6:	97b6                	add	a5,a5,a3
   10ae8:	fb87c783          	lbu	a5,-72(a5)
   10aec:	86be                	mv	a3,a5
   10aee:	47a5                	li	a5,9
   10af0:	00d7f563          	bleu	a3,a5,10afa <printnum+0xc0>
   10af4:	05700793          	li	a5,87
   10af8:	a019                	j	10afe <printnum+0xc4>
   10afa:	03000793          	li	a5,48
   10afe:	9fb9                	addw	a5,a5,a4
   10b00:	2781                	sext.w	a5,a5
   10b02:	853e                	mv	a0,a5
   10b04:	00000097          	auipc	ra,0x0
   10b08:	dd6080e7          	jalr	-554(ra) # 108da <print_char>
    while (pos-- > 0) {
   10b0c:	fec42783          	lw	a5,-20(s0)
   10b10:	fff7871b          	addiw	a4,a5,-1
   10b14:	fee42623          	sw	a4,-20(s0)
   10b18:	faf04ae3          	bgtz	a5,10acc <printnum+0x92>
    }
}
   10b1c:	0001                	nop
   10b1e:	70e6                	ld	ra,120(sp)
   10b20:	7446                	ld	s0,112(sp)
   10b22:	6109                	addi	sp,sp,128
   10b24:	8082                	ret

0000000000010b26 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   10b26:	1101                	addi	sp,sp,-32
   10b28:	ec22                	sd	s0,24(sp)
   10b2a:	1000                	addi	s0,sp,32
   10b2c:	fea43423          	sd	a0,-24(s0)
   10b30:	87ae                	mv	a5,a1
   10b32:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10b36:	fe442783          	lw	a5,-28(s0)
   10b3a:	0007871b          	sext.w	a4,a5
   10b3e:	4785                	li	a5,1
   10b40:	00e7dc63          	ble	a4,a5,10b58 <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   10b44:	fe843783          	ld	a5,-24(s0)
   10b48:	639c                	ld	a5,0(a5)
   10b4a:	00878693          	addi	a3,a5,8
   10b4e:	fe843703          	ld	a4,-24(s0)
   10b52:	e314                	sd	a3,0(a4)
   10b54:	639c                	ld	a5,0(a5)
   10b56:	a815                	j	10b8a <getuint+0x64>
    } else if (lflag) {
   10b58:	fe442783          	lw	a5,-28(s0)
   10b5c:	2781                	sext.w	a5,a5
   10b5e:	cb99                	beqz	a5,10b74 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   10b60:	fe843783          	ld	a5,-24(s0)
   10b64:	639c                	ld	a5,0(a5)
   10b66:	00878693          	addi	a3,a5,8
   10b6a:	fe843703          	ld	a4,-24(s0)
   10b6e:	e314                	sd	a3,0(a4)
   10b70:	639c                	ld	a5,0(a5)
   10b72:	a821                	j	10b8a <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   10b74:	fe843783          	ld	a5,-24(s0)
   10b78:	639c                	ld	a5,0(a5)
   10b7a:	00878693          	addi	a3,a5,8
   10b7e:	fe843703          	ld	a4,-24(s0)
   10b82:	e314                	sd	a3,0(a4)
   10b84:	439c                	lw	a5,0(a5)
   10b86:	1782                	slli	a5,a5,0x20
   10b88:	9381                	srli	a5,a5,0x20
}
   10b8a:	853e                	mv	a0,a5
   10b8c:	6462                	ld	s0,24(sp)
   10b8e:	6105                	addi	sp,sp,32
   10b90:	8082                	ret

0000000000010b92 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   10b92:	1101                	addi	sp,sp,-32
   10b94:	ec22                	sd	s0,24(sp)
   10b96:	1000                	addi	s0,sp,32
   10b98:	fea43423          	sd	a0,-24(s0)
   10b9c:	87ae                	mv	a5,a1
   10b9e:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10ba2:	fe442783          	lw	a5,-28(s0)
   10ba6:	0007871b          	sext.w	a4,a5
   10baa:	4785                	li	a5,1
   10bac:	00e7dc63          	ble	a4,a5,10bc4 <getint+0x32>
        return va_arg(*ap, long long);
   10bb0:	fe843783          	ld	a5,-24(s0)
   10bb4:	639c                	ld	a5,0(a5)
   10bb6:	00878693          	addi	a3,a5,8
   10bba:	fe843703          	ld	a4,-24(s0)
   10bbe:	e314                	sd	a3,0(a4)
   10bc0:	639c                	ld	a5,0(a5)
   10bc2:	a805                	j	10bf2 <getint+0x60>
    } else if (lflag) {
   10bc4:	fe442783          	lw	a5,-28(s0)
   10bc8:	2781                	sext.w	a5,a5
   10bca:	cb99                	beqz	a5,10be0 <getint+0x4e>
        return va_arg(*ap, long);
   10bcc:	fe843783          	ld	a5,-24(s0)
   10bd0:	639c                	ld	a5,0(a5)
   10bd2:	00878693          	addi	a3,a5,8
   10bd6:	fe843703          	ld	a4,-24(s0)
   10bda:	e314                	sd	a3,0(a4)
   10bdc:	639c                	ld	a5,0(a5)
   10bde:	a811                	j	10bf2 <getint+0x60>
    }
    return va_arg(*ap, int);
   10be0:	fe843783          	ld	a5,-24(s0)
   10be4:	639c                	ld	a5,0(a5)
   10be6:	00878693          	addi	a3,a5,8
   10bea:	fe843703          	ld	a4,-24(s0)
   10bee:	e314                	sd	a3,0(a4)
   10bf0:	439c                	lw	a5,0(a5)
}
   10bf2:	853e                	mv	a0,a5
   10bf4:	6462                	ld	s0,24(sp)
   10bf6:	6105                	addi	sp,sp,32
   10bf8:	8082                	ret

0000000000010bfa <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   10bfa:	711d                	addi	sp,sp,-96
   10bfc:	ec86                	sd	ra,88(sp)
   10bfe:	e8a2                	sd	s0,80(sp)
   10c00:	e4a6                	sd	s1,72(sp)
   10c02:	e0ca                	sd	s2,64(sp)
   10c04:	1080                	addi	s0,sp,96
   10c06:	faa43423          	sd	a0,-88(s0)
   10c0a:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   10c0e:	a819                	j	10c24 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   10c10:	2c048d63          	beqz	s1,10eea <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   10c14:	fa843783          	ld	a5,-88(s0)
   10c18:	0785                	addi	a5,a5,1
   10c1a:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   10c1e:	8526                	mv	a0,s1
   10c20:	cbbff0ef          	jal	ra,108da <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   10c24:	fa843783          	ld	a5,-88(s0)
   10c28:	0007c783          	lbu	a5,0(a5)
   10c2c:	0007849b          	sext.w	s1,a5
   10c30:	8726                	mv	a4,s1
   10c32:	02500793          	li	a5,37
   10c36:	fcf71de3          	bne	a4,a5,10c10 <vprintfmt_lib+0x16>
        }
        fmt++;
   10c3a:	fa843783          	ld	a5,-88(s0)
   10c3e:	0785                	addi	a5,a5,1
   10c40:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   10c44:	fa843783          	ld	a5,-88(s0)
   10c48:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   10c4c:	02000793          	li	a5,32
   10c50:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   10c54:	57fd                	li	a5,-1
   10c56:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   10c5a:	57fd                	li	a5,-1
   10c5c:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   10c60:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   10c64:	fa843783          	ld	a5,-88(s0)
   10c68:	00178713          	addi	a4,a5,1
   10c6c:	fae43423          	sd	a4,-88(s0)
   10c70:	0007c783          	lbu	a5,0(a5)
   10c74:	0007849b          	sext.w	s1,a5
   10c78:	fdd4869b          	addiw	a3,s1,-35
   10c7c:	0006871b          	sext.w	a4,a3
   10c80:	05500793          	li	a5,85
   10c84:	24e7e963          	bltu	a5,a4,10ed6 <vprintfmt_lib+0x2dc>
   10c88:	02069793          	slli	a5,a3,0x20
   10c8c:	9381                	srli	a5,a5,0x20
   10c8e:	00279713          	slli	a4,a5,0x2
   10c92:	67c5                	lui	a5,0x11
   10c94:	7f878793          	addi	a5,a5,2040 # 117f8 <strnlen+0x10c>
   10c98:	97ba                	add	a5,a5,a4
   10c9a:	439c                	lw	a5,0(a5)
   10c9c:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   10c9e:	02d00793          	li	a5,45
   10ca2:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10ca6:	bf7d                	j	10c64 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   10ca8:	03000793          	li	a5,48
   10cac:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10cb0:	bf55                	j	10c64 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   10cb2:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   10cb6:	fc842703          	lw	a4,-56(s0)
   10cba:	87ba                	mv	a5,a4
   10cbc:	0027979b          	slliw	a5,a5,0x2
   10cc0:	9fb9                	addw	a5,a5,a4
   10cc2:	0017979b          	slliw	a5,a5,0x1
   10cc6:	2781                	sext.w	a5,a5
   10cc8:	9fa5                	addw	a5,a5,s1
   10cca:	2781                	sext.w	a5,a5
   10ccc:	fd07879b          	addiw	a5,a5,-48
   10cd0:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   10cd4:	fa843783          	ld	a5,-88(s0)
   10cd8:	0007c783          	lbu	a5,0(a5)
   10cdc:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   10ce0:	8726                	mv	a4,s1
   10ce2:	02f00793          	li	a5,47
   10ce6:	02e7df63          	ble	a4,a5,10d24 <vprintfmt_lib+0x12a>
   10cea:	8726                	mv	a4,s1
   10cec:	03900793          	li	a5,57
   10cf0:	02e7ca63          	blt	a5,a4,10d24 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   10cf4:	fa843783          	ld	a5,-88(s0)
   10cf8:	0785                	addi	a5,a5,1
   10cfa:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   10cfe:	bf65                	j	10cb6 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   10d00:	fa043783          	ld	a5,-96(s0)
   10d04:	00878713          	addi	a4,a5,8
   10d08:	fae43023          	sd	a4,-96(s0)
   10d0c:	439c                	lw	a5,0(a5)
   10d0e:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   10d12:	a811                	j	10d26 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   10d14:	fcc42783          	lw	a5,-52(s0)
   10d18:	2781                	sext.w	a5,a5
   10d1a:	f407d5e3          	bgez	a5,10c64 <vprintfmt_lib+0x6a>
                width = 0;
   10d1e:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   10d22:	b789                	j	10c64 <vprintfmt_lib+0x6a>
            goto process_precision;
   10d24:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   10d26:	fcc42783          	lw	a5,-52(s0)
   10d2a:	2781                	sext.w	a5,a5
   10d2c:	f207dce3          	bgez	a5,10c64 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   10d30:	fc842783          	lw	a5,-56(s0)
   10d34:	fcf42623          	sw	a5,-52(s0)
   10d38:	57fd                	li	a5,-1
   10d3a:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   10d3e:	b71d                	j	10c64 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   10d40:	fd042783          	lw	a5,-48(s0)
   10d44:	2785                	addiw	a5,a5,1
   10d46:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   10d4a:	bf29                	j	10c64 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   10d4c:	fa043783          	ld	a5,-96(s0)
   10d50:	00878713          	addi	a4,a5,8
   10d54:	fae43023          	sd	a4,-96(s0)
   10d58:	439c                	lw	a5,0(a5)
   10d5a:	853e                	mv	a0,a5
   10d5c:	b7fff0ef          	jal	ra,108da <print_char>
            break;
   10d60:	a261                	j	10ee8 <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   10d62:	fa043783          	ld	a5,-96(s0)
   10d66:	00878713          	addi	a4,a5,8
   10d6a:	fae43023          	sd	a4,-96(s0)
   10d6e:	0007b903          	ld	s2,0(a5)
   10d72:	00091563          	bnez	s2,10d7c <vprintfmt_lib+0x182>
                p = "(null)";
   10d76:	67c5                	lui	a5,0x11
   10d78:	7f078913          	addi	s2,a5,2032 # 117f0 <strnlen+0x104>
            }
            if (width > 0 && padc != '-') {
   10d7c:	fcc42783          	lw	a5,-52(s0)
   10d80:	2781                	sext.w	a5,a5
   10d82:	06f05263          	blez	a5,10de6 <vprintfmt_lib+0x1ec>
   10d86:	fc744783          	lbu	a5,-57(s0)
   10d8a:	0ff7f713          	andi	a4,a5,255
   10d8e:	02d00793          	li	a5,45
   10d92:	04f70a63          	beq	a4,a5,10de6 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10d96:	fc842783          	lw	a5,-56(s0)
   10d9a:	85be                	mv	a1,a5
   10d9c:	854a                	mv	a0,s2
   10d9e:	14f000ef          	jal	ra,116ec <strnlen>
   10da2:	87aa                	mv	a5,a0
   10da4:	873e                	mv	a4,a5
   10da6:	fcc42783          	lw	a5,-52(s0)
   10daa:	9f99                	subw	a5,a5,a4
   10dac:	fcf42623          	sw	a5,-52(s0)
   10db0:	a821                	j	10dc8 <vprintfmt_lib+0x1ce>
                    print_char(padc);
   10db2:	fc744783          	lbu	a5,-57(s0)
   10db6:	2781                	sext.w	a5,a5
   10db8:	853e                	mv	a0,a5
   10dba:	b21ff0ef          	jal	ra,108da <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10dbe:	fcc42783          	lw	a5,-52(s0)
   10dc2:	37fd                	addiw	a5,a5,-1
   10dc4:	fcf42623          	sw	a5,-52(s0)
   10dc8:	fcc42783          	lw	a5,-52(s0)
   10dcc:	2781                	sext.w	a5,a5
   10dce:	fef042e3          	bgtz	a5,10db2 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10dd2:	a811                	j	10de6 <vprintfmt_lib+0x1ec>
                print_char(ch);
   10dd4:	8526                	mv	a0,s1
   10dd6:	b05ff0ef          	jal	ra,108da <print_char>
                p++;
   10dda:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10ddc:	fcc42783          	lw	a5,-52(s0)
   10de0:	37fd                	addiw	a5,a5,-1
   10de2:	fcf42623          	sw	a5,-52(s0)
   10de6:	00094783          	lbu	a5,0(s2)
   10dea:	0007849b          	sext.w	s1,a5
   10dee:	c895                	beqz	s1,10e22 <vprintfmt_lib+0x228>
   10df0:	fc842783          	lw	a5,-56(s0)
   10df4:	2781                	sext.w	a5,a5
   10df6:	fc07cfe3          	bltz	a5,10dd4 <vprintfmt_lib+0x1da>
   10dfa:	fc842783          	lw	a5,-56(s0)
   10dfe:	37fd                	addiw	a5,a5,-1
   10e00:	fcf42423          	sw	a5,-56(s0)
   10e04:	fc842783          	lw	a5,-56(s0)
   10e08:	2781                	sext.w	a5,a5
   10e0a:	fc07d5e3          	bgez	a5,10dd4 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   10e0e:	a811                	j	10e22 <vprintfmt_lib+0x228>
                print_char(' ');
   10e10:	02000513          	li	a0,32
   10e14:	ac7ff0ef          	jal	ra,108da <print_char>
            for (; width > 0; width--) {
   10e18:	fcc42783          	lw	a5,-52(s0)
   10e1c:	37fd                	addiw	a5,a5,-1
   10e1e:	fcf42623          	sw	a5,-52(s0)
   10e22:	fcc42783          	lw	a5,-52(s0)
   10e26:	2781                	sext.w	a5,a5
   10e28:	fef044e3          	bgtz	a5,10e10 <vprintfmt_lib+0x216>
            }
            break;
   10e2c:	a875                	j	10ee8 <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   10e2e:	fd042703          	lw	a4,-48(s0)
   10e32:	fa040793          	addi	a5,s0,-96
   10e36:	85ba                	mv	a1,a4
   10e38:	853e                	mv	a0,a5
   10e3a:	00000097          	auipc	ra,0x0
   10e3e:	d58080e7          	jalr	-680(ra) # 10b92 <getint>
   10e42:	87aa                	mv	a5,a0
   10e44:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   10e48:	fd843783          	ld	a5,-40(s0)
   10e4c:	0007dc63          	bgez	a5,10e64 <vprintfmt_lib+0x26a>
                print_char('-');
   10e50:	02d00513          	li	a0,45
   10e54:	a87ff0ef          	jal	ra,108da <print_char>
                num = -(long long) num;
   10e58:	fd843783          	ld	a5,-40(s0)
   10e5c:	40f007b3          	neg	a5,a5
   10e60:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   10e64:	47a9                	li	a5,10
   10e66:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   10e6a:	a089                	j	10eac <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   10e6c:	47a9                	li	a5,10
   10e6e:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10e72:	a01d                	j	10e98 <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   10e74:	47a1                	li	a5,8
   10e76:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10e7a:	a839                	j	10e98 <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   10e7c:	4785                	li	a5,1
   10e7e:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   10e82:	03000513          	li	a0,48
   10e86:	a55ff0ef          	jal	ra,108da <print_char>
            print_char('x');
   10e8a:	07800513          	li	a0,120
   10e8e:	a4dff0ef          	jal	ra,108da <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   10e92:	47c1                	li	a5,16
   10e94:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   10e98:	fd042703          	lw	a4,-48(s0)
   10e9c:	fa040793          	addi	a5,s0,-96
   10ea0:	85ba                	mv	a1,a4
   10ea2:	853e                	mv	a0,a5
   10ea4:	c83ff0ef          	jal	ra,10b26 <getuint>
   10ea8:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   10eac:	fc744783          	lbu	a5,-57(s0)
   10eb0:	0007869b          	sext.w	a3,a5
   10eb4:	fcc42703          	lw	a4,-52(s0)
   10eb8:	fd442783          	lw	a5,-44(s0)
   10ebc:	863a                	mv	a2,a4
   10ebe:	85be                	mv	a1,a5
   10ec0:	fd843503          	ld	a0,-40(s0)
   10ec4:	00000097          	auipc	ra,0x0
   10ec8:	b76080e7          	jalr	-1162(ra) # 10a3a <printnum>
            break;
   10ecc:	a831                	j	10ee8 <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   10ece:	8526                	mv	a0,s1
   10ed0:	a0bff0ef          	jal	ra,108da <print_char>
            break;
   10ed4:	a811                	j	10ee8 <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   10ed6:	02500513          	li	a0,37
   10eda:	a01ff0ef          	jal	ra,108da <print_char>
            fmt = last_fmt;
   10ede:	fb843783          	ld	a5,-72(s0)
   10ee2:	faf43423          	sd	a5,-88(s0)
            break;
   10ee6:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   10ee8:	bb35                	j	10c24 <vprintfmt_lib+0x2a>
                return;
   10eea:	0001                	nop
        }
    }
}
   10eec:	60e6                	ld	ra,88(sp)
   10eee:	6446                	ld	s0,80(sp)
   10ef0:	64a6                	ld	s1,72(sp)
   10ef2:	6906                	ld	s2,64(sp)
   10ef4:	6125                	addi	sp,sp,96
   10ef6:	8082                	ret

0000000000010ef8 <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   10ef8:	7159                	addi	sp,sp,-112
   10efa:	f406                	sd	ra,40(sp)
   10efc:	f022                	sd	s0,32(sp)
   10efe:	1800                	addi	s0,sp,48
   10f00:	fca43c23          	sd	a0,-40(s0)
   10f04:	e40c                	sd	a1,8(s0)
   10f06:	e810                	sd	a2,16(s0)
   10f08:	ec14                	sd	a3,24(s0)
   10f0a:	f018                	sd	a4,32(s0)
   10f0c:	f41c                	sd	a5,40(s0)
   10f0e:	03043823          	sd	a6,48(s0)
   10f12:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   10f16:	04040793          	addi	a5,s0,64
   10f1a:	fc878793          	addi	a5,a5,-56
   10f1e:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   10f22:	fe843783          	ld	a5,-24(s0)
   10f26:	85be                	mv	a1,a5
   10f28:	fd843503          	ld	a0,-40(s0)
   10f2c:	00000097          	auipc	ra,0x0
   10f30:	cce080e7          	jalr	-818(ra) # 10bfa <vprintfmt_lib>

    va_end(arg);
}
   10f34:	0001                	nop
   10f36:	70a2                	ld	ra,40(sp)
   10f38:	7402                	ld	s0,32(sp)
   10f3a:	6165                	addi	sp,sp,112
   10f3c:	8082                	ret

0000000000010f3e <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   10f3e:	1141                	addi	sp,sp,-16
   10f40:	e422                	sd	s0,8(sp)
   10f42:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   10f44:	0001                	nop
   10f46:	6422                	ld	s0,8(sp)
   10f48:	0141                	addi	sp,sp,16
   10f4a:	8082                	ret

0000000000010f4c <sd_get_byte>:

uint8_t sd_get_byte() {
   10f4c:	1101                	addi	sp,sp,-32
   10f4e:	ec22                	sd	s0,24(sp)
   10f50:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10f52:	100507b7          	lui	a5,0x10050
   10f56:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   10f5a:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   10f5e:	fe843783          	ld	a5,-24(s0)
   10f62:	47fc                	lw	a5,76(a5)
   10f64:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   10f68:	fe442783          	lw	a5,-28(s0)
   10f6c:	fe07c9e3          	bltz	a5,10f5e <sd_get_byte+0x12>
    return (uint8_t)rx;
   10f70:	fe442783          	lw	a5,-28(s0)
   10f74:	0ff7f793          	andi	a5,a5,255
}
   10f78:	853e                	mv	a0,a5
   10f7a:	6462                	ld	s0,24(sp)
   10f7c:	6105                	addi	sp,sp,32
   10f7e:	8082                	ret

0000000000010f80 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   10f80:	7179                	addi	sp,sp,-48
   10f82:	f422                	sd	s0,40(sp)
   10f84:	1800                	addi	s0,sp,48
   10f86:	87aa                	mv	a5,a0
   10f88:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10f8c:	100507b7          	lui	a5,0x10050
   10f90:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   10f94:	0001                	nop
   10f96:	fe843783          	ld	a5,-24(s0)
   10f9a:	47bc                	lw	a5,72(a5)
   10f9c:	2781                	sext.w	a5,a5
   10f9e:	2781                	sext.w	a5,a5
   10fa0:	fe07cbe3          	bltz	a5,10f96 <sd_set_byte+0x16>
    p->txdata = v;
   10fa4:	fdf44783          	lbu	a5,-33(s0)
   10fa8:	0007871b          	sext.w	a4,a5
   10fac:	fe843783          	ld	a5,-24(s0)
   10fb0:	c7b8                	sw	a4,72(a5)
}
   10fb2:	0001                	nop
   10fb4:	7422                	ld	s0,40(sp)
   10fb6:	6145                	addi	sp,sp,48
   10fb8:	8082                	ret

0000000000010fba <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   10fba:	7179                	addi	sp,sp,-48
   10fbc:	f406                	sd	ra,40(sp)
   10fbe:	f022                	sd	s0,32(sp)
   10fc0:	1800                	addi	s0,sp,48
   10fc2:	fca43c23          	sd	a0,-40(s0)
   10fc6:	87ae                	mv	a5,a1
   10fc8:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10fcc:	100507b7          	lui	a5,0x10050
   10fd0:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   10fd4:	f79ff0ef          	jal	ra,10f4c <sd_get_byte>
   10fd8:	87aa                	mv	a5,a0
   10fda:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   10fde:	a831                	j	10ffa <sd_read_block+0x40>
       *buf = sd_get_byte();
   10fe0:	f6dff0ef          	jal	ra,10f4c <sd_get_byte>
   10fe4:	87aa                	mv	a5,a0
   10fe6:	873e                	mv	a4,a5
   10fe8:	fd843783          	ld	a5,-40(s0)
   10fec:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003e374>
       buf++;
   10ff0:	fd843783          	ld	a5,-40(s0)
   10ff4:	0785                	addi	a5,a5,1
   10ff6:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   10ffa:	fd442783          	lw	a5,-44(s0)
   10ffe:	fff7871b          	addiw	a4,a5,-1
   11002:	fce42a23          	sw	a4,-44(s0)
   11006:	ffe9                	bnez	a5,10fe0 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   11008:	f45ff0ef          	jal	ra,10f4c <sd_get_byte>
   1100c:	87aa                	mv	a5,a0
   1100e:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   11012:	f3bff0ef          	jal	ra,10f4c <sd_get_byte>
   11016:	87aa                	mv	a5,a0
   11018:	fef40323          	sb	a5,-26(s0)
}
   1101c:	0001                	nop
   1101e:	70a2                	ld	ra,40(sp)
   11020:	7402                	ld	s0,32(sp)
   11022:	6145                	addi	sp,sp,48
   11024:	8082                	ret

0000000000011026 <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   11026:	7179                	addi	sp,sp,-48
   11028:	f406                	sd	ra,40(sp)
   1102a:	f022                	sd	s0,32(sp)
   1102c:	1800                	addi	s0,sp,48
   1102e:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11032:	100507b7          	lui	a5,0x10050
   11036:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   1103a:	05200513          	li	a0,82
   1103e:	f43ff0ef          	jal	ra,10f80 <sd_set_byte>
    sd_set_byte(0x00);
   11042:	4501                	li	a0,0
   11044:	f3dff0ef          	jal	ra,10f80 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11048:	fd843783          	ld	a5,-40(s0)
   1104c:	83c1                	srli	a5,a5,0x10
   1104e:	0ff7f793          	andi	a5,a5,255
   11052:	853e                	mv	a0,a5
   11054:	f2dff0ef          	jal	ra,10f80 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11058:	fd843783          	ld	a5,-40(s0)
   1105c:	83a1                	srli	a5,a5,0x8
   1105e:	0ff7f793          	andi	a5,a5,255
   11062:	853e                	mv	a0,a5
   11064:	f1dff0ef          	jal	ra,10f80 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11068:	fd843783          	ld	a5,-40(s0)
   1106c:	0ff7f793          	andi	a5,a5,255
   11070:	853e                	mv	a0,a5
   11072:	f0fff0ef          	jal	ra,10f80 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11076:	0ff00513          	li	a0,255
   1107a:	f07ff0ef          	jal	ra,10f80 <sd_set_byte>

    cmdresp = sd_get_byte();
   1107e:	00000097          	auipc	ra,0x0
   11082:	ece080e7          	jalr	-306(ra) # 10f4c <sd_get_byte>
   11086:	87aa                	mv	a5,a0
   11088:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   1108c:	fe744783          	lbu	a5,-25(s0)
   11090:	2781                	sext.w	a5,a5
}
   11092:	853e                	mv	a0,a5
   11094:	70a2                	ld	ra,40(sp)
   11096:	7402                	ld	s0,32(sp)
   11098:	6145                	addi	sp,sp,48
   1109a:	8082                	ret

000000000001109c <sd_stop_reading>:

int sd_stop_reading() {
   1109c:	1101                	addi	sp,sp,-32
   1109e:	ec06                	sd	ra,24(sp)
   110a0:	e822                	sd	s0,16(sp)
   110a2:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   110a4:	100507b7          	lui	a5,0x10050
   110a8:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   110ac:	04c00513          	li	a0,76
   110b0:	00000097          	auipc	ra,0x0
   110b4:	ed0080e7          	jalr	-304(ra) # 10f80 <sd_set_byte>
    sd_set_byte(0);
   110b8:	4501                	li	a0,0
   110ba:	00000097          	auipc	ra,0x0
   110be:	ec6080e7          	jalr	-314(ra) # 10f80 <sd_set_byte>
    sd_set_byte(0);
   110c2:	4501                	li	a0,0
   110c4:	00000097          	auipc	ra,0x0
   110c8:	ebc080e7          	jalr	-324(ra) # 10f80 <sd_set_byte>
    sd_set_byte(0);
   110cc:	4501                	li	a0,0
   110ce:	00000097          	auipc	ra,0x0
   110d2:	eb2080e7          	jalr	-334(ra) # 10f80 <sd_set_byte>
    sd_set_byte(0);
   110d6:	4501                	li	a0,0
   110d8:	00000097          	auipc	ra,0x0
   110dc:	ea8080e7          	jalr	-344(ra) # 10f80 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   110e0:	0ff00513          	li	a0,255
   110e4:	00000097          	auipc	ra,0x0
   110e8:	e9c080e7          	jalr	-356(ra) # 10f80 <sd_set_byte>
    cmdresp = sd_get_byte();
   110ec:	e61ff0ef          	jal	ra,10f4c <sd_get_byte>
   110f0:	87aa                	mv	a5,a0
   110f2:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   110f6:	fe744783          	lbu	a5,-25(s0)
   110fa:	2781                	sext.w	a5,a5
}
   110fc:	853e                	mv	a0,a5
   110fe:	60e2                	ld	ra,24(sp)
   11100:	6442                	ld	s0,16(sp)
   11102:	6105                	addi	sp,sp,32
   11104:	8082                	ret

0000000000011106 <is_empty_gui>:
#include "axi_maps.h"
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"

int is_empty_gui(const struct gpt_guid *guid) {
   11106:	1101                	addi	sp,sp,-32
   11108:	ec22                	sd	s0,24(sp)
   1110a:	1000                	addi	s0,sp,32
   1110c:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11110:	fe843783          	ld	a5,-24(s0)
   11114:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11116:	e7ad                	bnez	a5,11180 <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11118:	fe843783          	ld	a5,-24(s0)
   1111c:	0047d783          	lhu	a5,4(a5) # 10050004 <_end+0x1003e378>
   11120:	e3a5                	bnez	a5,11180 <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11122:	fe843783          	ld	a5,-24(s0)
   11126:	0067d783          	lhu	a5,6(a5)
   1112a:	ebb9                	bnez	a5,11180 <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   1112c:	fe843783          	ld	a5,-24(s0)
   11130:	0087c783          	lbu	a5,8(a5)
   11134:	e7b1                	bnez	a5,11180 <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11136:	fe843783          	ld	a5,-24(s0)
   1113a:	0097c783          	lbu	a5,9(a5)
   1113e:	e3a9                	bnez	a5,11180 <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11140:	fe843783          	ld	a5,-24(s0)
   11144:	00a7c783          	lbu	a5,10(a5)
   11148:	ef85                	bnez	a5,11180 <is_empty_gui+0x7a>
   1114a:	fe843783          	ld	a5,-24(s0)
   1114e:	00b7c783          	lbu	a5,11(a5)
   11152:	e79d                	bnez	a5,11180 <is_empty_gui+0x7a>
   11154:	fe843783          	ld	a5,-24(s0)
   11158:	00c7c783          	lbu	a5,12(a5)
   1115c:	e395                	bnez	a5,11180 <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   1115e:	fe843783          	ld	a5,-24(s0)
   11162:	00d7c783          	lbu	a5,13(a5)
   11166:	ef89                	bnez	a5,11180 <is_empty_gui+0x7a>
   11168:	fe843783          	ld	a5,-24(s0)
   1116c:	00e7c783          	lbu	a5,14(a5)
   11170:	eb81                	bnez	a5,11180 <is_empty_gui+0x7a>
   11172:	fe843783          	ld	a5,-24(s0)
   11176:	00f7c783          	lbu	a5,15(a5)
   1117a:	e399                	bnez	a5,11180 <is_empty_gui+0x7a>
   1117c:	4785                	li	a5,1
   1117e:	a011                	j	11182 <is_empty_gui+0x7c>
   11180:	4781                	li	a5,0
}
   11182:	853e                	mv	a0,a5
   11184:	6462                	ld	s0,24(sp)
   11186:	6105                	addi	sp,sp,32
   11188:	8082                	ret

000000000001118a <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   1118a:	7159                	addi	sp,sp,-112
   1118c:	f486                	sd	ra,104(sp)
   1118e:	f0a2                	sd	s0,96(sp)
   11190:	1880                	addi	s0,sp,112
   11192:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11196:	fe843783          	ld	a5,-24(s0)
   1119a:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1119c:	0187d79b          	srliw	a5,a5,0x18
   111a0:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   111a4:	fe843783          	ld	a5,-24(s0)
   111a8:	439c                	lw	a5,0(a5)
   111aa:	0107d79b          	srliw	a5,a5,0x10
   111ae:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111b0:	0ff7f793          	andi	a5,a5,255
   111b4:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   111b8:	fe843783          	ld	a5,-24(s0)
   111bc:	439c                	lw	a5,0(a5)
   111be:	0087d79b          	srliw	a5,a5,0x8
   111c2:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111c4:	0ff7f793          	andi	a5,a5,255
   111c8:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   111cc:	fe843783          	ld	a5,-24(s0)
   111d0:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111d2:	0ff7f793          	andi	a5,a5,255
   111d6:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   111da:	fe843783          	ld	a5,-24(s0)
   111de:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111e2:	0087d79b          	srliw	a5,a5,0x8
   111e6:	17c2                	slli	a5,a5,0x30
   111e8:	93c1                	srli	a5,a5,0x30
   111ea:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   111ee:	fe843783          	ld	a5,-24(s0)
   111f2:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111f6:	2781                	sext.w	a5,a5
   111f8:	0ff7f793          	andi	a5,a5,255
   111fc:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11200:	fe843783          	ld	a5,-24(s0)
   11204:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11208:	0087d79b          	srliw	a5,a5,0x8
   1120c:	17c2                	slli	a5,a5,0x30
   1120e:	93c1                	srli	a5,a5,0x30
   11210:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11214:	fe843783          	ld	a5,-24(s0)
   11218:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1121c:	2781                	sext.w	a5,a5
   1121e:	0ff7f793          	andi	a5,a5,255
   11222:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11224:	fe843703          	ld	a4,-24(s0)
   11228:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1122c:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   1122e:	fe843683          	ld	a3,-24(s0)
   11232:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11236:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11238:	fe843603          	ld	a2,-24(s0)
   1123c:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11240:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11242:	fe843583          	ld	a1,-24(s0)
   11246:	00b5c583          	lbu	a1,11(a1) # fffffffff000000b <_end+0xffffffffeffee37f>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1124a:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   1124c:	fe843503          	ld	a0,-24(s0)
   11250:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11254:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11256:	fe843803          	ld	a6,-24(s0)
   1125a:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1125e:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11260:	fe843883          	ld	a7,-24(s0)
   11264:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11268:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   1126a:	fe843303          	ld	t1,-24(s0)
   1126e:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11272:	2301                	sext.w	t1,t1
   11274:	e09a                	sd	t1,64(sp)
   11276:	fc46                	sd	a7,56(sp)
   11278:	f842                	sd	a6,48(sp)
   1127a:	f42a                	sd	a0,40(sp)
   1127c:	f02e                	sd	a1,32(sp)
   1127e:	ec32                	sd	a2,24(sp)
   11280:	e836                	sd	a3,16(sp)
   11282:	e43a                	sd	a4,8(sp)
   11284:	e03e                	sd	a5,0(sp)
   11286:	8886                	mv	a7,ra
   11288:	881e                	mv	a6,t2
   1128a:	8796                	mv	a5,t0
   1128c:	877e                	mv	a4,t6
   1128e:	86fa                	mv	a3,t5
   11290:	8676                	mv	a2,t4
   11292:	85f2                	mv	a1,t3
   11294:	6549                	lui	a0,0x12
   11296:	95050513          	addi	a0,a0,-1712 # 11950 <strnlen+0x264>
   1129a:	c5fff0ef          	jal	ra,10ef8 <printf_uart>
        );
}
   1129e:	0001                	nop
   112a0:	70a6                	ld	ra,104(sp)
   112a2:	7406                	ld	s0,96(sp)
   112a4:	6165                	addi	sp,sp,112
   112a6:	8082                	ret

00000000000112a8 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   112a8:	7179                	addi	sp,sp,-48
   112aa:	f422                	sd	s0,40(sp)
   112ac:	1800                	addi	s0,sp,48
   112ae:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   112b2:	5b1937b7          	lui	a5,0x5b193
   112b6:	3007879b          	addiw	a5,a5,768
   112ba:	fef42023          	sw	a5,-32(s0)
   112be:	c7800793          	li	a5,-904
   112c2:	fef41223          	sh	a5,-28(s0)
   112c6:	6791                	lui	a5,0x4
   112c8:	0cd7879b          	addiw	a5,a5,205
   112cc:	fef41323          	sh	a5,-26(s0)
   112d0:	f8000793          	li	a5,-128
   112d4:	fef40423          	sb	a5,-24(s0)
   112d8:	4789                	li	a5,2
   112da:	fef404a3          	sb	a5,-23(s0)
   112de:	57a1                	li	a5,-24
   112e0:	fef40523          	sb	a5,-22(s0)
   112e4:	06c00793          	li	a5,108
   112e8:	fef405a3          	sb	a5,-21(s0)
   112ec:	04500793          	li	a5,69
   112f0:	fef40623          	sb	a5,-20(s0)
   112f4:	05800793          	li	a5,88
   112f8:	fef406a3          	sb	a5,-19(s0)
   112fc:	47ad                	li	a5,11
   112fe:	fef40723          	sb	a5,-18(s0)
   11302:	04700793          	li	a5,71
   11306:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   1130a:	fe042703          	lw	a4,-32(s0)
   1130e:	fd843783          	ld	a5,-40(s0)
   11312:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   11314:	0af71863          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   11318:	fe445703          	lhu	a4,-28(s0)
   1131c:	fd843783          	ld	a5,-40(s0)
   11320:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   11324:	2701                	sext.w	a4,a4
   11326:	2781                	sext.w	a5,a5
   11328:	08f71e63          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   1132c:	fe645703          	lhu	a4,-26(s0)
   11330:	fd843783          	ld	a5,-40(s0)
   11334:	0067d783          	lhu	a5,6(a5)
   11338:	2701                	sext.w	a4,a4
   1133a:	2781                	sext.w	a5,a5
   1133c:	08f71463          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   11340:	fe844703          	lbu	a4,-24(s0)
   11344:	fd843783          	ld	a5,-40(s0)
   11348:	0087c783          	lbu	a5,8(a5)
   1134c:	06f71c63          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   11350:	fe944703          	lbu	a4,-23(s0)
   11354:	fd843783          	ld	a5,-40(s0)
   11358:	0097c783          	lbu	a5,9(a5)
   1135c:	06f71463          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   11360:	fea44703          	lbu	a4,-22(s0)
   11364:	fd843783          	ld	a5,-40(s0)
   11368:	00a7c783          	lbu	a5,10(a5)
   1136c:	04f71c63          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   11370:	feb44703          	lbu	a4,-21(s0)
   11374:	fd843783          	ld	a5,-40(s0)
   11378:	00b7c783          	lbu	a5,11(a5)
   1137c:	04f71463          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   11380:	fec44703          	lbu	a4,-20(s0)
   11384:	fd843783          	ld	a5,-40(s0)
   11388:	00c7c783          	lbu	a5,12(a5)
   1138c:	02f71c63          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   11390:	fed44703          	lbu	a4,-19(s0)
   11394:	fd843783          	ld	a5,-40(s0)
   11398:	00d7c783          	lbu	a5,13(a5)
   1139c:	02f71463          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   113a0:	fee44703          	lbu	a4,-18(s0)
   113a4:	fd843783          	ld	a5,-40(s0)
   113a8:	00e7c783          	lbu	a5,14(a5)
   113ac:	00f71c63          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   113b0:	fef44703          	lbu	a4,-17(s0)
   113b4:	fd843783          	ld	a5,-40(s0)
   113b8:	00f7c783          	lbu	a5,15(a5)
   113bc:	00f71463          	bne	a4,a5,113c4 <is_uboot_guid+0x11c>
   113c0:	4785                	li	a5,1
   113c2:	a011                	j	113c6 <is_uboot_guid+0x11e>
   113c4:	4781                	li	a5,0
}
   113c6:	853e                	mv	a0,a5
   113c8:	7422                	ld	s0,40(sp)
   113ca:	6145                	addi	sp,sp,48
   113cc:	8082                	ret

00000000000113ce <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   113ce:	9c010113          	addi	sp,sp,-1600
   113d2:	62113c23          	sd	ra,1592(sp)
   113d6:	62813823          	sd	s0,1584(sp)
   113da:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   113de:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   113e2:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   113e6:	080007b7          	lui	a5,0x8000
   113ea:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   113ee:	00000097          	auipc	ra,0x0
   113f2:	b50080e7          	jalr	-1200(ra) # 10f3e <init_qspi>

    print_uart("Search uefi\r\n", 13);
   113f6:	45b5                	li	a1,13
   113f8:	67c9                	lui	a5,0x12
   113fa:	99878513          	addi	a0,a5,-1640 # 11998 <strnlen+0x2ac>
   113fe:	d1eff0ef          	jal	ra,1091c <print_uart>

    sd_start_reading(0);
   11402:	4501                	li	a0,0
   11404:	00000097          	auipc	ra,0x0
   11408:	c22080e7          	jalr	-990(ra) # 11026 <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   1140c:	dc040793          	addi	a5,s0,-576
   11410:	20000593          	li	a1,512
   11414:	853e                	mv	a0,a5
   11416:	ba5ff0ef          	jal	ra,10fba <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   1141a:	bc040793          	addi	a5,s0,-1088
   1141e:	20000593          	li	a1,512
   11422:	853e                	mv	a0,a5
   11424:	b97ff0ef          	jal	ra,10fba <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   11428:	bc043703          	ld	a4,-1088(s0)
   1142c:	67c9                	lui	a5,0x12
   1142e:	9f87b783          	ld	a5,-1544(a5) # 119f8 <strnlen+0x30c>
   11432:	00f70663          	beq	a4,a5,1143e <run_from_sdcard+0x70>
        sd_stop_reading();
   11436:	c67ff0ef          	jal	ra,1109c <sd_stop_reading>
        return -1;
   1143a:	57fd                	li	a5,-1
   1143c:	a2c5                	j	1161c <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   1143e:	fc042a23          	sw	zero,-44(s0)
   11442:	a8c5                	j	11532 <run_from_sdcard+0x164>
        i4 = i % 4;
   11444:	fd442703          	lw	a4,-44(s0)
   11448:	41f7579b          	sraiw	a5,a4,0x1f
   1144c:	01e7d79b          	srliw	a5,a5,0x1e
   11450:	9f3d                	addw	a4,a4,a5
   11452:	8b0d                	andi	a4,a4,3
   11454:	40f707bb          	subw	a5,a4,a5
   11458:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   1145c:	fc442783          	lw	a5,-60(s0)
   11460:	2781                	sext.w	a5,a5
   11462:	eb81                	bnez	a5,11472 <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   11464:	9c040793          	addi	a5,s0,-1600
   11468:	20000593          	li	a1,512
   1146c:	853e                	mv	a0,a5
   1146e:	b4dff0ef          	jal	ra,10fba <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   11472:	9c040713          	addi	a4,s0,-1600
   11476:	fc442783          	lw	a5,-60(s0)
   1147a:	079e                	slli	a5,a5,0x7
   1147c:	97ba                	add	a5,a5,a4
   1147e:	853e                	mv	a0,a5
   11480:	00000097          	auipc	ra,0x0
   11484:	c86080e7          	jalr	-890(ra) # 11106 <is_empty_gui>
   11488:	87aa                	mv	a5,a0
   1148a:	efd1                	bnez	a5,11526 <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   1148c:	fd442783          	lw	a5,-44(s0)
   11490:	85be                	mv	a1,a5
   11492:	67c9                	lui	a5,0x12
   11494:	9a878513          	addi	a0,a5,-1624 # 119a8 <strnlen+0x2bc>
   11498:	a61ff0ef          	jal	ra,10ef8 <printf_uart>
        print_guid(&entry[i4].type);
   1149c:	9c040713          	addi	a4,s0,-1600
   114a0:	fc442783          	lw	a5,-60(s0)
   114a4:	079e                	slli	a5,a5,0x7
   114a6:	97ba                	add	a5,a5,a4
   114a8:	853e                	mv	a0,a5
   114aa:	ce1ff0ef          	jal	ra,1118a <print_guid>
        print_uart(" : ", 3);
   114ae:	458d                	li	a1,3
   114b0:	67c9                	lui	a5,0x12
   114b2:	9b078513          	addi	a0,a5,-1616 # 119b0 <strnlen+0x2c4>
   114b6:	c66ff0ef          	jal	ra,1091c <print_uart>
        print_uart(entry[i4].name, sizeof(entry[i4].name));
   114ba:	9c040713          	addi	a4,s0,-1600
   114be:	fc442783          	lw	a5,-60(s0)
   114c2:	079e                	slli	a5,a5,0x7
   114c4:	03078793          	addi	a5,a5,48
   114c8:	97ba                	add	a5,a5,a4
   114ca:	07a1                	addi	a5,a5,8
   114cc:	04800593          	li	a1,72
   114d0:	853e                	mv	a0,a5
   114d2:	c4aff0ef          	jal	ra,1091c <print_uart>
        print_uart("\r\n", 2);
   114d6:	4589                	li	a1,2
   114d8:	67c9                	lui	a5,0x12
   114da:	9b878513          	addi	a0,a5,-1608 # 119b8 <strnlen+0x2cc>
   114de:	c3eff0ef          	jal	ra,1091c <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   114e2:	9c040713          	addi	a4,s0,-1600
   114e6:	fc442783          	lw	a5,-60(s0)
   114ea:	079e                	slli	a5,a5,0x7
   114ec:	97ba                	add	a5,a5,a4
   114ee:	853e                	mv	a0,a5
   114f0:	00000097          	auipc	ra,0x0
   114f4:	db8080e7          	jalr	-584(ra) # 112a8 <is_uboot_guid>
   114f8:	87aa                	mv	a5,a0
   114fa:	c79d                	beqz	a5,11528 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   114fc:	fc442783          	lw	a5,-60(s0)
   11500:	079e                	slli	a5,a5,0x7
   11502:	ff040713          	addi	a4,s0,-16
   11506:	97ba                	add	a5,a5,a4
   11508:	9f07b783          	ld	a5,-1552(a5)
   1150c:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   11510:	fc442783          	lw	a5,-60(s0)
   11514:	079e                	slli	a5,a5,0x7
   11516:	ff040713          	addi	a4,s0,-16
   1151a:	97ba                	add	a5,a5,a4
   1151c:	9f87b783          	ld	a5,-1544(a5)
   11520:	fef43023          	sd	a5,-32(s0)
   11524:	a011                	j	11528 <run_from_sdcard+0x15a>
            continue;
   11526:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   11528:	fd442783          	lw	a5,-44(s0)
   1152c:	2785                	addiw	a5,a5,1
   1152e:	fcf42a23          	sw	a5,-44(s0)
   11532:	c1042703          	lw	a4,-1008(s0)
   11536:	fd442783          	lw	a5,-44(s0)
   1153a:	f0e7e5e3          	bltu	a5,a4,11444 <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   1153e:	b5fff0ef          	jal	ra,1109c <sd_stop_reading>

    if (lba_start == 0) {
   11542:	fe843783          	ld	a5,-24(s0)
   11546:	e399                	bnez	a5,1154c <run_from_sdcard+0x17e>
        return -1;
   11548:	57fd                	li	a5,-1
   1154a:	a8c9                	j	1161c <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   1154c:	fe843783          	ld	a5,-24(s0)
   11550:	07a6                	slli	a5,a5,0x9
   11552:	853e                	mv	a0,a5
   11554:	00000097          	auipc	ra,0x0
   11558:	ad2080e7          	jalr	-1326(ra) # 11026 <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   1155c:	fe043703          	ld	a4,-32(s0)
   11560:	fe843783          	ld	a5,-24(s0)
   11564:	40f707b3          	sub	a5,a4,a5
   11568:	0785                	addi	a5,a5,1
   1156a:	8385                	srli	a5,a5,0x1
   1156c:	85be                	mv	a1,a5
   1156e:	67c9                	lui	a5,0x12
   11570:	9c078513          	addi	a0,a5,-1600 # 119c0 <strnlen+0x2d4>
   11574:	985ff0ef          	jal	ra,10ef8 <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   11578:	fe843783          	ld	a5,-24(s0)
   1157c:	fcf43423          	sd	a5,-56(s0)
   11580:	a8bd                	j	115fe <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   11582:	9c040793          	addi	a5,s0,-1600
   11586:	20000593          	li	a1,512
   1158a:	853e                	mv	a0,a5
   1158c:	a2fff0ef          	jal	ra,10fba <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   11590:	9c040793          	addi	a5,s0,-1600
   11594:	6398                	ld	a4,0(a5)
   11596:	fd843783          	ld	a5,-40(s0)
   1159a:	639c                	ld	a5,0(a5)
   1159c:	00f71b63          	bne	a4,a5,115b2 <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   115a0:	67c9                	lui	a5,0x12
   115a2:	9d078593          	addi	a1,a5,-1584 # 119d0 <strnlen+0x2e4>
   115a6:	67c9                	lui	a5,0x12
   115a8:	9e078513          	addi	a0,a5,-1568 # 119e0 <strnlen+0x2f4>
   115ac:	94dff0ef          	jal	ra,10ef8 <printf_uart>
            break;
   115b0:	a8a9                	j	1160a <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   115b2:	fd843783          	ld	a5,-40(s0)
   115b6:	86be                	mv	a3,a5
   115b8:	9c040793          	addi	a5,s0,-1600
   115bc:	20000713          	li	a4,512
   115c0:	863a                	mv	a2,a4
   115c2:	85be                	mv	a1,a5
   115c4:	8536                	mv	a0,a3
   115c6:	00000097          	auipc	ra,0x0
   115ca:	066080e7          	jalr	102(ra) # 1162c <memcpy>
        sram += sizeof(entry);
   115ce:	fd843783          	ld	a5,-40(s0)
   115d2:	20078793          	addi	a5,a5,512
   115d6:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   115da:	fc843703          	ld	a4,-56(s0)
   115de:	06400793          	li	a5,100
   115e2:	02f777b3          	remu	a5,a4,a5
   115e6:	e799                	bnez	a5,115f4 <run_from_sdcard+0x226>
            print_uart(". ", 2);
   115e8:	4589                	li	a1,2
   115ea:	67c9                	lui	a5,0x12
   115ec:	9f078513          	addi	a0,a5,-1552 # 119f0 <strnlen+0x304>
   115f0:	b2cff0ef          	jal	ra,1091c <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   115f4:	fc843783          	ld	a5,-56(s0)
   115f8:	0785                	addi	a5,a5,1
   115fa:	fcf43423          	sd	a5,-56(s0)
   115fe:	fc843703          	ld	a4,-56(s0)
   11602:	fe043783          	ld	a5,-32(s0)
   11606:	f6e7fee3          	bleu	a4,a5,11582 <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   1160a:	4589                	li	a1,2
   1160c:	67c9                	lui	a5,0x12
   1160e:	9b878513          	addi	a0,a5,-1608 # 119b8 <strnlen+0x2cc>
   11612:	b0aff0ef          	jal	ra,1091c <print_uart>

    sd_stop_reading();
   11616:	a87ff0ef          	jal	ra,1109c <sd_stop_reading>
    return 0;
   1161a:	4781                	li	a5,0
}
   1161c:	853e                	mv	a0,a5
   1161e:	63813083          	ld	ra,1592(sp)
   11622:	63013403          	ld	s0,1584(sp)
   11626:	64010113          	addi	sp,sp,1600
   1162a:	8082                	ret

000000000001162c <memcpy>:
   1162c:	00a5c7b3          	xor	a5,a1,a0
   11630:	8b9d                	andi	a5,a5,7
   11632:	00c50733          	add	a4,a0,a2
   11636:	e781                	bnez	a5,1163e <memcpy+0x12>
   11638:	479d                	li	a5,7
   1163a:	00c7ef63          	bltu	a5,a2,11658 <memcpy+0x2c>
   1163e:	87aa                	mv	a5,a0
   11640:	00e56963          	bltu	a0,a4,11652 <memcpy+0x26>
   11644:	8082                	ret
   11646:	0005c683          	lbu	a3,0(a1)
   1164a:	0785                	addi	a5,a5,1
   1164c:	0585                	addi	a1,a1,1
   1164e:	fed78fa3          	sb	a3,-1(a5)
   11652:	fee7eae3          	bltu	a5,a4,11646 <memcpy+0x1a>
   11656:	8082                	ret
   11658:	00757793          	andi	a5,a0,7
   1165c:	ebbd                	bnez	a5,116d2 <memcpy+0xa6>
   1165e:	87aa                	mv	a5,a0
   11660:	ff877693          	andi	a3,a4,-8
   11664:	fc068613          	addi	a2,a3,-64
   11668:	06c7fc63          	bleu	a2,a5,116e0 <memcpy+0xb4>
   1166c:	0005b383          	ld	t2,0(a1)
   11670:	0085b283          	ld	t0,8(a1)
   11674:	0105bf83          	ld	t6,16(a1)
   11678:	0185bf03          	ld	t5,24(a1)
   1167c:	0205be83          	ld	t4,32(a1)
   11680:	0285be03          	ld	t3,40(a1)
   11684:	0305b303          	ld	t1,48(a1)
   11688:	0385b883          	ld	a7,56(a1)
   1168c:	04858593          	addi	a1,a1,72
   11690:	04878793          	addi	a5,a5,72
   11694:	ff85b803          	ld	a6,-8(a1)
   11698:	fa77bc23          	sd	t2,-72(a5)
   1169c:	fc57b023          	sd	t0,-64(a5)
   116a0:	fdf7b423          	sd	t6,-56(a5)
   116a4:	fde7b823          	sd	t5,-48(a5)
   116a8:	fdd7bc23          	sd	t4,-40(a5)
   116ac:	ffc7b023          	sd	t3,-32(a5)
   116b0:	fe67b423          	sd	t1,-24(a5)
   116b4:	ff17b823          	sd	a7,-16(a5)
   116b8:	ff07bc23          	sd	a6,-8(a5)
   116bc:	b775                	j	11668 <memcpy+0x3c>
   116be:	0005c683          	lbu	a3,0(a1)
   116c2:	0785                	addi	a5,a5,1
   116c4:	0585                	addi	a1,a1,1
   116c6:	fed78fa3          	sb	a3,-1(a5)
   116ca:	0077f693          	andi	a3,a5,7
   116ce:	fae5                	bnez	a3,116be <memcpy+0x92>
   116d0:	bf41                	j	11660 <memcpy+0x34>
   116d2:	87aa                	mv	a5,a0
   116d4:	bfdd                	j	116ca <memcpy+0x9e>
   116d6:	6190                	ld	a2,0(a1)
   116d8:	07a1                	addi	a5,a5,8
   116da:	05a1                	addi	a1,a1,8
   116dc:	fec7bc23          	sd	a2,-8(a5)
   116e0:	fed7ebe3          	bltu	a5,a3,116d6 <memcpy+0xaa>
   116e4:	f6e7e7e3          	bltu	a5,a4,11652 <memcpy+0x26>
   116e8:	8082                	ret
	...

00000000000116ec <strnlen>:
   116ec:	95aa                	add	a1,a1,a0
   116ee:	87aa                	mv	a5,a0
   116f0:	00b78563          	beq	a5,a1,116fa <strnlen+0xe>
   116f4:	0007c703          	lbu	a4,0(a5)
   116f8:	e701                	bnez	a4,11700 <strnlen+0x14>
   116fa:	40a78533          	sub	a0,a5,a0
   116fe:	8082                	ret
   11700:	0785                	addi	a5,a5,1
   11702:	b7fd                	j	116f0 <strnlen+0x4>
	...
