
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1680006f          	j	1016c <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0

  la t0, trap_table
   100c0:	00000297          	auipc	t0,0x0
   100c4:	f4428293          	addi	t0,t0,-188 # 10004 <trap_table>
  csrw mtvec, t0
   100c8:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100cc:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100d0:	08200137          	lui	sp,0x8200
  addi sp,sp,-256
   100d4:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ee1e4>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100d8:	7b311073          	csrw	0x7b3,sp

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100dc:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100e0:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100e4:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100e8:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100ec:	40a10133          	sub	sp,sp,a0

  ## Initialize MPU regions

  ## Make all cachable, rwx (default):
  li a1, 0x0ull
   100f0:	00000593          	li	a1,0
  csrw CSR_mpu_addr, a1
   100f4:	bc259073          	csrw	0xbc2,a1
  csrw CSR_mpu_mask, a1
   100f8:	bc359073          	csrw	0xbc3,a1
  li a1, (0 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_CACHABLE | MPU_CTRL_FL_EXEC | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   100fc:	01f00593          	li	a1,31
  csrw CSR_mpu_ctrl, a1
   10100:	bc459073          	csrw	0xbc4,a1
  ## Uncached CLINT:
  li a1, 0x0000000002000000ull
   10104:	020005b7          	lui	a1,0x2000
  csrw CSR_mpu_addr, a1
   10108:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFFE000000ull
   1010c:	fe0005b7          	lui	a1,0xfe000
  csrw CSR_mpu_mask, a1
   10110:	bc359073          	csrw	0xbc3,a1
  li a1, (1 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   10114:	11300593          	li	a1,275
  csrw CSR_mpu_ctrl, a1
   10118:	bc459073          	csrw	0xbc4,a1
  ## Uncached PLIC:
  li a1, 0x000000000C000000ull
   1011c:	0c0005b7          	lui	a1,0xc000
  csrw CSR_mpu_addr, a1
   10120:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFFC000000ull
   10124:	fc0005b7          	lui	a1,0xfc000
  csrw CSR_mpu_mask, a1
   10128:	bc359073          	csrw	0xbc3,a1
  li a1, (2 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   1012c:	21300593          	li	a1,531
  csrw CSR_mpu_ctrl, a1
   10130:	bc459073          	csrw	0xbc4,a1
  ## Uncached peripheries (IO):
  li a1, 0x0000000010000000ull
   10134:	100005b7          	lui	a1,0x10000
  csrw CSR_mpu_addr, a1
   10138:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFF0000000ull
   1013c:	f00005b7          	lui	a1,0xf0000
  csrw CSR_mpu_mask, a1
   10140:	bc359073          	csrw	0xbc3,a1
  li a1, (3 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_EXEC | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   10144:	31700593          	li	a1,791
  csrw CSR_mpu_ctrl, a1
   10148:	bc459073          	csrw	0xbc4,a1

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   1014c:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   10150:	00050663          	beqz	a0,1015c <init0>
  wfi
   10154:	10500073          	wfi
  j end_init0
   10158:	0080006f          	j	10160 <end_init0>

000000000001015c <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   1015c:	35e000ef          	jal	ra,104ba <_init>

0000000000010160 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10160:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10164:	34129073          	csrw	mepc,t0
  mret
   10168:	30200073          	mret

000000000001016c <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   1016c:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10170:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10174:	100f5e63          	bgez	t5,10290 <handle_exception>

0000000000010178 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10178:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1017c:	00113023          	sd	ra,0(sp)
   10180:	00813423          	sd	s0,8(sp)
   10184:	00913823          	sd	s1,16(sp)
   10188:	01213c23          	sd	s2,24(sp)
   1018c:	03313023          	sd	s3,32(sp)
   10190:	03413423          	sd	s4,40(sp)
   10194:	03513823          	sd	s5,48(sp)
   10198:	03613c23          	sd	s6,56(sp)
   1019c:	05713023          	sd	s7,64(sp)
   101a0:	05813423          	sd	s8,72(sp)
   101a4:	05913823          	sd	s9,80(sp)
   101a8:	05a13c23          	sd	s10,88(sp)
   101ac:	07b13023          	sd	s11,96(sp)
   101b0:	06213423          	sd	sp,104(sp)
   101b4:	07013c23          	sd	a6,120(sp)
   101b8:	09113023          	sd	a7,128(sp)
   101bc:	08a13423          	sd	a0,136(sp)
   101c0:	08b13823          	sd	a1,144(sp)
   101c4:	08c13c23          	sd	a2,152(sp)
   101c8:	0ad13023          	sd	a3,160(sp)
   101cc:	0ae13423          	sd	a4,168(sp)
   101d0:	0af13823          	sd	a5,176(sp)
   101d4:	0b013c23          	sd	a6,184(sp)
   101d8:	0d113023          	sd	a7,192(sp)
   101dc:	0c513423          	sd	t0,200(sp)
   101e0:	0c613823          	sd	t1,208(sp)
   101e4:	0c713c23          	sd	t2,216(sp)
   101e8:	0fc13023          	sd	t3,224(sp)
   101ec:	0fd13423          	sd	t4,232(sp)
   101f0:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   101f4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   101f8:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101fc:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   10200:	5aa000ef          	jal	ra,107aa <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   10204:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   10208:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   1020c:	00013083          	ld	ra,0(sp)
   10210:	00813403          	ld	s0,8(sp)
   10214:	01013483          	ld	s1,16(sp)
   10218:	01813903          	ld	s2,24(sp)
   1021c:	02013983          	ld	s3,32(sp)
   10220:	02813a03          	ld	s4,40(sp)
   10224:	03013a83          	ld	s5,48(sp)
   10228:	03813b03          	ld	s6,56(sp)
   1022c:	04013b83          	ld	s7,64(sp)
   10230:	04813c03          	ld	s8,72(sp)
   10234:	05013c83          	ld	s9,80(sp)
   10238:	05813d03          	ld	s10,88(sp)
   1023c:	06013d83          	ld	s11,96(sp)
   10240:	06813103          	ld	sp,104(sp)
   10244:	07813803          	ld	a6,120(sp)
   10248:	08013883          	ld	a7,128(sp)
   1024c:	08813503          	ld	a0,136(sp)
   10250:	09013583          	ld	a1,144(sp)
   10254:	09813603          	ld	a2,152(sp)
   10258:	0a013683          	ld	a3,160(sp)
   1025c:	0a813703          	ld	a4,168(sp)
   10260:	0b013783          	ld	a5,176(sp)
   10264:	0b813803          	ld	a6,184(sp)
   10268:	0c013883          	ld	a7,192(sp)
   1026c:	0c813283          	ld	t0,200(sp)
   10270:	0d013303          	ld	t1,208(sp)
   10274:	0d813383          	ld	t2,216(sp)
   10278:	0e013e03          	ld	t3,224(sp)
   1027c:	0e813e83          	ld	t4,232(sp)
   10280:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10284:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10288:	34002f73          	csrr	t5,mscratch
  mret
   1028c:	30200073          	mret

0000000000010290 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10290:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10294:	3fa000ef          	jal	ra,1068e <exception_handler_c>
  mret
   10298:	30200073          	mret
   1029c:	0000                	unimp
   1029e:	0000                	unimp
	...

00000000000102a2 <fw_get_cpuid>:

uint64_t get_dev_bar(uint16_t vid, uint16_t did);

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   102a2:	1101                	addi	sp,sp,-32
   102a4:	ec22                	sd	s0,24(sp)
   102a6:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   102a8:	f14027f3          	csrr	a5,mhartid
   102ac:	fef42623          	sw	a5,-20(s0)
    return ret;
   102b0:	fec42783          	lw	a5,-20(s0)
}
   102b4:	853e                	mv	a0,a5
   102b6:	6462                	ld	s0,24(sp)
   102b8:	6105                	addi	sp,sp,32
   102ba:	8082                	ret

00000000000102bc <led_set>:

void led_set(int output) {
   102bc:	1101                	addi	sp,sp,-32
   102be:	ec22                	sd	s0,24(sp)
   102c0:	1000                	addi	s0,sp,32
   102c2:	87aa                	mv	a5,a0
   102c4:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   102c8:	fec42783          	lw	a5,-20(s0)
   102cc:	0047979b          	slliw	a5,a5,0x4
   102d0:	0007871b          	sext.w	a4,a5
   102d4:	100607b7          	lui	a5,0x10060
   102d8:	2701                	sext.w	a4,a4
   102da:	c7d8                	sw	a4,12(a5)
}
   102dc:	0001                	nop
   102de:	6462                	ld	s0,24(sp)
   102e0:	6105                	addi	sp,sp,32
   102e2:	8082                	ret

00000000000102e4 <get_dip>:

int get_dip(int idx) {
   102e4:	7179                	addi	sp,sp,-48
   102e6:	f422                	sd	s0,40(sp)
   102e8:	1800                	addi	s0,sp,48
   102ea:	87aa                	mv	a5,a0
   102ec:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   102f0:	100607b7          	lui	a5,0x10060
   102f4:	439c                	lw	a5,0(a5)
   102f6:	0007871b          	sext.w	a4,a5
   102fa:	fdc42783          	lw	a5,-36(s0)
   102fe:	00f757bb          	srlw	a5,a4,a5
   10302:	2781                	sext.w	a5,a5
   10304:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   10308:	fec42783          	lw	a5,-20(s0)
   1030c:	8b85                	andi	a5,a5,1
   1030e:	2781                	sext.w	a5,a5
}
   10310:	853e                	mv	a0,a5
   10312:	7422                	ld	s0,40(sp)
   10314:	6145                	addi	sp,sp,48
   10316:	8082                	ret

0000000000010318 <get_dips>:

int get_dips() {
   10318:	1101                	addi	sp,sp,-32
   1031a:	ec22                	sd	s0,24(sp)
   1031c:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   1031e:	100607b7          	lui	a5,0x10060
   10322:	439c                	lw	a5,0(a5)
   10324:	2781                	sext.w	a5,a5
   10326:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   1032a:	fec42783          	lw	a5,-20(s0)
   1032e:	8bbd                	andi	a5,a5,15
   10330:	2781                	sext.w	a5,a5
}
   10332:	853e                	mv	a0,a5
   10334:	6462                	ld	s0,24(sp)
   10336:	6105                	addi	sp,sp,32
   10338:	8082                	ret

000000000001033a <copy_image>:



void copy_image() { 
   1033a:	715d                	addi	sp,sp,-80
   1033c:	e486                	sd	ra,72(sp)
   1033e:	e0a2                	sd	s0,64(sp)
   10340:	0880                	addi	s0,sp,80
    uint32_t tech;
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10342:	090007b7          	lui	a5,0x9000
   10346:	fcf43c23          	sd	a5,-40(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   1034a:	080007b7          	lui	a5,0x8000
   1034e:	fcf43823          	sd	a5,-48(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10352:	100ff7b7          	lui	a5,0x100ff
   10356:	fcf43423          	sd	a5,-56(s0)

    /** 
     * Speed-up RTL simulation by skipping coping stage.
     * Or skip this stage to avoid rewritting of externally loaded image.
     */
    tech = pnp->tech & 0xFF;
   1035a:	fc843783          	ld	a5,-56(s0)
   1035e:	479c                	lw	a5,8(a5)
   10360:	0ff7f793          	andi	a5,a5,255
   10364:	fcf42223          	sw	a5,-60(s0)


    uint64_t qspi2 = ~0ull;
   10368:	57fd                	li	a5,-1
   1036a:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   1036e:	00000097          	auipc	ra,0x0
   10372:	faa080e7          	jalr	-86(ra) # 10318 <get_dips>
   10376:	87aa                	mv	a5,a0
   10378:	85be                	mv	a1,a5
   1037a:	67c5                	lui	a5,0x11
   1037c:	78078513          	addi	a0,a5,1920 # 11780 <strnlen+0x20>
   10380:	00001097          	auipc	ra,0x1
   10384:	bec080e7          	jalr	-1044(ra) # 10f6c <printf_uart>
    if (get_dips() == 0xB) {
   10388:	00000097          	auipc	ra,0x0
   1038c:	f90080e7          	jalr	-112(ra) # 10318 <get_dips>
   10390:	87aa                	mv	a5,a0
   10392:	873e                	mv	a4,a5
   10394:	47ad                	li	a5,11
   10396:	04f71b63          	bne	a4,a5,103ec <copy_image+0xb2>
        // Load from SD-card
        qspi2 = get_dev_bar(VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   1039a:	07500593          	li	a1,117
   1039e:	0f100513          	li	a0,241
   103a2:	476000ef          	jal	ra,10818 <get_dev_bar>
   103a6:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   103aa:	fe843703          	ld	a4,-24(s0)
   103ae:	57fd                	li	a5,-1
   103b0:	02f70e63          	beq	a4,a5,103ec <copy_image+0xb2>
            print_uart("Select . .QSPI2\r\n", 17);
   103b4:	45c5                	li	a1,17
   103b6:	67c5                	lui	a5,0x11
   103b8:	79078513          	addi	a0,a5,1936 # 11790 <strnlen+0x30>
   103bc:	00000097          	auipc	ra,0x0
   103c0:	5d4080e7          	jalr	1492(ra) # 10990 <print_uart>
            if (run_from_sdcard() == -1) {
   103c4:	00001097          	auipc	ra,0x1
   103c8:	07e080e7          	jalr	126(ra) # 11442 <run_from_sdcard>
   103cc:	87aa                	mv	a5,a0
   103ce:	873e                	mv	a4,a5
   103d0:	57fd                	li	a5,-1
   103d2:	00f71d63          	bne	a4,a5,103ec <copy_image+0xb2>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   103d6:	45c9                	li	a1,18
   103d8:	67c5                	lui	a5,0x11
   103da:	7a878513          	addi	a0,a5,1960 # 117a8 <strnlen+0x48>
   103de:	00000097          	auipc	ra,0x0
   103e2:	5b2080e7          	jalr	1458(ra) # 10990 <print_uart>
                qspi2 = ~0ull;
   103e6:	57fd                	li	a5,-1
   103e8:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   103ec:	fe843703          	ld	a4,-24(s0)
   103f0:	57fd                	li	a5,-1
   103f2:	0af71163          	bne	a4,a5,10494 <copy_image+0x15a>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   103f6:	fc843783          	ld	a5,-56(s0)
   103fa:	43dc                	lw	a5,4(a5)
   103fc:	efc1                	bnez	a5,10494 <copy_image+0x15a>
        // Check if SRAM already initialized in RTL simulation, then skip copying
        uint64_t *dst = (uint64_t *)sram;
   103fe:	fd043783          	ld	a5,-48(s0)
   10402:	faf43c23          	sd	a5,-72(s0)
        uint64_t *src = (uint64_t *)fwrom;
   10406:	fd843783          	ld	a5,-40(s0)
   1040a:	faf43823          	sd	a5,-80(s0)
        int skip_rtl_sim = 1;
   1040e:	4785                	li	a5,1
   10410:	fef42223          	sw	a5,-28(s0)
        for (int i = 0; i < 8; i++) {
   10414:	fe042023          	sw	zero,-32(s0)
   10418:	a80d                	j	1044a <copy_image+0x110>
            if (src[i] != dst[i]) {
   1041a:	fe042783          	lw	a5,-32(s0)
   1041e:	078e                	slli	a5,a5,0x3
   10420:	fb043703          	ld	a4,-80(s0)
   10424:	97ba                	add	a5,a5,a4
   10426:	6398                	ld	a4,0(a5)
   10428:	fe042783          	lw	a5,-32(s0)
   1042c:	078e                	slli	a5,a5,0x3
   1042e:	fb843683          	ld	a3,-72(s0)
   10432:	97b6                	add	a5,a5,a3
   10434:	639c                	ld	a5,0(a5)
   10436:	00f70563          	beq	a4,a5,10440 <copy_image+0x106>
                skip_rtl_sim = 0;
   1043a:	fe042223          	sw	zero,-28(s0)
                break;
   1043e:	a829                	j	10458 <copy_image+0x11e>
        for (int i = 0; i < 8; i++) {
   10440:	fe042783          	lw	a5,-32(s0)
   10444:	2785                	addiw	a5,a5,1
   10446:	fef42023          	sw	a5,-32(s0)
   1044a:	fe042783          	lw	a5,-32(s0)
   1044e:	0007871b          	sext.w	a4,a5
   10452:	479d                	li	a5,7
   10454:	fce7d3e3          	ble	a4,a5,1041a <copy_image+0xe0>
            }
        }
        if (skip_rtl_sim) {
   10458:	fe442783          	lw	a5,-28(s0)
   1045c:	2781                	sext.w	a5,a5
   1045e:	cb91                	beqz	a5,10472 <copy_image+0x138>
            print_uart("NO.COPY. .rtl.sim\r\n", 19);
   10460:	45cd                	li	a1,19
   10462:	67c5                	lui	a5,0x11
   10464:	7c078513          	addi	a0,a5,1984 # 117c0 <strnlen+0x60>
   10468:	00000097          	auipc	ra,0x0
   1046c:	528080e7          	jalr	1320(ra) # 10990 <print_uart>
   10470:	a015                	j	10494 <copy_image+0x15a>
        } else {
            print_uart("Coping . .FWIMAGE\r\n", 19);
   10472:	45cd                	li	a1,19
   10474:	67c5                	lui	a5,0x11
   10476:	7d878513          	addi	a0,a5,2008 # 117d8 <strnlen+0x78>
   1047a:	00000097          	auipc	ra,0x0
   1047e:	516080e7          	jalr	1302(ra) # 10990 <print_uart>
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   10482:	000407b7          	lui	a5,0x40
   10486:	863e                	mv	a2,a5
   10488:	fd843583          	ld	a1,-40(s0)
   1048c:	fd043503          	ld	a0,-48(s0)
   10490:	210010ef          	jal	ra,116a0 <memcpy>
        }
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   10494:	fc843783          	ld	a5,-56(s0)
   10498:	20211737          	lui	a4,0x20211
   1049c:	1237071b          	addiw	a4,a4,291
   104a0:	c3d8                	sw	a4,4(a5)
}
   104a2:	0001                	nop
   104a4:	60a6                	ld	ra,72(sp)
   104a6:	6406                	ld	s0,64(sp)
   104a8:	6161                	addi	sp,sp,80
   104aa:	8082                	ret

00000000000104ac <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   104ac:	1141                	addi	sp,sp,-16
   104ae:	e422                	sd	s0,8(sp)
   104b0:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   104b2:	0001                	nop
   104b4:	6422                	ld	s0,8(sp)
   104b6:	0141                	addi	sp,sp,16
   104b8:	8082                	ret

00000000000104ba <_init>:

void _init() {
   104ba:	7139                	addi	sp,sp,-64
   104bc:	fc06                	sd	ra,56(sp)
   104be:	f822                	sd	s0,48(sp)
   104c0:	0080                	addi	s0,sp,64
    uint32_t tech;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   104c2:	100ff7b7          	lui	a5,0x100ff
   104c6:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   104ca:	100107b7          	lui	a5,0x10010
   104ce:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   104d2:	100607b7          	lui	a5,0x10060
   104d6:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   104da:	47a1                	li	a5,8
   104dc:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   104e0:	fd043783          	ld	a5,-48(s0)
   104e4:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   104e8:	6785                	lui	a5,0x1
   104ea:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   104ee:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   104f2:	fd043783          	ld	a5,-48(s0)
   104f6:	3047b073          	csrc	mie,a5

    txctrl.v = 0;
   104fa:	fc042423          	sw	zero,-56(s0)
    txctrl.b.txen = 1;
   104fe:	fc844783          	lbu	a5,-56(s0)
   10502:	0017e793          	ori	a5,a5,1
   10506:	fcf40423          	sb	a5,-56(s0)
    rxctrl.v = 0;
   1050a:	fc042023          	sw	zero,-64(s0)
    rxctrl.b.rxen = 1;
   1050e:	fc044783          	lbu	a5,-64(s0)
   10512:	0017e793          	ori	a5,a5,1
   10516:	fcf40023          	sb	a5,-64(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   1051a:	fe043783          	ld	a5,-32(s0)
   1051e:	0ad00713          	li	a4,173
   10522:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   10524:	fc842783          	lw	a5,-56(s0)
   10528:	0007871b          	sext.w	a4,a5
   1052c:	fe043783          	ld	a5,-32(s0)
   10530:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   10532:	fc042783          	lw	a5,-64(s0)
   10536:	0007871b          	sext.w	a4,a5
   1053a:	fe043783          	ld	a5,-32(s0)
   1053e:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   10540:	fd843783          	ld	a5,-40(s0)
   10544:	473d                	li	a4,15
   10546:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   10548:	fd843783          	ld	a5,-40(s0)
   1054c:	6705                	lui	a4,0x1
   1054e:	3741                	addiw	a4,a4,-16
   10550:	c798                	sw	a4,8(a5)

    led_set(0x01);
   10552:	4505                	li	a0,1
   10554:	00000097          	auipc	ra,0x0
   10558:	d68080e7          	jalr	-664(ra) # 102bc <led_set>

    copy_image();
   1055c:	ddfff0ef          	jal	ra,1033a <copy_image>
    led_set(0x02);
   10560:	4509                	li	a0,2
   10562:	00000097          	auipc	ra,0x0
   10566:	d5a080e7          	jalr	-678(ra) # 102bc <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   1056a:	67c5                	lui	a5,0x11
   1056c:	7f078593          	addi	a1,a5,2032 # 117f0 <strnlen+0x90>
   10570:	67c5                	lui	a5,0x11
   10572:	7f878513          	addi	a0,a5,2040 # 117f8 <strnlen+0x98>
   10576:	00001097          	auipc	ra,0x1
   1057a:	9f6080e7          	jalr	-1546(ra) # 10f6c <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   1057e:	67c9                	lui	a5,0x12
   10580:	80878593          	addi	a1,a5,-2040 # 11808 <strnlen+0xa8>
   10584:	67c9                	lui	a5,0x12
   10586:	81078513          	addi	a0,a5,-2032 # 11810 <strnlen+0xb0>
   1058a:	00001097          	auipc	ra,0x1
   1058e:	9e2080e7          	jalr	-1566(ra) # 10f6c <printf_uart>

    tech = (pnp->tech >> 24) & 0xff;
   10592:	fe843783          	ld	a5,-24(s0)
   10596:	479c                	lw	a5,8(a5)
   10598:	0187d79b          	srliw	a5,a5,0x18
   1059c:	fcf42623          	sw	a5,-52(s0)
    led_set(tech);
   105a0:	fcc42783          	lw	a5,-52(s0)
   105a4:	853e                	mv	a0,a5
   105a6:	00000097          	auipc	ra,0x0
   105aa:	d16080e7          	jalr	-746(ra) # 102bc <led_set>
    led_set(0x03);
   105ae:	450d                	li	a0,3
   105b0:	00000097          	auipc	ra,0x0
   105b4:	d0c080e7          	jalr	-756(ra) # 102bc <led_set>
}
   105b8:	0001                	nop
   105ba:	70e2                	ld	ra,56(sp)
   105bc:	7442                	ld	s0,48(sp)
   105be:	6121                	addi	sp,sp,64
   105c0:	8082                	ret

00000000000105c2 <main>:

/** Not used actually */
int main() {
   105c2:	1141                	addi	sp,sp,-16
   105c4:	e422                	sd	s0,8(sp)
   105c6:	0800                	addi	s0,sp,16
    while (1) {}
   105c8:	a001                	j	105c8 <main+0x6>

00000000000105ca <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   105ca:	1101                	addi	sp,sp,-32
   105cc:	ec22                	sd	s0,24(sp)
   105ce:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   105d0:	342027f3          	csrr	a5,mcause
   105d4:	fef42623          	sw	a5,-20(s0)
    return ret;
   105d8:	fec42783          	lw	a5,-20(s0)
}
   105dc:	853e                	mv	a0,a5
   105de:	6462                	ld	s0,24(sp)
   105e0:	6105                	addi	sp,sp,32
   105e2:	8082                	ret

00000000000105e4 <get_mepc>:

int get_mepc() {
   105e4:	1101                	addi	sp,sp,-32
   105e6:	ec22                	sd	s0,24(sp)
   105e8:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   105ea:	341027f3          	csrr	a5,mepc
   105ee:	fef42623          	sw	a5,-20(s0)
    return ret;
   105f2:	fec42783          	lw	a5,-20(s0)
}
   105f6:	853e                	mv	a0,a5
   105f8:	6462                	ld	s0,24(sp)
   105fa:	6105                	addi	sp,sp,32
   105fc:	8082                	ret

00000000000105fe <env_call>:


void env_call(long long test_id) {
   105fe:	7179                	addi	sp,sp,-48
   10600:	f406                	sd	ra,40(sp)
   10602:	f022                	sd	s0,32(sp)
   10604:	1800                	addi	s0,sp,48
   10606:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   1060a:	fd843783          	ld	a5,-40(s0)
   1060e:	c7bd                	beqz	a5,1067c <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10610:	45b5                	li	a1,13
   10612:	67c9                	lui	a5,0x12
   10614:	82078513          	addi	a0,a5,-2016 # 11820 <strnlen+0xc0>
   10618:	00000097          	auipc	ra,0x0
   1061c:	378080e7          	jalr	888(ra) # 10990 <print_uart>
        print_uart("a0=", 3);
   10620:	458d                	li	a1,3
   10622:	67c9                	lui	a5,0x12
   10624:	83078513          	addi	a0,a5,-2000 # 11830 <strnlen+0xd0>
   10628:	00000097          	auipc	ra,0x0
   1062c:	368080e7          	jalr	872(ra) # 10990 <print_uart>
        print_uart_hex(test_id);
   10630:	fd843503          	ld	a0,-40(s0)
   10634:	3ce000ef          	jal	ra,10a02 <print_uart_hex>
        print_uart("\r\n", 2);
   10638:	4589                	li	a1,2
   1063a:	67c9                	lui	a5,0x12
   1063c:	83878513          	addi	a0,a5,-1992 # 11838 <strnlen+0xd8>
   10640:	00000097          	auipc	ra,0x0
   10644:	350080e7          	jalr	848(ra) # 10990 <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10648:	343027f3          	csrr	a5,mbadaddr
   1064c:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10650:	45a5                	li	a1,9
   10652:	67c9                	lui	a5,0x12
   10654:	84078513          	addi	a0,a5,-1984 # 11840 <strnlen+0xe0>
   10658:	00000097          	auipc	ra,0x0
   1065c:	338080e7          	jalr	824(ra) # 10990 <print_uart>
        print_uart_hex(mbadaddr);
   10660:	fec42783          	lw	a5,-20(s0)
   10664:	853e                	mv	a0,a5
   10666:	39c000ef          	jal	ra,10a02 <print_uart_hex>
        print_uart("\r\n", 2);
   1066a:	4589                	li	a1,2
   1066c:	67c9                	lui	a5,0x12
   1066e:	83878513          	addi	a0,a5,-1992 # 11838 <strnlen+0xd8>
   10672:	00000097          	auipc	ra,0x0
   10676:	31e080e7          	jalr	798(ra) # 10990 <print_uart>
   1067a:	a809                	j	1068c <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   1067c:	45b5                	li	a1,13
   1067e:	67c9                	lui	a5,0x12
   10680:	85078513          	addi	a0,a5,-1968 # 11850 <strnlen+0xf0>
   10684:	00000097          	auipc	ra,0x0
   10688:	30c080e7          	jalr	780(ra) # 10990 <print_uart>
    }
    while (1) {}
   1068c:	a001                	j	1068c <env_call+0x8e>

000000000001068e <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   1068e:	7179                	addi	sp,sp,-48
   10690:	f406                	sd	ra,40(sp)
   10692:	f022                	sd	s0,32(sp)
   10694:	1800                	addi	s0,sp,48
   10696:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   1069a:	00000097          	auipc	ra,0x0
   1069e:	f30080e7          	jalr	-208(ra) # 105ca <get_mcause>
   106a2:	87aa                	mv	a5,a0
   106a4:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   106a8:	fec42783          	lw	a5,-20(s0)
   106ac:	37e1                	addiw	a5,a5,-8
   106ae:	0007871b          	sext.w	a4,a5
   106b2:	4785                	li	a5,1
   106b4:	00e7e963          	bltu	a5,a4,106c6 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   106b8:	fd843503          	ld	a0,-40(s0)
   106bc:	00000097          	auipc	ra,0x0
   106c0:	f42080e7          	jalr	-190(ra) # 105fe <env_call>
        return;
   106c4:	a0b9                	j	10712 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   106c6:	459d                	li	a1,7
   106c8:	67c9                	lui	a5,0x12
   106ca:	86078513          	addi	a0,a5,-1952 # 11860 <strnlen+0x100>
   106ce:	2c2000ef          	jal	ra,10990 <print_uart>
    print_uart_hex(mcause);
   106d2:	fec42783          	lw	a5,-20(s0)
   106d6:	853e                	mv	a0,a5
   106d8:	00000097          	auipc	ra,0x0
   106dc:	32a080e7          	jalr	810(ra) # 10a02 <print_uart_hex>
    print_uart(",mepc:", 6);
   106e0:	4599                	li	a1,6
   106e2:	67c9                	lui	a5,0x12
   106e4:	86878513          	addi	a0,a5,-1944 # 11868 <strnlen+0x108>
   106e8:	2a8000ef          	jal	ra,10990 <print_uart>
    print_uart_hex(get_mepc());
   106ec:	ef9ff0ef          	jal	ra,105e4 <get_mepc>
   106f0:	87aa                	mv	a5,a0
   106f2:	853e                	mv	a0,a5
   106f4:	00000097          	auipc	ra,0x0
   106f8:	30e080e7          	jalr	782(ra) # 10a02 <print_uart_hex>
    print_uart("\r\n", 2);
   106fc:	4589                	li	a1,2
   106fe:	67c9                	lui	a5,0x12
   10700:	83878513          	addi	a0,a5,-1992 # 11838 <strnlen+0xd8>
   10704:	28c000ef          	jal	ra,10990 <print_uart>

    /// Exception trap
    led_set(0xF0);
   10708:	0f000513          	li	a0,240
   1070c:	bb1ff0ef          	jal	ra,102bc <led_set>
    while (1) {}
   10710:	a001                	j	10710 <exception_handler_c+0x82>
}
   10712:	70a2                	ld	ra,40(sp)
   10714:	7402                	ld	s0,32(sp)
   10716:	6145                	addi	sp,sp,48
   10718:	8082                	ret

000000000001071a <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   1071a:	1141                	addi	sp,sp,-16
   1071c:	e406                	sd	ra,8(sp)
   1071e:	e022                	sd	s0,0(sp)
   10720:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10722:	0f000513          	li	a0,240
   10726:	00000097          	auipc	ra,0x0
   1072a:	b96080e7          	jalr	-1130(ra) # 102bc <led_set>
    print_uart("fatal_error()\r\n", 15);
   1072e:	45bd                	li	a1,15
   10730:	67c9                	lui	a5,0x12
   10732:	87078513          	addi	a0,a5,-1936 # 11870 <strnlen+0x110>
   10736:	00000097          	auipc	ra,0x0
   1073a:	25a080e7          	jalr	602(ra) # 10990 <print_uart>
    while (1) {}
   1073e:	a001                	j	1073e <fatal_error+0x24>

0000000000010740 <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10740:	7179                	addi	sp,sp,-48
   10742:	f422                	sd	s0,40(sp)
   10744:	1800                	addi	s0,sp,48
   10746:	87aa                	mv	a5,a0
   10748:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   1074c:	0c0007b7          	lui	a5,0xc000
   10750:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10754:	fe843703          	ld	a4,-24(s0)
   10758:	fdc42783          	lw	a5,-36(s0)
   1075c:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee4e4>
   10760:	07b2                	slli	a5,a5,0xc
   10762:	97ba                	add	a5,a5,a4
   10764:	43dc                	lw	a5,4(a5)
   10766:	2781                	sext.w	a5,a5
}
   10768:	853e                	mv	a0,a5
   1076a:	7422                	ld	s0,40(sp)
   1076c:	6145                	addi	sp,sp,48
   1076e:	8082                	ret

0000000000010770 <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10770:	7179                	addi	sp,sp,-48
   10772:	f422                	sd	s0,40(sp)
   10774:	1800                	addi	s0,sp,48
   10776:	87aa                	mv	a5,a0
   10778:	872e                	mv	a4,a1
   1077a:	fcf42e23          	sw	a5,-36(s0)
   1077e:	87ba                	mv	a5,a4
   10780:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10784:	0c0007b7          	lui	a5,0xc000
   10788:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   1078c:	fd842703          	lw	a4,-40(s0)
   10790:	fe843683          	ld	a3,-24(s0)
   10794:	fdc42783          	lw	a5,-36(s0)
   10798:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee4e4>
   1079c:	07b2                	slli	a5,a5,0xc
   1079e:	97b6                	add	a5,a5,a3
   107a0:	c3d8                	sw	a4,4(a5)
}
   107a2:	0001                	nop
   107a4:	7422                	ld	s0,40(sp)
   107a6:	6145                	addi	sp,sp,48
   107a8:	8082                	ret

00000000000107aa <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   107aa:	7139                	addi	sp,sp,-64
   107ac:	fc06                	sd	ra,56(sp)
   107ae:	f822                	sd	s0,48(sp)
   107b0:	0080                	addi	s0,sp,64
   107b2:	fca43c23          	sd	a0,-40(s0)
   107b6:	fcb43823          	sd	a1,-48(s0)
   107ba:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   107be:	fd843783          	ld	a5,-40(s0)
   107c2:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   107c6:	fe744783          	lbu	a5,-25(s0)
   107ca:	f807f793          	andi	a5,a5,-128
   107ce:	0ff7f793          	andi	a5,a5,255
   107d2:	cb85                	beqz	a5,10802 <interrupt_handler_c+0x58>
   107d4:	fe043703          	ld	a4,-32(s0)
   107d8:	57fd                	li	a5,-1
   107da:	8385                	srli	a5,a5,0x1
   107dc:	8f7d                	and	a4,a4,a5
   107de:	47ad                	li	a5,11
   107e0:	02f71163          	bne	a4,a5,10802 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   107e4:	4501                	li	a0,0
   107e6:	f5bff0ef          	jal	ra,10740 <plic_claim>
   107ea:	87aa                	mv	a5,a0
   107ec:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   107f0:	fec42783          	lw	a5,-20(s0)
   107f4:	85be                	mv	a1,a5
   107f6:	4501                	li	a0,0
   107f8:	00000097          	auipc	ra,0x0
   107fc:	f78080e7          	jalr	-136(ra) # 10770 <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10800:	a029                	j	1080a <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10802:	00000097          	auipc	ra,0x0
   10806:	f18080e7          	jalr	-232(ra) # 1071a <fatal_error>
    }

    return epc;
   1080a:	fd043783          	ld	a5,-48(s0)
}
   1080e:	853e                	mv	a0,a5
   10810:	70e2                	ld	ra,56(sp)
   10812:	7442                	ld	s0,48(sp)
   10814:	6121                	addi	sp,sp,64
   10816:	8082                	ret

0000000000010818 <get_dev_bar>:
typedef union slave_cfg_type {
    slave_cfg_bits_type u;
    uint64_t v[2];
} slave_cfg_type;

uint64_t get_dev_bar(uint16_t vid, uint16_t did) {
   10818:	711d                	addi	sp,sp,-96
   1081a:	eca2                	sd	s0,88(sp)
   1081c:	1080                	addi	s0,sp,96
   1081e:	87aa                	mv	a5,a0
   10820:	872e                	mv	a4,a1
   10822:	faf41723          	sh	a5,-82(s0)
   10826:	87ba                	mv	a5,a4
   10828:	faf41623          	sh	a5,-84(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   1082c:	100ff7b7          	lui	a5,0x100ff
   10830:	fcf43c23          	sd	a5,-40(s0)
    int slv_total = (pnp->tech >> 8) & 0xFF;
   10834:	fd843783          	ld	a5,-40(s0)
   10838:	479c                	lw	a5,8(a5)
   1083a:	0087d79b          	srliw	a5,a5,0x8
   1083e:	2781                	sext.w	a5,a5
   10840:	2781                	sext.w	a5,a5
   10842:	0ff7f793          	andi	a5,a5,255
   10846:	fcf42a23          	sw	a5,-44(s0)
    int mst_total = (pnp->tech >> 16) & 0xFF;
   1084a:	fd843783          	ld	a5,-40(s0)
   1084e:	479c                	lw	a5,8(a5)
   10850:	0107d79b          	srliw	a5,a5,0x10
   10854:	2781                	sext.w	a5,a5
   10856:	2781                	sext.w	a5,a5
   10858:	0ff7f793          	andi	a5,a5,255
   1085c:	fcf42823          	sw	a5,-48(s0)
    int off = 0;
   10860:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   10864:	fe042423          	sw	zero,-24(s0)
   10868:	a82d                	j	108a2 <get_dev_bar+0x8a>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1086a:	fec42783          	lw	a5,-20(s0)
   1086e:	04078793          	addi	a5,a5,64 # 100ff040 <_end+0x100ed324>
   10872:	fd843703          	ld	a4,-40(s0)
   10876:	97ba                	add	a5,a5,a4
   10878:	639c                	ld	a5,0(a5)
   1087a:	fcf43423          	sd	a5,-56(s0)
        off += pnp->cfg_table[off];
   1087e:	fd843703          	ld	a4,-40(s0)
   10882:	fec42783          	lw	a5,-20(s0)
   10886:	97ba                	add	a5,a5,a4
   10888:	0407c783          	lbu	a5,64(a5)
   1088c:	2781                	sext.w	a5,a5
   1088e:	fec42703          	lw	a4,-20(s0)
   10892:	9fb9                	addw	a5,a5,a4
   10894:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10898:	fe842783          	lw	a5,-24(s0)
   1089c:	2785                	addiw	a5,a5,1
   1089e:	fef42423          	sw	a5,-24(s0)
   108a2:	fe842703          	lw	a4,-24(s0)
   108a6:	fd042783          	lw	a5,-48(s0)
   108aa:	2701                	sext.w	a4,a4
   108ac:	2781                	sext.w	a5,a5
   108ae:	faf74ee3          	blt	a4,a5,1086a <get_dev_bar+0x52>
    }

    for (int i = 0; i < slv_total; i++) {
   108b2:	fe042223          	sw	zero,-28(s0)
   108b6:	a8b5                	j	10932 <get_dev_bar+0x11a>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   108b8:	fec42783          	lw	a5,-20(s0)
   108bc:	04078793          	addi	a5,a5,64
   108c0:	fd843703          	ld	a4,-40(s0)
   108c4:	97ba                	add	a5,a5,a4
   108c6:	639c                	ld	a5,0(a5)
   108c8:	faf43c23          	sd	a5,-72(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   108cc:	fec42783          	lw	a5,-20(s0)
   108d0:	27a1                	addiw	a5,a5,8
   108d2:	2781                	sext.w	a5,a5
   108d4:	04078793          	addi	a5,a5,64
   108d8:	fd843703          	ld	a4,-40(s0)
   108dc:	97ba                	add	a5,a5,a4
   108de:	639c                	ld	a5,0(a5)
   108e0:	fcf43023          	sd	a5,-64(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   108e4:	fbe45783          	lhu	a5,-66(s0)
   108e8:	fae45703          	lhu	a4,-82(s0)
   108ec:	2701                	sext.w	a4,a4
   108ee:	2781                	sext.w	a5,a5
   108f0:	00f71f63          	bne	a4,a5,1090e <get_dev_bar+0xf6>
   108f4:	fbc45783          	lhu	a5,-68(s0)
   108f8:	fac45703          	lhu	a4,-84(s0)
   108fc:	2701                	sext.w	a4,a4
   108fe:	2781                	sext.w	a5,a5
   10900:	00f71763          	bne	a4,a5,1090e <get_dev_bar+0xf6>
            return scfg.u.xaddr;
   10904:	fc442783          	lw	a5,-60(s0)
   10908:	1782                	slli	a5,a5,0x20
   1090a:	9381                	srli	a5,a5,0x20
   1090c:	a825                	j	10944 <get_dev_bar+0x12c>
        }
        off += pnp->cfg_table[off];
   1090e:	fd843703          	ld	a4,-40(s0)
   10912:	fec42783          	lw	a5,-20(s0)
   10916:	97ba                	add	a5,a5,a4
   10918:	0407c783          	lbu	a5,64(a5)
   1091c:	2781                	sext.w	a5,a5
   1091e:	fec42703          	lw	a4,-20(s0)
   10922:	9fb9                	addw	a5,a5,a4
   10924:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10928:	fe442783          	lw	a5,-28(s0)
   1092c:	2785                	addiw	a5,a5,1
   1092e:	fef42223          	sw	a5,-28(s0)
   10932:	fe442703          	lw	a4,-28(s0)
   10936:	fd442783          	lw	a5,-44(s0)
   1093a:	2701                	sext.w	a4,a4
   1093c:	2781                	sext.w	a5,a5
   1093e:	f6f74de3          	blt	a4,a5,108b8 <get_dev_bar+0xa0>
    }

    return ~0ull;
   10942:	57fd                	li	a5,-1
}
   10944:	853e                	mv	a0,a5
   10946:	6466                	ld	s0,88(sp)
   10948:	6125                	addi	sp,sp,96
   1094a:	8082                	ret
	...

000000000001094e <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   1094e:	7179                	addi	sp,sp,-48
   10950:	f422                	sd	s0,40(sp)
   10952:	1800                	addi	s0,sp,48
   10954:	87aa                	mv	a5,a0
   10956:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   1095a:	100107b7          	lui	a5,0x10010
   1095e:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   10962:	fe843783          	ld	a5,-24(s0)
   10966:	439c                	lw	a5,0(a5)
   10968:	2781                	sext.w	a5,a5
   1096a:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   1096e:	fe344783          	lbu	a5,-29(s0)
   10972:	f807f793          	andi	a5,a5,-128
   10976:	0ff7f793          	andi	a5,a5,255
   1097a:	f7e5                	bnez	a5,10962 <print_char+0x14>
    uart->txdata = ch;
   1097c:	fdc42703          	lw	a4,-36(s0)
   10980:	fe843783          	ld	a5,-24(s0)
   10984:	c398                	sw	a4,0(a5)
    return 0;
   10986:	4781                	li	a5,0
}
   10988:	853e                	mv	a0,a5
   1098a:	7422                	ld	s0,40(sp)
   1098c:	6145                	addi	sp,sp,48
   1098e:	8082                	ret

0000000000010990 <print_uart>:

void print_uart(const char *buf, int sz) {
   10990:	7139                	addi	sp,sp,-64
   10992:	fc22                	sd	s0,56(sp)
   10994:	0080                	addi	s0,sp,64
   10996:	fca43423          	sd	a0,-56(s0)
   1099a:	87ae                	mv	a5,a1
   1099c:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   109a0:	100107b7          	lui	a5,0x10010
   109a4:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   109a8:	fe042623          	sw	zero,-20(s0)
   109ac:	a83d                	j	109ea <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   109ae:	fe043783          	ld	a5,-32(s0)
   109b2:	439c                	lw	a5,0(a5)
   109b4:	2781                	sext.w	a5,a5
   109b6:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   109ba:	fdb44783          	lbu	a5,-37(s0)
   109be:	f807f793          	andi	a5,a5,-128
   109c2:	0ff7f793          	andi	a5,a5,255
   109c6:	f7e5                	bnez	a5,109ae <print_uart+0x1e>
        uart->txdata = buf[i];
   109c8:	fec42783          	lw	a5,-20(s0)
   109cc:	fc843703          	ld	a4,-56(s0)
   109d0:	97ba                	add	a5,a5,a4
   109d2:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffe2e4>
   109d6:	0007871b          	sext.w	a4,a5
   109da:	fe043783          	ld	a5,-32(s0)
   109de:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   109e0:	fec42783          	lw	a5,-20(s0)
   109e4:	2785                	addiw	a5,a5,1
   109e6:	fef42623          	sw	a5,-20(s0)
   109ea:	fec42703          	lw	a4,-20(s0)
   109ee:	fc442783          	lw	a5,-60(s0)
   109f2:	2701                	sext.w	a4,a4
   109f4:	2781                	sext.w	a5,a5
   109f6:	faf74ce3          	blt	a4,a5,109ae <print_uart+0x1e>
    }
}
   109fa:	0001                	nop
   109fc:	7462                	ld	s0,56(sp)
   109fe:	6121                	addi	sp,sp,64
   10a00:	8082                	ret

0000000000010a02 <print_uart_hex>:

void print_uart_hex(long val) {
   10a02:	7139                	addi	sp,sp,-64
   10a04:	fc22                	sd	s0,56(sp)
   10a06:	0080                	addi	s0,sp,64
   10a08:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10a0c:	100107b7          	lui	a5,0x10010
   10a10:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   10a14:	fe042423          	sw	zero,-24(s0)
   10a18:	a041                	j	10a98 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   10a1a:	fe043783          	ld	a5,-32(s0)
   10a1e:	439c                	lw	a5,0(a5)
   10a20:	2781                	sext.w	a5,a5
   10a22:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   10a26:	fdb44783          	lbu	a5,-37(s0)
   10a2a:	f807f793          	andi	a5,a5,-128
   10a2e:	0ff7f793          	andi	a5,a5,255
   10a32:	f7e5                	bnez	a5,10a1a <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   10a34:	473d                	li	a4,15
   10a36:	fe842783          	lw	a5,-24(s0)
   10a3a:	40f707bb          	subw	a5,a4,a5
   10a3e:	2781                	sext.w	a5,a5
   10a40:	0027979b          	slliw	a5,a5,0x2
   10a44:	2781                	sext.w	a5,a5
   10a46:	fc843703          	ld	a4,-56(s0)
   10a4a:	40f757b3          	sra	a5,a4,a5
   10a4e:	0ff7f793          	andi	a5,a5,255
   10a52:	8bbd                	andi	a5,a5,15
   10a54:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   10a58:	fdf44783          	lbu	a5,-33(s0)
   10a5c:	0ff7f713          	andi	a4,a5,255
   10a60:	47a5                	li	a5,9
   10a62:	00e7e963          	bltu	a5,a4,10a74 <print_uart_hex+0x72>
            s = t + '0';
   10a66:	fdf44783          	lbu	a5,-33(s0)
   10a6a:	0307879b          	addiw	a5,a5,48
   10a6e:	fef407a3          	sb	a5,-17(s0)
   10a72:	a039                	j	10a80 <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   10a74:	fdf44783          	lbu	a5,-33(s0)
   10a78:	0577879b          	addiw	a5,a5,87
   10a7c:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   10a80:	fef44783          	lbu	a5,-17(s0)
   10a84:	0007871b          	sext.w	a4,a5
   10a88:	fe043783          	ld	a5,-32(s0)
   10a8c:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   10a8e:	fe842783          	lw	a5,-24(s0)
   10a92:	2785                	addiw	a5,a5,1
   10a94:	fef42423          	sw	a5,-24(s0)
   10a98:	fe842783          	lw	a5,-24(s0)
   10a9c:	0007871b          	sext.w	a4,a5
   10aa0:	47bd                	li	a5,15
   10aa2:	f6e7dce3          	ble	a4,a5,10a1a <print_uart_hex+0x18>
    }
}
   10aa6:	0001                	nop
   10aa8:	7462                	ld	s0,56(sp)
   10aaa:	6121                	addi	sp,sp,64
   10aac:	8082                	ret

0000000000010aae <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   10aae:	7119                	addi	sp,sp,-128
   10ab0:	fc86                	sd	ra,120(sp)
   10ab2:	f8a2                	sd	s0,112(sp)
   10ab4:	0100                	addi	s0,sp,128
   10ab6:	f8a43c23          	sd	a0,-104(s0)
   10aba:	87ae                	mv	a5,a1
   10abc:	8736                	mv	a4,a3
   10abe:	f8f42a23          	sw	a5,-108(s0)
   10ac2:	87b2                	mv	a5,a2
   10ac4:	f8f42823          	sw	a5,-112(s0)
   10ac8:	87ba                	mv	a5,a4
   10aca:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   10ace:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   10ad2:	f9442783          	lw	a5,-108(s0)
   10ad6:	f9843703          	ld	a4,-104(s0)
   10ada:	02f776b3          	remu	a3,a4,a5
   10ade:	fec42783          	lw	a5,-20(s0)
   10ae2:	0017871b          	addiw	a4,a5,1
   10ae6:	fee42623          	sw	a4,-20(s0)
   10aea:	0ff6f713          	andi	a4,a3,255
   10aee:	ff040693          	addi	a3,s0,-16
   10af2:	97b6                	add	a5,a5,a3
   10af4:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffe29c>
        if (num < base) {
   10af8:	f9442783          	lw	a5,-108(s0)
   10afc:	f9843703          	ld	a4,-104(s0)
   10b00:	00f76b63          	bltu	a4,a5,10b16 <printnum+0x68>
            break;
        }
        num /= base;
   10b04:	f9442783          	lw	a5,-108(s0)
   10b08:	f9843703          	ld	a4,-104(s0)
   10b0c:	02f757b3          	divu	a5,a4,a5
   10b10:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   10b14:	bf7d                	j	10ad2 <printnum+0x24>
            break;
   10b16:	0001                	nop
    }

    while (width-- > pos) {
   10b18:	a801                	j	10b28 <printnum+0x7a>
        print_char(padc);
   10b1a:	f8c42783          	lw	a5,-116(s0)
   10b1e:	853e                	mv	a0,a5
   10b20:	00000097          	auipc	ra,0x0
   10b24:	e2e080e7          	jalr	-466(ra) # 1094e <print_char>
    while (width-- > pos) {
   10b28:	f9042783          	lw	a5,-112(s0)
   10b2c:	fff7871b          	addiw	a4,a5,-1
   10b30:	f8e42823          	sw	a4,-112(s0)
   10b34:	fec42703          	lw	a4,-20(s0)
   10b38:	2701                	sext.w	a4,a4
   10b3a:	fef740e3          	blt	a4,a5,10b1a <printnum+0x6c>
    }


    while (pos-- > 0) {
   10b3e:	a089                	j	10b80 <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   10b40:	fec42783          	lw	a5,-20(s0)
   10b44:	ff040713          	addi	a4,s0,-16
   10b48:	97ba                	add	a5,a5,a4
   10b4a:	fb87c783          	lbu	a5,-72(a5)
   10b4e:	0007871b          	sext.w	a4,a5
   10b52:	fec42783          	lw	a5,-20(s0)
   10b56:	ff040693          	addi	a3,s0,-16
   10b5a:	97b6                	add	a5,a5,a3
   10b5c:	fb87c783          	lbu	a5,-72(a5)
   10b60:	86be                	mv	a3,a5
   10b62:	47a5                	li	a5,9
   10b64:	00d7f563          	bleu	a3,a5,10b6e <printnum+0xc0>
   10b68:	05700793          	li	a5,87
   10b6c:	a019                	j	10b72 <printnum+0xc4>
   10b6e:	03000793          	li	a5,48
   10b72:	9fb9                	addw	a5,a5,a4
   10b74:	2781                	sext.w	a5,a5
   10b76:	853e                	mv	a0,a5
   10b78:	00000097          	auipc	ra,0x0
   10b7c:	dd6080e7          	jalr	-554(ra) # 1094e <print_char>
    while (pos-- > 0) {
   10b80:	fec42783          	lw	a5,-20(s0)
   10b84:	fff7871b          	addiw	a4,a5,-1
   10b88:	fee42623          	sw	a4,-20(s0)
   10b8c:	faf04ae3          	bgtz	a5,10b40 <printnum+0x92>
    }
}
   10b90:	0001                	nop
   10b92:	70e6                	ld	ra,120(sp)
   10b94:	7446                	ld	s0,112(sp)
   10b96:	6109                	addi	sp,sp,128
   10b98:	8082                	ret

0000000000010b9a <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   10b9a:	1101                	addi	sp,sp,-32
   10b9c:	ec22                	sd	s0,24(sp)
   10b9e:	1000                	addi	s0,sp,32
   10ba0:	fea43423          	sd	a0,-24(s0)
   10ba4:	87ae                	mv	a5,a1
   10ba6:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10baa:	fe442783          	lw	a5,-28(s0)
   10bae:	0007871b          	sext.w	a4,a5
   10bb2:	4785                	li	a5,1
   10bb4:	00e7dc63          	ble	a4,a5,10bcc <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   10bb8:	fe843783          	ld	a5,-24(s0)
   10bbc:	639c                	ld	a5,0(a5)
   10bbe:	00878693          	addi	a3,a5,8
   10bc2:	fe843703          	ld	a4,-24(s0)
   10bc6:	e314                	sd	a3,0(a4)
   10bc8:	639c                	ld	a5,0(a5)
   10bca:	a815                	j	10bfe <getuint+0x64>
    } else if (lflag) {
   10bcc:	fe442783          	lw	a5,-28(s0)
   10bd0:	2781                	sext.w	a5,a5
   10bd2:	cb99                	beqz	a5,10be8 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   10bd4:	fe843783          	ld	a5,-24(s0)
   10bd8:	639c                	ld	a5,0(a5)
   10bda:	00878693          	addi	a3,a5,8
   10bde:	fe843703          	ld	a4,-24(s0)
   10be2:	e314                	sd	a3,0(a4)
   10be4:	639c                	ld	a5,0(a5)
   10be6:	a821                	j	10bfe <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   10be8:	fe843783          	ld	a5,-24(s0)
   10bec:	639c                	ld	a5,0(a5)
   10bee:	00878693          	addi	a3,a5,8
   10bf2:	fe843703          	ld	a4,-24(s0)
   10bf6:	e314                	sd	a3,0(a4)
   10bf8:	439c                	lw	a5,0(a5)
   10bfa:	1782                	slli	a5,a5,0x20
   10bfc:	9381                	srli	a5,a5,0x20
}
   10bfe:	853e                	mv	a0,a5
   10c00:	6462                	ld	s0,24(sp)
   10c02:	6105                	addi	sp,sp,32
   10c04:	8082                	ret

0000000000010c06 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   10c06:	1101                	addi	sp,sp,-32
   10c08:	ec22                	sd	s0,24(sp)
   10c0a:	1000                	addi	s0,sp,32
   10c0c:	fea43423          	sd	a0,-24(s0)
   10c10:	87ae                	mv	a5,a1
   10c12:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10c16:	fe442783          	lw	a5,-28(s0)
   10c1a:	0007871b          	sext.w	a4,a5
   10c1e:	4785                	li	a5,1
   10c20:	00e7dc63          	ble	a4,a5,10c38 <getint+0x32>
        return va_arg(*ap, long long);
   10c24:	fe843783          	ld	a5,-24(s0)
   10c28:	639c                	ld	a5,0(a5)
   10c2a:	00878693          	addi	a3,a5,8
   10c2e:	fe843703          	ld	a4,-24(s0)
   10c32:	e314                	sd	a3,0(a4)
   10c34:	639c                	ld	a5,0(a5)
   10c36:	a805                	j	10c66 <getint+0x60>
    } else if (lflag) {
   10c38:	fe442783          	lw	a5,-28(s0)
   10c3c:	2781                	sext.w	a5,a5
   10c3e:	cb99                	beqz	a5,10c54 <getint+0x4e>
        return va_arg(*ap, long);
   10c40:	fe843783          	ld	a5,-24(s0)
   10c44:	639c                	ld	a5,0(a5)
   10c46:	00878693          	addi	a3,a5,8
   10c4a:	fe843703          	ld	a4,-24(s0)
   10c4e:	e314                	sd	a3,0(a4)
   10c50:	639c                	ld	a5,0(a5)
   10c52:	a811                	j	10c66 <getint+0x60>
    }
    return va_arg(*ap, int);
   10c54:	fe843783          	ld	a5,-24(s0)
   10c58:	639c                	ld	a5,0(a5)
   10c5a:	00878693          	addi	a3,a5,8
   10c5e:	fe843703          	ld	a4,-24(s0)
   10c62:	e314                	sd	a3,0(a4)
   10c64:	439c                	lw	a5,0(a5)
}
   10c66:	853e                	mv	a0,a5
   10c68:	6462                	ld	s0,24(sp)
   10c6a:	6105                	addi	sp,sp,32
   10c6c:	8082                	ret

0000000000010c6e <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   10c6e:	711d                	addi	sp,sp,-96
   10c70:	ec86                	sd	ra,88(sp)
   10c72:	e8a2                	sd	s0,80(sp)
   10c74:	e4a6                	sd	s1,72(sp)
   10c76:	e0ca                	sd	s2,64(sp)
   10c78:	1080                	addi	s0,sp,96
   10c7a:	faa43423          	sd	a0,-88(s0)
   10c7e:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   10c82:	a819                	j	10c98 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   10c84:	2c048d63          	beqz	s1,10f5e <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   10c88:	fa843783          	ld	a5,-88(s0)
   10c8c:	0785                	addi	a5,a5,1
   10c8e:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   10c92:	8526                	mv	a0,s1
   10c94:	cbbff0ef          	jal	ra,1094e <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   10c98:	fa843783          	ld	a5,-88(s0)
   10c9c:	0007c783          	lbu	a5,0(a5)
   10ca0:	0007849b          	sext.w	s1,a5
   10ca4:	8726                	mv	a4,s1
   10ca6:	02500793          	li	a5,37
   10caa:	fcf71de3          	bne	a4,a5,10c84 <vprintfmt_lib+0x16>
        }
        fmt++;
   10cae:	fa843783          	ld	a5,-88(s0)
   10cb2:	0785                	addi	a5,a5,1
   10cb4:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   10cb8:	fa843783          	ld	a5,-88(s0)
   10cbc:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   10cc0:	02000793          	li	a5,32
   10cc4:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   10cc8:	57fd                	li	a5,-1
   10cca:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   10cce:	57fd                	li	a5,-1
   10cd0:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   10cd4:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   10cd8:	fa843783          	ld	a5,-88(s0)
   10cdc:	00178713          	addi	a4,a5,1
   10ce0:	fae43423          	sd	a4,-88(s0)
   10ce4:	0007c783          	lbu	a5,0(a5)
   10ce8:	0007849b          	sext.w	s1,a5
   10cec:	fdd4869b          	addiw	a3,s1,-35
   10cf0:	0006871b          	sext.w	a4,a3
   10cf4:	05500793          	li	a5,85
   10cf8:	24e7e963          	bltu	a5,a4,10f4a <vprintfmt_lib+0x2dc>
   10cfc:	02069793          	slli	a5,a3,0x20
   10d00:	9381                	srli	a5,a5,0x20
   10d02:	00279713          	slli	a4,a5,0x2
   10d06:	67c9                	lui	a5,0x12
   10d08:	88878793          	addi	a5,a5,-1912 # 11888 <strnlen+0x128>
   10d0c:	97ba                	add	a5,a5,a4
   10d0e:	439c                	lw	a5,0(a5)
   10d10:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   10d12:	02d00793          	li	a5,45
   10d16:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10d1a:	bf7d                	j	10cd8 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   10d1c:	03000793          	li	a5,48
   10d20:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10d24:	bf55                	j	10cd8 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   10d26:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   10d2a:	fc842703          	lw	a4,-56(s0)
   10d2e:	87ba                	mv	a5,a4
   10d30:	0027979b          	slliw	a5,a5,0x2
   10d34:	9fb9                	addw	a5,a5,a4
   10d36:	0017979b          	slliw	a5,a5,0x1
   10d3a:	2781                	sext.w	a5,a5
   10d3c:	9fa5                	addw	a5,a5,s1
   10d3e:	2781                	sext.w	a5,a5
   10d40:	fd07879b          	addiw	a5,a5,-48
   10d44:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   10d48:	fa843783          	ld	a5,-88(s0)
   10d4c:	0007c783          	lbu	a5,0(a5)
   10d50:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   10d54:	8726                	mv	a4,s1
   10d56:	02f00793          	li	a5,47
   10d5a:	02e7df63          	ble	a4,a5,10d98 <vprintfmt_lib+0x12a>
   10d5e:	8726                	mv	a4,s1
   10d60:	03900793          	li	a5,57
   10d64:	02e7ca63          	blt	a5,a4,10d98 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   10d68:	fa843783          	ld	a5,-88(s0)
   10d6c:	0785                	addi	a5,a5,1
   10d6e:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   10d72:	bf65                	j	10d2a <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   10d74:	fa043783          	ld	a5,-96(s0)
   10d78:	00878713          	addi	a4,a5,8
   10d7c:	fae43023          	sd	a4,-96(s0)
   10d80:	439c                	lw	a5,0(a5)
   10d82:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   10d86:	a811                	j	10d9a <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   10d88:	fcc42783          	lw	a5,-52(s0)
   10d8c:	2781                	sext.w	a5,a5
   10d8e:	f407d5e3          	bgez	a5,10cd8 <vprintfmt_lib+0x6a>
                width = 0;
   10d92:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   10d96:	b789                	j	10cd8 <vprintfmt_lib+0x6a>
            goto process_precision;
   10d98:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   10d9a:	fcc42783          	lw	a5,-52(s0)
   10d9e:	2781                	sext.w	a5,a5
   10da0:	f207dce3          	bgez	a5,10cd8 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   10da4:	fc842783          	lw	a5,-56(s0)
   10da8:	fcf42623          	sw	a5,-52(s0)
   10dac:	57fd                	li	a5,-1
   10dae:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   10db2:	b71d                	j	10cd8 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   10db4:	fd042783          	lw	a5,-48(s0)
   10db8:	2785                	addiw	a5,a5,1
   10dba:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   10dbe:	bf29                	j	10cd8 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   10dc0:	fa043783          	ld	a5,-96(s0)
   10dc4:	00878713          	addi	a4,a5,8
   10dc8:	fae43023          	sd	a4,-96(s0)
   10dcc:	439c                	lw	a5,0(a5)
   10dce:	853e                	mv	a0,a5
   10dd0:	b7fff0ef          	jal	ra,1094e <print_char>
            break;
   10dd4:	a261                	j	10f5c <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   10dd6:	fa043783          	ld	a5,-96(s0)
   10dda:	00878713          	addi	a4,a5,8
   10dde:	fae43023          	sd	a4,-96(s0)
   10de2:	0007b903          	ld	s2,0(a5)
   10de6:	00091563          	bnez	s2,10df0 <vprintfmt_lib+0x182>
                p = "(null)";
   10dea:	67c9                	lui	a5,0x12
   10dec:	88078913          	addi	s2,a5,-1920 # 11880 <strnlen+0x120>
            }
            if (width > 0 && padc != '-') {
   10df0:	fcc42783          	lw	a5,-52(s0)
   10df4:	2781                	sext.w	a5,a5
   10df6:	06f05263          	blez	a5,10e5a <vprintfmt_lib+0x1ec>
   10dfa:	fc744783          	lbu	a5,-57(s0)
   10dfe:	0ff7f713          	andi	a4,a5,255
   10e02:	02d00793          	li	a5,45
   10e06:	04f70a63          	beq	a4,a5,10e5a <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10e0a:	fc842783          	lw	a5,-56(s0)
   10e0e:	85be                	mv	a1,a5
   10e10:	854a                	mv	a0,s2
   10e12:	14f000ef          	jal	ra,11760 <strnlen>
   10e16:	87aa                	mv	a5,a0
   10e18:	873e                	mv	a4,a5
   10e1a:	fcc42783          	lw	a5,-52(s0)
   10e1e:	9f99                	subw	a5,a5,a4
   10e20:	fcf42623          	sw	a5,-52(s0)
   10e24:	a821                	j	10e3c <vprintfmt_lib+0x1ce>
                    print_char(padc);
   10e26:	fc744783          	lbu	a5,-57(s0)
   10e2a:	2781                	sext.w	a5,a5
   10e2c:	853e                	mv	a0,a5
   10e2e:	b21ff0ef          	jal	ra,1094e <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10e32:	fcc42783          	lw	a5,-52(s0)
   10e36:	37fd                	addiw	a5,a5,-1
   10e38:	fcf42623          	sw	a5,-52(s0)
   10e3c:	fcc42783          	lw	a5,-52(s0)
   10e40:	2781                	sext.w	a5,a5
   10e42:	fef042e3          	bgtz	a5,10e26 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10e46:	a811                	j	10e5a <vprintfmt_lib+0x1ec>
                print_char(ch);
   10e48:	8526                	mv	a0,s1
   10e4a:	b05ff0ef          	jal	ra,1094e <print_char>
                p++;
   10e4e:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10e50:	fcc42783          	lw	a5,-52(s0)
   10e54:	37fd                	addiw	a5,a5,-1
   10e56:	fcf42623          	sw	a5,-52(s0)
   10e5a:	00094783          	lbu	a5,0(s2)
   10e5e:	0007849b          	sext.w	s1,a5
   10e62:	c895                	beqz	s1,10e96 <vprintfmt_lib+0x228>
   10e64:	fc842783          	lw	a5,-56(s0)
   10e68:	2781                	sext.w	a5,a5
   10e6a:	fc07cfe3          	bltz	a5,10e48 <vprintfmt_lib+0x1da>
   10e6e:	fc842783          	lw	a5,-56(s0)
   10e72:	37fd                	addiw	a5,a5,-1
   10e74:	fcf42423          	sw	a5,-56(s0)
   10e78:	fc842783          	lw	a5,-56(s0)
   10e7c:	2781                	sext.w	a5,a5
   10e7e:	fc07d5e3          	bgez	a5,10e48 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   10e82:	a811                	j	10e96 <vprintfmt_lib+0x228>
                print_char(' ');
   10e84:	02000513          	li	a0,32
   10e88:	ac7ff0ef          	jal	ra,1094e <print_char>
            for (; width > 0; width--) {
   10e8c:	fcc42783          	lw	a5,-52(s0)
   10e90:	37fd                	addiw	a5,a5,-1
   10e92:	fcf42623          	sw	a5,-52(s0)
   10e96:	fcc42783          	lw	a5,-52(s0)
   10e9a:	2781                	sext.w	a5,a5
   10e9c:	fef044e3          	bgtz	a5,10e84 <vprintfmt_lib+0x216>
            }
            break;
   10ea0:	a875                	j	10f5c <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   10ea2:	fd042703          	lw	a4,-48(s0)
   10ea6:	fa040793          	addi	a5,s0,-96
   10eaa:	85ba                	mv	a1,a4
   10eac:	853e                	mv	a0,a5
   10eae:	00000097          	auipc	ra,0x0
   10eb2:	d58080e7          	jalr	-680(ra) # 10c06 <getint>
   10eb6:	87aa                	mv	a5,a0
   10eb8:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   10ebc:	fd843783          	ld	a5,-40(s0)
   10ec0:	0007dc63          	bgez	a5,10ed8 <vprintfmt_lib+0x26a>
                print_char('-');
   10ec4:	02d00513          	li	a0,45
   10ec8:	a87ff0ef          	jal	ra,1094e <print_char>
                num = -(long long) num;
   10ecc:	fd843783          	ld	a5,-40(s0)
   10ed0:	40f007b3          	neg	a5,a5
   10ed4:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   10ed8:	47a9                	li	a5,10
   10eda:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   10ede:	a089                	j	10f20 <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   10ee0:	47a9                	li	a5,10
   10ee2:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10ee6:	a01d                	j	10f0c <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   10ee8:	47a1                	li	a5,8
   10eea:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10eee:	a839                	j	10f0c <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   10ef0:	4785                	li	a5,1
   10ef2:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   10ef6:	03000513          	li	a0,48
   10efa:	a55ff0ef          	jal	ra,1094e <print_char>
            print_char('x');
   10efe:	07800513          	li	a0,120
   10f02:	a4dff0ef          	jal	ra,1094e <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   10f06:	47c1                	li	a5,16
   10f08:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   10f0c:	fd042703          	lw	a4,-48(s0)
   10f10:	fa040793          	addi	a5,s0,-96
   10f14:	85ba                	mv	a1,a4
   10f16:	853e                	mv	a0,a5
   10f18:	c83ff0ef          	jal	ra,10b9a <getuint>
   10f1c:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   10f20:	fc744783          	lbu	a5,-57(s0)
   10f24:	0007869b          	sext.w	a3,a5
   10f28:	fcc42703          	lw	a4,-52(s0)
   10f2c:	fd442783          	lw	a5,-44(s0)
   10f30:	863a                	mv	a2,a4
   10f32:	85be                	mv	a1,a5
   10f34:	fd843503          	ld	a0,-40(s0)
   10f38:	00000097          	auipc	ra,0x0
   10f3c:	b76080e7          	jalr	-1162(ra) # 10aae <printnum>
            break;
   10f40:	a831                	j	10f5c <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   10f42:	8526                	mv	a0,s1
   10f44:	a0bff0ef          	jal	ra,1094e <print_char>
            break;
   10f48:	a811                	j	10f5c <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   10f4a:	02500513          	li	a0,37
   10f4e:	a01ff0ef          	jal	ra,1094e <print_char>
            fmt = last_fmt;
   10f52:	fb843783          	ld	a5,-72(s0)
   10f56:	faf43423          	sd	a5,-88(s0)
            break;
   10f5a:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   10f5c:	bb35                	j	10c98 <vprintfmt_lib+0x2a>
                return;
   10f5e:	0001                	nop
        }
    }
}
   10f60:	60e6                	ld	ra,88(sp)
   10f62:	6446                	ld	s0,80(sp)
   10f64:	64a6                	ld	s1,72(sp)
   10f66:	6906                	ld	s2,64(sp)
   10f68:	6125                	addi	sp,sp,96
   10f6a:	8082                	ret

0000000000010f6c <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   10f6c:	7159                	addi	sp,sp,-112
   10f6e:	f406                	sd	ra,40(sp)
   10f70:	f022                	sd	s0,32(sp)
   10f72:	1800                	addi	s0,sp,48
   10f74:	fca43c23          	sd	a0,-40(s0)
   10f78:	e40c                	sd	a1,8(s0)
   10f7a:	e810                	sd	a2,16(s0)
   10f7c:	ec14                	sd	a3,24(s0)
   10f7e:	f018                	sd	a4,32(s0)
   10f80:	f41c                	sd	a5,40(s0)
   10f82:	03043823          	sd	a6,48(s0)
   10f86:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   10f8a:	04040793          	addi	a5,s0,64
   10f8e:	fc878793          	addi	a5,a5,-56
   10f92:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   10f96:	fe843783          	ld	a5,-24(s0)
   10f9a:	85be                	mv	a1,a5
   10f9c:	fd843503          	ld	a0,-40(s0)
   10fa0:	00000097          	auipc	ra,0x0
   10fa4:	cce080e7          	jalr	-818(ra) # 10c6e <vprintfmt_lib>

    va_end(arg);
}
   10fa8:	0001                	nop
   10faa:	70a2                	ld	ra,40(sp)
   10fac:	7402                	ld	s0,32(sp)
   10fae:	6165                	addi	sp,sp,112
   10fb0:	8082                	ret

0000000000010fb2 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   10fb2:	1141                	addi	sp,sp,-16
   10fb4:	e422                	sd	s0,8(sp)
   10fb6:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   10fb8:	0001                	nop
   10fba:	6422                	ld	s0,8(sp)
   10fbc:	0141                	addi	sp,sp,16
   10fbe:	8082                	ret

0000000000010fc0 <sd_get_byte>:

uint8_t sd_get_byte() {
   10fc0:	1101                	addi	sp,sp,-32
   10fc2:	ec22                	sd	s0,24(sp)
   10fc4:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10fc6:	100507b7          	lui	a5,0x10050
   10fca:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   10fce:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   10fd2:	fe843783          	ld	a5,-24(s0)
   10fd6:	47fc                	lw	a5,76(a5)
   10fd8:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   10fdc:	fe442783          	lw	a5,-28(s0)
   10fe0:	fe07c9e3          	bltz	a5,10fd2 <sd_get_byte+0x12>
    return (uint8_t)rx;
   10fe4:	fe442783          	lw	a5,-28(s0)
   10fe8:	0ff7f793          	andi	a5,a5,255
}
   10fec:	853e                	mv	a0,a5
   10fee:	6462                	ld	s0,24(sp)
   10ff0:	6105                	addi	sp,sp,32
   10ff2:	8082                	ret

0000000000010ff4 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   10ff4:	7179                	addi	sp,sp,-48
   10ff6:	f422                	sd	s0,40(sp)
   10ff8:	1800                	addi	s0,sp,48
   10ffa:	87aa                	mv	a5,a0
   10ffc:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11000:	100507b7          	lui	a5,0x10050
   11004:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   11008:	0001                	nop
   1100a:	fe843783          	ld	a5,-24(s0)
   1100e:	47bc                	lw	a5,72(a5)
   11010:	2781                	sext.w	a5,a5
   11012:	2781                	sext.w	a5,a5
   11014:	fe07cbe3          	bltz	a5,1100a <sd_set_byte+0x16>
    p->txdata = v;
   11018:	fdf44783          	lbu	a5,-33(s0)
   1101c:	0007871b          	sext.w	a4,a5
   11020:	fe843783          	ld	a5,-24(s0)
   11024:	c7b8                	sw	a4,72(a5)
}
   11026:	0001                	nop
   11028:	7422                	ld	s0,40(sp)
   1102a:	6145                	addi	sp,sp,48
   1102c:	8082                	ret

000000000001102e <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   1102e:	7179                	addi	sp,sp,-48
   11030:	f406                	sd	ra,40(sp)
   11032:	f022                	sd	s0,32(sp)
   11034:	1800                	addi	s0,sp,48
   11036:	fca43c23          	sd	a0,-40(s0)
   1103a:	87ae                	mv	a5,a1
   1103c:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11040:	100507b7          	lui	a5,0x10050
   11044:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   11048:	f79ff0ef          	jal	ra,10fc0 <sd_get_byte>
   1104c:	87aa                	mv	a5,a0
   1104e:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   11052:	a831                	j	1106e <sd_read_block+0x40>
       *buf = sd_get_byte();
   11054:	f6dff0ef          	jal	ra,10fc0 <sd_get_byte>
   11058:	87aa                	mv	a5,a0
   1105a:	873e                	mv	a4,a5
   1105c:	fd843783          	ld	a5,-40(s0)
   11060:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003e2e4>
       buf++;
   11064:	fd843783          	ld	a5,-40(s0)
   11068:	0785                	addi	a5,a5,1
   1106a:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   1106e:	fd442783          	lw	a5,-44(s0)
   11072:	fff7871b          	addiw	a4,a5,-1
   11076:	fce42a23          	sw	a4,-44(s0)
   1107a:	ffe9                	bnez	a5,11054 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   1107c:	f45ff0ef          	jal	ra,10fc0 <sd_get_byte>
   11080:	87aa                	mv	a5,a0
   11082:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   11086:	f3bff0ef          	jal	ra,10fc0 <sd_get_byte>
   1108a:	87aa                	mv	a5,a0
   1108c:	fef40323          	sb	a5,-26(s0)
}
   11090:	0001                	nop
   11092:	70a2                	ld	ra,40(sp)
   11094:	7402                	ld	s0,32(sp)
   11096:	6145                	addi	sp,sp,48
   11098:	8082                	ret

000000000001109a <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   1109a:	7179                	addi	sp,sp,-48
   1109c:	f406                	sd	ra,40(sp)
   1109e:	f022                	sd	s0,32(sp)
   110a0:	1800                	addi	s0,sp,48
   110a2:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   110a6:	100507b7          	lui	a5,0x10050
   110aa:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   110ae:	05200513          	li	a0,82
   110b2:	f43ff0ef          	jal	ra,10ff4 <sd_set_byte>
    sd_set_byte(0x00);
   110b6:	4501                	li	a0,0
   110b8:	f3dff0ef          	jal	ra,10ff4 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   110bc:	fd843783          	ld	a5,-40(s0)
   110c0:	83c1                	srli	a5,a5,0x10
   110c2:	0ff7f793          	andi	a5,a5,255
   110c6:	853e                	mv	a0,a5
   110c8:	f2dff0ef          	jal	ra,10ff4 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   110cc:	fd843783          	ld	a5,-40(s0)
   110d0:	83a1                	srli	a5,a5,0x8
   110d2:	0ff7f793          	andi	a5,a5,255
   110d6:	853e                	mv	a0,a5
   110d8:	f1dff0ef          	jal	ra,10ff4 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   110dc:	fd843783          	ld	a5,-40(s0)
   110e0:	0ff7f793          	andi	a5,a5,255
   110e4:	853e                	mv	a0,a5
   110e6:	f0fff0ef          	jal	ra,10ff4 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   110ea:	0ff00513          	li	a0,255
   110ee:	f07ff0ef          	jal	ra,10ff4 <sd_set_byte>

    cmdresp = sd_get_byte();
   110f2:	00000097          	auipc	ra,0x0
   110f6:	ece080e7          	jalr	-306(ra) # 10fc0 <sd_get_byte>
   110fa:	87aa                	mv	a5,a0
   110fc:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11100:	fe744783          	lbu	a5,-25(s0)
   11104:	2781                	sext.w	a5,a5
}
   11106:	853e                	mv	a0,a5
   11108:	70a2                	ld	ra,40(sp)
   1110a:	7402                	ld	s0,32(sp)
   1110c:	6145                	addi	sp,sp,48
   1110e:	8082                	ret

0000000000011110 <sd_stop_reading>:

int sd_stop_reading() {
   11110:	1101                	addi	sp,sp,-32
   11112:	ec06                	sd	ra,24(sp)
   11114:	e822                	sd	s0,16(sp)
   11116:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11118:	100507b7          	lui	a5,0x10050
   1111c:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   11120:	04c00513          	li	a0,76
   11124:	00000097          	auipc	ra,0x0
   11128:	ed0080e7          	jalr	-304(ra) # 10ff4 <sd_set_byte>
    sd_set_byte(0);
   1112c:	4501                	li	a0,0
   1112e:	00000097          	auipc	ra,0x0
   11132:	ec6080e7          	jalr	-314(ra) # 10ff4 <sd_set_byte>
    sd_set_byte(0);
   11136:	4501                	li	a0,0
   11138:	00000097          	auipc	ra,0x0
   1113c:	ebc080e7          	jalr	-324(ra) # 10ff4 <sd_set_byte>
    sd_set_byte(0);
   11140:	4501                	li	a0,0
   11142:	00000097          	auipc	ra,0x0
   11146:	eb2080e7          	jalr	-334(ra) # 10ff4 <sd_set_byte>
    sd_set_byte(0);
   1114a:	4501                	li	a0,0
   1114c:	00000097          	auipc	ra,0x0
   11150:	ea8080e7          	jalr	-344(ra) # 10ff4 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11154:	0ff00513          	li	a0,255
   11158:	00000097          	auipc	ra,0x0
   1115c:	e9c080e7          	jalr	-356(ra) # 10ff4 <sd_set_byte>
    cmdresp = sd_get_byte();
   11160:	e61ff0ef          	jal	ra,10fc0 <sd_get_byte>
   11164:	87aa                	mv	a5,a0
   11166:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   1116a:	fe744783          	lbu	a5,-25(s0)
   1116e:	2781                	sext.w	a5,a5
}
   11170:	853e                	mv	a0,a5
   11172:	60e2                	ld	ra,24(sp)
   11174:	6442                	ld	s0,16(sp)
   11176:	6105                	addi	sp,sp,32
   11178:	8082                	ret

000000000001117a <is_empty_gui>:
#include "axi_maps.h"
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"

int is_empty_gui(const struct gpt_guid *guid) {
   1117a:	1101                	addi	sp,sp,-32
   1117c:	ec22                	sd	s0,24(sp)
   1117e:	1000                	addi	s0,sp,32
   11180:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11184:	fe843783          	ld	a5,-24(s0)
   11188:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   1118a:	e7ad                	bnez	a5,111f4 <is_empty_gui+0x7a>
        && guid->time_mid == 0
   1118c:	fe843783          	ld	a5,-24(s0)
   11190:	0047d783          	lhu	a5,4(a5) # 10050004 <_end+0x1003e2e8>
   11194:	e3a5                	bnez	a5,111f4 <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11196:	fe843783          	ld	a5,-24(s0)
   1119a:	0067d783          	lhu	a5,6(a5)
   1119e:	ebb9                	bnez	a5,111f4 <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   111a0:	fe843783          	ld	a5,-24(s0)
   111a4:	0087c783          	lbu	a5,8(a5)
   111a8:	e7b1                	bnez	a5,111f4 <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   111aa:	fe843783          	ld	a5,-24(s0)
   111ae:	0097c783          	lbu	a5,9(a5)
   111b2:	e3a9                	bnez	a5,111f4 <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   111b4:	fe843783          	ld	a5,-24(s0)
   111b8:	00a7c783          	lbu	a5,10(a5)
   111bc:	ef85                	bnez	a5,111f4 <is_empty_gui+0x7a>
   111be:	fe843783          	ld	a5,-24(s0)
   111c2:	00b7c783          	lbu	a5,11(a5)
   111c6:	e79d                	bnez	a5,111f4 <is_empty_gui+0x7a>
   111c8:	fe843783          	ld	a5,-24(s0)
   111cc:	00c7c783          	lbu	a5,12(a5)
   111d0:	e395                	bnez	a5,111f4 <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   111d2:	fe843783          	ld	a5,-24(s0)
   111d6:	00d7c783          	lbu	a5,13(a5)
   111da:	ef89                	bnez	a5,111f4 <is_empty_gui+0x7a>
   111dc:	fe843783          	ld	a5,-24(s0)
   111e0:	00e7c783          	lbu	a5,14(a5)
   111e4:	eb81                	bnez	a5,111f4 <is_empty_gui+0x7a>
   111e6:	fe843783          	ld	a5,-24(s0)
   111ea:	00f7c783          	lbu	a5,15(a5)
   111ee:	e399                	bnez	a5,111f4 <is_empty_gui+0x7a>
   111f0:	4785                	li	a5,1
   111f2:	a011                	j	111f6 <is_empty_gui+0x7c>
   111f4:	4781                	li	a5,0
}
   111f6:	853e                	mv	a0,a5
   111f8:	6462                	ld	s0,24(sp)
   111fa:	6105                	addi	sp,sp,32
   111fc:	8082                	ret

00000000000111fe <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   111fe:	7159                	addi	sp,sp,-112
   11200:	f486                	sd	ra,104(sp)
   11202:	f0a2                	sd	s0,96(sp)
   11204:	1880                	addi	s0,sp,112
   11206:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   1120a:	fe843783          	ld	a5,-24(s0)
   1120e:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11210:	0187d79b          	srliw	a5,a5,0x18
   11214:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11218:	fe843783          	ld	a5,-24(s0)
   1121c:	439c                	lw	a5,0(a5)
   1121e:	0107d79b          	srliw	a5,a5,0x10
   11222:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11224:	0ff7f793          	andi	a5,a5,255
   11228:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   1122c:	fe843783          	ld	a5,-24(s0)
   11230:	439c                	lw	a5,0(a5)
   11232:	0087d79b          	srliw	a5,a5,0x8
   11236:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11238:	0ff7f793          	andi	a5,a5,255
   1123c:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11240:	fe843783          	ld	a5,-24(s0)
   11244:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11246:	0ff7f793          	andi	a5,a5,255
   1124a:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   1124e:	fe843783          	ld	a5,-24(s0)
   11252:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11256:	0087d79b          	srliw	a5,a5,0x8
   1125a:	17c2                	slli	a5,a5,0x30
   1125c:	93c1                	srli	a5,a5,0x30
   1125e:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11262:	fe843783          	ld	a5,-24(s0)
   11266:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1126a:	2781                	sext.w	a5,a5
   1126c:	0ff7f793          	andi	a5,a5,255
   11270:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11274:	fe843783          	ld	a5,-24(s0)
   11278:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1127c:	0087d79b          	srliw	a5,a5,0x8
   11280:	17c2                	slli	a5,a5,0x30
   11282:	93c1                	srli	a5,a5,0x30
   11284:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11288:	fe843783          	ld	a5,-24(s0)
   1128c:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11290:	2781                	sext.w	a5,a5
   11292:	0ff7f793          	andi	a5,a5,255
   11296:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11298:	fe843703          	ld	a4,-24(s0)
   1129c:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112a0:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   112a2:	fe843683          	ld	a3,-24(s0)
   112a6:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112aa:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   112ac:	fe843603          	ld	a2,-24(s0)
   112b0:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112b4:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   112b6:	fe843583          	ld	a1,-24(s0)
   112ba:	00b5c583          	lbu	a1,11(a1) # fffffffff000000b <_end+0xffffffffeffee2ef>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112be:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   112c0:	fe843503          	ld	a0,-24(s0)
   112c4:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112c8:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   112ca:	fe843803          	ld	a6,-24(s0)
   112ce:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112d2:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   112d4:	fe843883          	ld	a7,-24(s0)
   112d8:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112dc:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   112de:	fe843303          	ld	t1,-24(s0)
   112e2:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   112e6:	2301                	sext.w	t1,t1
   112e8:	e09a                	sd	t1,64(sp)
   112ea:	fc46                	sd	a7,56(sp)
   112ec:	f842                	sd	a6,48(sp)
   112ee:	f42a                	sd	a0,40(sp)
   112f0:	f02e                	sd	a1,32(sp)
   112f2:	ec32                	sd	a2,24(sp)
   112f4:	e836                	sd	a3,16(sp)
   112f6:	e43a                	sd	a4,8(sp)
   112f8:	e03e                	sd	a5,0(sp)
   112fa:	8886                	mv	a7,ra
   112fc:	881e                	mv	a6,t2
   112fe:	8796                	mv	a5,t0
   11300:	877e                	mv	a4,t6
   11302:	86fa                	mv	a3,t5
   11304:	8676                	mv	a2,t4
   11306:	85f2                	mv	a1,t3
   11308:	6549                	lui	a0,0x12
   1130a:	9e050513          	addi	a0,a0,-1568 # 119e0 <strnlen+0x280>
   1130e:	c5fff0ef          	jal	ra,10f6c <printf_uart>
        );
}
   11312:	0001                	nop
   11314:	70a6                	ld	ra,104(sp)
   11316:	7406                	ld	s0,96(sp)
   11318:	6165                	addi	sp,sp,112
   1131a:	8082                	ret

000000000001131c <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   1131c:	7179                	addi	sp,sp,-48
   1131e:	f422                	sd	s0,40(sp)
   11320:	1800                	addi	s0,sp,48
   11322:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   11326:	5b1937b7          	lui	a5,0x5b193
   1132a:	3007879b          	addiw	a5,a5,768
   1132e:	fef42023          	sw	a5,-32(s0)
   11332:	c7800793          	li	a5,-904
   11336:	fef41223          	sh	a5,-28(s0)
   1133a:	6791                	lui	a5,0x4
   1133c:	0cd7879b          	addiw	a5,a5,205
   11340:	fef41323          	sh	a5,-26(s0)
   11344:	f8000793          	li	a5,-128
   11348:	fef40423          	sb	a5,-24(s0)
   1134c:	4789                	li	a5,2
   1134e:	fef404a3          	sb	a5,-23(s0)
   11352:	57a1                	li	a5,-24
   11354:	fef40523          	sb	a5,-22(s0)
   11358:	06c00793          	li	a5,108
   1135c:	fef405a3          	sb	a5,-21(s0)
   11360:	04500793          	li	a5,69
   11364:	fef40623          	sb	a5,-20(s0)
   11368:	05800793          	li	a5,88
   1136c:	fef406a3          	sb	a5,-19(s0)
   11370:	47ad                	li	a5,11
   11372:	fef40723          	sb	a5,-18(s0)
   11376:	04700793          	li	a5,71
   1137a:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   1137e:	fe042703          	lw	a4,-32(s0)
   11382:	fd843783          	ld	a5,-40(s0)
   11386:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   11388:	0af71863          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   1138c:	fe445703          	lhu	a4,-28(s0)
   11390:	fd843783          	ld	a5,-40(s0)
   11394:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   11398:	2701                	sext.w	a4,a4
   1139a:	2781                	sext.w	a5,a5
   1139c:	08f71e63          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   113a0:	fe645703          	lhu	a4,-26(s0)
   113a4:	fd843783          	ld	a5,-40(s0)
   113a8:	0067d783          	lhu	a5,6(a5)
   113ac:	2701                	sext.w	a4,a4
   113ae:	2781                	sext.w	a5,a5
   113b0:	08f71463          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   113b4:	fe844703          	lbu	a4,-24(s0)
   113b8:	fd843783          	ld	a5,-40(s0)
   113bc:	0087c783          	lbu	a5,8(a5)
   113c0:	06f71c63          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   113c4:	fe944703          	lbu	a4,-23(s0)
   113c8:	fd843783          	ld	a5,-40(s0)
   113cc:	0097c783          	lbu	a5,9(a5)
   113d0:	06f71463          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   113d4:	fea44703          	lbu	a4,-22(s0)
   113d8:	fd843783          	ld	a5,-40(s0)
   113dc:	00a7c783          	lbu	a5,10(a5)
   113e0:	04f71c63          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   113e4:	feb44703          	lbu	a4,-21(s0)
   113e8:	fd843783          	ld	a5,-40(s0)
   113ec:	00b7c783          	lbu	a5,11(a5)
   113f0:	04f71463          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   113f4:	fec44703          	lbu	a4,-20(s0)
   113f8:	fd843783          	ld	a5,-40(s0)
   113fc:	00c7c783          	lbu	a5,12(a5)
   11400:	02f71c63          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   11404:	fed44703          	lbu	a4,-19(s0)
   11408:	fd843783          	ld	a5,-40(s0)
   1140c:	00d7c783          	lbu	a5,13(a5)
   11410:	02f71463          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   11414:	fee44703          	lbu	a4,-18(s0)
   11418:	fd843783          	ld	a5,-40(s0)
   1141c:	00e7c783          	lbu	a5,14(a5)
   11420:	00f71c63          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   11424:	fef44703          	lbu	a4,-17(s0)
   11428:	fd843783          	ld	a5,-40(s0)
   1142c:	00f7c783          	lbu	a5,15(a5)
   11430:	00f71463          	bne	a4,a5,11438 <is_uboot_guid+0x11c>
   11434:	4785                	li	a5,1
   11436:	a011                	j	1143a <is_uboot_guid+0x11e>
   11438:	4781                	li	a5,0
}
   1143a:	853e                	mv	a0,a5
   1143c:	7422                	ld	s0,40(sp)
   1143e:	6145                	addi	sp,sp,48
   11440:	8082                	ret

0000000000011442 <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   11442:	9c010113          	addi	sp,sp,-1600
   11446:	62113c23          	sd	ra,1592(sp)
   1144a:	62813823          	sd	s0,1584(sp)
   1144e:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   11452:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   11456:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   1145a:	080007b7          	lui	a5,0x8000
   1145e:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   11462:	00000097          	auipc	ra,0x0
   11466:	b50080e7          	jalr	-1200(ra) # 10fb2 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   1146a:	45b5                	li	a1,13
   1146c:	67c9                	lui	a5,0x12
   1146e:	a2878513          	addi	a0,a5,-1496 # 11a28 <strnlen+0x2c8>
   11472:	d1eff0ef          	jal	ra,10990 <print_uart>

    sd_start_reading(0);
   11476:	4501                	li	a0,0
   11478:	00000097          	auipc	ra,0x0
   1147c:	c22080e7          	jalr	-990(ra) # 1109a <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   11480:	dc040793          	addi	a5,s0,-576
   11484:	20000593          	li	a1,512
   11488:	853e                	mv	a0,a5
   1148a:	ba5ff0ef          	jal	ra,1102e <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   1148e:	bc040793          	addi	a5,s0,-1088
   11492:	20000593          	li	a1,512
   11496:	853e                	mv	a0,a5
   11498:	b97ff0ef          	jal	ra,1102e <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   1149c:	bc043703          	ld	a4,-1088(s0)
   114a0:	67c9                	lui	a5,0x12
   114a2:	a887b783          	ld	a5,-1400(a5) # 11a88 <strnlen+0x328>
   114a6:	00f70663          	beq	a4,a5,114b2 <run_from_sdcard+0x70>
        sd_stop_reading();
   114aa:	c67ff0ef          	jal	ra,11110 <sd_stop_reading>
        return -1;
   114ae:	57fd                	li	a5,-1
   114b0:	a2c5                	j	11690 <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   114b2:	fc042a23          	sw	zero,-44(s0)
   114b6:	a8c5                	j	115a6 <run_from_sdcard+0x164>
        i4 = i % 4;
   114b8:	fd442703          	lw	a4,-44(s0)
   114bc:	41f7579b          	sraiw	a5,a4,0x1f
   114c0:	01e7d79b          	srliw	a5,a5,0x1e
   114c4:	9f3d                	addw	a4,a4,a5
   114c6:	8b0d                	andi	a4,a4,3
   114c8:	40f707bb          	subw	a5,a4,a5
   114cc:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   114d0:	fc442783          	lw	a5,-60(s0)
   114d4:	2781                	sext.w	a5,a5
   114d6:	eb81                	bnez	a5,114e6 <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   114d8:	9c040793          	addi	a5,s0,-1600
   114dc:	20000593          	li	a1,512
   114e0:	853e                	mv	a0,a5
   114e2:	b4dff0ef          	jal	ra,1102e <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   114e6:	9c040713          	addi	a4,s0,-1600
   114ea:	fc442783          	lw	a5,-60(s0)
   114ee:	079e                	slli	a5,a5,0x7
   114f0:	97ba                	add	a5,a5,a4
   114f2:	853e                	mv	a0,a5
   114f4:	00000097          	auipc	ra,0x0
   114f8:	c86080e7          	jalr	-890(ra) # 1117a <is_empty_gui>
   114fc:	87aa                	mv	a5,a0
   114fe:	efd1                	bnez	a5,1159a <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   11500:	fd442783          	lw	a5,-44(s0)
   11504:	85be                	mv	a1,a5
   11506:	67c9                	lui	a5,0x12
   11508:	a3878513          	addi	a0,a5,-1480 # 11a38 <strnlen+0x2d8>
   1150c:	a61ff0ef          	jal	ra,10f6c <printf_uart>
        print_guid(&entry[i4].type);
   11510:	9c040713          	addi	a4,s0,-1600
   11514:	fc442783          	lw	a5,-60(s0)
   11518:	079e                	slli	a5,a5,0x7
   1151a:	97ba                	add	a5,a5,a4
   1151c:	853e                	mv	a0,a5
   1151e:	ce1ff0ef          	jal	ra,111fe <print_guid>
        print_uart(" : ", 3);
   11522:	458d                	li	a1,3
   11524:	67c9                	lui	a5,0x12
   11526:	a4078513          	addi	a0,a5,-1472 # 11a40 <strnlen+0x2e0>
   1152a:	c66ff0ef          	jal	ra,10990 <print_uart>
        print_uart(entry[i4].name, sizeof(entry[i4].name));
   1152e:	9c040713          	addi	a4,s0,-1600
   11532:	fc442783          	lw	a5,-60(s0)
   11536:	079e                	slli	a5,a5,0x7
   11538:	03078793          	addi	a5,a5,48
   1153c:	97ba                	add	a5,a5,a4
   1153e:	07a1                	addi	a5,a5,8
   11540:	04800593          	li	a1,72
   11544:	853e                	mv	a0,a5
   11546:	c4aff0ef          	jal	ra,10990 <print_uart>
        print_uart("\r\n", 2);
   1154a:	4589                	li	a1,2
   1154c:	67c9                	lui	a5,0x12
   1154e:	a4878513          	addi	a0,a5,-1464 # 11a48 <strnlen+0x2e8>
   11552:	c3eff0ef          	jal	ra,10990 <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   11556:	9c040713          	addi	a4,s0,-1600
   1155a:	fc442783          	lw	a5,-60(s0)
   1155e:	079e                	slli	a5,a5,0x7
   11560:	97ba                	add	a5,a5,a4
   11562:	853e                	mv	a0,a5
   11564:	00000097          	auipc	ra,0x0
   11568:	db8080e7          	jalr	-584(ra) # 1131c <is_uboot_guid>
   1156c:	87aa                	mv	a5,a0
   1156e:	c79d                	beqz	a5,1159c <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   11570:	fc442783          	lw	a5,-60(s0)
   11574:	079e                	slli	a5,a5,0x7
   11576:	ff040713          	addi	a4,s0,-16
   1157a:	97ba                	add	a5,a5,a4
   1157c:	9f07b783          	ld	a5,-1552(a5)
   11580:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   11584:	fc442783          	lw	a5,-60(s0)
   11588:	079e                	slli	a5,a5,0x7
   1158a:	ff040713          	addi	a4,s0,-16
   1158e:	97ba                	add	a5,a5,a4
   11590:	9f87b783          	ld	a5,-1544(a5)
   11594:	fef43023          	sd	a5,-32(s0)
   11598:	a011                	j	1159c <run_from_sdcard+0x15a>
            continue;
   1159a:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   1159c:	fd442783          	lw	a5,-44(s0)
   115a0:	2785                	addiw	a5,a5,1
   115a2:	fcf42a23          	sw	a5,-44(s0)
   115a6:	c1042703          	lw	a4,-1008(s0)
   115aa:	fd442783          	lw	a5,-44(s0)
   115ae:	f0e7e5e3          	bltu	a5,a4,114b8 <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   115b2:	b5fff0ef          	jal	ra,11110 <sd_stop_reading>

    if (lba_start == 0) {
   115b6:	fe843783          	ld	a5,-24(s0)
   115ba:	e399                	bnez	a5,115c0 <run_from_sdcard+0x17e>
        return -1;
   115bc:	57fd                	li	a5,-1
   115be:	a8c9                	j	11690 <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   115c0:	fe843783          	ld	a5,-24(s0)
   115c4:	07a6                	slli	a5,a5,0x9
   115c6:	853e                	mv	a0,a5
   115c8:	00000097          	auipc	ra,0x0
   115cc:	ad2080e7          	jalr	-1326(ra) # 1109a <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   115d0:	fe043703          	ld	a4,-32(s0)
   115d4:	fe843783          	ld	a5,-24(s0)
   115d8:	40f707b3          	sub	a5,a4,a5
   115dc:	0785                	addi	a5,a5,1
   115de:	8385                	srli	a5,a5,0x1
   115e0:	85be                	mv	a1,a5
   115e2:	67c9                	lui	a5,0x12
   115e4:	a5078513          	addi	a0,a5,-1456 # 11a50 <strnlen+0x2f0>
   115e8:	985ff0ef          	jal	ra,10f6c <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   115ec:	fe843783          	ld	a5,-24(s0)
   115f0:	fcf43423          	sd	a5,-56(s0)
   115f4:	a8bd                	j	11672 <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   115f6:	9c040793          	addi	a5,s0,-1600
   115fa:	20000593          	li	a1,512
   115fe:	853e                	mv	a0,a5
   11600:	a2fff0ef          	jal	ra,1102e <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   11604:	9c040793          	addi	a5,s0,-1600
   11608:	6398                	ld	a4,0(a5)
   1160a:	fd843783          	ld	a5,-40(s0)
   1160e:	639c                	ld	a5,0(a5)
   11610:	00f71b63          	bne	a4,a5,11626 <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   11614:	67c9                	lui	a5,0x12
   11616:	a6078593          	addi	a1,a5,-1440 # 11a60 <strnlen+0x300>
   1161a:	67c9                	lui	a5,0x12
   1161c:	a7078513          	addi	a0,a5,-1424 # 11a70 <strnlen+0x310>
   11620:	94dff0ef          	jal	ra,10f6c <printf_uart>
            break;
   11624:	a8a9                	j	1167e <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   11626:	fd843783          	ld	a5,-40(s0)
   1162a:	86be                	mv	a3,a5
   1162c:	9c040793          	addi	a5,s0,-1600
   11630:	20000713          	li	a4,512
   11634:	863a                	mv	a2,a4
   11636:	85be                	mv	a1,a5
   11638:	8536                	mv	a0,a3
   1163a:	00000097          	auipc	ra,0x0
   1163e:	066080e7          	jalr	102(ra) # 116a0 <memcpy>
        sram += sizeof(entry);
   11642:	fd843783          	ld	a5,-40(s0)
   11646:	20078793          	addi	a5,a5,512
   1164a:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   1164e:	fc843703          	ld	a4,-56(s0)
   11652:	06400793          	li	a5,100
   11656:	02f777b3          	remu	a5,a4,a5
   1165a:	e799                	bnez	a5,11668 <run_from_sdcard+0x226>
            print_uart(". ", 2);
   1165c:	4589                	li	a1,2
   1165e:	67c9                	lui	a5,0x12
   11660:	a8078513          	addi	a0,a5,-1408 # 11a80 <strnlen+0x320>
   11664:	b2cff0ef          	jal	ra,10990 <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   11668:	fc843783          	ld	a5,-56(s0)
   1166c:	0785                	addi	a5,a5,1
   1166e:	fcf43423          	sd	a5,-56(s0)
   11672:	fc843703          	ld	a4,-56(s0)
   11676:	fe043783          	ld	a5,-32(s0)
   1167a:	f6e7fee3          	bleu	a4,a5,115f6 <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   1167e:	4589                	li	a1,2
   11680:	67c9                	lui	a5,0x12
   11682:	a4878513          	addi	a0,a5,-1464 # 11a48 <strnlen+0x2e8>
   11686:	b0aff0ef          	jal	ra,10990 <print_uart>

    sd_stop_reading();
   1168a:	a87ff0ef          	jal	ra,11110 <sd_stop_reading>
    return 0;
   1168e:	4781                	li	a5,0
}
   11690:	853e                	mv	a0,a5
   11692:	63813083          	ld	ra,1592(sp)
   11696:	63013403          	ld	s0,1584(sp)
   1169a:	64010113          	addi	sp,sp,1600
   1169e:	8082                	ret

00000000000116a0 <memcpy>:
   116a0:	00a5c7b3          	xor	a5,a1,a0
   116a4:	8b9d                	andi	a5,a5,7
   116a6:	00c50733          	add	a4,a0,a2
   116aa:	e781                	bnez	a5,116b2 <memcpy+0x12>
   116ac:	479d                	li	a5,7
   116ae:	00c7ef63          	bltu	a5,a2,116cc <memcpy+0x2c>
   116b2:	87aa                	mv	a5,a0
   116b4:	00e56963          	bltu	a0,a4,116c6 <memcpy+0x26>
   116b8:	8082                	ret
   116ba:	0005c683          	lbu	a3,0(a1)
   116be:	0785                	addi	a5,a5,1
   116c0:	0585                	addi	a1,a1,1
   116c2:	fed78fa3          	sb	a3,-1(a5)
   116c6:	fee7eae3          	bltu	a5,a4,116ba <memcpy+0x1a>
   116ca:	8082                	ret
   116cc:	00757793          	andi	a5,a0,7
   116d0:	ebbd                	bnez	a5,11746 <memcpy+0xa6>
   116d2:	87aa                	mv	a5,a0
   116d4:	ff877693          	andi	a3,a4,-8
   116d8:	fc068613          	addi	a2,a3,-64
   116dc:	06c7fc63          	bleu	a2,a5,11754 <memcpy+0xb4>
   116e0:	0005b383          	ld	t2,0(a1)
   116e4:	0085b283          	ld	t0,8(a1)
   116e8:	0105bf83          	ld	t6,16(a1)
   116ec:	0185bf03          	ld	t5,24(a1)
   116f0:	0205be83          	ld	t4,32(a1)
   116f4:	0285be03          	ld	t3,40(a1)
   116f8:	0305b303          	ld	t1,48(a1)
   116fc:	0385b883          	ld	a7,56(a1)
   11700:	04858593          	addi	a1,a1,72
   11704:	04878793          	addi	a5,a5,72
   11708:	ff85b803          	ld	a6,-8(a1)
   1170c:	fa77bc23          	sd	t2,-72(a5)
   11710:	fc57b023          	sd	t0,-64(a5)
   11714:	fdf7b423          	sd	t6,-56(a5)
   11718:	fde7b823          	sd	t5,-48(a5)
   1171c:	fdd7bc23          	sd	t4,-40(a5)
   11720:	ffc7b023          	sd	t3,-32(a5)
   11724:	fe67b423          	sd	t1,-24(a5)
   11728:	ff17b823          	sd	a7,-16(a5)
   1172c:	ff07bc23          	sd	a6,-8(a5)
   11730:	b775                	j	116dc <memcpy+0x3c>
   11732:	0005c683          	lbu	a3,0(a1)
   11736:	0785                	addi	a5,a5,1
   11738:	0585                	addi	a1,a1,1
   1173a:	fed78fa3          	sb	a3,-1(a5)
   1173e:	0077f693          	andi	a3,a5,7
   11742:	fae5                	bnez	a3,11732 <memcpy+0x92>
   11744:	bf41                	j	116d4 <memcpy+0x34>
   11746:	87aa                	mv	a5,a0
   11748:	bfdd                	j	1173e <memcpy+0x9e>
   1174a:	6190                	ld	a2,0(a1)
   1174c:	07a1                	addi	a5,a5,8
   1174e:	05a1                	addi	a1,a1,8
   11750:	fec7bc23          	sd	a2,-8(a5)
   11754:	fed7ebe3          	bltu	a5,a3,1174a <memcpy+0xaa>
   11758:	f6e7e7e3          	bltu	a5,a4,116c6 <memcpy+0x26>
   1175c:	8082                	ret
	...

0000000000011760 <strnlen>:
   11760:	95aa                	add	a1,a1,a0
   11762:	87aa                	mv	a5,a0
   11764:	00b78563          	beq	a5,a1,1176e <strnlen+0xe>
   11768:	0007c703          	lbu	a4,0(a5)
   1176c:	e701                	bnez	a4,11774 <strnlen+0x14>
   1176e:	40a78533          	sub	a0,a5,a0
   11772:	8082                	ret
   11774:	0785                	addi	a5,a5,1
   11776:	b7fd                	j	11764 <strnlen+0x4>
	...
