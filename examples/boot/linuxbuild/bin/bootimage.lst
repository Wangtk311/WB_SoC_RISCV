
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1180006f          	j	1011c <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrs (pseudo asm instruction) - set bit   
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  la t0, trap_table
   100b4:	00000297          	auipc	t0,0x0
   100b8:	f5028293          	addi	t0,t0,-176 # 10004 <trap_table>
  csrw mtvec, t0
   100bc:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100c0:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100c4:	08200137          	lui	sp,0x8200

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100c8:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100cc:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100d0:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100d4:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100d8:	40a10133          	sub	sp,sp,a0
  addi sp,sp,-256
   100dc:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ed990>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100e0:	7b311073          	csrw	0x7b3,sp

  # just test amoadd.d (temporary code)
  li a2, 1
   100e4:	00100613          	li	a2,1
  sd a2,-8(sp)
   100e8:	fec13c23          	sd	a2,-8(sp)
  li a1,8
   100ec:	00800593          	li	a1,8
  sub a1,sp,a1
   100f0:	40b105b3          	sub	a1,sp,a1
  amoadd.d zero,a2,(a1)
   100f4:	00c5b02f          	amoadd.d	zero,a2,(a1)


  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100f8:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   100fc:	00050663          	beqz	a0,10108 <init0>
  wfi
   10100:	10500073          	wfi
  j end_init0
   10104:	0080006f          	j	1010c <end_init0>

0000000000010108 <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   10108:	510000ef          	jal	ra,10618 <_init>

000000000001010c <end_init0>:
end_init0:

  # a0 = hart id
  # a1 = fdt header
  csrr a0, mhartid
   1010c:	f1402573          	csrr	a0,mhartid
  la a1, dtb_start
   10110:	00001597          	auipc	a1,0x1
   10114:	5d858593          	addi	a1,a1,1496 # 116e8 <dtb_start>
  mret
   10118:	30200073          	mret

000000000001011c <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   1011c:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10120:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10124:	100f5e63          	bgez	t5,10240 <handle_exception>

0000000000010128 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10128:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1012c:	00113023          	sd	ra,0(sp)
   10130:	00813423          	sd	s0,8(sp)
   10134:	00913823          	sd	s1,16(sp)
   10138:	01213c23          	sd	s2,24(sp)
   1013c:	03313023          	sd	s3,32(sp)
   10140:	03413423          	sd	s4,40(sp)
   10144:	03513823          	sd	s5,48(sp)
   10148:	03613c23          	sd	s6,56(sp)
   1014c:	05713023          	sd	s7,64(sp)
   10150:	05813423          	sd	s8,72(sp)
   10154:	05913823          	sd	s9,80(sp)
   10158:	05a13c23          	sd	s10,88(sp)
   1015c:	07b13023          	sd	s11,96(sp)
   10160:	06213423          	sd	sp,104(sp)
   10164:	07013c23          	sd	a6,120(sp)
   10168:	09113023          	sd	a7,128(sp)
   1016c:	08a13423          	sd	a0,136(sp)
   10170:	08b13823          	sd	a1,144(sp)
   10174:	08c13c23          	sd	a2,152(sp)
   10178:	0ad13023          	sd	a3,160(sp)
   1017c:	0ae13423          	sd	a4,168(sp)
   10180:	0af13823          	sd	a5,176(sp)
   10184:	0b013c23          	sd	a6,184(sp)
   10188:	0d113023          	sd	a7,192(sp)
   1018c:	0c513423          	sd	t0,200(sp)
   10190:	0c613823          	sd	t1,208(sp)
   10194:	0c713c23          	sd	t2,216(sp)
   10198:	0fc13023          	sd	t3,224(sp)
   1019c:	0fd13423          	sd	t4,232(sp)
   101a0:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   101a4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   101a8:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101ac:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   101b0:	1cb000ef          	jal	ra,10b7a <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   101b4:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   101b8:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   101bc:	00013083          	ld	ra,0(sp)
   101c0:	00813403          	ld	s0,8(sp)
   101c4:	01013483          	ld	s1,16(sp)
   101c8:	01813903          	ld	s2,24(sp)
   101cc:	02013983          	ld	s3,32(sp)
   101d0:	02813a03          	ld	s4,40(sp)
   101d4:	03013a83          	ld	s5,48(sp)
   101d8:	03813b03          	ld	s6,56(sp)
   101dc:	04013b83          	ld	s7,64(sp)
   101e0:	04813c03          	ld	s8,72(sp)
   101e4:	05013c83          	ld	s9,80(sp)
   101e8:	05813d03          	ld	s10,88(sp)
   101ec:	06013d83          	ld	s11,96(sp)
   101f0:	06813103          	ld	sp,104(sp)
   101f4:	07813803          	ld	a6,120(sp)
   101f8:	08013883          	ld	a7,128(sp)
   101fc:	08813503          	ld	a0,136(sp)
   10200:	09013583          	ld	a1,144(sp)
   10204:	09813603          	ld	a2,152(sp)
   10208:	0a013683          	ld	a3,160(sp)
   1020c:	0a813703          	ld	a4,168(sp)
   10210:	0b013783          	ld	a5,176(sp)
   10214:	0b813803          	ld	a6,184(sp)
   10218:	0c013883          	ld	a7,192(sp)
   1021c:	0c813283          	ld	t0,200(sp)
   10220:	0d013303          	ld	t1,208(sp)
   10224:	0d813383          	ld	t2,216(sp)
   10228:	0e013e03          	ld	t3,224(sp)
   1022c:	0e813e83          	ld	t4,232(sp)
   10230:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10234:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10238:	34002f73          	csrr	t5,mscratch
  mret
   1023c:	30200073          	mret

0000000000010240 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10240:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10244:	01b000ef          	jal	ra,10a5e <exception_handler_c>
  mret
   10248:	30200073          	mret
   1024c:	0000                	unimp
   1024e:	0000                	unimp
	...

0000000000010252 <get_dev_bar>:
    uint64_t fwdbg3;            /// 0xfffff038: RW: FW debug register 3
    uint8_t cfg_table[(1 << 12) - 0x40];/// 0xfffff040: RO: PNP configuration
} pnp_map;


static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10252:	715d                	addi	sp,sp,-80
   10254:	e4a2                	sd	s0,72(sp)
   10256:	0880                	addi	s0,sp,80
   10258:	faa43c23          	sd	a0,-72(s0)
   1025c:	87ae                	mv	a5,a1
   1025e:	8732                	mv	a4,a2
   10260:	faf41b23          	sh	a5,-74(s0)
   10264:	87ba                	mv	a5,a4
   10266:	faf41a23          	sh	a5,-76(s0)
    dev_cfg_type dcfg;
    int slots_total = (pnp->cfg >> 8) & 0xFF;
   1026a:	fb843783          	ld	a5,-72(s0)
   1026e:	479c                	lw	a5,8(a5)
   10270:	0087d79b          	srliw	a5,a5,0x8
   10274:	2781                	sext.w	a5,a5
   10276:	2781                	sext.w	a5,a5
   10278:	0ff7f793          	andi	a5,a5,255
   1027c:	fef42223          	sw	a5,-28(s0)
    int off = 0;
   10280:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < slots_total; i++) {
   10284:	fe042423          	sw	zero,-24(s0)
   10288:	a8ad                	j	10302 <get_dev_bar+0xb0>
        dcfg = *(dev_cfg_type *)&pnp->cfg_table[off];
   1028a:	fec42783          	lw	a5,-20(s0)
   1028e:	04078793          	addi	a5,a5,64
   10292:	fb843703          	ld	a4,-72(s0)
   10296:	97ba                	add	a5,a5,a4
   10298:	6398                	ld	a4,0(a5)
   1029a:	fce43023          	sd	a4,-64(s0)
   1029e:	6798                	ld	a4,8(a5)
   102a0:	fce43423          	sd	a4,-56(s0)
   102a4:	6b98                	ld	a4,16(a5)
   102a6:	fce43823          	sd	a4,-48(s0)
   102aa:	6f9c                	ld	a5,24(a5)
   102ac:	fcf43c23          	sd	a5,-40(s0)
        off += sizeof(dcfg);
   102b0:	fec42783          	lw	a5,-20(s0)
   102b4:	0207879b          	addiw	a5,a5,32
   102b8:	2781                	sext.w	a5,a5
   102ba:	fef42623          	sw	a5,-20(s0)
        if (dcfg.u.descrtype != PNP_CFG_TYPE_SLAVE) {
   102be:	fc144783          	lbu	a5,-63(s0)
   102c2:	8b8d                	andi	a5,a5,3
   102c4:	0ff7f793          	andi	a5,a5,255
   102c8:	873e                	mv	a4,a5
   102ca:	4789                	li	a5,2
   102cc:	02f71563          	bne	a4,a5,102f6 <get_dev_bar+0xa4>
            continue;
        }
        if (dcfg.u.vid == vid && dcfg.u.did == did) {
   102d0:	fc645783          	lhu	a5,-58(s0)
   102d4:	fb645703          	lhu	a4,-74(s0)
   102d8:	2701                	sext.w	a4,a4
   102da:	2781                	sext.w	a5,a5
   102dc:	00f71e63          	bne	a4,a5,102f8 <get_dev_bar+0xa6>
   102e0:	fc445783          	lhu	a5,-60(s0)
   102e4:	fb445703          	lhu	a4,-76(s0)
   102e8:	2701                	sext.w	a4,a4
   102ea:	2781                	sext.w	a5,a5
   102ec:	00f71663          	bne	a4,a5,102f8 <get_dev_bar+0xa6>
            return dcfg.u.addr_start;
   102f0:	fd043783          	ld	a5,-48(s0)
   102f4:	a005                	j	10314 <get_dev_bar+0xc2>
            continue;
   102f6:	0001                	nop
    for (int i = 0; i < slots_total; i++) {
   102f8:	fe842783          	lw	a5,-24(s0)
   102fc:	2785                	addiw	a5,a5,1
   102fe:	fef42423          	sw	a5,-24(s0)
   10302:	fe842703          	lw	a4,-24(s0)
   10306:	fe442783          	lw	a5,-28(s0)
   1030a:	2701                	sext.w	a4,a4
   1030c:	2781                	sext.w	a5,a5
   1030e:	f6f74ee3          	blt	a4,a5,1028a <get_dev_bar+0x38>
        }
    }

    return DEV_NONE;
   10312:	57fd                	li	a5,-1
}
   10314:	853e                	mv	a0,a5
   10316:	6426                	ld	s0,72(sp)
   10318:	6161                	addi	sp,sp,80
   1031a:	8082                	ret

000000000001031c <mpu_region_total>:
    mpu_ctrl_wrbits_type bits;
    uint64_t value;
} mpu_ctrl_type;

// Read CSR_MPU_ctrl vendor specific register
static int mpu_region_total() {
   1031c:	1101                	addi	sp,sp,-32
   1031e:	ec22                	sd	s0,24(sp)
   10320:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10322:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10326:	bc4027f3          	csrr	a5,0xbc4
   1032a:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   1032e:	fe843783          	ld	a5,-24(s0)
   10332:	83a1                	srli	a5,a5,0x8
   10334:	2781                	sext.w	a5,a5
}
   10336:	853e                	mv	a0,a5
   10338:	6462                	ld	s0,24(sp)
   1033a:	6105                	addi	sp,sp,32
   1033c:	8082                	ret

000000000001033e <mpu_disable_region>:

static void mpu_disable_region(int idx) {
   1033e:	7179                	addi	sp,sp,-48
   10340:	f422                	sd	s0,40(sp)
   10342:	1800                	addi	s0,sp,48
   10344:	87aa                	mv	a5,a0
   10346:	fcf42e23          	sw	a5,-36(s0)
    mpu_ctrl_type ctrl;
    ctrl.value = 0;
   1034a:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   1034e:	fdc42783          	lw	a5,-36(s0)
   10352:	0ff7f793          	andi	a5,a5,255
   10356:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   1035a:	fe844783          	lbu	a5,-24(s0)
   1035e:	f807e793          	ori	a5,a5,-128
   10362:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10366:	fe843783          	ld	a5,-24(s0)
   1036a:	bc479073          	csrw	0xbc4,a5
}
   1036e:	0001                	nop
   10370:	7422                	ld	s0,40(sp)
   10372:	6145                	addi	sp,sp,48
   10374:	8082                	ret

0000000000010376 <mpu_enable_region>:

static void mpu_enable_region(int idx,
                       uint64_t bar,
                       uint64_t KB,
                       int cached,
                       const char *rwx) {
   10376:	715d                	addi	sp,sp,-80
   10378:	e4a2                	sd	s0,72(sp)
   1037a:	0880                	addi	s0,sp,80
   1037c:	87aa                	mv	a5,a0
   1037e:	fcb43023          	sd	a1,-64(s0)
   10382:	fac43c23          	sd	a2,-72(s0)
   10386:	fae43823          	sd	a4,-80(s0)
   1038a:	fcf42623          	sw	a5,-52(s0)
   1038e:	87b6                	mv	a5,a3
   10390:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10394:	c0000793          	li	a5,-1024
   10398:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   1039c:	fb043783          	ld	a5,-80(s0)
   103a0:	fef43023          	sd	a5,-32(s0)
    mpu_ctrl_type ctrl;

    asm("csrw 0xBC2, %0" : :"r"(bar));
   103a4:	fc043783          	ld	a5,-64(s0)
   103a8:	bc279073          	csrw	0xbc2,a5

    KB >>= 1;
   103ac:	fb843783          	ld	a5,-72(s0)
   103b0:	8385                	srli	a5,a5,0x1
   103b2:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   103b6:	a819                	j	103cc <mpu_enable_region+0x56>
        mask <<= 1;
   103b8:	fe843783          	ld	a5,-24(s0)
   103bc:	0786                	slli	a5,a5,0x1
   103be:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   103c2:	fb843783          	ld	a5,-72(s0)
   103c6:	8385                	srli	a5,a5,0x1
   103c8:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   103cc:	fb843783          	ld	a5,-72(s0)
   103d0:	f7e5                	bnez	a5,103b8 <mpu_enable_region+0x42>
    }
    asm("csrw 0xBC3, %0" : :"r"(mask));
   103d2:	fe843783          	ld	a5,-24(s0)
   103d6:	bc379073          	csrw	0xbc3,a5

    ctrl.value = 0;
   103da:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   103de:	fcc42783          	lw	a5,-52(s0)
   103e2:	0ff7f793          	andi	a5,a5,255
   103e6:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   103ea:	fd844783          	lbu	a5,-40(s0)
   103ee:	0107e793          	ori	a5,a5,16
   103f2:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   103f6:	fc842783          	lw	a5,-56(s0)
   103fa:	8b85                	andi	a5,a5,1
   103fc:	0ff7f793          	andi	a5,a5,255
   10400:	8b85                	andi	a5,a5,1
   10402:	0037969b          	slliw	a3,a5,0x3
   10406:	fd844783          	lbu	a5,-40(s0)
   1040a:	9bdd                	andi	a5,a5,-9
   1040c:	873e                	mv	a4,a5
   1040e:	87b6                	mv	a5,a3
   10410:	8fd9                	or	a5,a5,a4
   10412:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10416:	fd844783          	lbu	a5,-40(s0)
   1041a:	f807e793          	ori	a5,a5,-128
   1041e:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10422:	a09d                	j	10488 <mpu_enable_region+0x112>
        if (*p == 'r') {
   10424:	fe043783          	ld	a5,-32(s0)
   10428:	0007c783          	lbu	a5,0(a5)
   1042c:	873e                	mv	a4,a5
   1042e:	07200793          	li	a5,114
   10432:	00f71863          	bne	a4,a5,10442 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10436:	fd844783          	lbu	a5,-40(s0)
   1043a:	0027e793          	ori	a5,a5,2
   1043e:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'w') {
   10442:	fe043783          	ld	a5,-32(s0)
   10446:	0007c783          	lbu	a5,0(a5)
   1044a:	873e                	mv	a4,a5
   1044c:	07700793          	li	a5,119
   10450:	00f71863          	bne	a4,a5,10460 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10454:	fd844783          	lbu	a5,-40(s0)
   10458:	0017e793          	ori	a5,a5,1
   1045c:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'x') {
   10460:	fe043783          	ld	a5,-32(s0)
   10464:	0007c783          	lbu	a5,0(a5)
   10468:	873e                	mv	a4,a5
   1046a:	07800793          	li	a5,120
   1046e:	00f71863          	bne	a4,a5,1047e <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10472:	fd844783          	lbu	a5,-40(s0)
   10476:	0047e793          	ori	a5,a5,4
   1047a:	fcf40c23          	sb	a5,-40(s0)
        }
        p++;
   1047e:	fe043783          	ld	a5,-32(s0)
   10482:	0785                	addi	a5,a5,1
   10484:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10488:	fe043783          	ld	a5,-32(s0)
   1048c:	0007c783          	lbu	a5,0(a5)
   10490:	fbd1                	bnez	a5,10424 <mpu_enable_region+0xae>
    }
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10492:	fd843783          	ld	a5,-40(s0)
   10496:	bc479073          	csrw	0xbc4,a5
}
   1049a:	0001                	nop
   1049c:	6426                	ld	s0,72(sp)
   1049e:	6161                	addi	sp,sp,80
   104a0:	8082                	ret

00000000000104a2 <fw_get_cpuid>:
#include "sd_uefi.h"
#include "uart.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   104a2:	1101                	addi	sp,sp,-32
   104a4:	ec22                	sd	s0,24(sp)
   104a6:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   104a8:	f14027f3          	csrr	a5,mhartid
   104ac:	fef42623          	sw	a5,-20(s0)
    return ret;
   104b0:	fec42783          	lw	a5,-20(s0)
}
   104b4:	853e                	mv	a0,a5
   104b6:	6462                	ld	s0,24(sp)
   104b8:	6105                	addi	sp,sp,32
   104ba:	8082                	ret

00000000000104bc <led_set>:

void led_set(int output) {
   104bc:	1101                	addi	sp,sp,-32
   104be:	ec22                	sd	s0,24(sp)
   104c0:	1000                	addi	s0,sp,32
   104c2:	87aa                	mv	a5,a0
   104c4:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   104c8:	fec42783          	lw	a5,-20(s0)
   104cc:	0047979b          	slliw	a5,a5,0x4
   104d0:	0007871b          	sext.w	a4,a5
   104d4:	100607b7          	lui	a5,0x10060
   104d8:	2701                	sext.w	a4,a4
   104da:	c7d8                	sw	a4,12(a5)
}
   104dc:	0001                	nop
   104de:	6462                	ld	s0,24(sp)
   104e0:	6105                	addi	sp,sp,32
   104e2:	8082                	ret

00000000000104e4 <get_dip>:

int get_dip(int idx) {
   104e4:	7179                	addi	sp,sp,-48
   104e6:	f422                	sd	s0,40(sp)
   104e8:	1800                	addi	s0,sp,48
   104ea:	87aa                	mv	a5,a0
   104ec:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   104f0:	100607b7          	lui	a5,0x10060
   104f4:	439c                	lw	a5,0(a5)
   104f6:	0007871b          	sext.w	a4,a5
   104fa:	fdc42783          	lw	a5,-36(s0)
   104fe:	00f757bb          	srlw	a5,a4,a5
   10502:	2781                	sext.w	a5,a5
   10504:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   10508:	fec42783          	lw	a5,-20(s0)
   1050c:	8b85                	andi	a5,a5,1
   1050e:	2781                	sext.w	a5,a5
}
   10510:	853e                	mv	a0,a5
   10512:	7422                	ld	s0,40(sp)
   10514:	6145                	addi	sp,sp,48
   10516:	8082                	ret

0000000000010518 <get_dips>:

int get_dips() {
   10518:	1101                	addi	sp,sp,-32
   1051a:	ec22                	sd	s0,24(sp)
   1051c:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   1051e:	100607b7          	lui	a5,0x10060
   10522:	439c                	lw	a5,0(a5)
   10524:	2781                	sext.w	a5,a5
   10526:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   1052a:	fec42783          	lw	a5,-20(s0)
   1052e:	8bbd                	andi	a5,a5,15
   10530:	2781                	sext.w	a5,a5
}
   10532:	853e                	mv	a0,a5
   10534:	6462                	ld	s0,24(sp)
   10536:	6105                	addi	sp,sp,32
   10538:	8082                	ret

000000000001053a <copy_image>:



void copy_image() { 
   1053a:	7179                	addi	sp,sp,-48
   1053c:	f406                	sd	ra,40(sp)
   1053e:	f022                	sd	s0,32(sp)
   10540:	1800                	addi	s0,sp,48
//    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   10542:	080007b7          	lui	a5,0x8000
   10546:	fef43023          	sd	a5,-32(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   1054a:	100ff7b7          	lui	a5,0x100ff
   1054e:	fcf43c23          	sd	a5,-40(s0)

    uint64_t qspi2 = ~0ull;
   10552:	57fd                	li	a5,-1
   10554:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   10558:	00000097          	auipc	ra,0x0
   1055c:	fc0080e7          	jalr	-64(ra) # 10518 <get_dips>
   10560:	87aa                	mv	a5,a0
   10562:	85be                	mv	a1,a5
   10564:	67c5                	lui	a5,0x11
   10566:	4b878513          	addi	a0,a5,1208 # 114b8 <strnlen+0x1c>
   1056a:	00001097          	auipc	ra,0x1
   1056e:	eec080e7          	jalr	-276(ra) # 11456 <printf_uart>
    if (get_dips() == 0xB) {
   10572:	00000097          	auipc	ra,0x0
   10576:	fa6080e7          	jalr	-90(ra) # 10518 <get_dips>
   1057a:	87aa                	mv	a5,a0
   1057c:	873e                	mv	a4,a5
   1057e:	47ad                	li	a5,11
   10580:	04f71463          	bne	a4,a5,105c8 <copy_image+0x8e>
        // Load from SD-card
        qspi2 = get_dev_bar(pnp, VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   10584:	07500613          	li	a2,117
   10588:	0f100593          	li	a1,241
   1058c:	fd843503          	ld	a0,-40(s0)
   10590:	cc3ff0ef          	jal	ra,10252 <get_dev_bar>
   10594:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   10598:	fe843703          	ld	a4,-24(s0)
   1059c:	57fd                	li	a5,-1
   1059e:	02f70563          	beq	a4,a5,105c8 <copy_image+0x8e>
            print_uart("Select . .QSPI2\r\n", 17);
   105a2:	45c5                	li	a1,17
   105a4:	67c5                	lui	a5,0x11
   105a6:	4c878513          	addi	a0,a5,1224 # 114c8 <strnlen+0x2c>
   105aa:	00001097          	auipc	ra,0x1
   105ae:	8d0080e7          	jalr	-1840(ra) # 10e7a <print_uart>
            //if (run_from_sdcard() == -1)
            {
                print_uart("QSPI2. . .FAILED\r\n", 18);
   105b2:	45c9                	li	a1,18
   105b4:	67c5                	lui	a5,0x11
   105b6:	4e078513          	addi	a0,a5,1248 # 114e0 <strnlen+0x44>
   105ba:	00001097          	auipc	ra,0x1
   105be:	8c0080e7          	jalr	-1856(ra) # 10e7a <print_uart>
                qspi2 = ~0ull;
   105c2:	57fd                	li	a5,-1
   105c4:	fef43423          	sd	a5,-24(s0)
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
        }
#endif
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   105c8:	fd843783          	ld	a5,-40(s0)
   105cc:	20211737          	lui	a4,0x20211
   105d0:	1237071b          	addiw	a4,a4,291
   105d4:	c3d8                	sw	a4,4(a5)
}
   105d6:	0001                	nop
   105d8:	70a2                	ld	ra,40(sp)
   105da:	7402                	ld	s0,32(sp)
   105dc:	6145                	addi	sp,sp,48
   105de:	8082                	ret

00000000000105e0 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   105e0:	1141                	addi	sp,sp,-16
   105e2:	e422                	sd	s0,8(sp)
   105e4:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   105e6:	0001                	nop
   105e8:	6422                	ld	s0,8(sp)
   105ea:	0141                	addi	sp,sp,16
   105ec:	8082                	ret

00000000000105ee <init_pmp>:

// Enable U,S,MPRV for all regions
void init_pmp() {
   105ee:	1101                	addi	sp,sp,-32
   105f0:	ec22                	sd	s0,24(sp)
   105f2:	1000                	addi	s0,sp,32
    uint64_t a0 = -1;  // Give S-mode free rein of everything else.
   105f4:	57fd                	li	a5,-1
   105f6:	fef43423          	sd	a5,-24(s0)
    uint64_t cfg = (PMP_NAPOT | PMP_R | PMP_W | PMP_X) << 0; // [] channel: whole memory range
   105fa:	47fd                	li	a5,31
   105fc:	fef43023          	sd	a5,-32(s0)

    // Plug it all in.
    asm volatile ("csrw pmpaddr0, %[a0]\n\t"
   10600:	fe843783          	ld	a5,-24(s0)
   10604:	fe043703          	ld	a4,-32(s0)
   10608:	3b079073          	csrw	pmpaddr0,a5
   1060c:	3a071073          	csrw	pmpcfg0,a4
                  "csrw pmpcfg0, %[cfg]"
                  :: [a0] "r" (a0),
                     [cfg] "r" (cfg));
}
   10610:	0001                	nop
   10612:	6462                	ld	s0,24(sp)
   10614:	6105                	addi	sp,sp,32
   10616:	8082                	ret

0000000000010618 <_init>:

void _init() {
   10618:	715d                	addi	sp,sp,-80
   1061a:	e486                	sd	ra,72(sp)
   1061c:	e0a2                	sd	s0,64(sp)
   1061e:	0880                	addi	s0,sp,80
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10620:	100ff7b7          	lui	a5,0x100ff
   10624:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10628:	100107b7          	lui	a5,0x10010
   1062c:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   10630:	100607b7          	lui	a5,0x10060
   10634:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   10638:	47a1                	li	a5,8
   1063a:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   1063e:	fd043783          	ld	a5,-48(s0)
   10642:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   10646:	6785                	lui	a5,0x1
   10648:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   1064c:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   10650:	fd043783          	ld	a5,-48(s0)
   10654:	3047b073          	csrc	mie,a5

    t1 = 0x00000007;
   10658:	479d                	li	a5,7
   1065a:	fcf43823          	sd	a5,-48(s0)
    asm("csrw mcounteren, %0" : :"r"(t1));  // allow counter access from S-mode
   1065e:	fd043783          	ld	a5,-48(s0)
   10662:	30679073          	csrw	mcounteren,a5
    asm("csrw scounteren, %0" : :"r"(t1));  // allow counter access from U-mode
   10666:	fd043783          	ld	a5,-48(s0)
   1066a:	10679073          	csrw	scounteren,a5

    init_pmp();
   1066e:	00000097          	auipc	ra,0x0
   10672:	f80080e7          	jalr	-128(ra) # 105ee <init_pmp>

    txctrl.v = 0;
   10676:	fc042023          	sw	zero,-64(s0)
    txctrl.b.txen = 1;
   1067a:	fc044783          	lbu	a5,-64(s0)
   1067e:	0017e793          	ori	a5,a5,1
   10682:	fcf40023          	sb	a5,-64(s0)
    rxctrl.v = 0;
   10686:	fa042c23          	sw	zero,-72(s0)
    rxctrl.b.rxen = 1;
   1068a:	fb844783          	lbu	a5,-72(s0)
   1068e:	0017e793          	ori	a5,a5,1
   10692:	faf40c23          	sb	a5,-72(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   10696:	fe043783          	ld	a5,-32(s0)
   1069a:	0ad00713          	li	a4,173
   1069e:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   106a0:	fc042783          	lw	a5,-64(s0)
   106a4:	0007871b          	sext.w	a4,a5
   106a8:	fe043783          	ld	a5,-32(s0)
   106ac:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   106ae:	fb842783          	lw	a5,-72(s0)
   106b2:	0007871b          	sext.w	a4,a5
   106b6:	fe043783          	ld	a5,-32(s0)
   106ba:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   106bc:	fd843783          	ld	a5,-40(s0)
   106c0:	473d                	li	a4,15
   106c2:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   106c4:	fd843783          	ld	a5,-40(s0)
   106c8:	6705                	lui	a4,0x1
   106ca:	3741                	addiw	a4,a4,-16
   106cc:	c798                	sw	a4,8(a5)

    led_set(0x01);
   106ce:	4505                	li	a0,1
   106d0:	dedff0ef          	jal	ra,104bc <led_set>

    copy_image();
   106d4:	00000097          	auipc	ra,0x0
   106d8:	e66080e7          	jalr	-410(ra) # 1053a <copy_image>
    led_set(0x02);
   106dc:	4509                	li	a0,2
   106de:	ddfff0ef          	jal	ra,104bc <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   106e2:	67c5                	lui	a5,0x11
   106e4:	4f878593          	addi	a1,a5,1272 # 114f8 <strnlen+0x5c>
   106e8:	67c5                	lui	a5,0x11
   106ea:	50078513          	addi	a0,a5,1280 # 11500 <strnlen+0x64>
   106ee:	569000ef          	jal	ra,11456 <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   106f2:	67c5                	lui	a5,0x11
   106f4:	51078593          	addi	a1,a5,1296 # 11510 <strnlen+0x74>
   106f8:	67c5                	lui	a5,0x11
   106fa:	51878513          	addi	a0,a5,1304 # 11518 <strnlen+0x7c>
   106fe:	559000ef          	jal	ra,11456 <printf_uart>

    led_set(0x03);
   10702:	450d                	li	a0,3
   10704:	db9ff0ef          	jal	ra,104bc <led_set>

    set_csr(mstatus, MSTATUS_MPP_M);             //      run bbl-q and riscv-tests in machine mode
   10708:	6789                	lui	a5,0x2
   1070a:	8007879b          	addiw	a5,a5,-2048
   1070e:	3007a7f3          	csrrs	a5,mstatus,a5
   10712:	fcf43423          	sd	a5,-56(s0)
    if (get_dips() == 0x0F) {
   10716:	e03ff0ef          	jal	ra,10518 <get_dips>
   1071a:	87aa                	mv	a5,a0
   1071c:	873e                	mv	a4,a5
   1071e:	47bd                	li	a5,15
   10720:	00f71763          	bne	a4,a5,1072e <_init+0x116>
        write_csr(mepc, 0x0000000080000000ull);  // sim: jump to ddr (bbl-q should be init)
   10724:	4785                	li	a5,1
   10726:	07fe                	slli	a5,a5,0x1f
   10728:	34179073          	csrw	mepc,a5
    } else {
        write_csr(mepc, 0x0000000008000000ull);  // jump to entry point in SRAM = 0x08000000
    }
}
   1072c:	a029                	j	10736 <_init+0x11e>
        write_csr(mepc, 0x0000000008000000ull);  // jump to entry point in SRAM = 0x08000000
   1072e:	080007b7          	lui	a5,0x8000
   10732:	34179073          	csrw	mepc,a5
}
   10736:	0001                	nop
   10738:	60a6                	ld	ra,72(sp)
   1073a:	6406                	ld	s0,64(sp)
   1073c:	6161                	addi	sp,sp,80
   1073e:	8082                	ret

0000000000010740 <main>:

/** Not used actually */
int main() {
   10740:	1141                	addi	sp,sp,-16
   10742:	e422                	sd	s0,8(sp)
   10744:	0800                	addi	s0,sp,16
    while (1) {}
   10746:	a001                	j	10746 <main+0x6>
	...

000000000001074a <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   1074a:	715d                	addi	sp,sp,-80
   1074c:	e4a2                	sd	s0,72(sp)
   1074e:	0880                	addi	s0,sp,80
   10750:	faa43c23          	sd	a0,-72(s0)
   10754:	87ae                	mv	a5,a1
   10756:	8732                	mv	a4,a2
   10758:	faf41b23          	sh	a5,-74(s0)
   1075c:	87ba                	mv	a5,a4
   1075e:	faf41a23          	sh	a5,-76(s0)
    int slots_total = (pnp->cfg >> 8) & 0xFF;
   10762:	fb843783          	ld	a5,-72(s0)
   10766:	479c                	lw	a5,8(a5)
   10768:	0087d79b          	srliw	a5,a5,0x8
   1076c:	2781                	sext.w	a5,a5
   1076e:	2781                	sext.w	a5,a5
   10770:	0ff7f793          	andi	a5,a5,255
   10774:	fef42223          	sw	a5,-28(s0)
    int off = 0;
   10778:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < slots_total; i++) {
   1077c:	fe042423          	sw	zero,-24(s0)
   10780:	a8ad                	j	107fa <get_dev_bar+0xb0>
        dcfg = *(dev_cfg_type *)&pnp->cfg_table[off];
   10782:	fec42783          	lw	a5,-20(s0)
   10786:	04078793          	addi	a5,a5,64 # 8000040 <_end+0x7fedad0>
   1078a:	fb843703          	ld	a4,-72(s0)
   1078e:	97ba                	add	a5,a5,a4
   10790:	6398                	ld	a4,0(a5)
   10792:	fce43023          	sd	a4,-64(s0)
   10796:	6798                	ld	a4,8(a5)
   10798:	fce43423          	sd	a4,-56(s0)
   1079c:	6b98                	ld	a4,16(a5)
   1079e:	fce43823          	sd	a4,-48(s0)
   107a2:	6f9c                	ld	a5,24(a5)
   107a4:	fcf43c23          	sd	a5,-40(s0)
        off += sizeof(dcfg);
   107a8:	fec42783          	lw	a5,-20(s0)
   107ac:	0207879b          	addiw	a5,a5,32
   107b0:	2781                	sext.w	a5,a5
   107b2:	fef42623          	sw	a5,-20(s0)
        if (dcfg.u.descrtype != PNP_CFG_TYPE_SLAVE) {
   107b6:	fc144783          	lbu	a5,-63(s0)
   107ba:	8b8d                	andi	a5,a5,3
   107bc:	0ff7f793          	andi	a5,a5,255
   107c0:	873e                	mv	a4,a5
   107c2:	4789                	li	a5,2
   107c4:	02f71563          	bne	a4,a5,107ee <get_dev_bar+0xa4>
        if (dcfg.u.vid == vid && dcfg.u.did == did) {
   107c8:	fc645783          	lhu	a5,-58(s0)
   107cc:	fb645703          	lhu	a4,-74(s0)
   107d0:	2701                	sext.w	a4,a4
   107d2:	2781                	sext.w	a5,a5
   107d4:	00f71e63          	bne	a4,a5,107f0 <get_dev_bar+0xa6>
   107d8:	fc445783          	lhu	a5,-60(s0)
   107dc:	fb445703          	lhu	a4,-76(s0)
   107e0:	2701                	sext.w	a4,a4
   107e2:	2781                	sext.w	a5,a5
   107e4:	00f71663          	bne	a4,a5,107f0 <get_dev_bar+0xa6>
            return dcfg.u.addr_start;
   107e8:	fd043783          	ld	a5,-48(s0)
   107ec:	a005                	j	1080c <get_dev_bar+0xc2>
            continue;
   107ee:	0001                	nop
    for (int i = 0; i < slots_total; i++) {
   107f0:	fe842783          	lw	a5,-24(s0)
   107f4:	2785                	addiw	a5,a5,1
   107f6:	fef42423          	sw	a5,-24(s0)
   107fa:	fe842703          	lw	a4,-24(s0)
   107fe:	fe442783          	lw	a5,-28(s0)
   10802:	2701                	sext.w	a4,a4
   10804:	2781                	sext.w	a5,a5
   10806:	f6f74ee3          	blt	a4,a5,10782 <get_dev_bar+0x38>
    return DEV_NONE;
   1080a:	57fd                	li	a5,-1
}
   1080c:	853e                	mv	a0,a5
   1080e:	6426                	ld	s0,72(sp)
   10810:	6161                	addi	sp,sp,80
   10812:	8082                	ret

0000000000010814 <mpu_region_total>:
static int mpu_region_total() {
   10814:	1101                	addi	sp,sp,-32
   10816:	ec22                	sd	s0,24(sp)
   10818:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   1081a:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1081e:	bc4027f3          	csrr	a5,0xbc4
   10822:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10826:	fe843783          	ld	a5,-24(s0)
   1082a:	83a1                	srli	a5,a5,0x8
   1082c:	2781                	sext.w	a5,a5
}
   1082e:	853e                	mv	a0,a5
   10830:	6462                	ld	s0,24(sp)
   10832:	6105                	addi	sp,sp,32
   10834:	8082                	ret

0000000000010836 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10836:	7179                	addi	sp,sp,-48
   10838:	f422                	sd	s0,40(sp)
   1083a:	1800                	addi	s0,sp,48
   1083c:	87aa                	mv	a5,a0
   1083e:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10842:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10846:	fdc42783          	lw	a5,-36(s0)
   1084a:	0ff7f793          	andi	a5,a5,255
   1084e:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10852:	fe844783          	lbu	a5,-24(s0)
   10856:	f807e793          	ori	a5,a5,-128
   1085a:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   1085e:	fe843783          	ld	a5,-24(s0)
   10862:	bc479073          	csrw	0xbc4,a5
}
   10866:	0001                	nop
   10868:	7422                	ld	s0,40(sp)
   1086a:	6145                	addi	sp,sp,48
   1086c:	8082                	ret

000000000001086e <mpu_enable_region>:
                       const char *rwx) {
   1086e:	715d                	addi	sp,sp,-80
   10870:	e4a2                	sd	s0,72(sp)
   10872:	0880                	addi	s0,sp,80
   10874:	87aa                	mv	a5,a0
   10876:	fcb43023          	sd	a1,-64(s0)
   1087a:	fac43c23          	sd	a2,-72(s0)
   1087e:	fae43823          	sd	a4,-80(s0)
   10882:	fcf42623          	sw	a5,-52(s0)
   10886:	87b6                	mv	a5,a3
   10888:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   1088c:	c0000793          	li	a5,-1024
   10890:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10894:	fb043783          	ld	a5,-80(s0)
   10898:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   1089c:	fc043783          	ld	a5,-64(s0)
   108a0:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   108a4:	fb843783          	ld	a5,-72(s0)
   108a8:	8385                	srli	a5,a5,0x1
   108aa:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   108ae:	a819                	j	108c4 <mpu_enable_region+0x56>
        mask <<= 1;
   108b0:	fe843783          	ld	a5,-24(s0)
   108b4:	0786                	slli	a5,a5,0x1
   108b6:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   108ba:	fb843783          	ld	a5,-72(s0)
   108be:	8385                	srli	a5,a5,0x1
   108c0:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   108c4:	fb843783          	ld	a5,-72(s0)
   108c8:	f7e5                	bnez	a5,108b0 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   108ca:	fe843783          	ld	a5,-24(s0)
   108ce:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   108d2:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   108d6:	fcc42783          	lw	a5,-52(s0)
   108da:	0ff7f793          	andi	a5,a5,255
   108de:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   108e2:	fd844783          	lbu	a5,-40(s0)
   108e6:	0107e793          	ori	a5,a5,16
   108ea:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   108ee:	fc842783          	lw	a5,-56(s0)
   108f2:	8b85                	andi	a5,a5,1
   108f4:	0ff7f793          	andi	a5,a5,255
   108f8:	8b85                	andi	a5,a5,1
   108fa:	0037969b          	slliw	a3,a5,0x3
   108fe:	fd844783          	lbu	a5,-40(s0)
   10902:	9bdd                	andi	a5,a5,-9
   10904:	873e                	mv	a4,a5
   10906:	87b6                	mv	a5,a3
   10908:	8fd9                	or	a5,a5,a4
   1090a:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1090e:	fd844783          	lbu	a5,-40(s0)
   10912:	f807e793          	ori	a5,a5,-128
   10916:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   1091a:	a09d                	j	10980 <mpu_enable_region+0x112>
        if (*p == 'r') {
   1091c:	fe043783          	ld	a5,-32(s0)
   10920:	0007c783          	lbu	a5,0(a5)
   10924:	873e                	mv	a4,a5
   10926:	07200793          	li	a5,114
   1092a:	00f71863          	bne	a4,a5,1093a <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1092e:	fd844783          	lbu	a5,-40(s0)
   10932:	0027e793          	ori	a5,a5,2
   10936:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   1093a:	fe043783          	ld	a5,-32(s0)
   1093e:	0007c783          	lbu	a5,0(a5)
   10942:	873e                	mv	a4,a5
   10944:	07700793          	li	a5,119
   10948:	00f71863          	bne	a4,a5,10958 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   1094c:	fd844783          	lbu	a5,-40(s0)
   10950:	0017e793          	ori	a5,a5,1
   10954:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10958:	fe043783          	ld	a5,-32(s0)
   1095c:	0007c783          	lbu	a5,0(a5)
   10960:	873e                	mv	a4,a5
   10962:	07800793          	li	a5,120
   10966:	00f71863          	bne	a4,a5,10976 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   1096a:	fd844783          	lbu	a5,-40(s0)
   1096e:	0047e793          	ori	a5,a5,4
   10972:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10976:	fe043783          	ld	a5,-32(s0)
   1097a:	0785                	addi	a5,a5,1
   1097c:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10980:	fe043783          	ld	a5,-32(s0)
   10984:	0007c783          	lbu	a5,0(a5)
   10988:	fbd1                	bnez	a5,1091c <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   1098a:	fd843783          	ld	a5,-40(s0)
   1098e:	bc479073          	csrw	0xbc4,a5
}
   10992:	0001                	nop
   10994:	6426                	ld	s0,72(sp)
   10996:	6161                	addi	sp,sp,80
   10998:	8082                	ret

000000000001099a <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   1099a:	1101                	addi	sp,sp,-32
   1099c:	ec22                	sd	s0,24(sp)
   1099e:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   109a0:	342027f3          	csrr	a5,mcause
   109a4:	fef42623          	sw	a5,-20(s0)
    return ret;
   109a8:	fec42783          	lw	a5,-20(s0)
}
   109ac:	853e                	mv	a0,a5
   109ae:	6462                	ld	s0,24(sp)
   109b0:	6105                	addi	sp,sp,32
   109b2:	8082                	ret

00000000000109b4 <get_mepc>:

int get_mepc() {
   109b4:	1101                	addi	sp,sp,-32
   109b6:	ec22                	sd	s0,24(sp)
   109b8:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   109ba:	341027f3          	csrr	a5,mepc
   109be:	fef42623          	sw	a5,-20(s0)
    return ret;
   109c2:	fec42783          	lw	a5,-20(s0)
}
   109c6:	853e                	mv	a0,a5
   109c8:	6462                	ld	s0,24(sp)
   109ca:	6105                	addi	sp,sp,32
   109cc:	8082                	ret

00000000000109ce <env_call>:


void env_call(long long test_id) {
   109ce:	7179                	addi	sp,sp,-48
   109d0:	f406                	sd	ra,40(sp)
   109d2:	f022                	sd	s0,32(sp)
   109d4:	1800                	addi	s0,sp,48
   109d6:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   109da:	fd843783          	ld	a5,-40(s0)
   109de:	c7bd                	beqz	a5,10a4c <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   109e0:	45b5                	li	a1,13
   109e2:	67c5                	lui	a5,0x11
   109e4:	52878513          	addi	a0,a5,1320 # 11528 <strnlen+0x8c>
   109e8:	00000097          	auipc	ra,0x0
   109ec:	492080e7          	jalr	1170(ra) # 10e7a <print_uart>
        print_uart("a0=", 3);
   109f0:	458d                	li	a1,3
   109f2:	67c5                	lui	a5,0x11
   109f4:	53878513          	addi	a0,a5,1336 # 11538 <strnlen+0x9c>
   109f8:	00000097          	auipc	ra,0x0
   109fc:	482080e7          	jalr	1154(ra) # 10e7a <print_uart>
        print_uart_hex(test_id);
   10a00:	fd843503          	ld	a0,-40(s0)
   10a04:	4e8000ef          	jal	ra,10eec <print_uart_hex>
        print_uart("\r\n", 2);
   10a08:	4589                	li	a1,2
   10a0a:	67c5                	lui	a5,0x11
   10a0c:	54078513          	addi	a0,a5,1344 # 11540 <strnlen+0xa4>
   10a10:	00000097          	auipc	ra,0x0
   10a14:	46a080e7          	jalr	1130(ra) # 10e7a <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10a18:	343027f3          	csrr	a5,mbadaddr
   10a1c:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10a20:	45a5                	li	a1,9
   10a22:	67c5                	lui	a5,0x11
   10a24:	54878513          	addi	a0,a5,1352 # 11548 <strnlen+0xac>
   10a28:	00000097          	auipc	ra,0x0
   10a2c:	452080e7          	jalr	1106(ra) # 10e7a <print_uart>
        print_uart_hex(mbadaddr);
   10a30:	fec42783          	lw	a5,-20(s0)
   10a34:	853e                	mv	a0,a5
   10a36:	4b6000ef          	jal	ra,10eec <print_uart_hex>
        print_uart("\r\n", 2);
   10a3a:	4589                	li	a1,2
   10a3c:	67c5                	lui	a5,0x11
   10a3e:	54078513          	addi	a0,a5,1344 # 11540 <strnlen+0xa4>
   10a42:	00000097          	auipc	ra,0x0
   10a46:	438080e7          	jalr	1080(ra) # 10e7a <print_uart>
   10a4a:	a809                	j	10a5c <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10a4c:	45b5                	li	a1,13
   10a4e:	67c5                	lui	a5,0x11
   10a50:	55878513          	addi	a0,a5,1368 # 11558 <strnlen+0xbc>
   10a54:	00000097          	auipc	ra,0x0
   10a58:	426080e7          	jalr	1062(ra) # 10e7a <print_uart>
    }
    while (1) {}
   10a5c:	a001                	j	10a5c <env_call+0x8e>

0000000000010a5e <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10a5e:	7179                	addi	sp,sp,-48
   10a60:	f406                	sd	ra,40(sp)
   10a62:	f022                	sd	s0,32(sp)
   10a64:	1800                	addi	s0,sp,48
   10a66:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10a6a:	00000097          	auipc	ra,0x0
   10a6e:	f30080e7          	jalr	-208(ra) # 1099a <get_mcause>
   10a72:	87aa                	mv	a5,a0
   10a74:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10a78:	fec42783          	lw	a5,-20(s0)
   10a7c:	37e1                	addiw	a5,a5,-8
   10a7e:	0007871b          	sext.w	a4,a5
   10a82:	4785                	li	a5,1
   10a84:	00e7e963          	bltu	a5,a4,10a96 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10a88:	fd843503          	ld	a0,-40(s0)
   10a8c:	00000097          	auipc	ra,0x0
   10a90:	f42080e7          	jalr	-190(ra) # 109ce <env_call>
        return;
   10a94:	a0b9                	j	10ae2 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10a96:	459d                	li	a1,7
   10a98:	67c5                	lui	a5,0x11
   10a9a:	56878513          	addi	a0,a5,1384 # 11568 <strnlen+0xcc>
   10a9e:	3dc000ef          	jal	ra,10e7a <print_uart>
    print_uart_hex(mcause);
   10aa2:	fec42783          	lw	a5,-20(s0)
   10aa6:	853e                	mv	a0,a5
   10aa8:	00000097          	auipc	ra,0x0
   10aac:	444080e7          	jalr	1092(ra) # 10eec <print_uart_hex>
    print_uart(",mepc:", 6);
   10ab0:	4599                	li	a1,6
   10ab2:	67c5                	lui	a5,0x11
   10ab4:	57078513          	addi	a0,a5,1392 # 11570 <strnlen+0xd4>
   10ab8:	3c2000ef          	jal	ra,10e7a <print_uart>
    print_uart_hex(get_mepc());
   10abc:	ef9ff0ef          	jal	ra,109b4 <get_mepc>
   10ac0:	87aa                	mv	a5,a0
   10ac2:	853e                	mv	a0,a5
   10ac4:	00000097          	auipc	ra,0x0
   10ac8:	428080e7          	jalr	1064(ra) # 10eec <print_uart_hex>
    print_uart("\r\n", 2);
   10acc:	4589                	li	a1,2
   10ace:	67c5                	lui	a5,0x11
   10ad0:	54078513          	addi	a0,a5,1344 # 11540 <strnlen+0xa4>
   10ad4:	3a6000ef          	jal	ra,10e7a <print_uart>

    /// Exception trap
    led_set(0xF0);
   10ad8:	0f000513          	li	a0,240
   10adc:	9e1ff0ef          	jal	ra,104bc <led_set>
    while (1) {}
   10ae0:	a001                	j	10ae0 <exception_handler_c+0x82>
}
   10ae2:	70a2                	ld	ra,40(sp)
   10ae4:	7402                	ld	s0,32(sp)
   10ae6:	6145                	addi	sp,sp,48
   10ae8:	8082                	ret

0000000000010aea <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   10aea:	1141                	addi	sp,sp,-16
   10aec:	e406                	sd	ra,8(sp)
   10aee:	e022                	sd	s0,0(sp)
   10af0:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10af2:	0f000513          	li	a0,240
   10af6:	00000097          	auipc	ra,0x0
   10afa:	9c6080e7          	jalr	-1594(ra) # 104bc <led_set>
    print_uart("fatal_error()\r\n", 15);
   10afe:	45bd                	li	a1,15
   10b00:	67c5                	lui	a5,0x11
   10b02:	57878513          	addi	a0,a5,1400 # 11578 <strnlen+0xdc>
   10b06:	00000097          	auipc	ra,0x0
   10b0a:	374080e7          	jalr	884(ra) # 10e7a <print_uart>
    while (1) {}
   10b0e:	a001                	j	10b0e <fatal_error+0x24>

0000000000010b10 <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10b10:	7179                	addi	sp,sp,-48
   10b12:	f422                	sd	s0,40(sp)
   10b14:	1800                	addi	s0,sp,48
   10b16:	87aa                	mv	a5,a0
   10b18:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10b1c:	0c0007b7          	lui	a5,0xc000
   10b20:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10b24:	fe843703          	ld	a4,-24(s0)
   10b28:	fdc42783          	lw	a5,-36(s0)
   10b2c:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfedc90>
   10b30:	07b2                	slli	a5,a5,0xc
   10b32:	97ba                	add	a5,a5,a4
   10b34:	43dc                	lw	a5,4(a5)
   10b36:	2781                	sext.w	a5,a5
}
   10b38:	853e                	mv	a0,a5
   10b3a:	7422                	ld	s0,40(sp)
   10b3c:	6145                	addi	sp,sp,48
   10b3e:	8082                	ret

0000000000010b40 <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10b40:	7179                	addi	sp,sp,-48
   10b42:	f422                	sd	s0,40(sp)
   10b44:	1800                	addi	s0,sp,48
   10b46:	87aa                	mv	a5,a0
   10b48:	872e                	mv	a4,a1
   10b4a:	fcf42e23          	sw	a5,-36(s0)
   10b4e:	87ba                	mv	a5,a4
   10b50:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10b54:	0c0007b7          	lui	a5,0xc000
   10b58:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10b5c:	fd842703          	lw	a4,-40(s0)
   10b60:	fe843683          	ld	a3,-24(s0)
   10b64:	fdc42783          	lw	a5,-36(s0)
   10b68:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfedc90>
   10b6c:	07b2                	slli	a5,a5,0xc
   10b6e:	97b6                	add	a5,a5,a3
   10b70:	c3d8                	sw	a4,4(a5)
}
   10b72:	0001                	nop
   10b74:	7422                	ld	s0,40(sp)
   10b76:	6145                	addi	sp,sp,48
   10b78:	8082                	ret

0000000000010b7a <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10b7a:	7139                	addi	sp,sp,-64
   10b7c:	fc06                	sd	ra,56(sp)
   10b7e:	f822                	sd	s0,48(sp)
   10b80:	0080                	addi	s0,sp,64
   10b82:	fca43c23          	sd	a0,-40(s0)
   10b86:	fcb43823          	sd	a1,-48(s0)
   10b8a:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10b8e:	fd843783          	ld	a5,-40(s0)
   10b92:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10b96:	fe744783          	lbu	a5,-25(s0)
   10b9a:	f807f793          	andi	a5,a5,-128
   10b9e:	0ff7f793          	andi	a5,a5,255
   10ba2:	cb85                	beqz	a5,10bd2 <interrupt_handler_c+0x58>
   10ba4:	fe043703          	ld	a4,-32(s0)
   10ba8:	57fd                	li	a5,-1
   10baa:	8385                	srli	a5,a5,0x1
   10bac:	8f7d                	and	a4,a4,a5
   10bae:	47ad                	li	a5,11
   10bb0:	02f71163          	bne	a4,a5,10bd2 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10bb4:	4501                	li	a0,0
   10bb6:	f5bff0ef          	jal	ra,10b10 <plic_claim>
   10bba:	87aa                	mv	a5,a0
   10bbc:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10bc0:	fec42783          	lw	a5,-20(s0)
   10bc4:	85be                	mv	a1,a5
   10bc6:	4501                	li	a0,0
   10bc8:	00000097          	auipc	ra,0x0
   10bcc:	f78080e7          	jalr	-136(ra) # 10b40 <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10bd0:	a029                	j	10bda <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10bd2:	00000097          	auipc	ra,0x0
   10bd6:	f18080e7          	jalr	-232(ra) # 10aea <fatal_error>
    }

    return epc;
   10bda:	fd043783          	ld	a5,-48(s0)
}
   10bde:	853e                	mv	a0,a5
   10be0:	70e2                	ld	ra,56(sp)
   10be2:	7442                	ld	s0,48(sp)
   10be4:	6121                	addi	sp,sp,64
   10be6:	8082                	ret

0000000000010be8 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10be8:	715d                	addi	sp,sp,-80
   10bea:	e4a2                	sd	s0,72(sp)
   10bec:	0880                	addi	s0,sp,80
   10bee:	faa43c23          	sd	a0,-72(s0)
   10bf2:	87ae                	mv	a5,a1
   10bf4:	8732                	mv	a4,a2
   10bf6:	faf41b23          	sh	a5,-74(s0)
   10bfa:	87ba                	mv	a5,a4
   10bfc:	faf41a23          	sh	a5,-76(s0)
    int slots_total = (pnp->cfg >> 8) & 0xFF;
   10c00:	fb843783          	ld	a5,-72(s0)
   10c04:	479c                	lw	a5,8(a5)
   10c06:	0087d79b          	srliw	a5,a5,0x8
   10c0a:	2781                	sext.w	a5,a5
   10c0c:	2781                	sext.w	a5,a5
   10c0e:	0ff7f793          	andi	a5,a5,255
   10c12:	fef42223          	sw	a5,-28(s0)
    int off = 0;
   10c16:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < slots_total; i++) {
   10c1a:	fe042423          	sw	zero,-24(s0)
   10c1e:	a8ad                	j	10c98 <get_dev_bar+0xb0>
        dcfg = *(dev_cfg_type *)&pnp->cfg_table[off];
   10c20:	fec42783          	lw	a5,-20(s0)
   10c24:	04078793          	addi	a5,a5,64
   10c28:	fb843703          	ld	a4,-72(s0)
   10c2c:	97ba                	add	a5,a5,a4
   10c2e:	6398                	ld	a4,0(a5)
   10c30:	fce43023          	sd	a4,-64(s0)
   10c34:	6798                	ld	a4,8(a5)
   10c36:	fce43423          	sd	a4,-56(s0)
   10c3a:	6b98                	ld	a4,16(a5)
   10c3c:	fce43823          	sd	a4,-48(s0)
   10c40:	6f9c                	ld	a5,24(a5)
   10c42:	fcf43c23          	sd	a5,-40(s0)
        off += sizeof(dcfg);
   10c46:	fec42783          	lw	a5,-20(s0)
   10c4a:	0207879b          	addiw	a5,a5,32
   10c4e:	2781                	sext.w	a5,a5
   10c50:	fef42623          	sw	a5,-20(s0)
        if (dcfg.u.descrtype != PNP_CFG_TYPE_SLAVE) {
   10c54:	fc144783          	lbu	a5,-63(s0)
   10c58:	8b8d                	andi	a5,a5,3
   10c5a:	0ff7f793          	andi	a5,a5,255
   10c5e:	873e                	mv	a4,a5
   10c60:	4789                	li	a5,2
   10c62:	02f71563          	bne	a4,a5,10c8c <get_dev_bar+0xa4>
        if (dcfg.u.vid == vid && dcfg.u.did == did) {
   10c66:	fc645783          	lhu	a5,-58(s0)
   10c6a:	fb645703          	lhu	a4,-74(s0)
   10c6e:	2701                	sext.w	a4,a4
   10c70:	2781                	sext.w	a5,a5
   10c72:	00f71e63          	bne	a4,a5,10c8e <get_dev_bar+0xa6>
   10c76:	fc445783          	lhu	a5,-60(s0)
   10c7a:	fb445703          	lhu	a4,-76(s0)
   10c7e:	2701                	sext.w	a4,a4
   10c80:	2781                	sext.w	a5,a5
   10c82:	00f71663          	bne	a4,a5,10c8e <get_dev_bar+0xa6>
            return dcfg.u.addr_start;
   10c86:	fd043783          	ld	a5,-48(s0)
   10c8a:	a005                	j	10caa <get_dev_bar+0xc2>
            continue;
   10c8c:	0001                	nop
    for (int i = 0; i < slots_total; i++) {
   10c8e:	fe842783          	lw	a5,-24(s0)
   10c92:	2785                	addiw	a5,a5,1
   10c94:	fef42423          	sw	a5,-24(s0)
   10c98:	fe842703          	lw	a4,-24(s0)
   10c9c:	fe442783          	lw	a5,-28(s0)
   10ca0:	2701                	sext.w	a4,a4
   10ca2:	2781                	sext.w	a5,a5
   10ca4:	f6f74ee3          	blt	a4,a5,10c20 <get_dev_bar+0x38>
    return DEV_NONE;
   10ca8:	57fd                	li	a5,-1
}
   10caa:	853e                	mv	a0,a5
   10cac:	6426                	ld	s0,72(sp)
   10cae:	6161                	addi	sp,sp,80
   10cb0:	8082                	ret

0000000000010cb2 <mpu_region_total>:
static int mpu_region_total() {
   10cb2:	1101                	addi	sp,sp,-32
   10cb4:	ec22                	sd	s0,24(sp)
   10cb6:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10cb8:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10cbc:	bc4027f3          	csrr	a5,0xbc4
   10cc0:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10cc4:	fe843783          	ld	a5,-24(s0)
   10cc8:	83a1                	srli	a5,a5,0x8
   10cca:	2781                	sext.w	a5,a5
}
   10ccc:	853e                	mv	a0,a5
   10cce:	6462                	ld	s0,24(sp)
   10cd0:	6105                	addi	sp,sp,32
   10cd2:	8082                	ret

0000000000010cd4 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10cd4:	7179                	addi	sp,sp,-48
   10cd6:	f422                	sd	s0,40(sp)
   10cd8:	1800                	addi	s0,sp,48
   10cda:	87aa                	mv	a5,a0
   10cdc:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10ce0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10ce4:	fdc42783          	lw	a5,-36(s0)
   10ce8:	0ff7f793          	andi	a5,a5,255
   10cec:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10cf0:	fe844783          	lbu	a5,-24(s0)
   10cf4:	f807e793          	ori	a5,a5,-128
   10cf8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10cfc:	fe843783          	ld	a5,-24(s0)
   10d00:	bc479073          	csrw	0xbc4,a5
}
   10d04:	0001                	nop
   10d06:	7422                	ld	s0,40(sp)
   10d08:	6145                	addi	sp,sp,48
   10d0a:	8082                	ret

0000000000010d0c <mpu_enable_region>:
                       const char *rwx) {
   10d0c:	715d                	addi	sp,sp,-80
   10d0e:	e4a2                	sd	s0,72(sp)
   10d10:	0880                	addi	s0,sp,80
   10d12:	87aa                	mv	a5,a0
   10d14:	fcb43023          	sd	a1,-64(s0)
   10d18:	fac43c23          	sd	a2,-72(s0)
   10d1c:	fae43823          	sd	a4,-80(s0)
   10d20:	fcf42623          	sw	a5,-52(s0)
   10d24:	87b6                	mv	a5,a3
   10d26:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10d2a:	c0000793          	li	a5,-1024
   10d2e:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10d32:	fb043783          	ld	a5,-80(s0)
   10d36:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10d3a:	fc043783          	ld	a5,-64(s0)
   10d3e:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10d42:	fb843783          	ld	a5,-72(s0)
   10d46:	8385                	srli	a5,a5,0x1
   10d48:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10d4c:	a819                	j	10d62 <mpu_enable_region+0x56>
        mask <<= 1;
   10d4e:	fe843783          	ld	a5,-24(s0)
   10d52:	0786                	slli	a5,a5,0x1
   10d54:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10d58:	fb843783          	ld	a5,-72(s0)
   10d5c:	8385                	srli	a5,a5,0x1
   10d5e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10d62:	fb843783          	ld	a5,-72(s0)
   10d66:	f7e5                	bnez	a5,10d4e <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10d68:	fe843783          	ld	a5,-24(s0)
   10d6c:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10d70:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10d74:	fcc42783          	lw	a5,-52(s0)
   10d78:	0ff7f793          	andi	a5,a5,255
   10d7c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10d80:	fd844783          	lbu	a5,-40(s0)
   10d84:	0107e793          	ori	a5,a5,16
   10d88:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10d8c:	fc842783          	lw	a5,-56(s0)
   10d90:	8b85                	andi	a5,a5,1
   10d92:	0ff7f793          	andi	a5,a5,255
   10d96:	8b85                	andi	a5,a5,1
   10d98:	0037969b          	slliw	a3,a5,0x3
   10d9c:	fd844783          	lbu	a5,-40(s0)
   10da0:	9bdd                	andi	a5,a5,-9
   10da2:	873e                	mv	a4,a5
   10da4:	87b6                	mv	a5,a3
   10da6:	8fd9                	or	a5,a5,a4
   10da8:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10dac:	fd844783          	lbu	a5,-40(s0)
   10db0:	f807e793          	ori	a5,a5,-128
   10db4:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10db8:	a09d                	j	10e1e <mpu_enable_region+0x112>
        if (*p == 'r') {
   10dba:	fe043783          	ld	a5,-32(s0)
   10dbe:	0007c783          	lbu	a5,0(a5)
   10dc2:	873e                	mv	a4,a5
   10dc4:	07200793          	li	a5,114
   10dc8:	00f71863          	bne	a4,a5,10dd8 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10dcc:	fd844783          	lbu	a5,-40(s0)
   10dd0:	0027e793          	ori	a5,a5,2
   10dd4:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10dd8:	fe043783          	ld	a5,-32(s0)
   10ddc:	0007c783          	lbu	a5,0(a5)
   10de0:	873e                	mv	a4,a5
   10de2:	07700793          	li	a5,119
   10de6:	00f71863          	bne	a4,a5,10df6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10dea:	fd844783          	lbu	a5,-40(s0)
   10dee:	0017e793          	ori	a5,a5,1
   10df2:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10df6:	fe043783          	ld	a5,-32(s0)
   10dfa:	0007c783          	lbu	a5,0(a5)
   10dfe:	873e                	mv	a4,a5
   10e00:	07800793          	li	a5,120
   10e04:	00f71863          	bne	a4,a5,10e14 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10e08:	fd844783          	lbu	a5,-40(s0)
   10e0c:	0047e793          	ori	a5,a5,4
   10e10:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10e14:	fe043783          	ld	a5,-32(s0)
   10e18:	0785                	addi	a5,a5,1
   10e1a:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10e1e:	fe043783          	ld	a5,-32(s0)
   10e22:	0007c783          	lbu	a5,0(a5)
   10e26:	fbd1                	bnez	a5,10dba <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10e28:	fd843783          	ld	a5,-40(s0)
   10e2c:	bc479073          	csrw	0xbc4,a5
}
   10e30:	0001                	nop
   10e32:	6426                	ld	s0,72(sp)
   10e34:	6161                	addi	sp,sp,80
   10e36:	8082                	ret

0000000000010e38 <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   10e38:	7179                	addi	sp,sp,-48
   10e3a:	f422                	sd	s0,40(sp)
   10e3c:	1800                	addi	s0,sp,48
   10e3e:	87aa                	mv	a5,a0
   10e40:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10e44:	100107b7          	lui	a5,0x10010
   10e48:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   10e4c:	fe843783          	ld	a5,-24(s0)
   10e50:	439c                	lw	a5,0(a5)
   10e52:	2781                	sext.w	a5,a5
   10e54:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   10e58:	fe344783          	lbu	a5,-29(s0)
   10e5c:	f807f793          	andi	a5,a5,-128
   10e60:	0ff7f793          	andi	a5,a5,255
   10e64:	f7e5                	bnez	a5,10e4c <print_char+0x14>
    uart->txdata = ch;
   10e66:	fdc42703          	lw	a4,-36(s0)
   10e6a:	fe843783          	ld	a5,-24(s0)
   10e6e:	c398                	sw	a4,0(a5)
    return 0;
   10e70:	4781                	li	a5,0
}
   10e72:	853e                	mv	a0,a5
   10e74:	7422                	ld	s0,40(sp)
   10e76:	6145                	addi	sp,sp,48
   10e78:	8082                	ret

0000000000010e7a <print_uart>:

void print_uart(const char *buf, int sz) {
   10e7a:	7139                	addi	sp,sp,-64
   10e7c:	fc22                	sd	s0,56(sp)
   10e7e:	0080                	addi	s0,sp,64
   10e80:	fca43423          	sd	a0,-56(s0)
   10e84:	87ae                	mv	a5,a1
   10e86:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10e8a:	100107b7          	lui	a5,0x10010
   10e8e:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   10e92:	fe042623          	sw	zero,-20(s0)
   10e96:	a83d                	j	10ed4 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   10e98:	fe043783          	ld	a5,-32(s0)
   10e9c:	439c                	lw	a5,0(a5)
   10e9e:	2781                	sext.w	a5,a5
   10ea0:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   10ea4:	fdb44783          	lbu	a5,-37(s0)
   10ea8:	f807f793          	andi	a5,a5,-128
   10eac:	0ff7f793          	andi	a5,a5,255
   10eb0:	f7e5                	bnez	a5,10e98 <print_uart+0x1e>
        uart->txdata = buf[i];
   10eb2:	fec42783          	lw	a5,-20(s0)
   10eb6:	fc843703          	ld	a4,-56(s0)
   10eba:	97ba                	add	a5,a5,a4
   10ebc:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffda90>
   10ec0:	0007871b          	sext.w	a4,a5
   10ec4:	fe043783          	ld	a5,-32(s0)
   10ec8:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   10eca:	fec42783          	lw	a5,-20(s0)
   10ece:	2785                	addiw	a5,a5,1
   10ed0:	fef42623          	sw	a5,-20(s0)
   10ed4:	fec42703          	lw	a4,-20(s0)
   10ed8:	fc442783          	lw	a5,-60(s0)
   10edc:	2701                	sext.w	a4,a4
   10ede:	2781                	sext.w	a5,a5
   10ee0:	faf74ce3          	blt	a4,a5,10e98 <print_uart+0x1e>
    }
}
   10ee4:	0001                	nop
   10ee6:	7462                	ld	s0,56(sp)
   10ee8:	6121                	addi	sp,sp,64
   10eea:	8082                	ret

0000000000010eec <print_uart_hex>:

void print_uart_hex(long val) {
   10eec:	7139                	addi	sp,sp,-64
   10eee:	fc22                	sd	s0,56(sp)
   10ef0:	0080                	addi	s0,sp,64
   10ef2:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10ef6:	100107b7          	lui	a5,0x10010
   10efa:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   10efe:	fe042423          	sw	zero,-24(s0)
   10f02:	a041                	j	10f82 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   10f04:	fe043783          	ld	a5,-32(s0)
   10f08:	439c                	lw	a5,0(a5)
   10f0a:	2781                	sext.w	a5,a5
   10f0c:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   10f10:	fdb44783          	lbu	a5,-37(s0)
   10f14:	f807f793          	andi	a5,a5,-128
   10f18:	0ff7f793          	andi	a5,a5,255
   10f1c:	f7e5                	bnez	a5,10f04 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   10f1e:	473d                	li	a4,15
   10f20:	fe842783          	lw	a5,-24(s0)
   10f24:	40f707bb          	subw	a5,a4,a5
   10f28:	2781                	sext.w	a5,a5
   10f2a:	0027979b          	slliw	a5,a5,0x2
   10f2e:	2781                	sext.w	a5,a5
   10f30:	fc843703          	ld	a4,-56(s0)
   10f34:	40f757b3          	sra	a5,a4,a5
   10f38:	0ff7f793          	andi	a5,a5,255
   10f3c:	8bbd                	andi	a5,a5,15
   10f3e:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   10f42:	fdf44783          	lbu	a5,-33(s0)
   10f46:	0ff7f713          	andi	a4,a5,255
   10f4a:	47a5                	li	a5,9
   10f4c:	00e7e963          	bltu	a5,a4,10f5e <print_uart_hex+0x72>
            s = t + '0';
   10f50:	fdf44783          	lbu	a5,-33(s0)
   10f54:	0307879b          	addiw	a5,a5,48
   10f58:	fef407a3          	sb	a5,-17(s0)
   10f5c:	a039                	j	10f6a <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   10f5e:	fdf44783          	lbu	a5,-33(s0)
   10f62:	0577879b          	addiw	a5,a5,87
   10f66:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   10f6a:	fef44783          	lbu	a5,-17(s0)
   10f6e:	0007871b          	sext.w	a4,a5
   10f72:	fe043783          	ld	a5,-32(s0)
   10f76:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   10f78:	fe842783          	lw	a5,-24(s0)
   10f7c:	2785                	addiw	a5,a5,1
   10f7e:	fef42423          	sw	a5,-24(s0)
   10f82:	fe842783          	lw	a5,-24(s0)
   10f86:	0007871b          	sext.w	a4,a5
   10f8a:	47bd                	li	a5,15
   10f8c:	f6e7dce3          	ble	a4,a5,10f04 <print_uart_hex+0x18>
    }
}
   10f90:	0001                	nop
   10f92:	7462                	ld	s0,56(sp)
   10f94:	6121                	addi	sp,sp,64
   10f96:	8082                	ret

0000000000010f98 <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   10f98:	7119                	addi	sp,sp,-128
   10f9a:	fc86                	sd	ra,120(sp)
   10f9c:	f8a2                	sd	s0,112(sp)
   10f9e:	0100                	addi	s0,sp,128
   10fa0:	f8a43c23          	sd	a0,-104(s0)
   10fa4:	87ae                	mv	a5,a1
   10fa6:	8736                	mv	a4,a3
   10fa8:	f8f42a23          	sw	a5,-108(s0)
   10fac:	87b2                	mv	a5,a2
   10fae:	f8f42823          	sw	a5,-112(s0)
   10fb2:	87ba                	mv	a5,a4
   10fb4:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   10fb8:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   10fbc:	f9442783          	lw	a5,-108(s0)
   10fc0:	f9843703          	ld	a4,-104(s0)
   10fc4:	02f776b3          	remu	a3,a4,a5
   10fc8:	fec42783          	lw	a5,-20(s0)
   10fcc:	0017871b          	addiw	a4,a5,1
   10fd0:	fee42623          	sw	a4,-20(s0)
   10fd4:	0ff6f713          	andi	a4,a3,255
   10fd8:	ff040693          	addi	a3,s0,-16
   10fdc:	97b6                	add	a5,a5,a3
   10fde:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffda48>
        if (num < base) {
   10fe2:	f9442783          	lw	a5,-108(s0)
   10fe6:	f9843703          	ld	a4,-104(s0)
   10fea:	00f76b63          	bltu	a4,a5,11000 <printnum+0x68>
            break;
        }
        num /= base;
   10fee:	f9442783          	lw	a5,-108(s0)
   10ff2:	f9843703          	ld	a4,-104(s0)
   10ff6:	02f757b3          	divu	a5,a4,a5
   10ffa:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   10ffe:	bf7d                	j	10fbc <printnum+0x24>
            break;
   11000:	0001                	nop
    }

    while (width-- > pos) {
   11002:	a801                	j	11012 <printnum+0x7a>
        print_char(padc);
   11004:	f8c42783          	lw	a5,-116(s0)
   11008:	853e                	mv	a0,a5
   1100a:	00000097          	auipc	ra,0x0
   1100e:	e2e080e7          	jalr	-466(ra) # 10e38 <print_char>
    while (width-- > pos) {
   11012:	f9042783          	lw	a5,-112(s0)
   11016:	fff7871b          	addiw	a4,a5,-1
   1101a:	f8e42823          	sw	a4,-112(s0)
   1101e:	fec42703          	lw	a4,-20(s0)
   11022:	2701                	sext.w	a4,a4
   11024:	fef740e3          	blt	a4,a5,11004 <printnum+0x6c>
    }


    while (pos-- > 0) {
   11028:	a089                	j	1106a <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   1102a:	fec42783          	lw	a5,-20(s0)
   1102e:	ff040713          	addi	a4,s0,-16
   11032:	97ba                	add	a5,a5,a4
   11034:	fb87c783          	lbu	a5,-72(a5)
   11038:	0007871b          	sext.w	a4,a5
   1103c:	fec42783          	lw	a5,-20(s0)
   11040:	ff040693          	addi	a3,s0,-16
   11044:	97b6                	add	a5,a5,a3
   11046:	fb87c783          	lbu	a5,-72(a5)
   1104a:	86be                	mv	a3,a5
   1104c:	47a5                	li	a5,9
   1104e:	00d7f563          	bleu	a3,a5,11058 <printnum+0xc0>
   11052:	05700793          	li	a5,87
   11056:	a019                	j	1105c <printnum+0xc4>
   11058:	03000793          	li	a5,48
   1105c:	9fb9                	addw	a5,a5,a4
   1105e:	2781                	sext.w	a5,a5
   11060:	853e                	mv	a0,a5
   11062:	00000097          	auipc	ra,0x0
   11066:	dd6080e7          	jalr	-554(ra) # 10e38 <print_char>
    while (pos-- > 0) {
   1106a:	fec42783          	lw	a5,-20(s0)
   1106e:	fff7871b          	addiw	a4,a5,-1
   11072:	fee42623          	sw	a4,-20(s0)
   11076:	faf04ae3          	bgtz	a5,1102a <printnum+0x92>
    }
}
   1107a:	0001                	nop
   1107c:	70e6                	ld	ra,120(sp)
   1107e:	7446                	ld	s0,112(sp)
   11080:	6109                	addi	sp,sp,128
   11082:	8082                	ret

0000000000011084 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   11084:	1101                	addi	sp,sp,-32
   11086:	ec22                	sd	s0,24(sp)
   11088:	1000                	addi	s0,sp,32
   1108a:	fea43423          	sd	a0,-24(s0)
   1108e:	87ae                	mv	a5,a1
   11090:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   11094:	fe442783          	lw	a5,-28(s0)
   11098:	0007871b          	sext.w	a4,a5
   1109c:	4785                	li	a5,1
   1109e:	00e7dc63          	ble	a4,a5,110b6 <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   110a2:	fe843783          	ld	a5,-24(s0)
   110a6:	639c                	ld	a5,0(a5)
   110a8:	00878693          	addi	a3,a5,8
   110ac:	fe843703          	ld	a4,-24(s0)
   110b0:	e314                	sd	a3,0(a4)
   110b2:	639c                	ld	a5,0(a5)
   110b4:	a815                	j	110e8 <getuint+0x64>
    } else if (lflag) {
   110b6:	fe442783          	lw	a5,-28(s0)
   110ba:	2781                	sext.w	a5,a5
   110bc:	cb99                	beqz	a5,110d2 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   110be:	fe843783          	ld	a5,-24(s0)
   110c2:	639c                	ld	a5,0(a5)
   110c4:	00878693          	addi	a3,a5,8
   110c8:	fe843703          	ld	a4,-24(s0)
   110cc:	e314                	sd	a3,0(a4)
   110ce:	639c                	ld	a5,0(a5)
   110d0:	a821                	j	110e8 <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   110d2:	fe843783          	ld	a5,-24(s0)
   110d6:	639c                	ld	a5,0(a5)
   110d8:	00878693          	addi	a3,a5,8
   110dc:	fe843703          	ld	a4,-24(s0)
   110e0:	e314                	sd	a3,0(a4)
   110e2:	439c                	lw	a5,0(a5)
   110e4:	1782                	slli	a5,a5,0x20
   110e6:	9381                	srli	a5,a5,0x20
}
   110e8:	853e                	mv	a0,a5
   110ea:	6462                	ld	s0,24(sp)
   110ec:	6105                	addi	sp,sp,32
   110ee:	8082                	ret

00000000000110f0 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   110f0:	1101                	addi	sp,sp,-32
   110f2:	ec22                	sd	s0,24(sp)
   110f4:	1000                	addi	s0,sp,32
   110f6:	fea43423          	sd	a0,-24(s0)
   110fa:	87ae                	mv	a5,a1
   110fc:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   11100:	fe442783          	lw	a5,-28(s0)
   11104:	0007871b          	sext.w	a4,a5
   11108:	4785                	li	a5,1
   1110a:	00e7dc63          	ble	a4,a5,11122 <getint+0x32>
        return va_arg(*ap, long long);
   1110e:	fe843783          	ld	a5,-24(s0)
   11112:	639c                	ld	a5,0(a5)
   11114:	00878693          	addi	a3,a5,8
   11118:	fe843703          	ld	a4,-24(s0)
   1111c:	e314                	sd	a3,0(a4)
   1111e:	639c                	ld	a5,0(a5)
   11120:	a805                	j	11150 <getint+0x60>
    } else if (lflag) {
   11122:	fe442783          	lw	a5,-28(s0)
   11126:	2781                	sext.w	a5,a5
   11128:	cb99                	beqz	a5,1113e <getint+0x4e>
        return va_arg(*ap, long);
   1112a:	fe843783          	ld	a5,-24(s0)
   1112e:	639c                	ld	a5,0(a5)
   11130:	00878693          	addi	a3,a5,8
   11134:	fe843703          	ld	a4,-24(s0)
   11138:	e314                	sd	a3,0(a4)
   1113a:	639c                	ld	a5,0(a5)
   1113c:	a811                	j	11150 <getint+0x60>
    }
    return va_arg(*ap, int);
   1113e:	fe843783          	ld	a5,-24(s0)
   11142:	639c                	ld	a5,0(a5)
   11144:	00878693          	addi	a3,a5,8
   11148:	fe843703          	ld	a4,-24(s0)
   1114c:	e314                	sd	a3,0(a4)
   1114e:	439c                	lw	a5,0(a5)
}
   11150:	853e                	mv	a0,a5
   11152:	6462                	ld	s0,24(sp)
   11154:	6105                	addi	sp,sp,32
   11156:	8082                	ret

0000000000011158 <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   11158:	711d                	addi	sp,sp,-96
   1115a:	ec86                	sd	ra,88(sp)
   1115c:	e8a2                	sd	s0,80(sp)
   1115e:	e4a6                	sd	s1,72(sp)
   11160:	e0ca                	sd	s2,64(sp)
   11162:	1080                	addi	s0,sp,96
   11164:	faa43423          	sd	a0,-88(s0)
   11168:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   1116c:	a819                	j	11182 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   1116e:	2c048d63          	beqz	s1,11448 <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   11172:	fa843783          	ld	a5,-88(s0)
   11176:	0785                	addi	a5,a5,1
   11178:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   1117c:	8526                	mv	a0,s1
   1117e:	cbbff0ef          	jal	ra,10e38 <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   11182:	fa843783          	ld	a5,-88(s0)
   11186:	0007c783          	lbu	a5,0(a5)
   1118a:	0007849b          	sext.w	s1,a5
   1118e:	8726                	mv	a4,s1
   11190:	02500793          	li	a5,37
   11194:	fcf71de3          	bne	a4,a5,1116e <vprintfmt_lib+0x16>
        }
        fmt++;
   11198:	fa843783          	ld	a5,-88(s0)
   1119c:	0785                	addi	a5,a5,1
   1119e:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   111a2:	fa843783          	ld	a5,-88(s0)
   111a6:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   111aa:	02000793          	li	a5,32
   111ae:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   111b2:	57fd                	li	a5,-1
   111b4:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   111b8:	57fd                	li	a5,-1
   111ba:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   111be:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   111c2:	fa843783          	ld	a5,-88(s0)
   111c6:	00178713          	addi	a4,a5,1
   111ca:	fae43423          	sd	a4,-88(s0)
   111ce:	0007c783          	lbu	a5,0(a5)
   111d2:	0007849b          	sext.w	s1,a5
   111d6:	fdd4869b          	addiw	a3,s1,-35
   111da:	0006871b          	sext.w	a4,a3
   111de:	05500793          	li	a5,85
   111e2:	24e7e963          	bltu	a5,a4,11434 <vprintfmt_lib+0x2dc>
   111e6:	02069793          	slli	a5,a3,0x20
   111ea:	9381                	srli	a5,a5,0x20
   111ec:	00279713          	slli	a4,a5,0x2
   111f0:	67c5                	lui	a5,0x11
   111f2:	59078793          	addi	a5,a5,1424 # 11590 <strnlen+0xf4>
   111f6:	97ba                	add	a5,a5,a4
   111f8:	439c                	lw	a5,0(a5)
   111fa:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   111fc:	02d00793          	li	a5,45
   11200:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   11204:	bf7d                	j	111c2 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   11206:	03000793          	li	a5,48
   1120a:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   1120e:	bf55                	j	111c2 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   11210:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   11214:	fc842703          	lw	a4,-56(s0)
   11218:	87ba                	mv	a5,a4
   1121a:	0027979b          	slliw	a5,a5,0x2
   1121e:	9fb9                	addw	a5,a5,a4
   11220:	0017979b          	slliw	a5,a5,0x1
   11224:	2781                	sext.w	a5,a5
   11226:	9fa5                	addw	a5,a5,s1
   11228:	2781                	sext.w	a5,a5
   1122a:	fd07879b          	addiw	a5,a5,-48
   1122e:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   11232:	fa843783          	ld	a5,-88(s0)
   11236:	0007c783          	lbu	a5,0(a5)
   1123a:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   1123e:	8726                	mv	a4,s1
   11240:	02f00793          	li	a5,47
   11244:	02e7df63          	ble	a4,a5,11282 <vprintfmt_lib+0x12a>
   11248:	8726                	mv	a4,s1
   1124a:	03900793          	li	a5,57
   1124e:	02e7ca63          	blt	a5,a4,11282 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   11252:	fa843783          	ld	a5,-88(s0)
   11256:	0785                	addi	a5,a5,1
   11258:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   1125c:	bf65                	j	11214 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   1125e:	fa043783          	ld	a5,-96(s0)
   11262:	00878713          	addi	a4,a5,8
   11266:	fae43023          	sd	a4,-96(s0)
   1126a:	439c                	lw	a5,0(a5)
   1126c:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   11270:	a811                	j	11284 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   11272:	fcc42783          	lw	a5,-52(s0)
   11276:	2781                	sext.w	a5,a5
   11278:	f407d5e3          	bgez	a5,111c2 <vprintfmt_lib+0x6a>
                width = 0;
   1127c:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   11280:	b789                	j	111c2 <vprintfmt_lib+0x6a>
            goto process_precision;
   11282:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   11284:	fcc42783          	lw	a5,-52(s0)
   11288:	2781                	sext.w	a5,a5
   1128a:	f207dce3          	bgez	a5,111c2 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   1128e:	fc842783          	lw	a5,-56(s0)
   11292:	fcf42623          	sw	a5,-52(s0)
   11296:	57fd                	li	a5,-1
   11298:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   1129c:	b71d                	j	111c2 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   1129e:	fd042783          	lw	a5,-48(s0)
   112a2:	2785                	addiw	a5,a5,1
   112a4:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   112a8:	bf29                	j	111c2 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   112aa:	fa043783          	ld	a5,-96(s0)
   112ae:	00878713          	addi	a4,a5,8
   112b2:	fae43023          	sd	a4,-96(s0)
   112b6:	439c                	lw	a5,0(a5)
   112b8:	853e                	mv	a0,a5
   112ba:	b7fff0ef          	jal	ra,10e38 <print_char>
            break;
   112be:	a261                	j	11446 <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   112c0:	fa043783          	ld	a5,-96(s0)
   112c4:	00878713          	addi	a4,a5,8
   112c8:	fae43023          	sd	a4,-96(s0)
   112cc:	0007b903          	ld	s2,0(a5)
   112d0:	00091563          	bnez	s2,112da <vprintfmt_lib+0x182>
                p = "(null)";
   112d4:	67c5                	lui	a5,0x11
   112d6:	58878913          	addi	s2,a5,1416 # 11588 <strnlen+0xec>
            }
            if (width > 0 && padc != '-') {
   112da:	fcc42783          	lw	a5,-52(s0)
   112de:	2781                	sext.w	a5,a5
   112e0:	06f05263          	blez	a5,11344 <vprintfmt_lib+0x1ec>
   112e4:	fc744783          	lbu	a5,-57(s0)
   112e8:	0ff7f713          	andi	a4,a5,255
   112ec:	02d00793          	li	a5,45
   112f0:	04f70a63          	beq	a4,a5,11344 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   112f4:	fc842783          	lw	a5,-56(s0)
   112f8:	85be                	mv	a1,a5
   112fa:	854a                	mv	a0,s2
   112fc:	1a0000ef          	jal	ra,1149c <strnlen>
   11300:	87aa                	mv	a5,a0
   11302:	873e                	mv	a4,a5
   11304:	fcc42783          	lw	a5,-52(s0)
   11308:	9f99                	subw	a5,a5,a4
   1130a:	fcf42623          	sw	a5,-52(s0)
   1130e:	a821                	j	11326 <vprintfmt_lib+0x1ce>
                    print_char(padc);
   11310:	fc744783          	lbu	a5,-57(s0)
   11314:	2781                	sext.w	a5,a5
   11316:	853e                	mv	a0,a5
   11318:	b21ff0ef          	jal	ra,10e38 <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   1131c:	fcc42783          	lw	a5,-52(s0)
   11320:	37fd                	addiw	a5,a5,-1
   11322:	fcf42623          	sw	a5,-52(s0)
   11326:	fcc42783          	lw	a5,-52(s0)
   1132a:	2781                	sext.w	a5,a5
   1132c:	fef042e3          	bgtz	a5,11310 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   11330:	a811                	j	11344 <vprintfmt_lib+0x1ec>
                print_char(ch);
   11332:	8526                	mv	a0,s1
   11334:	b05ff0ef          	jal	ra,10e38 <print_char>
                p++;
   11338:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   1133a:	fcc42783          	lw	a5,-52(s0)
   1133e:	37fd                	addiw	a5,a5,-1
   11340:	fcf42623          	sw	a5,-52(s0)
   11344:	00094783          	lbu	a5,0(s2)
   11348:	0007849b          	sext.w	s1,a5
   1134c:	c895                	beqz	s1,11380 <vprintfmt_lib+0x228>
   1134e:	fc842783          	lw	a5,-56(s0)
   11352:	2781                	sext.w	a5,a5
   11354:	fc07cfe3          	bltz	a5,11332 <vprintfmt_lib+0x1da>
   11358:	fc842783          	lw	a5,-56(s0)
   1135c:	37fd                	addiw	a5,a5,-1
   1135e:	fcf42423          	sw	a5,-56(s0)
   11362:	fc842783          	lw	a5,-56(s0)
   11366:	2781                	sext.w	a5,a5
   11368:	fc07d5e3          	bgez	a5,11332 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   1136c:	a811                	j	11380 <vprintfmt_lib+0x228>
                print_char(' ');
   1136e:	02000513          	li	a0,32
   11372:	ac7ff0ef          	jal	ra,10e38 <print_char>
            for (; width > 0; width--) {
   11376:	fcc42783          	lw	a5,-52(s0)
   1137a:	37fd                	addiw	a5,a5,-1
   1137c:	fcf42623          	sw	a5,-52(s0)
   11380:	fcc42783          	lw	a5,-52(s0)
   11384:	2781                	sext.w	a5,a5
   11386:	fef044e3          	bgtz	a5,1136e <vprintfmt_lib+0x216>
            }
            break;
   1138a:	a875                	j	11446 <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   1138c:	fd042703          	lw	a4,-48(s0)
   11390:	fa040793          	addi	a5,s0,-96
   11394:	85ba                	mv	a1,a4
   11396:	853e                	mv	a0,a5
   11398:	00000097          	auipc	ra,0x0
   1139c:	d58080e7          	jalr	-680(ra) # 110f0 <getint>
   113a0:	87aa                	mv	a5,a0
   113a2:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   113a6:	fd843783          	ld	a5,-40(s0)
   113aa:	0007dc63          	bgez	a5,113c2 <vprintfmt_lib+0x26a>
                print_char('-');
   113ae:	02d00513          	li	a0,45
   113b2:	a87ff0ef          	jal	ra,10e38 <print_char>
                num = -(long long) num;
   113b6:	fd843783          	ld	a5,-40(s0)
   113ba:	40f007b3          	neg	a5,a5
   113be:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   113c2:	47a9                	li	a5,10
   113c4:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   113c8:	a089                	j	1140a <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   113ca:	47a9                	li	a5,10
   113cc:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   113d0:	a01d                	j	113f6 <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   113d2:	47a1                	li	a5,8
   113d4:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   113d8:	a839                	j	113f6 <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   113da:	4785                	li	a5,1
   113dc:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   113e0:	03000513          	li	a0,48
   113e4:	a55ff0ef          	jal	ra,10e38 <print_char>
            print_char('x');
   113e8:	07800513          	li	a0,120
   113ec:	a4dff0ef          	jal	ra,10e38 <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   113f0:	47c1                	li	a5,16
   113f2:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   113f6:	fd042703          	lw	a4,-48(s0)
   113fa:	fa040793          	addi	a5,s0,-96
   113fe:	85ba                	mv	a1,a4
   11400:	853e                	mv	a0,a5
   11402:	c83ff0ef          	jal	ra,11084 <getuint>
   11406:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   1140a:	fc744783          	lbu	a5,-57(s0)
   1140e:	0007869b          	sext.w	a3,a5
   11412:	fcc42703          	lw	a4,-52(s0)
   11416:	fd442783          	lw	a5,-44(s0)
   1141a:	863a                	mv	a2,a4
   1141c:	85be                	mv	a1,a5
   1141e:	fd843503          	ld	a0,-40(s0)
   11422:	00000097          	auipc	ra,0x0
   11426:	b76080e7          	jalr	-1162(ra) # 10f98 <printnum>
            break;
   1142a:	a831                	j	11446 <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   1142c:	8526                	mv	a0,s1
   1142e:	a0bff0ef          	jal	ra,10e38 <print_char>
            break;
   11432:	a811                	j	11446 <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   11434:	02500513          	li	a0,37
   11438:	a01ff0ef          	jal	ra,10e38 <print_char>
            fmt = last_fmt;
   1143c:	fb843783          	ld	a5,-72(s0)
   11440:	faf43423          	sd	a5,-88(s0)
            break;
   11444:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   11446:	bb35                	j	11182 <vprintfmt_lib+0x2a>
                return;
   11448:	0001                	nop
        }
    }
}
   1144a:	60e6                	ld	ra,88(sp)
   1144c:	6446                	ld	s0,80(sp)
   1144e:	64a6                	ld	s1,72(sp)
   11450:	6906                	ld	s2,64(sp)
   11452:	6125                	addi	sp,sp,96
   11454:	8082                	ret

0000000000011456 <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   11456:	7159                	addi	sp,sp,-112
   11458:	f406                	sd	ra,40(sp)
   1145a:	f022                	sd	s0,32(sp)
   1145c:	1800                	addi	s0,sp,48
   1145e:	fca43c23          	sd	a0,-40(s0)
   11462:	e40c                	sd	a1,8(s0)
   11464:	e810                	sd	a2,16(s0)
   11466:	ec14                	sd	a3,24(s0)
   11468:	f018                	sd	a4,32(s0)
   1146a:	f41c                	sd	a5,40(s0)
   1146c:	03043823          	sd	a6,48(s0)
   11470:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   11474:	04040793          	addi	a5,s0,64
   11478:	fc878793          	addi	a5,a5,-56
   1147c:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   11480:	fe843783          	ld	a5,-24(s0)
   11484:	85be                	mv	a1,a5
   11486:	fd843503          	ld	a0,-40(s0)
   1148a:	00000097          	auipc	ra,0x0
   1148e:	cce080e7          	jalr	-818(ra) # 11158 <vprintfmt_lib>

    va_end(arg);
}
   11492:	0001                	nop
   11494:	70a2                	ld	ra,40(sp)
   11496:	7402                	ld	s0,32(sp)
   11498:	6165                	addi	sp,sp,112
   1149a:	8082                	ret

000000000001149c <strnlen>:
   1149c:	95aa                	add	a1,a1,a0
   1149e:	87aa                	mv	a5,a0
   114a0:	00b78563          	beq	a5,a1,114aa <strnlen+0xe>
   114a4:	0007c703          	lbu	a4,0(a5)
   114a8:	e701                	bnez	a4,114b0 <strnlen+0x14>
   114aa:	40a78533          	sub	a0,a5,a0
   114ae:	8082                	ret
   114b0:	0785                	addi	a5,a5,1
   114b2:	b7fd                	j	114a0 <strnlen+0x4>
	...
