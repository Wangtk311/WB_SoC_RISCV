
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	10c0006f          	j	10110 <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0

  la t0, trap_table
   100c0:	00000297          	auipc	t0,0x0
   100c4:	f4428293          	addi	t0,t0,-188 # 10004 <trap_table>
  csrw mtvec, t0
   100c8:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100cc:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100d0:	08200137          	lui	sp,0x8200

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100d4:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100d8:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100dc:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100e0:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100e4:	40a10133          	sub	sp,sp,a0
  addi sp,sp,-256
   100e8:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ed5a8>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100ec:	7b311073          	csrw	0x7b3,sp

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   100f0:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   100f4:	00050663          	beqz	a0,10100 <init0>
  wfi
   100f8:	10500073          	wfi
  j end_init0
   100fc:	0080006f          	j	10104 <end_init0>

0000000000010100 <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   10100:	6be000ef          	jal	ra,107be <_init>

0000000000010104 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10104:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10108:	34129073          	csrw	mepc,t0
  mret
   1010c:	30200073          	mret

0000000000010110 <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   10110:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10114:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10118:	100f5e63          	bgez	t5,10234 <handle_exception>

000000000001011c <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   1011c:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   10120:	00113023          	sd	ra,0(sp)
   10124:	00813423          	sd	s0,8(sp)
   10128:	00913823          	sd	s1,16(sp)
   1012c:	01213c23          	sd	s2,24(sp)
   10130:	03313023          	sd	s3,32(sp)
   10134:	03413423          	sd	s4,40(sp)
   10138:	03513823          	sd	s5,48(sp)
   1013c:	03613c23          	sd	s6,56(sp)
   10140:	05713023          	sd	s7,64(sp)
   10144:	05813423          	sd	s8,72(sp)
   10148:	05913823          	sd	s9,80(sp)
   1014c:	05a13c23          	sd	s10,88(sp)
   10150:	07b13023          	sd	s11,96(sp)
   10154:	06213423          	sd	sp,104(sp)
   10158:	07013c23          	sd	a6,120(sp)
   1015c:	09113023          	sd	a7,128(sp)
   10160:	08a13423          	sd	a0,136(sp)
   10164:	08b13823          	sd	a1,144(sp)
   10168:	08c13c23          	sd	a2,152(sp)
   1016c:	0ad13023          	sd	a3,160(sp)
   10170:	0ae13423          	sd	a4,168(sp)
   10174:	0af13823          	sd	a5,176(sp)
   10178:	0b013c23          	sd	a6,184(sp)
   1017c:	0d113023          	sd	a7,192(sp)
   10180:	0c513423          	sd	t0,200(sp)
   10184:	0c613823          	sd	t1,208(sp)
   10188:	0c713c23          	sd	t2,216(sp)
   1018c:	0fc13023          	sd	t3,224(sp)
   10190:	0fd13423          	sd	t4,232(sp)
   10194:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   10198:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   1019c:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101a0:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   101a4:	3b5000ef          	jal	ra,10d58 <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   101a8:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   101ac:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   101b0:	00013083          	ld	ra,0(sp)
   101b4:	00813403          	ld	s0,8(sp)
   101b8:	01013483          	ld	s1,16(sp)
   101bc:	01813903          	ld	s2,24(sp)
   101c0:	02013983          	ld	s3,32(sp)
   101c4:	02813a03          	ld	s4,40(sp)
   101c8:	03013a83          	ld	s5,48(sp)
   101cc:	03813b03          	ld	s6,56(sp)
   101d0:	04013b83          	ld	s7,64(sp)
   101d4:	04813c03          	ld	s8,72(sp)
   101d8:	05013c83          	ld	s9,80(sp)
   101dc:	05813d03          	ld	s10,88(sp)
   101e0:	06013d83          	ld	s11,96(sp)
   101e4:	06813103          	ld	sp,104(sp)
   101e8:	07813803          	ld	a6,120(sp)
   101ec:	08013883          	ld	a7,128(sp)
   101f0:	08813503          	ld	a0,136(sp)
   101f4:	09013583          	ld	a1,144(sp)
   101f8:	09813603          	ld	a2,152(sp)
   101fc:	0a013683          	ld	a3,160(sp)
   10200:	0a813703          	ld	a4,168(sp)
   10204:	0b013783          	ld	a5,176(sp)
   10208:	0b813803          	ld	a6,184(sp)
   1020c:	0c013883          	ld	a7,192(sp)
   10210:	0c813283          	ld	t0,200(sp)
   10214:	0d013303          	ld	t1,208(sp)
   10218:	0d813383          	ld	t2,216(sp)
   1021c:	0e013e03          	ld	t3,224(sp)
   10220:	0e813e83          	ld	t4,232(sp)
   10224:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10228:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   1022c:	34002f73          	csrr	t5,mscratch
  mret
   10230:	30200073          	mret

0000000000010234 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10234:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10238:	205000ef          	jal	ra,10c3c <exception_handler_c>
  mret
   1023c:	30200073          	mret
	...

0000000000010242 <get_dev_bar>:
    uint64_t fwdbg3;            /// 0xfffff038: RW: FW debug register 3
    uint8_t cfg_table[(1 << 12) - 0x40];/// 0xfffff040: RO: PNP configuration
} pnp_map;


static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10242:	715d                	addi	sp,sp,-80
   10244:	e4a2                	sd	s0,72(sp)
   10246:	0880                	addi	s0,sp,80
   10248:	faa43c23          	sd	a0,-72(s0)
   1024c:	87ae                	mv	a5,a1
   1024e:	8732                	mv	a4,a2
   10250:	faf41b23          	sh	a5,-74(s0)
   10254:	87ba                	mv	a5,a4
   10256:	faf41a23          	sh	a5,-76(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   1025a:	fb843783          	ld	a5,-72(s0)
   1025e:	479c                	lw	a5,8(a5)
   10260:	0087d79b          	srliw	a5,a5,0x8
   10264:	2781                	sext.w	a5,a5
   10266:	2781                	sext.w	a5,a5
   10268:	0ff7f793          	andi	a5,a5,255
   1026c:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10270:	fb843783          	ld	a5,-72(s0)
   10274:	479c                	lw	a5,8(a5)
   10276:	0107d79b          	srliw	a5,a5,0x10
   1027a:	2781                	sext.w	a5,a5
   1027c:	2781                	sext.w	a5,a5
   1027e:	0ff7f793          	andi	a5,a5,255
   10282:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10286:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   1028a:	fe042423          	sw	zero,-24(s0)
   1028e:	a82d                	j	102c8 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10290:	fec42783          	lw	a5,-20(s0)
   10294:	04078793          	addi	a5,a5,64
   10298:	fb843703          	ld	a4,-72(s0)
   1029c:	97ba                	add	a5,a5,a4
   1029e:	639c                	ld	a5,0(a5)
   102a0:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   102a4:	fb843703          	ld	a4,-72(s0)
   102a8:	fec42783          	lw	a5,-20(s0)
   102ac:	97ba                	add	a5,a5,a4
   102ae:	0407c783          	lbu	a5,64(a5)
   102b2:	2781                	sext.w	a5,a5
   102b4:	fec42703          	lw	a4,-20(s0)
   102b8:	9fb9                	addw	a5,a5,a4
   102ba:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   102be:	fe842783          	lw	a5,-24(s0)
   102c2:	2785                	addiw	a5,a5,1
   102c4:	fef42423          	sw	a5,-24(s0)
   102c8:	fe842703          	lw	a4,-24(s0)
   102cc:	fdc42783          	lw	a5,-36(s0)
   102d0:	2701                	sext.w	a4,a4
   102d2:	2781                	sext.w	a5,a5
   102d4:	faf74ee3          	blt	a4,a5,10290 <get_dev_bar+0x4e>
    }

    for (int i = 0; i < slv_total; i++) {
   102d8:	fe042223          	sw	zero,-28(s0)
   102dc:	a8b5                	j	10358 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   102de:	fec42783          	lw	a5,-20(s0)
   102e2:	04078793          	addi	a5,a5,64
   102e6:	fb843703          	ld	a4,-72(s0)
   102ea:	97ba                	add	a5,a5,a4
   102ec:	639c                	ld	a5,0(a5)
   102ee:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   102f2:	fec42783          	lw	a5,-20(s0)
   102f6:	27a1                	addiw	a5,a5,8
   102f8:	2781                	sext.w	a5,a5
   102fa:	04078793          	addi	a5,a5,64
   102fe:	fb843703          	ld	a4,-72(s0)
   10302:	97ba                	add	a5,a5,a4
   10304:	639c                	ld	a5,0(a5)
   10306:	fcf43423          	sd	a5,-56(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   1030a:	fc645783          	lhu	a5,-58(s0)
   1030e:	fb645703          	lhu	a4,-74(s0)
   10312:	2701                	sext.w	a4,a4
   10314:	2781                	sext.w	a5,a5
   10316:	00f71f63          	bne	a4,a5,10334 <get_dev_bar+0xf2>
   1031a:	fc445783          	lhu	a5,-60(s0)
   1031e:	fb445703          	lhu	a4,-76(s0)
   10322:	2701                	sext.w	a4,a4
   10324:	2781                	sext.w	a5,a5
   10326:	00f71763          	bne	a4,a5,10334 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   1032a:	fcc42783          	lw	a5,-52(s0)
   1032e:	1782                	slli	a5,a5,0x20
   10330:	9381                	srli	a5,a5,0x20
   10332:	a825                	j	1036a <get_dev_bar+0x128>
        }
        off += pnp->cfg_table[off];
   10334:	fb843703          	ld	a4,-72(s0)
   10338:	fec42783          	lw	a5,-20(s0)
   1033c:	97ba                	add	a5,a5,a4
   1033e:	0407c783          	lbu	a5,64(a5)
   10342:	2781                	sext.w	a5,a5
   10344:	fec42703          	lw	a4,-20(s0)
   10348:	9fb9                	addw	a5,a5,a4
   1034a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   1034e:	fe442783          	lw	a5,-28(s0)
   10352:	2785                	addiw	a5,a5,1
   10354:	fef42223          	sw	a5,-28(s0)
   10358:	fe442703          	lw	a4,-28(s0)
   1035c:	fe042783          	lw	a5,-32(s0)
   10360:	2701                	sext.w	a4,a4
   10362:	2781                	sext.w	a5,a5
   10364:	f6f74de3          	blt	a4,a5,102de <get_dev_bar+0x9c>
    }

    return DEV_NONE;
   10368:	57fd                	li	a5,-1
}
   1036a:	853e                	mv	a0,a5
   1036c:	6426                	ld	s0,72(sp)
   1036e:	6161                	addi	sp,sp,80
   10370:	8082                	ret

0000000000010372 <mpu_region_total>:
    mpu_ctrl_wrbits_type bits;
    uint64_t value;
} mpu_ctrl_type;

// Read CSR_MPU_ctrl vendor specific register
static int mpu_region_total() {
   10372:	1101                	addi	sp,sp,-32
   10374:	ec22                	sd	s0,24(sp)
   10376:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10378:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1037c:	bc4027f3          	csrr	a5,0xbc4
   10380:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10384:	fe843783          	ld	a5,-24(s0)
   10388:	83a1                	srli	a5,a5,0x8
   1038a:	2781                	sext.w	a5,a5
}
   1038c:	853e                	mv	a0,a5
   1038e:	6462                	ld	s0,24(sp)
   10390:	6105                	addi	sp,sp,32
   10392:	8082                	ret

0000000000010394 <mpu_disable_region>:

static void mpu_disable_region(int idx) {
   10394:	7179                	addi	sp,sp,-48
   10396:	f422                	sd	s0,40(sp)
   10398:	1800                	addi	s0,sp,48
   1039a:	87aa                	mv	a5,a0
   1039c:	fcf42e23          	sw	a5,-36(s0)
    mpu_ctrl_type ctrl;
    ctrl.value = 0;
   103a0:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   103a4:	fdc42783          	lw	a5,-36(s0)
   103a8:	0ff7f793          	andi	a5,a5,255
   103ac:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   103b0:	fe844783          	lbu	a5,-24(s0)
   103b4:	f807e793          	ori	a5,a5,-128
   103b8:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   103bc:	fe843783          	ld	a5,-24(s0)
   103c0:	bc479073          	csrw	0xbc4,a5
}
   103c4:	0001                	nop
   103c6:	7422                	ld	s0,40(sp)
   103c8:	6145                	addi	sp,sp,48
   103ca:	8082                	ret

00000000000103cc <mpu_enable_region>:

static void mpu_enable_region(int idx,
                       uint64_t bar,
                       uint64_t KB,
                       int cached,
                       const char *rwx) {
   103cc:	715d                	addi	sp,sp,-80
   103ce:	e4a2                	sd	s0,72(sp)
   103d0:	0880                	addi	s0,sp,80
   103d2:	87aa                	mv	a5,a0
   103d4:	fcb43023          	sd	a1,-64(s0)
   103d8:	fac43c23          	sd	a2,-72(s0)
   103dc:	fae43823          	sd	a4,-80(s0)
   103e0:	fcf42623          	sw	a5,-52(s0)
   103e4:	87b6                	mv	a5,a3
   103e6:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   103ea:	c0000793          	li	a5,-1024
   103ee:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   103f2:	fb043783          	ld	a5,-80(s0)
   103f6:	fef43023          	sd	a5,-32(s0)
    mpu_ctrl_type ctrl;

    asm("csrw 0xBC2, %0" : :"r"(bar));
   103fa:	fc043783          	ld	a5,-64(s0)
   103fe:	bc279073          	csrw	0xbc2,a5

    KB >>= 1;
   10402:	fb843783          	ld	a5,-72(s0)
   10406:	8385                	srli	a5,a5,0x1
   10408:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   1040c:	a819                	j	10422 <mpu_enable_region+0x56>
        mask <<= 1;
   1040e:	fe843783          	ld	a5,-24(s0)
   10412:	0786                	slli	a5,a5,0x1
   10414:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10418:	fb843783          	ld	a5,-72(s0)
   1041c:	8385                	srli	a5,a5,0x1
   1041e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10422:	fb843783          	ld	a5,-72(s0)
   10426:	f7e5                	bnez	a5,1040e <mpu_enable_region+0x42>
    }
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10428:	fe843783          	ld	a5,-24(s0)
   1042c:	bc379073          	csrw	0xbc3,a5

    ctrl.value = 0;
   10430:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10434:	fcc42783          	lw	a5,-52(s0)
   10438:	0ff7f793          	andi	a5,a5,255
   1043c:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10440:	fd844783          	lbu	a5,-40(s0)
   10444:	0107e793          	ori	a5,a5,16
   10448:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   1044c:	fc842783          	lw	a5,-56(s0)
   10450:	8b85                	andi	a5,a5,1
   10452:	0ff7f793          	andi	a5,a5,255
   10456:	8b85                	andi	a5,a5,1
   10458:	0037969b          	slliw	a3,a5,0x3
   1045c:	fd844783          	lbu	a5,-40(s0)
   10460:	9bdd                	andi	a5,a5,-9
   10462:	873e                	mv	a4,a5
   10464:	87b6                	mv	a5,a3
   10466:	8fd9                	or	a5,a5,a4
   10468:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1046c:	fd844783          	lbu	a5,-40(s0)
   10470:	f807e793          	ori	a5,a5,-128
   10474:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10478:	a09d                	j	104de <mpu_enable_region+0x112>
        if (*p == 'r') {
   1047a:	fe043783          	ld	a5,-32(s0)
   1047e:	0007c783          	lbu	a5,0(a5)
   10482:	873e                	mv	a4,a5
   10484:	07200793          	li	a5,114
   10488:	00f71863          	bne	a4,a5,10498 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1048c:	fd844783          	lbu	a5,-40(s0)
   10490:	0027e793          	ori	a5,a5,2
   10494:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'w') {
   10498:	fe043783          	ld	a5,-32(s0)
   1049c:	0007c783          	lbu	a5,0(a5)
   104a0:	873e                	mv	a4,a5
   104a2:	07700793          	li	a5,119
   104a6:	00f71863          	bne	a4,a5,104b6 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   104aa:	fd844783          	lbu	a5,-40(s0)
   104ae:	0017e793          	ori	a5,a5,1
   104b2:	fcf40c23          	sb	a5,-40(s0)
        }
        if (*p == 'x') {
   104b6:	fe043783          	ld	a5,-32(s0)
   104ba:	0007c783          	lbu	a5,0(a5)
   104be:	873e                	mv	a4,a5
   104c0:	07800793          	li	a5,120
   104c4:	00f71863          	bne	a4,a5,104d4 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   104c8:	fd844783          	lbu	a5,-40(s0)
   104cc:	0047e793          	ori	a5,a5,4
   104d0:	fcf40c23          	sb	a5,-40(s0)
        }
        p++;
   104d4:	fe043783          	ld	a5,-32(s0)
   104d8:	0785                	addi	a5,a5,1
   104da:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   104de:	fe043783          	ld	a5,-32(s0)
   104e2:	0007c783          	lbu	a5,0(a5)
   104e6:	fbd1                	bnez	a5,1047a <mpu_enable_region+0xae>
    }
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   104e8:	fd843783          	ld	a5,-40(s0)
   104ec:	bc479073          	csrw	0xbc4,a5
}
   104f0:	0001                	nop
   104f2:	6426                	ld	s0,72(sp)
   104f4:	6161                	addi	sp,sp,80
   104f6:	8082                	ret

00000000000104f8 <fw_get_cpuid>:
#include "sd_uefi.h"
#include "uart.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   104f8:	1101                	addi	sp,sp,-32
   104fa:	ec22                	sd	s0,24(sp)
   104fc:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   104fe:	f14027f3          	csrr	a5,mhartid
   10502:	fef42623          	sw	a5,-20(s0)
    return ret;
   10506:	fec42783          	lw	a5,-20(s0)
}
   1050a:	853e                	mv	a0,a5
   1050c:	6462                	ld	s0,24(sp)
   1050e:	6105                	addi	sp,sp,32
   10510:	8082                	ret

0000000000010512 <led_set>:

void led_set(int output) {
   10512:	1101                	addi	sp,sp,-32
   10514:	ec22                	sd	s0,24(sp)
   10516:	1000                	addi	s0,sp,32
   10518:	87aa                	mv	a5,a0
   1051a:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   1051e:	fec42783          	lw	a5,-20(s0)
   10522:	0047979b          	slliw	a5,a5,0x4
   10526:	0007871b          	sext.w	a4,a5
   1052a:	100607b7          	lui	a5,0x10060
   1052e:	2701                	sext.w	a4,a4
   10530:	c7d8                	sw	a4,12(a5)
}
   10532:	0001                	nop
   10534:	6462                	ld	s0,24(sp)
   10536:	6105                	addi	sp,sp,32
   10538:	8082                	ret

000000000001053a <get_dip>:

int get_dip(int idx) {
   1053a:	7179                	addi	sp,sp,-48
   1053c:	f422                	sd	s0,40(sp)
   1053e:	1800                	addi	s0,sp,48
   10540:	87aa                	mv	a5,a0
   10542:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   10546:	100607b7          	lui	a5,0x10060
   1054a:	439c                	lw	a5,0(a5)
   1054c:	0007871b          	sext.w	a4,a5
   10550:	fdc42783          	lw	a5,-36(s0)
   10554:	00f757bb          	srlw	a5,a4,a5
   10558:	2781                	sext.w	a5,a5
   1055a:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   1055e:	fec42783          	lw	a5,-20(s0)
   10562:	8b85                	andi	a5,a5,1
   10564:	2781                	sext.w	a5,a5
}
   10566:	853e                	mv	a0,a5
   10568:	7422                	ld	s0,40(sp)
   1056a:	6145                	addi	sp,sp,48
   1056c:	8082                	ret

000000000001056e <get_dips>:

int get_dips() {
   1056e:	1101                	addi	sp,sp,-32
   10570:	ec22                	sd	s0,24(sp)
   10572:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   10574:	100607b7          	lui	a5,0x10060
   10578:	439c                	lw	a5,0(a5)
   1057a:	2781                	sext.w	a5,a5
   1057c:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   10580:	fec42783          	lw	a5,-20(s0)
   10584:	8bbd                	andi	a5,a5,15
   10586:	2781                	sext.w	a5,a5
}
   10588:	853e                	mv	a0,a5
   1058a:	6462                	ld	s0,24(sp)
   1058c:	6105                	addi	sp,sp,32
   1058e:	8082                	ret

0000000000010590 <copy_image>:



void copy_image() { 
   10590:	715d                	addi	sp,sp,-80
   10592:	e486                	sd	ra,72(sp)
   10594:	e0a2                	sd	s0,64(sp)
   10596:	0880                	addi	s0,sp,80
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10598:	090007b7          	lui	a5,0x9000
   1059c:	fcf43c23          	sd	a5,-40(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   105a0:	080007b7          	lui	a5,0x8000
   105a4:	fcf43823          	sd	a5,-48(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   105a8:	100ff7b7          	lui	a5,0x100ff
   105ac:	fcf43423          	sd	a5,-56(s0)

    uint64_t qspi2 = ~0ull;
   105b0:	57fd                	li	a5,-1
   105b2:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   105b6:	00000097          	auipc	ra,0x0
   105ba:	fb8080e7          	jalr	-72(ra) # 1056e <get_dips>
   105be:	87aa                	mv	a5,a0
   105c0:	85be                	mv	a1,a5
   105c2:	67c9                	lui	a5,0x12
   105c4:	41878513          	addi	a0,a5,1048 # 12418 <strnlen+0x1e>
   105c8:	00001097          	auipc	ra,0x1
   105cc:	0d2080e7          	jalr	210(ra) # 1169a <printf_uart>
    if (get_dips() == 0xB) {
   105d0:	00000097          	auipc	ra,0x0
   105d4:	f9e080e7          	jalr	-98(ra) # 1056e <get_dips>
   105d8:	87aa                	mv	a5,a0
   105da:	873e                	mv	a4,a5
   105dc:	47ad                	li	a5,11
   105de:	04f71d63          	bne	a4,a5,10638 <copy_image+0xa8>
        // Load from SD-card
        qspi2 = get_dev_bar(pnp, VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   105e2:	07500613          	li	a2,117
   105e6:	0f100593          	li	a1,241
   105ea:	fc843503          	ld	a0,-56(s0)
   105ee:	c55ff0ef          	jal	ra,10242 <get_dev_bar>
   105f2:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   105f6:	fe843703          	ld	a4,-24(s0)
   105fa:	57fd                	li	a5,-1
   105fc:	02f70e63          	beq	a4,a5,10638 <copy_image+0xa8>
            print_uart("Select . .QSPI2\r\n", 17);
   10600:	45c5                	li	a1,17
   10602:	67c9                	lui	a5,0x12
   10604:	42878513          	addi	a0,a5,1064 # 12428 <strnlen+0x2e>
   10608:	00001097          	auipc	ra,0x1
   1060c:	ab6080e7          	jalr	-1354(ra) # 110be <print_uart>
            if (run_from_sdcard() == -1) {
   10610:	00002097          	auipc	ra,0x2
   10614:	acc080e7          	jalr	-1332(ra) # 120dc <run_from_sdcard>
   10618:	87aa                	mv	a5,a0
   1061a:	873e                	mv	a4,a5
   1061c:	57fd                	li	a5,-1
   1061e:	00f71d63          	bne	a4,a5,10638 <copy_image+0xa8>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   10622:	45c9                	li	a1,18
   10624:	67c9                	lui	a5,0x12
   10626:	44078513          	addi	a0,a5,1088 # 12440 <strnlen+0x46>
   1062a:	00001097          	auipc	ra,0x1
   1062e:	a94080e7          	jalr	-1388(ra) # 110be <print_uart>
                qspi2 = ~0ull;
   10632:	57fd                	li	a5,-1
   10634:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   10638:	fe843703          	ld	a4,-24(s0)
   1063c:	57fd                	li	a5,-1
   1063e:	0af71163          	bne	a4,a5,106e0 <copy_image+0x150>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   10642:	fc843783          	ld	a5,-56(s0)
   10646:	43dc                	lw	a5,4(a5)
   10648:	efc1                	bnez	a5,106e0 <copy_image+0x150>
        // Check if SRAM already initialized in RTL simulation, then skip copying
        uint64_t *dst = (uint64_t *)sram;
   1064a:	fd043783          	ld	a5,-48(s0)
   1064e:	fcf43023          	sd	a5,-64(s0)
        uint64_t *src = (uint64_t *)fwrom;
   10652:	fd843783          	ld	a5,-40(s0)
   10656:	faf43c23          	sd	a5,-72(s0)
        int skip_rtl_sim = 1;
   1065a:	4785                	li	a5,1
   1065c:	fef42223          	sw	a5,-28(s0)
        for (int i = 0; i < 8; i++) {
   10660:	fe042023          	sw	zero,-32(s0)
   10664:	a80d                	j	10696 <copy_image+0x106>
            if (src[i] != dst[i]) {
   10666:	fe042783          	lw	a5,-32(s0)
   1066a:	078e                	slli	a5,a5,0x3
   1066c:	fb843703          	ld	a4,-72(s0)
   10670:	97ba                	add	a5,a5,a4
   10672:	6398                	ld	a4,0(a5)
   10674:	fe042783          	lw	a5,-32(s0)
   10678:	078e                	slli	a5,a5,0x3
   1067a:	fc043683          	ld	a3,-64(s0)
   1067e:	97b6                	add	a5,a5,a3
   10680:	639c                	ld	a5,0(a5)
   10682:	00f70563          	beq	a4,a5,1068c <copy_image+0xfc>
                skip_rtl_sim = 0;
   10686:	fe042223          	sw	zero,-28(s0)
                break;
   1068a:	a829                	j	106a4 <copy_image+0x114>
        for (int i = 0; i < 8; i++) {
   1068c:	fe042783          	lw	a5,-32(s0)
   10690:	2785                	addiw	a5,a5,1
   10692:	fef42023          	sw	a5,-32(s0)
   10696:	fe042783          	lw	a5,-32(s0)
   1069a:	0007871b          	sext.w	a4,a5
   1069e:	479d                	li	a5,7
   106a0:	fce7d3e3          	ble	a4,a5,10666 <copy_image+0xd6>
            }
        }
        if (skip_rtl_sim) {
   106a4:	fe442783          	lw	a5,-28(s0)
   106a8:	2781                	sext.w	a5,a5
   106aa:	cb91                	beqz	a5,106be <copy_image+0x12e>
            print_uart("NO.COPY. .rtl.sim\r\n", 19);
   106ac:	45cd                	li	a1,19
   106ae:	67c9                	lui	a5,0x12
   106b0:	45878513          	addi	a0,a5,1112 # 12458 <strnlen+0x5e>
   106b4:	00001097          	auipc	ra,0x1
   106b8:	a0a080e7          	jalr	-1526(ra) # 110be <print_uart>
   106bc:	a015                	j	106e0 <copy_image+0x150>
        } else {
            print_uart("Coping . .FWIMAGE\r\n", 19);
   106be:	45cd                	li	a1,19
   106c0:	67c9                	lui	a5,0x12
   106c2:	47078513          	addi	a0,a5,1136 # 12470 <strnlen+0x76>
   106c6:	00001097          	auipc	ra,0x1
   106ca:	9f8080e7          	jalr	-1544(ra) # 110be <print_uart>
            memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   106ce:	000407b7          	lui	a5,0x40
   106d2:	863e                	mv	a2,a5
   106d4:	fd843583          	ld	a1,-40(s0)
   106d8:	fd043503          	ld	a0,-48(s0)
   106dc:	45f010ef          	jal	ra,1233a <memcpy>
        }
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   106e0:	fc843783          	ld	a5,-56(s0)
   106e4:	20211737          	lui	a4,0x20211
   106e8:	1237071b          	addiw	a4,a4,291
   106ec:	c3d8                	sw	a4,4(a5)
}
   106ee:	0001                	nop
   106f0:	60a6                	ld	ra,72(sp)
   106f2:	6406                	ld	s0,64(sp)
   106f4:	6161                	addi	sp,sp,80
   106f6:	8082                	ret

00000000000106f8 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   106f8:	1141                	addi	sp,sp,-16
   106fa:	e422                	sd	s0,8(sp)
   106fc:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   106fe:	0001                	nop
   10700:	6422                	ld	s0,8(sp)
   10702:	0141                	addi	sp,sp,16
   10704:	8082                	ret

0000000000010706 <init_mpu>:

void init_mpu() {
   10706:	1101                	addi	sp,sp,-32
   10708:	ec06                	sd	ra,24(sp)
   1070a:	e822                	sd	s0,16(sp)
   1070c:	1000                	addi	s0,sp,32
    int mpu_total = mpu_region_total();
   1070e:	00000097          	auipc	ra,0x0
   10712:	c64080e7          	jalr	-924(ra) # 10372 <mpu_region_total>
   10716:	87aa                	mv	a5,a0
   10718:	fef42423          	sw	a5,-24(s0)
    int dis_idx = 0;
   1071c:	fe042223          	sw	zero,-28(s0)

    // FU740 copmatible
    // [0] Lowest prioirty: region enable all memory as rwx
    mpu_enable_region(0,  // idx
   10720:	67c9                	lui	a5,0x12
   10722:	48878713          	addi	a4,a5,1160 # 12488 <strnlen+0x8e>
   10726:	4685                	li	a3,1
   10728:	567d                	li	a2,-1
   1072a:	4581                	li	a1,0
   1072c:	4501                	li	a0,0
   1072e:	00000097          	auipc	ra,0x0
   10732:	c9e080e7          	jalr	-866(ra) # 103cc <mpu_enable_region>
                      (~0ull), // KB (all memory ranges)
                      1, // cached
                      "rwx");

    // Uncached CLINT
    mpu_enable_region(1,  // idx
   10736:	67c9                	lui	a5,0x12
   10738:	49078713          	addi	a4,a5,1168 # 12490 <strnlen+0x96>
   1073c:	4681                	li	a3,0
   1073e:	6621                	lui	a2,0x8
   10740:	020005b7          	lui	a1,0x2000
   10744:	4505                	li	a0,1
   10746:	00000097          	auipc	ra,0x0
   1074a:	c86080e7          	jalr	-890(ra) # 103cc <mpu_enable_region>
                      (32768), // KB
                      0, // uncached
                      "rw");

    // Uncached PLIC
    mpu_enable_region(2,  // idx
   1074e:	67c9                	lui	a5,0x12
   10750:	49078713          	addi	a4,a5,1168 # 12490 <strnlen+0x96>
   10754:	4681                	li	a3,0
   10756:	6641                	lui	a2,0x10
   10758:	0c0005b7          	lui	a1,0xc000
   1075c:	4509                	li	a0,2
   1075e:	00000097          	auipc	ra,0x0
   10762:	c6e080e7          	jalr	-914(ra) # 103cc <mpu_enable_region>
                      (65536), // KB
                      0, // uncached
                      "rw");

    // Uncached peripheries (IO)
    mpu_enable_region(3,  // idx
   10766:	67c9                	lui	a5,0x12
   10768:	49078713          	addi	a4,a5,1168 # 12490 <strnlen+0x96>
   1076c:	4681                	li	a3,0
   1076e:	00040637          	lui	a2,0x40
   10772:	100005b7          	lui	a1,0x10000
   10776:	450d                	li	a0,3
   10778:	00000097          	auipc	ra,0x0
   1077c:	c54080e7          	jalr	-940(ra) # 103cc <mpu_enable_region>
                      (0x0000000010000000ull), // bar
                      (0x40000), // KB
                      0, // uncached
                      "rw");
    dis_idx = 4;
   10780:	4791                	li	a5,4
   10782:	fef42223          	sw	a5,-28(s0)

    for (int i = dis_idx; i < mpu_total; i++) {
   10786:	fe442783          	lw	a5,-28(s0)
   1078a:	fef42623          	sw	a5,-20(s0)
   1078e:	a819                	j	107a4 <init_mpu+0x9e>
        mpu_disable_region(i);
   10790:	fec42783          	lw	a5,-20(s0)
   10794:	853e                	mv	a0,a5
   10796:	bffff0ef          	jal	ra,10394 <mpu_disable_region>
    for (int i = dis_idx; i < mpu_total; i++) {
   1079a:	fec42783          	lw	a5,-20(s0)
   1079e:	2785                	addiw	a5,a5,1
   107a0:	fef42623          	sw	a5,-20(s0)
   107a4:	fec42703          	lw	a4,-20(s0)
   107a8:	fe842783          	lw	a5,-24(s0)
   107ac:	2701                	sext.w	a4,a4
   107ae:	2781                	sext.w	a5,a5
   107b0:	fef740e3          	blt	a4,a5,10790 <init_mpu+0x8a>
    }
}
   107b4:	0001                	nop
   107b6:	60e2                	ld	ra,24(sp)
   107b8:	6442                	ld	s0,16(sp)
   107ba:	6105                	addi	sp,sp,32
   107bc:	8082                	ret

00000000000107be <_init>:

void _init() {
   107be:	7139                	addi	sp,sp,-64
   107c0:	fc06                	sd	ra,56(sp)
   107c2:	f822                	sd	s0,48(sp)
   107c4:	0080                	addi	s0,sp,64
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   107c6:	100ff7b7          	lui	a5,0x100ff
   107ca:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   107ce:	100107b7          	lui	a5,0x10010
   107d2:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   107d6:	100607b7          	lui	a5,0x10060
   107da:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   107de:	47a1                	li	a5,8
   107e0:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   107e4:	fd043783          	ld	a5,-48(s0)
   107e8:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   107ec:	6785                	lui	a5,0x1
   107ee:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   107f2:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   107f6:	fd043783          	ld	a5,-48(s0)
   107fa:	3047b073          	csrc	mie,a5

    t1 = 0x00000007;
   107fe:	479d                	li	a5,7
   10800:	fcf43823          	sd	a5,-48(s0)
    asm("csrw mcounteren, %0" : :"r"(t1));  // allow counter access from S-mode
   10804:	fd043783          	ld	a5,-48(s0)
   10808:	30679073          	csrw	mcounteren,a5
    asm("csrw scounteren, %0" : :"r"(t1));  // allow counter access from U-mode
   1080c:	fd043783          	ld	a5,-48(s0)
   10810:	10679073          	csrw	scounteren,a5

    init_mpu();
   10814:	00000097          	auipc	ra,0x0
   10818:	ef2080e7          	jalr	-270(ra) # 10706 <init_mpu>

    txctrl.v = 0;
   1081c:	fc042423          	sw	zero,-56(s0)
    txctrl.b.txen = 1;
   10820:	fc844783          	lbu	a5,-56(s0)
   10824:	0017e793          	ori	a5,a5,1
   10828:	fcf40423          	sb	a5,-56(s0)
    rxctrl.v = 0;
   1082c:	fc042023          	sw	zero,-64(s0)
    rxctrl.b.rxen = 1;
   10830:	fc044783          	lbu	a5,-64(s0)
   10834:	0017e793          	ori	a5,a5,1
   10838:	fcf40023          	sb	a5,-64(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   1083c:	fe043783          	ld	a5,-32(s0)
   10840:	0ad00713          	li	a4,173
   10844:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   10846:	fc842783          	lw	a5,-56(s0)
   1084a:	0007871b          	sext.w	a4,a5
   1084e:	fe043783          	ld	a5,-32(s0)
   10852:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   10854:	fc042783          	lw	a5,-64(s0)
   10858:	0007871b          	sext.w	a4,a5
   1085c:	fe043783          	ld	a5,-32(s0)
   10860:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   10862:	fd843783          	ld	a5,-40(s0)
   10866:	473d                	li	a4,15
   10868:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   1086a:	fd843783          	ld	a5,-40(s0)
   1086e:	6705                	lui	a4,0x1
   10870:	3741                	addiw	a4,a4,-16
   10872:	c798                	sw	a4,8(a5)

    led_set(0x01);
   10874:	4505                	li	a0,1
   10876:	c9dff0ef          	jal	ra,10512 <led_set>

    copy_image();
   1087a:	00000097          	auipc	ra,0x0
   1087e:	d16080e7          	jalr	-746(ra) # 10590 <copy_image>
    led_set(0x02);
   10882:	4509                	li	a0,2
   10884:	c8fff0ef          	jal	ra,10512 <led_set>

    printf_uart("FPL. . . .%s\r\n", "DONE");
   10888:	67c9                	lui	a5,0x12
   1088a:	49878593          	addi	a1,a5,1176 # 12498 <strnlen+0x9e>
   1088e:	67c9                	lui	a5,0x12
   10890:	4a078513          	addi	a0,a5,1184 # 124a0 <strnlen+0xa6>
   10894:	607000ef          	jal	ra,1169a <printf_uart>
    printf_uart("SPL. . . .%s\r\n", "Started");
   10898:	67c9                	lui	a5,0x12
   1089a:	4b078593          	addi	a1,a5,1200 # 124b0 <strnlen+0xb6>
   1089e:	67c9                	lui	a5,0x12
   108a0:	4b878513          	addi	a0,a5,1208 # 124b8 <strnlen+0xbe>
   108a4:	5f7000ef          	jal	ra,1169a <printf_uart>

    led_set(0x03);
   108a8:	450d                	li	a0,3
   108aa:	c69ff0ef          	jal	ra,10512 <led_set>
}
   108ae:	0001                	nop
   108b0:	70e2                	ld	ra,56(sp)
   108b2:	7442                	ld	s0,48(sp)
   108b4:	6121                	addi	sp,sp,64
   108b6:	8082                	ret

00000000000108b8 <main>:

/** Not used actually */
int main() {
   108b8:	1141                	addi	sp,sp,-16
   108ba:	e422                	sd	s0,8(sp)
   108bc:	0800                	addi	s0,sp,16
    while (1) {}
   108be:	a001                	j	108be <main+0x6>
	...

00000000000108c2 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   108c2:	715d                	addi	sp,sp,-80
   108c4:	e4a2                	sd	s0,72(sp)
   108c6:	0880                	addi	s0,sp,80
   108c8:	faa43c23          	sd	a0,-72(s0)
   108cc:	87ae                	mv	a5,a1
   108ce:	8732                	mv	a4,a2
   108d0:	faf41b23          	sh	a5,-74(s0)
   108d4:	87ba                	mv	a5,a4
   108d6:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   108da:	fb843783          	ld	a5,-72(s0)
   108de:	479c                	lw	a5,8(a5)
   108e0:	0087d79b          	srliw	a5,a5,0x8
   108e4:	2781                	sext.w	a5,a5
   108e6:	2781                	sext.w	a5,a5
   108e8:	0ff7f793          	andi	a5,a5,255
   108ec:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   108f0:	fb843783          	ld	a5,-72(s0)
   108f4:	479c                	lw	a5,8(a5)
   108f6:	0107d79b          	srliw	a5,a5,0x10
   108fa:	2781                	sext.w	a5,a5
   108fc:	2781                	sext.w	a5,a5
   108fe:	0ff7f793          	andi	a5,a5,255
   10902:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10906:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   1090a:	fe042423          	sw	zero,-24(s0)
   1090e:	a82d                	j	10948 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10910:	fec42783          	lw	a5,-20(s0)
   10914:	04078793          	addi	a5,a5,64
   10918:	fb843703          	ld	a4,-72(s0)
   1091c:	97ba                	add	a5,a5,a4
   1091e:	639c                	ld	a5,0(a5)
   10920:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10924:	fb843703          	ld	a4,-72(s0)
   10928:	fec42783          	lw	a5,-20(s0)
   1092c:	97ba                	add	a5,a5,a4
   1092e:	0407c783          	lbu	a5,64(a5)
   10932:	2781                	sext.w	a5,a5
   10934:	fec42703          	lw	a4,-20(s0)
   10938:	9fb9                	addw	a5,a5,a4
   1093a:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   1093e:	fe842783          	lw	a5,-24(s0)
   10942:	2785                	addiw	a5,a5,1
   10944:	fef42423          	sw	a5,-24(s0)
   10948:	fe842703          	lw	a4,-24(s0)
   1094c:	fdc42783          	lw	a5,-36(s0)
   10950:	2701                	sext.w	a4,a4
   10952:	2781                	sext.w	a5,a5
   10954:	faf74ee3          	blt	a4,a5,10910 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10958:	fe042223          	sw	zero,-28(s0)
   1095c:	a8b5                	j	109d8 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1095e:	fec42783          	lw	a5,-20(s0)
   10962:	04078793          	addi	a5,a5,64
   10966:	fb843703          	ld	a4,-72(s0)
   1096a:	97ba                	add	a5,a5,a4
   1096c:	639c                	ld	a5,0(a5)
   1096e:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10972:	fec42783          	lw	a5,-20(s0)
   10976:	27a1                	addiw	a5,a5,8
   10978:	2781                	sext.w	a5,a5
   1097a:	04078793          	addi	a5,a5,64
   1097e:	fb843703          	ld	a4,-72(s0)
   10982:	97ba                	add	a5,a5,a4
   10984:	639c                	ld	a5,0(a5)
   10986:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   1098a:	fc645783          	lhu	a5,-58(s0)
   1098e:	fb645703          	lhu	a4,-74(s0)
   10992:	2701                	sext.w	a4,a4
   10994:	2781                	sext.w	a5,a5
   10996:	00f71f63          	bne	a4,a5,109b4 <get_dev_bar+0xf2>
   1099a:	fc445783          	lhu	a5,-60(s0)
   1099e:	fb445703          	lhu	a4,-76(s0)
   109a2:	2701                	sext.w	a4,a4
   109a4:	2781                	sext.w	a5,a5
   109a6:	00f71763          	bne	a4,a5,109b4 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   109aa:	fcc42783          	lw	a5,-52(s0)
   109ae:	1782                	slli	a5,a5,0x20
   109b0:	9381                	srli	a5,a5,0x20
   109b2:	a825                	j	109ea <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   109b4:	fb843703          	ld	a4,-72(s0)
   109b8:	fec42783          	lw	a5,-20(s0)
   109bc:	97ba                	add	a5,a5,a4
   109be:	0407c783          	lbu	a5,64(a5)
   109c2:	2781                	sext.w	a5,a5
   109c4:	fec42703          	lw	a4,-20(s0)
   109c8:	9fb9                	addw	a5,a5,a4
   109ca:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   109ce:	fe442783          	lw	a5,-28(s0)
   109d2:	2785                	addiw	a5,a5,1
   109d4:	fef42223          	sw	a5,-28(s0)
   109d8:	fe442703          	lw	a4,-28(s0)
   109dc:	fe042783          	lw	a5,-32(s0)
   109e0:	2701                	sext.w	a4,a4
   109e2:	2781                	sext.w	a5,a5
   109e4:	f6f74de3          	blt	a4,a5,1095e <get_dev_bar+0x9c>
    return DEV_NONE;
   109e8:	57fd                	li	a5,-1
}
   109ea:	853e                	mv	a0,a5
   109ec:	6426                	ld	s0,72(sp)
   109ee:	6161                	addi	sp,sp,80
   109f0:	8082                	ret

00000000000109f2 <mpu_region_total>:
static int mpu_region_total() {
   109f2:	1101                	addi	sp,sp,-32
   109f4:	ec22                	sd	s0,24(sp)
   109f6:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   109f8:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   109fc:	bc4027f3          	csrr	a5,0xbc4
   10a00:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10a04:	fe843783          	ld	a5,-24(s0)
   10a08:	83a1                	srli	a5,a5,0x8
   10a0a:	2781                	sext.w	a5,a5
}
   10a0c:	853e                	mv	a0,a5
   10a0e:	6462                	ld	s0,24(sp)
   10a10:	6105                	addi	sp,sp,32
   10a12:	8082                	ret

0000000000010a14 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10a14:	7179                	addi	sp,sp,-48
   10a16:	f422                	sd	s0,40(sp)
   10a18:	1800                	addi	s0,sp,48
   10a1a:	87aa                	mv	a5,a0
   10a1c:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10a20:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10a24:	fdc42783          	lw	a5,-36(s0)
   10a28:	0ff7f793          	andi	a5,a5,255
   10a2c:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10a30:	fe844783          	lbu	a5,-24(s0)
   10a34:	f807e793          	ori	a5,a5,-128
   10a38:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10a3c:	fe843783          	ld	a5,-24(s0)
   10a40:	bc479073          	csrw	0xbc4,a5
}
   10a44:	0001                	nop
   10a46:	7422                	ld	s0,40(sp)
   10a48:	6145                	addi	sp,sp,48
   10a4a:	8082                	ret

0000000000010a4c <mpu_enable_region>:
                       const char *rwx) {
   10a4c:	715d                	addi	sp,sp,-80
   10a4e:	e4a2                	sd	s0,72(sp)
   10a50:	0880                	addi	s0,sp,80
   10a52:	87aa                	mv	a5,a0
   10a54:	fcb43023          	sd	a1,-64(s0)
   10a58:	fac43c23          	sd	a2,-72(s0)
   10a5c:	fae43823          	sd	a4,-80(s0)
   10a60:	fcf42623          	sw	a5,-52(s0)
   10a64:	87b6                	mv	a5,a3
   10a66:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10a6a:	c0000793          	li	a5,-1024
   10a6e:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10a72:	fb043783          	ld	a5,-80(s0)
   10a76:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10a7a:	fc043783          	ld	a5,-64(s0)
   10a7e:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10a82:	fb843783          	ld	a5,-72(s0)
   10a86:	8385                	srli	a5,a5,0x1
   10a88:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10a8c:	a819                	j	10aa2 <mpu_enable_region+0x56>
        mask <<= 1;
   10a8e:	fe843783          	ld	a5,-24(s0)
   10a92:	0786                	slli	a5,a5,0x1
   10a94:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10a98:	fb843783          	ld	a5,-72(s0)
   10a9c:	8385                	srli	a5,a5,0x1
   10a9e:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10aa2:	fb843783          	ld	a5,-72(s0)
   10aa6:	f7e5                	bnez	a5,10a8e <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10aa8:	fe843783          	ld	a5,-24(s0)
   10aac:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10ab0:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10ab4:	fcc42783          	lw	a5,-52(s0)
   10ab8:	0ff7f793          	andi	a5,a5,255
   10abc:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10ac0:	fd844783          	lbu	a5,-40(s0)
   10ac4:	0107e793          	ori	a5,a5,16
   10ac8:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10acc:	fc842783          	lw	a5,-56(s0)
   10ad0:	8b85                	andi	a5,a5,1
   10ad2:	0ff7f793          	andi	a5,a5,255
   10ad6:	8b85                	andi	a5,a5,1
   10ad8:	0037969b          	slliw	a3,a5,0x3
   10adc:	fd844783          	lbu	a5,-40(s0)
   10ae0:	9bdd                	andi	a5,a5,-9
   10ae2:	873e                	mv	a4,a5
   10ae4:	87b6                	mv	a5,a3
   10ae6:	8fd9                	or	a5,a5,a4
   10ae8:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10aec:	fd844783          	lbu	a5,-40(s0)
   10af0:	f807e793          	ori	a5,a5,-128
   10af4:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10af8:	a09d                	j	10b5e <mpu_enable_region+0x112>
        if (*p == 'r') {
   10afa:	fe043783          	ld	a5,-32(s0)
   10afe:	0007c783          	lbu	a5,0(a5)
   10b02:	873e                	mv	a4,a5
   10b04:	07200793          	li	a5,114
   10b08:	00f71863          	bne	a4,a5,10b18 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   10b0c:	fd844783          	lbu	a5,-40(s0)
   10b10:	0027e793          	ori	a5,a5,2
   10b14:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   10b18:	fe043783          	ld	a5,-32(s0)
   10b1c:	0007c783          	lbu	a5,0(a5)
   10b20:	873e                	mv	a4,a5
   10b22:	07700793          	li	a5,119
   10b26:	00f71863          	bne	a4,a5,10b36 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   10b2a:	fd844783          	lbu	a5,-40(s0)
   10b2e:	0017e793          	ori	a5,a5,1
   10b32:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   10b36:	fe043783          	ld	a5,-32(s0)
   10b3a:	0007c783          	lbu	a5,0(a5)
   10b3e:	873e                	mv	a4,a5
   10b40:	07800793          	li	a5,120
   10b44:	00f71863          	bne	a4,a5,10b54 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   10b48:	fd844783          	lbu	a5,-40(s0)
   10b4c:	0047e793          	ori	a5,a5,4
   10b50:	fcf40c23          	sb	a5,-40(s0)
        p++;
   10b54:	fe043783          	ld	a5,-32(s0)
   10b58:	0785                	addi	a5,a5,1
   10b5a:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   10b5e:	fe043783          	ld	a5,-32(s0)
   10b62:	0007c783          	lbu	a5,0(a5)
   10b66:	fbd1                	bnez	a5,10afa <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10b68:	fd843783          	ld	a5,-40(s0)
   10b6c:	bc479073          	csrw	0xbc4,a5
}
   10b70:	0001                	nop
   10b72:	6426                	ld	s0,72(sp)
   10b74:	6161                	addi	sp,sp,80
   10b76:	8082                	ret

0000000000010b78 <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   10b78:	1101                	addi	sp,sp,-32
   10b7a:	ec22                	sd	s0,24(sp)
   10b7c:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10b7e:	342027f3          	csrr	a5,mcause
   10b82:	fef42623          	sw	a5,-20(s0)
    return ret;
   10b86:	fec42783          	lw	a5,-20(s0)
}
   10b8a:	853e                	mv	a0,a5
   10b8c:	6462                	ld	s0,24(sp)
   10b8e:	6105                	addi	sp,sp,32
   10b90:	8082                	ret

0000000000010b92 <get_mepc>:

int get_mepc() {
   10b92:	1101                	addi	sp,sp,-32
   10b94:	ec22                	sd	s0,24(sp)
   10b96:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   10b98:	341027f3          	csrr	a5,mepc
   10b9c:	fef42623          	sw	a5,-20(s0)
    return ret;
   10ba0:	fec42783          	lw	a5,-20(s0)
}
   10ba4:	853e                	mv	a0,a5
   10ba6:	6462                	ld	s0,24(sp)
   10ba8:	6105                	addi	sp,sp,32
   10baa:	8082                	ret

0000000000010bac <env_call>:


void env_call(long long test_id) {
   10bac:	7179                	addi	sp,sp,-48
   10bae:	f406                	sd	ra,40(sp)
   10bb0:	f022                	sd	s0,32(sp)
   10bb2:	1800                	addi	s0,sp,48
   10bb4:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   10bb8:	fd843783          	ld	a5,-40(s0)
   10bbc:	c7bd                	beqz	a5,10c2a <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10bbe:	45b5                	li	a1,13
   10bc0:	67c9                	lui	a5,0x12
   10bc2:	4c878513          	addi	a0,a5,1224 # 124c8 <strnlen+0xce>
   10bc6:	00000097          	auipc	ra,0x0
   10bca:	4f8080e7          	jalr	1272(ra) # 110be <print_uart>
        print_uart("a0=", 3);
   10bce:	458d                	li	a1,3
   10bd0:	67c9                	lui	a5,0x12
   10bd2:	4d878513          	addi	a0,a5,1240 # 124d8 <strnlen+0xde>
   10bd6:	00000097          	auipc	ra,0x0
   10bda:	4e8080e7          	jalr	1256(ra) # 110be <print_uart>
        print_uart_hex(test_id);
   10bde:	fd843503          	ld	a0,-40(s0)
   10be2:	54e000ef          	jal	ra,11130 <print_uart_hex>
        print_uart("\r\n", 2);
   10be6:	4589                	li	a1,2
   10be8:	67c9                	lui	a5,0x12
   10bea:	4e078513          	addi	a0,a5,1248 # 124e0 <strnlen+0xe6>
   10bee:	00000097          	auipc	ra,0x0
   10bf2:	4d0080e7          	jalr	1232(ra) # 110be <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   10bf6:	343027f3          	csrr	a5,mbadaddr
   10bfa:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   10bfe:	45a5                	li	a1,9
   10c00:	67c9                	lui	a5,0x12
   10c02:	4e878513          	addi	a0,a5,1256 # 124e8 <strnlen+0xee>
   10c06:	00000097          	auipc	ra,0x0
   10c0a:	4b8080e7          	jalr	1208(ra) # 110be <print_uart>
        print_uart_hex(mbadaddr);
   10c0e:	fec42783          	lw	a5,-20(s0)
   10c12:	853e                	mv	a0,a5
   10c14:	51c000ef          	jal	ra,11130 <print_uart_hex>
        print_uart("\r\n", 2);
   10c18:	4589                	li	a1,2
   10c1a:	67c9                	lui	a5,0x12
   10c1c:	4e078513          	addi	a0,a5,1248 # 124e0 <strnlen+0xe6>
   10c20:	00000097          	auipc	ra,0x0
   10c24:	49e080e7          	jalr	1182(ra) # 110be <print_uart>
   10c28:	a809                	j	10c3a <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10c2a:	45b5                	li	a1,13
   10c2c:	67c9                	lui	a5,0x12
   10c2e:	4f878513          	addi	a0,a5,1272 # 124f8 <strnlen+0xfe>
   10c32:	00000097          	auipc	ra,0x0
   10c36:	48c080e7          	jalr	1164(ra) # 110be <print_uart>
    }
    while (1) {}
   10c3a:	a001                	j	10c3a <env_call+0x8e>

0000000000010c3c <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10c3c:	7179                	addi	sp,sp,-48
   10c3e:	f406                	sd	ra,40(sp)
   10c40:	f022                	sd	s0,32(sp)
   10c42:	1800                	addi	s0,sp,48
   10c44:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   10c48:	00000097          	auipc	ra,0x0
   10c4c:	f30080e7          	jalr	-208(ra) # 10b78 <get_mcause>
   10c50:	87aa                	mv	a5,a0
   10c52:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   10c56:	fec42783          	lw	a5,-20(s0)
   10c5a:	37e1                	addiw	a5,a5,-8
   10c5c:	0007871b          	sext.w	a4,a5
   10c60:	4785                	li	a5,1
   10c62:	00e7e963          	bltu	a5,a4,10c74 <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   10c66:	fd843503          	ld	a0,-40(s0)
   10c6a:	00000097          	auipc	ra,0x0
   10c6e:	f42080e7          	jalr	-190(ra) # 10bac <env_call>
        return;
   10c72:	a0b9                	j	10cc0 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   10c74:	459d                	li	a1,7
   10c76:	67c9                	lui	a5,0x12
   10c78:	50878513          	addi	a0,a5,1288 # 12508 <strnlen+0x10e>
   10c7c:	442000ef          	jal	ra,110be <print_uart>
    print_uart_hex(mcause);
   10c80:	fec42783          	lw	a5,-20(s0)
   10c84:	853e                	mv	a0,a5
   10c86:	00000097          	auipc	ra,0x0
   10c8a:	4aa080e7          	jalr	1194(ra) # 11130 <print_uart_hex>
    print_uart(",mepc:", 6);
   10c8e:	4599                	li	a1,6
   10c90:	67c9                	lui	a5,0x12
   10c92:	51078513          	addi	a0,a5,1296 # 12510 <strnlen+0x116>
   10c96:	428000ef          	jal	ra,110be <print_uart>
    print_uart_hex(get_mepc());
   10c9a:	ef9ff0ef          	jal	ra,10b92 <get_mepc>
   10c9e:	87aa                	mv	a5,a0
   10ca0:	853e                	mv	a0,a5
   10ca2:	00000097          	auipc	ra,0x0
   10ca6:	48e080e7          	jalr	1166(ra) # 11130 <print_uart_hex>
    print_uart("\r\n", 2);
   10caa:	4589                	li	a1,2
   10cac:	67c9                	lui	a5,0x12
   10cae:	4e078513          	addi	a0,a5,1248 # 124e0 <strnlen+0xe6>
   10cb2:	40c000ef          	jal	ra,110be <print_uart>

    /// Exception trap
    led_set(0xF0);
   10cb6:	0f000513          	li	a0,240
   10cba:	859ff0ef          	jal	ra,10512 <led_set>
    while (1) {}
   10cbe:	a001                	j	10cbe <exception_handler_c+0x82>
}
   10cc0:	70a2                	ld	ra,40(sp)
   10cc2:	7402                	ld	s0,32(sp)
   10cc4:	6145                	addi	sp,sp,48
   10cc6:	8082                	ret

0000000000010cc8 <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   10cc8:	1141                	addi	sp,sp,-16
   10cca:	e406                	sd	ra,8(sp)
   10ccc:	e022                	sd	s0,0(sp)
   10cce:	0800                	addi	s0,sp,16
    led_set(0xF0);
   10cd0:	0f000513          	li	a0,240
   10cd4:	00000097          	auipc	ra,0x0
   10cd8:	83e080e7          	jalr	-1986(ra) # 10512 <led_set>
    print_uart("fatal_error()\r\n", 15);
   10cdc:	45bd                	li	a1,15
   10cde:	67c9                	lui	a5,0x12
   10ce0:	51878513          	addi	a0,a5,1304 # 12518 <strnlen+0x11e>
   10ce4:	00000097          	auipc	ra,0x0
   10ce8:	3da080e7          	jalr	986(ra) # 110be <print_uart>
    while (1) {}
   10cec:	a001                	j	10cec <fatal_error+0x24>

0000000000010cee <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   10cee:	7179                	addi	sp,sp,-48
   10cf0:	f422                	sd	s0,40(sp)
   10cf2:	1800                	addi	s0,sp,48
   10cf4:	87aa                	mv	a5,a0
   10cf6:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10cfa:	0c0007b7          	lui	a5,0xc000
   10cfe:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   10d02:	fe843703          	ld	a4,-24(s0)
   10d06:	fdc42783          	lw	a5,-36(s0)
   10d0a:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed8a8>
   10d0e:	07b2                	slli	a5,a5,0xc
   10d10:	97ba                	add	a5,a5,a4
   10d12:	43dc                	lw	a5,4(a5)
   10d14:	2781                	sext.w	a5,a5
}
   10d16:	853e                	mv	a0,a5
   10d18:	7422                	ld	s0,40(sp)
   10d1a:	6145                	addi	sp,sp,48
   10d1c:	8082                	ret

0000000000010d1e <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   10d1e:	7179                	addi	sp,sp,-48
   10d20:	f422                	sd	s0,40(sp)
   10d22:	1800                	addi	s0,sp,48
   10d24:	87aa                	mv	a5,a0
   10d26:	872e                	mv	a4,a1
   10d28:	fcf42e23          	sw	a5,-36(s0)
   10d2c:	87ba                	mv	a5,a4
   10d2e:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10d32:	0c0007b7          	lui	a5,0xc000
   10d36:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10d3a:	fd842703          	lw	a4,-40(s0)
   10d3e:	fe843683          	ld	a3,-24(s0)
   10d42:	fdc42783          	lw	a5,-36(s0)
   10d46:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfed8a8>
   10d4a:	07b2                	slli	a5,a5,0xc
   10d4c:	97b6                	add	a5,a5,a3
   10d4e:	c3d8                	sw	a4,4(a5)
}
   10d50:	0001                	nop
   10d52:	7422                	ld	s0,40(sp)
   10d54:	6145                	addi	sp,sp,48
   10d56:	8082                	ret

0000000000010d58 <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   10d58:	7139                	addi	sp,sp,-64
   10d5a:	fc06                	sd	ra,56(sp)
   10d5c:	f822                	sd	s0,48(sp)
   10d5e:	0080                	addi	s0,sp,64
   10d60:	fca43c23          	sd	a0,-40(s0)
   10d64:	fcb43823          	sd	a1,-48(s0)
   10d68:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10d6c:	fd843783          	ld	a5,-40(s0)
   10d70:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10d74:	fe744783          	lbu	a5,-25(s0)
   10d78:	f807f793          	andi	a5,a5,-128
   10d7c:	0ff7f793          	andi	a5,a5,255
   10d80:	cb85                	beqz	a5,10db0 <interrupt_handler_c+0x58>
   10d82:	fe043703          	ld	a4,-32(s0)
   10d86:	57fd                	li	a5,-1
   10d88:	8385                	srli	a5,a5,0x1
   10d8a:	8f7d                	and	a4,a4,a5
   10d8c:	47ad                	li	a5,11
   10d8e:	02f71163          	bne	a4,a5,10db0 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10d92:	4501                	li	a0,0
   10d94:	f5bff0ef          	jal	ra,10cee <plic_claim>
   10d98:	87aa                	mv	a5,a0
   10d9a:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10d9e:	fec42783          	lw	a5,-20(s0)
   10da2:	85be                	mv	a1,a5
   10da4:	4501                	li	a0,0
   10da6:	00000097          	auipc	ra,0x0
   10daa:	f78080e7          	jalr	-136(ra) # 10d1e <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10dae:	a029                	j	10db8 <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10db0:	00000097          	auipc	ra,0x0
   10db4:	f18080e7          	jalr	-232(ra) # 10cc8 <fatal_error>
    }

    return epc;
   10db8:	fd043783          	ld	a5,-48(s0)
}
   10dbc:	853e                	mv	a0,a5
   10dbe:	70e2                	ld	ra,56(sp)
   10dc0:	7442                	ld	s0,48(sp)
   10dc2:	6121                	addi	sp,sp,64
   10dc4:	8082                	ret

0000000000010dc6 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   10dc6:	715d                	addi	sp,sp,-80
   10dc8:	e4a2                	sd	s0,72(sp)
   10dca:	0880                	addi	s0,sp,80
   10dcc:	faa43c23          	sd	a0,-72(s0)
   10dd0:	87ae                	mv	a5,a1
   10dd2:	8732                	mv	a4,a2
   10dd4:	faf41b23          	sh	a5,-74(s0)
   10dd8:	87ba                	mv	a5,a4
   10dda:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   10dde:	fb843783          	ld	a5,-72(s0)
   10de2:	479c                	lw	a5,8(a5)
   10de4:	0087d79b          	srliw	a5,a5,0x8
   10de8:	2781                	sext.w	a5,a5
   10dea:	2781                	sext.w	a5,a5
   10dec:	0ff7f793          	andi	a5,a5,255
   10df0:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   10df4:	fb843783          	ld	a5,-72(s0)
   10df8:	479c                	lw	a5,8(a5)
   10dfa:	0107d79b          	srliw	a5,a5,0x10
   10dfe:	2781                	sext.w	a5,a5
   10e00:	2781                	sext.w	a5,a5
   10e02:	0ff7f793          	andi	a5,a5,255
   10e06:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   10e0a:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10e0e:	fe042423          	sw	zero,-24(s0)
   10e12:	a82d                	j	10e4c <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10e14:	fec42783          	lw	a5,-20(s0)
   10e18:	04078793          	addi	a5,a5,64
   10e1c:	fb843703          	ld	a4,-72(s0)
   10e20:	97ba                	add	a5,a5,a4
   10e22:	639c                	ld	a5,0(a5)
   10e24:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   10e28:	fb843703          	ld	a4,-72(s0)
   10e2c:	fec42783          	lw	a5,-20(s0)
   10e30:	97ba                	add	a5,a5,a4
   10e32:	0407c783          	lbu	a5,64(a5)
   10e36:	2781                	sext.w	a5,a5
   10e38:	fec42703          	lw	a4,-20(s0)
   10e3c:	9fb9                	addw	a5,a5,a4
   10e3e:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   10e42:	fe842783          	lw	a5,-24(s0)
   10e46:	2785                	addiw	a5,a5,1
   10e48:	fef42423          	sw	a5,-24(s0)
   10e4c:	fe842703          	lw	a4,-24(s0)
   10e50:	fdc42783          	lw	a5,-36(s0)
   10e54:	2701                	sext.w	a4,a4
   10e56:	2781                	sext.w	a5,a5
   10e58:	faf74ee3          	blt	a4,a5,10e14 <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   10e5c:	fe042223          	sw	zero,-28(s0)
   10e60:	a8b5                	j	10edc <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   10e62:	fec42783          	lw	a5,-20(s0)
   10e66:	04078793          	addi	a5,a5,64
   10e6a:	fb843703          	ld	a4,-72(s0)
   10e6e:	97ba                	add	a5,a5,a4
   10e70:	639c                	ld	a5,0(a5)
   10e72:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10e76:	fec42783          	lw	a5,-20(s0)
   10e7a:	27a1                	addiw	a5,a5,8
   10e7c:	2781                	sext.w	a5,a5
   10e7e:	04078793          	addi	a5,a5,64
   10e82:	fb843703          	ld	a4,-72(s0)
   10e86:	97ba                	add	a5,a5,a4
   10e88:	639c                	ld	a5,0(a5)
   10e8a:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   10e8e:	fc645783          	lhu	a5,-58(s0)
   10e92:	fb645703          	lhu	a4,-74(s0)
   10e96:	2701                	sext.w	a4,a4
   10e98:	2781                	sext.w	a5,a5
   10e9a:	00f71f63          	bne	a4,a5,10eb8 <get_dev_bar+0xf2>
   10e9e:	fc445783          	lhu	a5,-60(s0)
   10ea2:	fb445703          	lhu	a4,-76(s0)
   10ea6:	2701                	sext.w	a4,a4
   10ea8:	2781                	sext.w	a5,a5
   10eaa:	00f71763          	bne	a4,a5,10eb8 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   10eae:	fcc42783          	lw	a5,-52(s0)
   10eb2:	1782                	slli	a5,a5,0x20
   10eb4:	9381                	srli	a5,a5,0x20
   10eb6:	a825                	j	10eee <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   10eb8:	fb843703          	ld	a4,-72(s0)
   10ebc:	fec42783          	lw	a5,-20(s0)
   10ec0:	97ba                	add	a5,a5,a4
   10ec2:	0407c783          	lbu	a5,64(a5)
   10ec6:	2781                	sext.w	a5,a5
   10ec8:	fec42703          	lw	a4,-20(s0)
   10ecc:	9fb9                	addw	a5,a5,a4
   10ece:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   10ed2:	fe442783          	lw	a5,-28(s0)
   10ed6:	2785                	addiw	a5,a5,1
   10ed8:	fef42223          	sw	a5,-28(s0)
   10edc:	fe442703          	lw	a4,-28(s0)
   10ee0:	fe042783          	lw	a5,-32(s0)
   10ee4:	2701                	sext.w	a4,a4
   10ee6:	2781                	sext.w	a5,a5
   10ee8:	f6f74de3          	blt	a4,a5,10e62 <get_dev_bar+0x9c>
    return DEV_NONE;
   10eec:	57fd                	li	a5,-1
}
   10eee:	853e                	mv	a0,a5
   10ef0:	6426                	ld	s0,72(sp)
   10ef2:	6161                	addi	sp,sp,80
   10ef4:	8082                	ret

0000000000010ef6 <mpu_region_total>:
static int mpu_region_total() {
   10ef6:	1101                	addi	sp,sp,-32
   10ef8:	ec22                	sd	s0,24(sp)
   10efa:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   10efc:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   10f00:	bc4027f3          	csrr	a5,0xbc4
   10f04:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   10f08:	fe843783          	ld	a5,-24(s0)
   10f0c:	83a1                	srli	a5,a5,0x8
   10f0e:	2781                	sext.w	a5,a5
}
   10f10:	853e                	mv	a0,a5
   10f12:	6462                	ld	s0,24(sp)
   10f14:	6105                	addi	sp,sp,32
   10f16:	8082                	ret

0000000000010f18 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   10f18:	7179                	addi	sp,sp,-48
   10f1a:	f422                	sd	s0,40(sp)
   10f1c:	1800                	addi	s0,sp,48
   10f1e:	87aa                	mv	a5,a0
   10f20:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   10f24:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   10f28:	fdc42783          	lw	a5,-36(s0)
   10f2c:	0ff7f793          	andi	a5,a5,255
   10f30:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   10f34:	fe844783          	lbu	a5,-24(s0)
   10f38:	f807e793          	ori	a5,a5,-128
   10f3c:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   10f40:	fe843783          	ld	a5,-24(s0)
   10f44:	bc479073          	csrw	0xbc4,a5
}
   10f48:	0001                	nop
   10f4a:	7422                	ld	s0,40(sp)
   10f4c:	6145                	addi	sp,sp,48
   10f4e:	8082                	ret

0000000000010f50 <mpu_enable_region>:
                       const char *rwx) {
   10f50:	715d                	addi	sp,sp,-80
   10f52:	e4a2                	sd	s0,72(sp)
   10f54:	0880                	addi	s0,sp,80
   10f56:	87aa                	mv	a5,a0
   10f58:	fcb43023          	sd	a1,-64(s0)
   10f5c:	fac43c23          	sd	a2,-72(s0)
   10f60:	fae43823          	sd	a4,-80(s0)
   10f64:	fcf42623          	sw	a5,-52(s0)
   10f68:	87b6                	mv	a5,a3
   10f6a:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   10f6e:	c0000793          	li	a5,-1024
   10f72:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   10f76:	fb043783          	ld	a5,-80(s0)
   10f7a:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   10f7e:	fc043783          	ld	a5,-64(s0)
   10f82:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   10f86:	fb843783          	ld	a5,-72(s0)
   10f8a:	8385                	srli	a5,a5,0x1
   10f8c:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10f90:	a819                	j	10fa6 <mpu_enable_region+0x56>
        mask <<= 1;
   10f92:	fe843783          	ld	a5,-24(s0)
   10f96:	0786                	slli	a5,a5,0x1
   10f98:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   10f9c:	fb843783          	ld	a5,-72(s0)
   10fa0:	8385                	srli	a5,a5,0x1
   10fa2:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   10fa6:	fb843783          	ld	a5,-72(s0)
   10faa:	f7e5                	bnez	a5,10f92 <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   10fac:	fe843783          	ld	a5,-24(s0)
   10fb0:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   10fb4:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   10fb8:	fcc42783          	lw	a5,-52(s0)
   10fbc:	0ff7f793          	andi	a5,a5,255
   10fc0:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   10fc4:	fd844783          	lbu	a5,-40(s0)
   10fc8:	0107e793          	ori	a5,a5,16
   10fcc:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   10fd0:	fc842783          	lw	a5,-56(s0)
   10fd4:	8b85                	andi	a5,a5,1
   10fd6:	0ff7f793          	andi	a5,a5,255
   10fda:	8b85                	andi	a5,a5,1
   10fdc:	0037969b          	slliw	a3,a5,0x3
   10fe0:	fd844783          	lbu	a5,-40(s0)
   10fe4:	9bdd                	andi	a5,a5,-9
   10fe6:	873e                	mv	a4,a5
   10fe8:	87b6                	mv	a5,a3
   10fea:	8fd9                	or	a5,a5,a4
   10fec:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   10ff0:	fd844783          	lbu	a5,-40(s0)
   10ff4:	f807e793          	ori	a5,a5,-128
   10ff8:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   10ffc:	a09d                	j	11062 <mpu_enable_region+0x112>
        if (*p == 'r') {
   10ffe:	fe043783          	ld	a5,-32(s0)
   11002:	0007c783          	lbu	a5,0(a5)
   11006:	873e                	mv	a4,a5
   11008:	07200793          	li	a5,114
   1100c:	00f71863          	bne	a4,a5,1101c <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11010:	fd844783          	lbu	a5,-40(s0)
   11014:	0027e793          	ori	a5,a5,2
   11018:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   1101c:	fe043783          	ld	a5,-32(s0)
   11020:	0007c783          	lbu	a5,0(a5)
   11024:	873e                	mv	a4,a5
   11026:	07700793          	li	a5,119
   1102a:	00f71863          	bne	a4,a5,1103a <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   1102e:	fd844783          	lbu	a5,-40(s0)
   11032:	0017e793          	ori	a5,a5,1
   11036:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   1103a:	fe043783          	ld	a5,-32(s0)
   1103e:	0007c783          	lbu	a5,0(a5)
   11042:	873e                	mv	a4,a5
   11044:	07800793          	li	a5,120
   11048:	00f71863          	bne	a4,a5,11058 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   1104c:	fd844783          	lbu	a5,-40(s0)
   11050:	0047e793          	ori	a5,a5,4
   11054:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11058:	fe043783          	ld	a5,-32(s0)
   1105c:	0785                	addi	a5,a5,1
   1105e:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11062:	fe043783          	ld	a5,-32(s0)
   11066:	0007c783          	lbu	a5,0(a5)
   1106a:	fbd1                	bnez	a5,10ffe <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   1106c:	fd843783          	ld	a5,-40(s0)
   11070:	bc479073          	csrw	0xbc4,a5
}
   11074:	0001                	nop
   11076:	6426                	ld	s0,72(sp)
   11078:	6161                	addi	sp,sp,80
   1107a:	8082                	ret

000000000001107c <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   1107c:	7179                	addi	sp,sp,-48
   1107e:	f422                	sd	s0,40(sp)
   11080:	1800                	addi	s0,sp,48
   11082:	87aa                	mv	a5,a0
   11084:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   11088:	100107b7          	lui	a5,0x10010
   1108c:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   11090:	fe843783          	ld	a5,-24(s0)
   11094:	439c                	lw	a5,0(a5)
   11096:	2781                	sext.w	a5,a5
   11098:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   1109c:	fe344783          	lbu	a5,-29(s0)
   110a0:	f807f793          	andi	a5,a5,-128
   110a4:	0ff7f793          	andi	a5,a5,255
   110a8:	f7e5                	bnez	a5,11090 <print_char+0x14>
    uart->txdata = ch;
   110aa:	fdc42703          	lw	a4,-36(s0)
   110ae:	fe843783          	ld	a5,-24(s0)
   110b2:	c398                	sw	a4,0(a5)
    return 0;
   110b4:	4781                	li	a5,0
}
   110b6:	853e                	mv	a0,a5
   110b8:	7422                	ld	s0,40(sp)
   110ba:	6145                	addi	sp,sp,48
   110bc:	8082                	ret

00000000000110be <print_uart>:

void print_uart(const char *buf, int sz) {
   110be:	7139                	addi	sp,sp,-64
   110c0:	fc22                	sd	s0,56(sp)
   110c2:	0080                	addi	s0,sp,64
   110c4:	fca43423          	sd	a0,-56(s0)
   110c8:	87ae                	mv	a5,a1
   110ca:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   110ce:	100107b7          	lui	a5,0x10010
   110d2:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   110d6:	fe042623          	sw	zero,-20(s0)
   110da:	a83d                	j	11118 <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   110dc:	fe043783          	ld	a5,-32(s0)
   110e0:	439c                	lw	a5,0(a5)
   110e2:	2781                	sext.w	a5,a5
   110e4:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   110e8:	fdb44783          	lbu	a5,-37(s0)
   110ec:	f807f793          	andi	a5,a5,-128
   110f0:	0ff7f793          	andi	a5,a5,255
   110f4:	f7e5                	bnez	a5,110dc <print_uart+0x1e>
        uart->txdata = buf[i];
   110f6:	fec42783          	lw	a5,-20(s0)
   110fa:	fc843703          	ld	a4,-56(s0)
   110fe:	97ba                	add	a5,a5,a4
   11100:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffd6a8>
   11104:	0007871b          	sext.w	a4,a5
   11108:	fe043783          	ld	a5,-32(s0)
   1110c:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   1110e:	fec42783          	lw	a5,-20(s0)
   11112:	2785                	addiw	a5,a5,1
   11114:	fef42623          	sw	a5,-20(s0)
   11118:	fec42703          	lw	a4,-20(s0)
   1111c:	fc442783          	lw	a5,-60(s0)
   11120:	2701                	sext.w	a4,a4
   11122:	2781                	sext.w	a5,a5
   11124:	faf74ce3          	blt	a4,a5,110dc <print_uart+0x1e>
    }
}
   11128:	0001                	nop
   1112a:	7462                	ld	s0,56(sp)
   1112c:	6121                	addi	sp,sp,64
   1112e:	8082                	ret

0000000000011130 <print_uart_hex>:

void print_uart_hex(long val) {
   11130:	7139                	addi	sp,sp,-64
   11132:	fc22                	sd	s0,56(sp)
   11134:	0080                	addi	s0,sp,64
   11136:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   1113a:	100107b7          	lui	a5,0x10010
   1113e:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   11142:	fe042423          	sw	zero,-24(s0)
   11146:	a041                	j	111c6 <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   11148:	fe043783          	ld	a5,-32(s0)
   1114c:	439c                	lw	a5,0(a5)
   1114e:	2781                	sext.w	a5,a5
   11150:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   11154:	fdb44783          	lbu	a5,-37(s0)
   11158:	f807f793          	andi	a5,a5,-128
   1115c:	0ff7f793          	andi	a5,a5,255
   11160:	f7e5                	bnez	a5,11148 <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   11162:	473d                	li	a4,15
   11164:	fe842783          	lw	a5,-24(s0)
   11168:	40f707bb          	subw	a5,a4,a5
   1116c:	2781                	sext.w	a5,a5
   1116e:	0027979b          	slliw	a5,a5,0x2
   11172:	2781                	sext.w	a5,a5
   11174:	fc843703          	ld	a4,-56(s0)
   11178:	40f757b3          	sra	a5,a4,a5
   1117c:	0ff7f793          	andi	a5,a5,255
   11180:	8bbd                	andi	a5,a5,15
   11182:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   11186:	fdf44783          	lbu	a5,-33(s0)
   1118a:	0ff7f713          	andi	a4,a5,255
   1118e:	47a5                	li	a5,9
   11190:	00e7e963          	bltu	a5,a4,111a2 <print_uart_hex+0x72>
            s = t + '0';
   11194:	fdf44783          	lbu	a5,-33(s0)
   11198:	0307879b          	addiw	a5,a5,48
   1119c:	fef407a3          	sb	a5,-17(s0)
   111a0:	a039                	j	111ae <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   111a2:	fdf44783          	lbu	a5,-33(s0)
   111a6:	0577879b          	addiw	a5,a5,87
   111aa:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   111ae:	fef44783          	lbu	a5,-17(s0)
   111b2:	0007871b          	sext.w	a4,a5
   111b6:	fe043783          	ld	a5,-32(s0)
   111ba:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   111bc:	fe842783          	lw	a5,-24(s0)
   111c0:	2785                	addiw	a5,a5,1
   111c2:	fef42423          	sw	a5,-24(s0)
   111c6:	fe842783          	lw	a5,-24(s0)
   111ca:	0007871b          	sext.w	a4,a5
   111ce:	47bd                	li	a5,15
   111d0:	f6e7dce3          	ble	a4,a5,11148 <print_uart_hex+0x18>
    }
}
   111d4:	0001                	nop
   111d6:	7462                	ld	s0,56(sp)
   111d8:	6121                	addi	sp,sp,64
   111da:	8082                	ret

00000000000111dc <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   111dc:	7119                	addi	sp,sp,-128
   111de:	fc86                	sd	ra,120(sp)
   111e0:	f8a2                	sd	s0,112(sp)
   111e2:	0100                	addi	s0,sp,128
   111e4:	f8a43c23          	sd	a0,-104(s0)
   111e8:	87ae                	mv	a5,a1
   111ea:	8736                	mv	a4,a3
   111ec:	f8f42a23          	sw	a5,-108(s0)
   111f0:	87b2                	mv	a5,a2
   111f2:	f8f42823          	sw	a5,-112(s0)
   111f6:	87ba                	mv	a5,a4
   111f8:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   111fc:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   11200:	f9442783          	lw	a5,-108(s0)
   11204:	f9843703          	ld	a4,-104(s0)
   11208:	02f776b3          	remu	a3,a4,a5
   1120c:	fec42783          	lw	a5,-20(s0)
   11210:	0017871b          	addiw	a4,a5,1
   11214:	fee42623          	sw	a4,-20(s0)
   11218:	0ff6f713          	andi	a4,a3,255
   1121c:	ff040693          	addi	a3,s0,-16
   11220:	97b6                	add	a5,a5,a3
   11222:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffd660>
        if (num < base) {
   11226:	f9442783          	lw	a5,-108(s0)
   1122a:	f9843703          	ld	a4,-104(s0)
   1122e:	00f76b63          	bltu	a4,a5,11244 <printnum+0x68>
            break;
        }
        num /= base;
   11232:	f9442783          	lw	a5,-108(s0)
   11236:	f9843703          	ld	a4,-104(s0)
   1123a:	02f757b3          	divu	a5,a4,a5
   1123e:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   11242:	bf7d                	j	11200 <printnum+0x24>
            break;
   11244:	0001                	nop
    }

    while (width-- > pos) {
   11246:	a801                	j	11256 <printnum+0x7a>
        print_char(padc);
   11248:	f8c42783          	lw	a5,-116(s0)
   1124c:	853e                	mv	a0,a5
   1124e:	00000097          	auipc	ra,0x0
   11252:	e2e080e7          	jalr	-466(ra) # 1107c <print_char>
    while (width-- > pos) {
   11256:	f9042783          	lw	a5,-112(s0)
   1125a:	fff7871b          	addiw	a4,a5,-1
   1125e:	f8e42823          	sw	a4,-112(s0)
   11262:	fec42703          	lw	a4,-20(s0)
   11266:	2701                	sext.w	a4,a4
   11268:	fef740e3          	blt	a4,a5,11248 <printnum+0x6c>
    }


    while (pos-- > 0) {
   1126c:	a089                	j	112ae <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   1126e:	fec42783          	lw	a5,-20(s0)
   11272:	ff040713          	addi	a4,s0,-16
   11276:	97ba                	add	a5,a5,a4
   11278:	fb87c783          	lbu	a5,-72(a5)
   1127c:	0007871b          	sext.w	a4,a5
   11280:	fec42783          	lw	a5,-20(s0)
   11284:	ff040693          	addi	a3,s0,-16
   11288:	97b6                	add	a5,a5,a3
   1128a:	fb87c783          	lbu	a5,-72(a5)
   1128e:	86be                	mv	a3,a5
   11290:	47a5                	li	a5,9
   11292:	00d7f563          	bleu	a3,a5,1129c <printnum+0xc0>
   11296:	05700793          	li	a5,87
   1129a:	a019                	j	112a0 <printnum+0xc4>
   1129c:	03000793          	li	a5,48
   112a0:	9fb9                	addw	a5,a5,a4
   112a2:	2781                	sext.w	a5,a5
   112a4:	853e                	mv	a0,a5
   112a6:	00000097          	auipc	ra,0x0
   112aa:	dd6080e7          	jalr	-554(ra) # 1107c <print_char>
    while (pos-- > 0) {
   112ae:	fec42783          	lw	a5,-20(s0)
   112b2:	fff7871b          	addiw	a4,a5,-1
   112b6:	fee42623          	sw	a4,-20(s0)
   112ba:	faf04ae3          	bgtz	a5,1126e <printnum+0x92>
    }
}
   112be:	0001                	nop
   112c0:	70e6                	ld	ra,120(sp)
   112c2:	7446                	ld	s0,112(sp)
   112c4:	6109                	addi	sp,sp,128
   112c6:	8082                	ret

00000000000112c8 <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   112c8:	1101                	addi	sp,sp,-32
   112ca:	ec22                	sd	s0,24(sp)
   112cc:	1000                	addi	s0,sp,32
   112ce:	fea43423          	sd	a0,-24(s0)
   112d2:	87ae                	mv	a5,a1
   112d4:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   112d8:	fe442783          	lw	a5,-28(s0)
   112dc:	0007871b          	sext.w	a4,a5
   112e0:	4785                	li	a5,1
   112e2:	00e7dc63          	ble	a4,a5,112fa <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   112e6:	fe843783          	ld	a5,-24(s0)
   112ea:	639c                	ld	a5,0(a5)
   112ec:	00878693          	addi	a3,a5,8
   112f0:	fe843703          	ld	a4,-24(s0)
   112f4:	e314                	sd	a3,0(a4)
   112f6:	639c                	ld	a5,0(a5)
   112f8:	a815                	j	1132c <getuint+0x64>
    } else if (lflag) {
   112fa:	fe442783          	lw	a5,-28(s0)
   112fe:	2781                	sext.w	a5,a5
   11300:	cb99                	beqz	a5,11316 <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   11302:	fe843783          	ld	a5,-24(s0)
   11306:	639c                	ld	a5,0(a5)
   11308:	00878693          	addi	a3,a5,8
   1130c:	fe843703          	ld	a4,-24(s0)
   11310:	e314                	sd	a3,0(a4)
   11312:	639c                	ld	a5,0(a5)
   11314:	a821                	j	1132c <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   11316:	fe843783          	ld	a5,-24(s0)
   1131a:	639c                	ld	a5,0(a5)
   1131c:	00878693          	addi	a3,a5,8
   11320:	fe843703          	ld	a4,-24(s0)
   11324:	e314                	sd	a3,0(a4)
   11326:	439c                	lw	a5,0(a5)
   11328:	1782                	slli	a5,a5,0x20
   1132a:	9381                	srli	a5,a5,0x20
}
   1132c:	853e                	mv	a0,a5
   1132e:	6462                	ld	s0,24(sp)
   11330:	6105                	addi	sp,sp,32
   11332:	8082                	ret

0000000000011334 <getint>:

static int64_t getint(va_list *ap, int lflag) {
   11334:	1101                	addi	sp,sp,-32
   11336:	ec22                	sd	s0,24(sp)
   11338:	1000                	addi	s0,sp,32
   1133a:	fea43423          	sd	a0,-24(s0)
   1133e:	87ae                	mv	a5,a1
   11340:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   11344:	fe442783          	lw	a5,-28(s0)
   11348:	0007871b          	sext.w	a4,a5
   1134c:	4785                	li	a5,1
   1134e:	00e7dc63          	ble	a4,a5,11366 <getint+0x32>
        return va_arg(*ap, long long);
   11352:	fe843783          	ld	a5,-24(s0)
   11356:	639c                	ld	a5,0(a5)
   11358:	00878693          	addi	a3,a5,8
   1135c:	fe843703          	ld	a4,-24(s0)
   11360:	e314                	sd	a3,0(a4)
   11362:	639c                	ld	a5,0(a5)
   11364:	a805                	j	11394 <getint+0x60>
    } else if (lflag) {
   11366:	fe442783          	lw	a5,-28(s0)
   1136a:	2781                	sext.w	a5,a5
   1136c:	cb99                	beqz	a5,11382 <getint+0x4e>
        return va_arg(*ap, long);
   1136e:	fe843783          	ld	a5,-24(s0)
   11372:	639c                	ld	a5,0(a5)
   11374:	00878693          	addi	a3,a5,8
   11378:	fe843703          	ld	a4,-24(s0)
   1137c:	e314                	sd	a3,0(a4)
   1137e:	639c                	ld	a5,0(a5)
   11380:	a811                	j	11394 <getint+0x60>
    }
    return va_arg(*ap, int);
   11382:	fe843783          	ld	a5,-24(s0)
   11386:	639c                	ld	a5,0(a5)
   11388:	00878693          	addi	a3,a5,8
   1138c:	fe843703          	ld	a4,-24(s0)
   11390:	e314                	sd	a3,0(a4)
   11392:	439c                	lw	a5,0(a5)
}
   11394:	853e                	mv	a0,a5
   11396:	6462                	ld	s0,24(sp)
   11398:	6105                	addi	sp,sp,32
   1139a:	8082                	ret

000000000001139c <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   1139c:	711d                	addi	sp,sp,-96
   1139e:	ec86                	sd	ra,88(sp)
   113a0:	e8a2                	sd	s0,80(sp)
   113a2:	e4a6                	sd	s1,72(sp)
   113a4:	e0ca                	sd	s2,64(sp)
   113a6:	1080                	addi	s0,sp,96
   113a8:	faa43423          	sd	a0,-88(s0)
   113ac:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   113b0:	a819                	j	113c6 <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   113b2:	2c048d63          	beqz	s1,1168c <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   113b6:	fa843783          	ld	a5,-88(s0)
   113ba:	0785                	addi	a5,a5,1
   113bc:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   113c0:	8526                	mv	a0,s1
   113c2:	cbbff0ef          	jal	ra,1107c <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   113c6:	fa843783          	ld	a5,-88(s0)
   113ca:	0007c783          	lbu	a5,0(a5)
   113ce:	0007849b          	sext.w	s1,a5
   113d2:	8726                	mv	a4,s1
   113d4:	02500793          	li	a5,37
   113d8:	fcf71de3          	bne	a4,a5,113b2 <vprintfmt_lib+0x16>
        }
        fmt++;
   113dc:	fa843783          	ld	a5,-88(s0)
   113e0:	0785                	addi	a5,a5,1
   113e2:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   113e6:	fa843783          	ld	a5,-88(s0)
   113ea:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   113ee:	02000793          	li	a5,32
   113f2:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   113f6:	57fd                	li	a5,-1
   113f8:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   113fc:	57fd                	li	a5,-1
   113fe:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   11402:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   11406:	fa843783          	ld	a5,-88(s0)
   1140a:	00178713          	addi	a4,a5,1
   1140e:	fae43423          	sd	a4,-88(s0)
   11412:	0007c783          	lbu	a5,0(a5)
   11416:	0007849b          	sext.w	s1,a5
   1141a:	fdd4869b          	addiw	a3,s1,-35
   1141e:	0006871b          	sext.w	a4,a3
   11422:	05500793          	li	a5,85
   11426:	24e7e963          	bltu	a5,a4,11678 <vprintfmt_lib+0x2dc>
   1142a:	02069793          	slli	a5,a3,0x20
   1142e:	9381                	srli	a5,a5,0x20
   11430:	00279713          	slli	a4,a5,0x2
   11434:	67c9                	lui	a5,0x12
   11436:	53078793          	addi	a5,a5,1328 # 12530 <strnlen+0x136>
   1143a:	97ba                	add	a5,a5,a4
   1143c:	439c                	lw	a5,0(a5)
   1143e:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   11440:	02d00793          	li	a5,45
   11444:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   11448:	bf7d                	j	11406 <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   1144a:	03000793          	li	a5,48
   1144e:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   11452:	bf55                	j	11406 <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   11454:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   11458:	fc842703          	lw	a4,-56(s0)
   1145c:	87ba                	mv	a5,a4
   1145e:	0027979b          	slliw	a5,a5,0x2
   11462:	9fb9                	addw	a5,a5,a4
   11464:	0017979b          	slliw	a5,a5,0x1
   11468:	2781                	sext.w	a5,a5
   1146a:	9fa5                	addw	a5,a5,s1
   1146c:	2781                	sext.w	a5,a5
   1146e:	fd07879b          	addiw	a5,a5,-48
   11472:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   11476:	fa843783          	ld	a5,-88(s0)
   1147a:	0007c783          	lbu	a5,0(a5)
   1147e:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   11482:	8726                	mv	a4,s1
   11484:	02f00793          	li	a5,47
   11488:	02e7df63          	ble	a4,a5,114c6 <vprintfmt_lib+0x12a>
   1148c:	8726                	mv	a4,s1
   1148e:	03900793          	li	a5,57
   11492:	02e7ca63          	blt	a5,a4,114c6 <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   11496:	fa843783          	ld	a5,-88(s0)
   1149a:	0785                	addi	a5,a5,1
   1149c:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   114a0:	bf65                	j	11458 <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   114a2:	fa043783          	ld	a5,-96(s0)
   114a6:	00878713          	addi	a4,a5,8
   114aa:	fae43023          	sd	a4,-96(s0)
   114ae:	439c                	lw	a5,0(a5)
   114b0:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   114b4:	a811                	j	114c8 <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   114b6:	fcc42783          	lw	a5,-52(s0)
   114ba:	2781                	sext.w	a5,a5
   114bc:	f407d5e3          	bgez	a5,11406 <vprintfmt_lib+0x6a>
                width = 0;
   114c0:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   114c4:	b789                	j	11406 <vprintfmt_lib+0x6a>
            goto process_precision;
   114c6:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   114c8:	fcc42783          	lw	a5,-52(s0)
   114cc:	2781                	sext.w	a5,a5
   114ce:	f207dce3          	bgez	a5,11406 <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   114d2:	fc842783          	lw	a5,-56(s0)
   114d6:	fcf42623          	sw	a5,-52(s0)
   114da:	57fd                	li	a5,-1
   114dc:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   114e0:	b71d                	j	11406 <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   114e2:	fd042783          	lw	a5,-48(s0)
   114e6:	2785                	addiw	a5,a5,1
   114e8:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   114ec:	bf29                	j	11406 <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   114ee:	fa043783          	ld	a5,-96(s0)
   114f2:	00878713          	addi	a4,a5,8
   114f6:	fae43023          	sd	a4,-96(s0)
   114fa:	439c                	lw	a5,0(a5)
   114fc:	853e                	mv	a0,a5
   114fe:	b7fff0ef          	jal	ra,1107c <print_char>
            break;
   11502:	a261                	j	1168a <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   11504:	fa043783          	ld	a5,-96(s0)
   11508:	00878713          	addi	a4,a5,8
   1150c:	fae43023          	sd	a4,-96(s0)
   11510:	0007b903          	ld	s2,0(a5)
   11514:	00091563          	bnez	s2,1151e <vprintfmt_lib+0x182>
                p = "(null)";
   11518:	67c9                	lui	a5,0x12
   1151a:	52878913          	addi	s2,a5,1320 # 12528 <strnlen+0x12e>
            }
            if (width > 0 && padc != '-') {
   1151e:	fcc42783          	lw	a5,-52(s0)
   11522:	2781                	sext.w	a5,a5
   11524:	06f05263          	blez	a5,11588 <vprintfmt_lib+0x1ec>
   11528:	fc744783          	lbu	a5,-57(s0)
   1152c:	0ff7f713          	andi	a4,a5,255
   11530:	02d00793          	li	a5,45
   11534:	04f70a63          	beq	a4,a5,11588 <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   11538:	fc842783          	lw	a5,-56(s0)
   1153c:	85be                	mv	a1,a5
   1153e:	854a                	mv	a0,s2
   11540:	6bb000ef          	jal	ra,123fa <strnlen>
   11544:	87aa                	mv	a5,a0
   11546:	873e                	mv	a4,a5
   11548:	fcc42783          	lw	a5,-52(s0)
   1154c:	9f99                	subw	a5,a5,a4
   1154e:	fcf42623          	sw	a5,-52(s0)
   11552:	a821                	j	1156a <vprintfmt_lib+0x1ce>
                    print_char(padc);
   11554:	fc744783          	lbu	a5,-57(s0)
   11558:	2781                	sext.w	a5,a5
   1155a:	853e                	mv	a0,a5
   1155c:	b21ff0ef          	jal	ra,1107c <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   11560:	fcc42783          	lw	a5,-52(s0)
   11564:	37fd                	addiw	a5,a5,-1
   11566:	fcf42623          	sw	a5,-52(s0)
   1156a:	fcc42783          	lw	a5,-52(s0)
   1156e:	2781                	sext.w	a5,a5
   11570:	fef042e3          	bgtz	a5,11554 <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   11574:	a811                	j	11588 <vprintfmt_lib+0x1ec>
                print_char(ch);
   11576:	8526                	mv	a0,s1
   11578:	b05ff0ef          	jal	ra,1107c <print_char>
                p++;
   1157c:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   1157e:	fcc42783          	lw	a5,-52(s0)
   11582:	37fd                	addiw	a5,a5,-1
   11584:	fcf42623          	sw	a5,-52(s0)
   11588:	00094783          	lbu	a5,0(s2)
   1158c:	0007849b          	sext.w	s1,a5
   11590:	c895                	beqz	s1,115c4 <vprintfmt_lib+0x228>
   11592:	fc842783          	lw	a5,-56(s0)
   11596:	2781                	sext.w	a5,a5
   11598:	fc07cfe3          	bltz	a5,11576 <vprintfmt_lib+0x1da>
   1159c:	fc842783          	lw	a5,-56(s0)
   115a0:	37fd                	addiw	a5,a5,-1
   115a2:	fcf42423          	sw	a5,-56(s0)
   115a6:	fc842783          	lw	a5,-56(s0)
   115aa:	2781                	sext.w	a5,a5
   115ac:	fc07d5e3          	bgez	a5,11576 <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   115b0:	a811                	j	115c4 <vprintfmt_lib+0x228>
                print_char(' ');
   115b2:	02000513          	li	a0,32
   115b6:	ac7ff0ef          	jal	ra,1107c <print_char>
            for (; width > 0; width--) {
   115ba:	fcc42783          	lw	a5,-52(s0)
   115be:	37fd                	addiw	a5,a5,-1
   115c0:	fcf42623          	sw	a5,-52(s0)
   115c4:	fcc42783          	lw	a5,-52(s0)
   115c8:	2781                	sext.w	a5,a5
   115ca:	fef044e3          	bgtz	a5,115b2 <vprintfmt_lib+0x216>
            }
            break;
   115ce:	a875                	j	1168a <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   115d0:	fd042703          	lw	a4,-48(s0)
   115d4:	fa040793          	addi	a5,s0,-96
   115d8:	85ba                	mv	a1,a4
   115da:	853e                	mv	a0,a5
   115dc:	00000097          	auipc	ra,0x0
   115e0:	d58080e7          	jalr	-680(ra) # 11334 <getint>
   115e4:	87aa                	mv	a5,a0
   115e6:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   115ea:	fd843783          	ld	a5,-40(s0)
   115ee:	0007dc63          	bgez	a5,11606 <vprintfmt_lib+0x26a>
                print_char('-');
   115f2:	02d00513          	li	a0,45
   115f6:	a87ff0ef          	jal	ra,1107c <print_char>
                num = -(long long) num;
   115fa:	fd843783          	ld	a5,-40(s0)
   115fe:	40f007b3          	neg	a5,a5
   11602:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   11606:	47a9                	li	a5,10
   11608:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   1160c:	a089                	j	1164e <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   1160e:	47a9                	li	a5,10
   11610:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   11614:	a01d                	j	1163a <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   11616:	47a1                	li	a5,8
   11618:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   1161c:	a839                	j	1163a <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   1161e:	4785                	li	a5,1
   11620:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   11624:	03000513          	li	a0,48
   11628:	a55ff0ef          	jal	ra,1107c <print_char>
            print_char('x');
   1162c:	07800513          	li	a0,120
   11630:	a4dff0ef          	jal	ra,1107c <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   11634:	47c1                	li	a5,16
   11636:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   1163a:	fd042703          	lw	a4,-48(s0)
   1163e:	fa040793          	addi	a5,s0,-96
   11642:	85ba                	mv	a1,a4
   11644:	853e                	mv	a0,a5
   11646:	c83ff0ef          	jal	ra,112c8 <getuint>
   1164a:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   1164e:	fc744783          	lbu	a5,-57(s0)
   11652:	0007869b          	sext.w	a3,a5
   11656:	fcc42703          	lw	a4,-52(s0)
   1165a:	fd442783          	lw	a5,-44(s0)
   1165e:	863a                	mv	a2,a4
   11660:	85be                	mv	a1,a5
   11662:	fd843503          	ld	a0,-40(s0)
   11666:	00000097          	auipc	ra,0x0
   1166a:	b76080e7          	jalr	-1162(ra) # 111dc <printnum>
            break;
   1166e:	a831                	j	1168a <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   11670:	8526                	mv	a0,s1
   11672:	a0bff0ef          	jal	ra,1107c <print_char>
            break;
   11676:	a811                	j	1168a <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   11678:	02500513          	li	a0,37
   1167c:	a01ff0ef          	jal	ra,1107c <print_char>
            fmt = last_fmt;
   11680:	fb843783          	ld	a5,-72(s0)
   11684:	faf43423          	sd	a5,-88(s0)
            break;
   11688:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   1168a:	bb35                	j	113c6 <vprintfmt_lib+0x2a>
                return;
   1168c:	0001                	nop
        }
    }
}
   1168e:	60e6                	ld	ra,88(sp)
   11690:	6446                	ld	s0,80(sp)
   11692:	64a6                	ld	s1,72(sp)
   11694:	6906                	ld	s2,64(sp)
   11696:	6125                	addi	sp,sp,96
   11698:	8082                	ret

000000000001169a <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   1169a:	7159                	addi	sp,sp,-112
   1169c:	f406                	sd	ra,40(sp)
   1169e:	f022                	sd	s0,32(sp)
   116a0:	1800                	addi	s0,sp,48
   116a2:	fca43c23          	sd	a0,-40(s0)
   116a6:	e40c                	sd	a1,8(s0)
   116a8:	e810                	sd	a2,16(s0)
   116aa:	ec14                	sd	a3,24(s0)
   116ac:	f018                	sd	a4,32(s0)
   116ae:	f41c                	sd	a5,40(s0)
   116b0:	03043823          	sd	a6,48(s0)
   116b4:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   116b8:	04040793          	addi	a5,s0,64
   116bc:	fc878793          	addi	a5,a5,-56
   116c0:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   116c4:	fe843783          	ld	a5,-24(s0)
   116c8:	85be                	mv	a1,a5
   116ca:	fd843503          	ld	a0,-40(s0)
   116ce:	00000097          	auipc	ra,0x0
   116d2:	cce080e7          	jalr	-818(ra) # 1139c <vprintfmt_lib>

    va_end(arg);
}
   116d6:	0001                	nop
   116d8:	70a2                	ld	ra,40(sp)
   116da:	7402                	ld	s0,32(sp)
   116dc:	6165                	addi	sp,sp,112
   116de:	8082                	ret

00000000000116e0 <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   116e0:	715d                	addi	sp,sp,-80
   116e2:	e4a2                	sd	s0,72(sp)
   116e4:	0880                	addi	s0,sp,80
   116e6:	faa43c23          	sd	a0,-72(s0)
   116ea:	87ae                	mv	a5,a1
   116ec:	8732                	mv	a4,a2
   116ee:	faf41b23          	sh	a5,-74(s0)
   116f2:	87ba                	mv	a5,a4
   116f4:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   116f8:	fb843783          	ld	a5,-72(s0)
   116fc:	479c                	lw	a5,8(a5)
   116fe:	0087d79b          	srliw	a5,a5,0x8
   11702:	2781                	sext.w	a5,a5
   11704:	2781                	sext.w	a5,a5
   11706:	0ff7f793          	andi	a5,a5,255
   1170a:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   1170e:	fb843783          	ld	a5,-72(s0)
   11712:	479c                	lw	a5,8(a5)
   11714:	0107d79b          	srliw	a5,a5,0x10
   11718:	2781                	sext.w	a5,a5
   1171a:	2781                	sext.w	a5,a5
   1171c:	0ff7f793          	andi	a5,a5,255
   11720:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   11724:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11728:	fe042423          	sw	zero,-24(s0)
   1172c:	a82d                	j	11766 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1172e:	fec42783          	lw	a5,-20(s0)
   11732:	04078793          	addi	a5,a5,64
   11736:	fb843703          	ld	a4,-72(s0)
   1173a:	97ba                	add	a5,a5,a4
   1173c:	639c                	ld	a5,0(a5)
   1173e:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   11742:	fb843703          	ld	a4,-72(s0)
   11746:	fec42783          	lw	a5,-20(s0)
   1174a:	97ba                	add	a5,a5,a4
   1174c:	0407c783          	lbu	a5,64(a5)
   11750:	2781                	sext.w	a5,a5
   11752:	fec42703          	lw	a4,-20(s0)
   11756:	9fb9                	addw	a5,a5,a4
   11758:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   1175c:	fe842783          	lw	a5,-24(s0)
   11760:	2785                	addiw	a5,a5,1
   11762:	fef42423          	sw	a5,-24(s0)
   11766:	fe842703          	lw	a4,-24(s0)
   1176a:	fdc42783          	lw	a5,-36(s0)
   1176e:	2701                	sext.w	a4,a4
   11770:	2781                	sext.w	a5,a5
   11772:	faf74ee3          	blt	a4,a5,1172e <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11776:	fe042223          	sw	zero,-28(s0)
   1177a:	a8b5                	j	117f6 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1177c:	fec42783          	lw	a5,-20(s0)
   11780:	04078793          	addi	a5,a5,64
   11784:	fb843703          	ld	a4,-72(s0)
   11788:	97ba                	add	a5,a5,a4
   1178a:	639c                	ld	a5,0(a5)
   1178c:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11790:	fec42783          	lw	a5,-20(s0)
   11794:	27a1                	addiw	a5,a5,8
   11796:	2781                	sext.w	a5,a5
   11798:	04078793          	addi	a5,a5,64
   1179c:	fb843703          	ld	a4,-72(s0)
   117a0:	97ba                	add	a5,a5,a4
   117a2:	639c                	ld	a5,0(a5)
   117a4:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   117a8:	fc645783          	lhu	a5,-58(s0)
   117ac:	fb645703          	lhu	a4,-74(s0)
   117b0:	2701                	sext.w	a4,a4
   117b2:	2781                	sext.w	a5,a5
   117b4:	00f71f63          	bne	a4,a5,117d2 <get_dev_bar+0xf2>
   117b8:	fc445783          	lhu	a5,-60(s0)
   117bc:	fb445703          	lhu	a4,-76(s0)
   117c0:	2701                	sext.w	a4,a4
   117c2:	2781                	sext.w	a5,a5
   117c4:	00f71763          	bne	a4,a5,117d2 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   117c8:	fcc42783          	lw	a5,-52(s0)
   117cc:	1782                	slli	a5,a5,0x20
   117ce:	9381                	srli	a5,a5,0x20
   117d0:	a825                	j	11808 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   117d2:	fb843703          	ld	a4,-72(s0)
   117d6:	fec42783          	lw	a5,-20(s0)
   117da:	97ba                	add	a5,a5,a4
   117dc:	0407c783          	lbu	a5,64(a5)
   117e0:	2781                	sext.w	a5,a5
   117e2:	fec42703          	lw	a4,-20(s0)
   117e6:	9fb9                	addw	a5,a5,a4
   117e8:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   117ec:	fe442783          	lw	a5,-28(s0)
   117f0:	2785                	addiw	a5,a5,1
   117f2:	fef42223          	sw	a5,-28(s0)
   117f6:	fe442703          	lw	a4,-28(s0)
   117fa:	fe042783          	lw	a5,-32(s0)
   117fe:	2701                	sext.w	a4,a4
   11800:	2781                	sext.w	a5,a5
   11802:	f6f74de3          	blt	a4,a5,1177c <get_dev_bar+0x9c>
    return DEV_NONE;
   11806:	57fd                	li	a5,-1
}
   11808:	853e                	mv	a0,a5
   1180a:	6426                	ld	s0,72(sp)
   1180c:	6161                	addi	sp,sp,80
   1180e:	8082                	ret

0000000000011810 <mpu_region_total>:
static int mpu_region_total() {
   11810:	1101                	addi	sp,sp,-32
   11812:	ec22                	sd	s0,24(sp)
   11814:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11816:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   1181a:	bc4027f3          	csrr	a5,0xbc4
   1181e:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   11822:	fe843783          	ld	a5,-24(s0)
   11826:	83a1                	srli	a5,a5,0x8
   11828:	2781                	sext.w	a5,a5
}
   1182a:	853e                	mv	a0,a5
   1182c:	6462                	ld	s0,24(sp)
   1182e:	6105                	addi	sp,sp,32
   11830:	8082                	ret

0000000000011832 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   11832:	7179                	addi	sp,sp,-48
   11834:	f422                	sd	s0,40(sp)
   11836:	1800                	addi	s0,sp,48
   11838:	87aa                	mv	a5,a0
   1183a:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   1183e:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   11842:	fdc42783          	lw	a5,-36(s0)
   11846:	0ff7f793          	andi	a5,a5,255
   1184a:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   1184e:	fe844783          	lbu	a5,-24(s0)
   11852:	f807e793          	ori	a5,a5,-128
   11856:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   1185a:	fe843783          	ld	a5,-24(s0)
   1185e:	bc479073          	csrw	0xbc4,a5
}
   11862:	0001                	nop
   11864:	7422                	ld	s0,40(sp)
   11866:	6145                	addi	sp,sp,48
   11868:	8082                	ret

000000000001186a <mpu_enable_region>:
                       const char *rwx) {
   1186a:	715d                	addi	sp,sp,-80
   1186c:	e4a2                	sd	s0,72(sp)
   1186e:	0880                	addi	s0,sp,80
   11870:	87aa                	mv	a5,a0
   11872:	fcb43023          	sd	a1,-64(s0)
   11876:	fac43c23          	sd	a2,-72(s0)
   1187a:	fae43823          	sd	a4,-80(s0)
   1187e:	fcf42623          	sw	a5,-52(s0)
   11882:	87b6                	mv	a5,a3
   11884:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11888:	c0000793          	li	a5,-1024
   1188c:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11890:	fb043783          	ld	a5,-80(s0)
   11894:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11898:	fc043783          	ld	a5,-64(s0)
   1189c:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   118a0:	fb843783          	ld	a5,-72(s0)
   118a4:	8385                	srli	a5,a5,0x1
   118a6:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   118aa:	a819                	j	118c0 <mpu_enable_region+0x56>
        mask <<= 1;
   118ac:	fe843783          	ld	a5,-24(s0)
   118b0:	0786                	slli	a5,a5,0x1
   118b2:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   118b6:	fb843783          	ld	a5,-72(s0)
   118ba:	8385                	srli	a5,a5,0x1
   118bc:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   118c0:	fb843783          	ld	a5,-72(s0)
   118c4:	f7e5                	bnez	a5,118ac <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   118c6:	fe843783          	ld	a5,-24(s0)
   118ca:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   118ce:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   118d2:	fcc42783          	lw	a5,-52(s0)
   118d6:	0ff7f793          	andi	a5,a5,255
   118da:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   118de:	fd844783          	lbu	a5,-40(s0)
   118e2:	0107e793          	ori	a5,a5,16
   118e6:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   118ea:	fc842783          	lw	a5,-56(s0)
   118ee:	8b85                	andi	a5,a5,1
   118f0:	0ff7f793          	andi	a5,a5,255
   118f4:	8b85                	andi	a5,a5,1
   118f6:	0037969b          	slliw	a3,a5,0x3
   118fa:	fd844783          	lbu	a5,-40(s0)
   118fe:	9bdd                	andi	a5,a5,-9
   11900:	873e                	mv	a4,a5
   11902:	87b6                	mv	a5,a3
   11904:	8fd9                	or	a5,a5,a4
   11906:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   1190a:	fd844783          	lbu	a5,-40(s0)
   1190e:	f807e793          	ori	a5,a5,-128
   11912:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11916:	a09d                	j	1197c <mpu_enable_region+0x112>
        if (*p == 'r') {
   11918:	fe043783          	ld	a5,-32(s0)
   1191c:	0007c783          	lbu	a5,0(a5)
   11920:	873e                	mv	a4,a5
   11922:	07200793          	li	a5,114
   11926:	00f71863          	bne	a4,a5,11936 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   1192a:	fd844783          	lbu	a5,-40(s0)
   1192e:	0027e793          	ori	a5,a5,2
   11932:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11936:	fe043783          	ld	a5,-32(s0)
   1193a:	0007c783          	lbu	a5,0(a5)
   1193e:	873e                	mv	a4,a5
   11940:	07700793          	li	a5,119
   11944:	00f71863          	bne	a4,a5,11954 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11948:	fd844783          	lbu	a5,-40(s0)
   1194c:	0017e793          	ori	a5,a5,1
   11950:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11954:	fe043783          	ld	a5,-32(s0)
   11958:	0007c783          	lbu	a5,0(a5)
   1195c:	873e                	mv	a4,a5
   1195e:	07800793          	li	a5,120
   11962:	00f71863          	bne	a4,a5,11972 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11966:	fd844783          	lbu	a5,-40(s0)
   1196a:	0047e793          	ori	a5,a5,4
   1196e:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11972:	fe043783          	ld	a5,-32(s0)
   11976:	0785                	addi	a5,a5,1
   11978:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   1197c:	fe043783          	ld	a5,-32(s0)
   11980:	0007c783          	lbu	a5,0(a5)
   11984:	fbd1                	bnez	a5,11918 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11986:	fd843783          	ld	a5,-40(s0)
   1198a:	bc479073          	csrw	0xbc4,a5
}
   1198e:	0001                	nop
   11990:	6426                	ld	s0,72(sp)
   11992:	6161                	addi	sp,sp,80
   11994:	8082                	ret

0000000000011996 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   11996:	1141                	addi	sp,sp,-16
   11998:	e422                	sd	s0,8(sp)
   1199a:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   1199c:	0001                	nop
   1199e:	6422                	ld	s0,8(sp)
   119a0:	0141                	addi	sp,sp,16
   119a2:	8082                	ret

00000000000119a4 <sd_get_byte>:

uint8_t sd_get_byte() {
   119a4:	1101                	addi	sp,sp,-32
   119a6:	ec22                	sd	s0,24(sp)
   119a8:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   119aa:	100507b7          	lui	a5,0x10050
   119ae:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   119b2:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   119b6:	fe843783          	ld	a5,-24(s0)
   119ba:	47fc                	lw	a5,76(a5)
   119bc:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   119c0:	fe442783          	lw	a5,-28(s0)
   119c4:	fe07c9e3          	bltz	a5,119b6 <sd_get_byte+0x12>
    return (uint8_t)rx;
   119c8:	fe442783          	lw	a5,-28(s0)
   119cc:	0ff7f793          	andi	a5,a5,255
}
   119d0:	853e                	mv	a0,a5
   119d2:	6462                	ld	s0,24(sp)
   119d4:	6105                	addi	sp,sp,32
   119d6:	8082                	ret

00000000000119d8 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   119d8:	7179                	addi	sp,sp,-48
   119da:	f422                	sd	s0,40(sp)
   119dc:	1800                	addi	s0,sp,48
   119de:	87aa                	mv	a5,a0
   119e0:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   119e4:	100507b7          	lui	a5,0x10050
   119e8:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   119ec:	0001                	nop
   119ee:	fe843783          	ld	a5,-24(s0)
   119f2:	47bc                	lw	a5,72(a5)
   119f4:	2781                	sext.w	a5,a5
   119f6:	2781                	sext.w	a5,a5
   119f8:	fe07cbe3          	bltz	a5,119ee <sd_set_byte+0x16>
    p->txdata = v;
   119fc:	fdf44783          	lbu	a5,-33(s0)
   11a00:	0007871b          	sext.w	a4,a5
   11a04:	fe843783          	ld	a5,-24(s0)
   11a08:	c7b8                	sw	a4,72(a5)
}
   11a0a:	0001                	nop
   11a0c:	7422                	ld	s0,40(sp)
   11a0e:	6145                	addi	sp,sp,48
   11a10:	8082                	ret

0000000000011a12 <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   11a12:	7179                	addi	sp,sp,-48
   11a14:	f406                	sd	ra,40(sp)
   11a16:	f022                	sd	s0,32(sp)
   11a18:	1800                	addi	s0,sp,48
   11a1a:	fca43c23          	sd	a0,-40(s0)
   11a1e:	87ae                	mv	a5,a1
   11a20:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a24:	100507b7          	lui	a5,0x10050
   11a28:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   11a2c:	f79ff0ef          	jal	ra,119a4 <sd_get_byte>
   11a30:	87aa                	mv	a5,a0
   11a32:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   11a36:	a831                	j	11a52 <sd_read_block+0x40>
       *buf = sd_get_byte();
   11a38:	f6dff0ef          	jal	ra,119a4 <sd_get_byte>
   11a3c:	87aa                	mv	a5,a0
   11a3e:	873e                	mv	a4,a5
   11a40:	fd843783          	ld	a5,-40(s0)
   11a44:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003d6a8>
       buf++;
   11a48:	fd843783          	ld	a5,-40(s0)
   11a4c:	0785                	addi	a5,a5,1
   11a4e:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   11a52:	fd442783          	lw	a5,-44(s0)
   11a56:	fff7871b          	addiw	a4,a5,-1
   11a5a:	fce42a23          	sw	a4,-44(s0)
   11a5e:	ffe9                	bnez	a5,11a38 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   11a60:	f45ff0ef          	jal	ra,119a4 <sd_get_byte>
   11a64:	87aa                	mv	a5,a0
   11a66:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   11a6a:	f3bff0ef          	jal	ra,119a4 <sd_get_byte>
   11a6e:	87aa                	mv	a5,a0
   11a70:	fef40323          	sb	a5,-26(s0)
}
   11a74:	0001                	nop
   11a76:	70a2                	ld	ra,40(sp)
   11a78:	7402                	ld	s0,32(sp)
   11a7a:	6145                	addi	sp,sp,48
   11a7c:	8082                	ret

0000000000011a7e <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   11a7e:	7179                	addi	sp,sp,-48
   11a80:	f406                	sd	ra,40(sp)
   11a82:	f022                	sd	s0,32(sp)
   11a84:	1800                	addi	s0,sp,48
   11a86:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11a8a:	100507b7          	lui	a5,0x10050
   11a8e:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   11a92:	05200513          	li	a0,82
   11a96:	f43ff0ef          	jal	ra,119d8 <sd_set_byte>
    sd_set_byte(0x00);
   11a9a:	4501                	li	a0,0
   11a9c:	f3dff0ef          	jal	ra,119d8 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11aa0:	fd843783          	ld	a5,-40(s0)
   11aa4:	83c1                	srli	a5,a5,0x10
   11aa6:	0ff7f793          	andi	a5,a5,255
   11aaa:	853e                	mv	a0,a5
   11aac:	f2dff0ef          	jal	ra,119d8 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11ab0:	fd843783          	ld	a5,-40(s0)
   11ab4:	83a1                	srli	a5,a5,0x8
   11ab6:	0ff7f793          	andi	a5,a5,255
   11aba:	853e                	mv	a0,a5
   11abc:	f1dff0ef          	jal	ra,119d8 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11ac0:	fd843783          	ld	a5,-40(s0)
   11ac4:	0ff7f793          	andi	a5,a5,255
   11ac8:	853e                	mv	a0,a5
   11aca:	f0fff0ef          	jal	ra,119d8 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11ace:	0ff00513          	li	a0,255
   11ad2:	f07ff0ef          	jal	ra,119d8 <sd_set_byte>

    cmdresp = sd_get_byte();
   11ad6:	00000097          	auipc	ra,0x0
   11ada:	ece080e7          	jalr	-306(ra) # 119a4 <sd_get_byte>
   11ade:	87aa                	mv	a5,a0
   11ae0:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11ae4:	fe744783          	lbu	a5,-25(s0)
   11ae8:	2781                	sext.w	a5,a5
}
   11aea:	853e                	mv	a0,a5
   11aec:	70a2                	ld	ra,40(sp)
   11aee:	7402                	ld	s0,32(sp)
   11af0:	6145                	addi	sp,sp,48
   11af2:	8082                	ret

0000000000011af4 <sd_stop_reading>:

int sd_stop_reading() {
   11af4:	1101                	addi	sp,sp,-32
   11af6:	ec06                	sd	ra,24(sp)
   11af8:	e822                	sd	s0,16(sp)
   11afa:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   11afc:	100507b7          	lui	a5,0x10050
   11b00:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   11b04:	04c00513          	li	a0,76
   11b08:	00000097          	auipc	ra,0x0
   11b0c:	ed0080e7          	jalr	-304(ra) # 119d8 <sd_set_byte>
    sd_set_byte(0);
   11b10:	4501                	li	a0,0
   11b12:	00000097          	auipc	ra,0x0
   11b16:	ec6080e7          	jalr	-314(ra) # 119d8 <sd_set_byte>
    sd_set_byte(0);
   11b1a:	4501                	li	a0,0
   11b1c:	00000097          	auipc	ra,0x0
   11b20:	ebc080e7          	jalr	-324(ra) # 119d8 <sd_set_byte>
    sd_set_byte(0);
   11b24:	4501                	li	a0,0
   11b26:	00000097          	auipc	ra,0x0
   11b2a:	eb2080e7          	jalr	-334(ra) # 119d8 <sd_set_byte>
    sd_set_byte(0);
   11b2e:	4501                	li	a0,0
   11b30:	00000097          	auipc	ra,0x0
   11b34:	ea8080e7          	jalr	-344(ra) # 119d8 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   11b38:	0ff00513          	li	a0,255
   11b3c:	00000097          	auipc	ra,0x0
   11b40:	e9c080e7          	jalr	-356(ra) # 119d8 <sd_set_byte>
    cmdresp = sd_get_byte();
   11b44:	e61ff0ef          	jal	ra,119a4 <sd_get_byte>
   11b48:	87aa                	mv	a5,a0
   11b4a:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   11b4e:	fe744783          	lbu	a5,-25(s0)
   11b52:	2781                	sext.w	a5,a5
}
   11b54:	853e                	mv	a0,a5
   11b56:	60e2                	ld	ra,24(sp)
   11b58:	6442                	ld	s0,16(sp)
   11b5a:	6105                	addi	sp,sp,32
   11b5c:	8082                	ret

0000000000011b5e <get_dev_bar>:
static uint64_t get_dev_bar(pnp_map *pnp, uint16_t vid, uint16_t did) {
   11b5e:	715d                	addi	sp,sp,-80
   11b60:	e4a2                	sd	s0,72(sp)
   11b62:	0880                	addi	s0,sp,80
   11b64:	faa43c23          	sd	a0,-72(s0)
   11b68:	87ae                	mv	a5,a1
   11b6a:	8732                	mv	a4,a2
   11b6c:	faf41b23          	sh	a5,-74(s0)
   11b70:	87ba                	mv	a5,a4
   11b72:	faf41a23          	sh	a5,-76(s0)
    int slv_total = (pnp->cfg >> 8) & 0xFF;
   11b76:	fb843783          	ld	a5,-72(s0)
   11b7a:	479c                	lw	a5,8(a5)
   11b7c:	0087d79b          	srliw	a5,a5,0x8
   11b80:	2781                	sext.w	a5,a5
   11b82:	2781                	sext.w	a5,a5
   11b84:	0ff7f793          	andi	a5,a5,255
   11b88:	fef42023          	sw	a5,-32(s0)
    int mst_total = (pnp->cfg >> 16) & 0xFF;
   11b8c:	fb843783          	ld	a5,-72(s0)
   11b90:	479c                	lw	a5,8(a5)
   11b92:	0107d79b          	srliw	a5,a5,0x10
   11b96:	2781                	sext.w	a5,a5
   11b98:	2781                	sext.w	a5,a5
   11b9a:	0ff7f793          	andi	a5,a5,255
   11b9e:	fcf42e23          	sw	a5,-36(s0)
    int off = 0;
   11ba2:	fe042623          	sw	zero,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11ba6:	fe042423          	sw	zero,-24(s0)
   11baa:	a82d                	j	11be4 <get_dev_bar+0x86>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11bac:	fec42783          	lw	a5,-20(s0)
   11bb0:	04078793          	addi	a5,a5,64 # 10050040 <_end+0x1003d6e8>
   11bb4:	fb843703          	ld	a4,-72(s0)
   11bb8:	97ba                	add	a5,a5,a4
   11bba:	639c                	ld	a5,0(a5)
   11bbc:	fcf43823          	sd	a5,-48(s0)
        off += pnp->cfg_table[off];
   11bc0:	fb843703          	ld	a4,-72(s0)
   11bc4:	fec42783          	lw	a5,-20(s0)
   11bc8:	97ba                	add	a5,a5,a4
   11bca:	0407c783          	lbu	a5,64(a5)
   11bce:	2781                	sext.w	a5,a5
   11bd0:	fec42703          	lw	a4,-20(s0)
   11bd4:	9fb9                	addw	a5,a5,a4
   11bd6:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   11bda:	fe842783          	lw	a5,-24(s0)
   11bde:	2785                	addiw	a5,a5,1
   11be0:	fef42423          	sw	a5,-24(s0)
   11be4:	fe842703          	lw	a4,-24(s0)
   11be8:	fdc42783          	lw	a5,-36(s0)
   11bec:	2701                	sext.w	a4,a4
   11bee:	2781                	sext.w	a5,a5
   11bf0:	faf74ee3          	blt	a4,a5,11bac <get_dev_bar+0x4e>
    for (int i = 0; i < slv_total; i++) {
   11bf4:	fe042223          	sw	zero,-28(s0)
   11bf8:	a8b5                	j	11c74 <get_dev_bar+0x116>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   11bfa:	fec42783          	lw	a5,-20(s0)
   11bfe:	04078793          	addi	a5,a5,64
   11c02:	fb843703          	ld	a4,-72(s0)
   11c06:	97ba                	add	a5,a5,a4
   11c08:	639c                	ld	a5,0(a5)
   11c0a:	fcf43023          	sd	a5,-64(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   11c0e:	fec42783          	lw	a5,-20(s0)
   11c12:	27a1                	addiw	a5,a5,8
   11c14:	2781                	sext.w	a5,a5
   11c16:	04078793          	addi	a5,a5,64
   11c1a:	fb843703          	ld	a4,-72(s0)
   11c1e:	97ba                	add	a5,a5,a4
   11c20:	639c                	ld	a5,0(a5)
   11c22:	fcf43423          	sd	a5,-56(s0)
        if (scfg.u.vid == vid && scfg.u.did == did) {
   11c26:	fc645783          	lhu	a5,-58(s0)
   11c2a:	fb645703          	lhu	a4,-74(s0)
   11c2e:	2701                	sext.w	a4,a4
   11c30:	2781                	sext.w	a5,a5
   11c32:	00f71f63          	bne	a4,a5,11c50 <get_dev_bar+0xf2>
   11c36:	fc445783          	lhu	a5,-60(s0)
   11c3a:	fb445703          	lhu	a4,-76(s0)
   11c3e:	2701                	sext.w	a4,a4
   11c40:	2781                	sext.w	a5,a5
   11c42:	00f71763          	bne	a4,a5,11c50 <get_dev_bar+0xf2>
            return scfg.u.xaddr;
   11c46:	fcc42783          	lw	a5,-52(s0)
   11c4a:	1782                	slli	a5,a5,0x20
   11c4c:	9381                	srli	a5,a5,0x20
   11c4e:	a825                	j	11c86 <get_dev_bar+0x128>
        off += pnp->cfg_table[off];
   11c50:	fb843703          	ld	a4,-72(s0)
   11c54:	fec42783          	lw	a5,-20(s0)
   11c58:	97ba                	add	a5,a5,a4
   11c5a:	0407c783          	lbu	a5,64(a5)
   11c5e:	2781                	sext.w	a5,a5
   11c60:	fec42703          	lw	a4,-20(s0)
   11c64:	9fb9                	addw	a5,a5,a4
   11c66:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   11c6a:	fe442783          	lw	a5,-28(s0)
   11c6e:	2785                	addiw	a5,a5,1
   11c70:	fef42223          	sw	a5,-28(s0)
   11c74:	fe442703          	lw	a4,-28(s0)
   11c78:	fe042783          	lw	a5,-32(s0)
   11c7c:	2701                	sext.w	a4,a4
   11c7e:	2781                	sext.w	a5,a5
   11c80:	f6f74de3          	blt	a4,a5,11bfa <get_dev_bar+0x9c>
    return DEV_NONE;
   11c84:	57fd                	li	a5,-1
}
   11c86:	853e                	mv	a0,a5
   11c88:	6426                	ld	s0,72(sp)
   11c8a:	6161                	addi	sp,sp,80
   11c8c:	8082                	ret

0000000000011c8e <mpu_region_total>:
static int mpu_region_total() {
   11c8e:	1101                	addi	sp,sp,-32
   11c90:	ec22                	sd	s0,24(sp)
   11c92:	1000                	addi	s0,sp,32
    uint64_t val = 0;
   11c94:	fe043423          	sd	zero,-24(s0)
    asm("csrr %0, 0xBC4" : "=r" (val));
   11c98:	bc4027f3          	csrr	a5,0xbc4
   11c9c:	fef43423          	sd	a5,-24(s0)
    return (int)(val >> 8);
   11ca0:	fe843783          	ld	a5,-24(s0)
   11ca4:	83a1                	srli	a5,a5,0x8
   11ca6:	2781                	sext.w	a5,a5
}
   11ca8:	853e                	mv	a0,a5
   11caa:	6462                	ld	s0,24(sp)
   11cac:	6105                	addi	sp,sp,32
   11cae:	8082                	ret

0000000000011cb0 <mpu_disable_region>:
static void mpu_disable_region(int idx) {
   11cb0:	7179                	addi	sp,sp,-48
   11cb2:	f422                	sd	s0,40(sp)
   11cb4:	1800                	addi	s0,sp,48
   11cb6:	87aa                	mv	a5,a0
   11cb8:	fcf42e23          	sw	a5,-36(s0)
    ctrl.value = 0;
   11cbc:	fe043423          	sd	zero,-24(s0)
    ctrl.bits.IDX = idx;
   11cc0:	fdc42783          	lw	a5,-36(s0)
   11cc4:	0ff7f793          	andi	a5,a5,255
   11cc8:	fef404a3          	sb	a5,-23(s0)
    ctrl.bits.WE = 1;
   11ccc:	fe844783          	lbu	a5,-24(s0)
   11cd0:	f807e793          	ori	a5,a5,-128
   11cd4:	fef40423          	sb	a5,-24(s0)
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11cd8:	fe843783          	ld	a5,-24(s0)
   11cdc:	bc479073          	csrw	0xbc4,a5
}
   11ce0:	0001                	nop
   11ce2:	7422                	ld	s0,40(sp)
   11ce4:	6145                	addi	sp,sp,48
   11ce6:	8082                	ret

0000000000011ce8 <mpu_enable_region>:
                       const char *rwx) {
   11ce8:	715d                	addi	sp,sp,-80
   11cea:	e4a2                	sd	s0,72(sp)
   11cec:	0880                	addi	s0,sp,80
   11cee:	87aa                	mv	a5,a0
   11cf0:	fcb43023          	sd	a1,-64(s0)
   11cf4:	fac43c23          	sd	a2,-72(s0)
   11cf8:	fae43823          	sd	a4,-80(s0)
   11cfc:	fcf42623          	sw	a5,-52(s0)
   11d00:	87b6                	mv	a5,a3
   11d02:	fcf42423          	sw	a5,-56(s0)
    uint64_t mask = (~0ull) << 10;
   11d06:	c0000793          	li	a5,-1024
   11d0a:	fef43423          	sd	a5,-24(s0)
    const char *p = rwx;
   11d0e:	fb043783          	ld	a5,-80(s0)
   11d12:	fef43023          	sd	a5,-32(s0)
    asm("csrw 0xBC2, %0" : :"r"(bar));
   11d16:	fc043783          	ld	a5,-64(s0)
   11d1a:	bc279073          	csrw	0xbc2,a5
    KB >>= 1;
   11d1e:	fb843783          	ld	a5,-72(s0)
   11d22:	8385                	srli	a5,a5,0x1
   11d24:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11d28:	a819                	j	11d3e <mpu_enable_region+0x56>
        mask <<= 1;
   11d2a:	fe843783          	ld	a5,-24(s0)
   11d2e:	0786                	slli	a5,a5,0x1
   11d30:	fef43423          	sd	a5,-24(s0)
        KB >>= 1;
   11d34:	fb843783          	ld	a5,-72(s0)
   11d38:	8385                	srli	a5,a5,0x1
   11d3a:	faf43c23          	sd	a5,-72(s0)
    while (KB) {
   11d3e:	fb843783          	ld	a5,-72(s0)
   11d42:	f7e5                	bnez	a5,11d2a <mpu_enable_region+0x42>
    asm("csrw 0xBC3, %0" : :"r"(mask));
   11d44:	fe843783          	ld	a5,-24(s0)
   11d48:	bc379073          	csrw	0xbc3,a5
    ctrl.value = 0;
   11d4c:	fc043c23          	sd	zero,-40(s0)
    ctrl.bits.IDX = idx;
   11d50:	fcc42783          	lw	a5,-52(s0)
   11d54:	0ff7f793          	andi	a5,a5,255
   11d58:	fcf40ca3          	sb	a5,-39(s0)
    ctrl.bits.ENA = 1;
   11d5c:	fd844783          	lbu	a5,-40(s0)
   11d60:	0107e793          	ori	a5,a5,16
   11d64:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.CACHABLE = cached;
   11d68:	fc842783          	lw	a5,-56(s0)
   11d6c:	8b85                	andi	a5,a5,1
   11d6e:	0ff7f793          	andi	a5,a5,255
   11d72:	8b85                	andi	a5,a5,1
   11d74:	0037969b          	slliw	a3,a5,0x3
   11d78:	fd844783          	lbu	a5,-40(s0)
   11d7c:	9bdd                	andi	a5,a5,-9
   11d7e:	873e                	mv	a4,a5
   11d80:	87b6                	mv	a5,a3
   11d82:	8fd9                	or	a5,a5,a4
   11d84:	fcf40c23          	sb	a5,-40(s0)
    ctrl.bits.WE = 1; // write into MPU
   11d88:	fd844783          	lbu	a5,-40(s0)
   11d8c:	f807e793          	ori	a5,a5,-128
   11d90:	fcf40c23          	sb	a5,-40(s0)
    while (*p) {
   11d94:	a09d                	j	11dfa <mpu_enable_region+0x112>
        if (*p == 'r') {
   11d96:	fe043783          	ld	a5,-32(s0)
   11d9a:	0007c783          	lbu	a5,0(a5)
   11d9e:	873e                	mv	a4,a5
   11da0:	07200793          	li	a5,114
   11da4:	00f71863          	bne	a4,a5,11db4 <mpu_enable_region+0xcc>
            ctrl.bits.RD = 1;
   11da8:	fd844783          	lbu	a5,-40(s0)
   11dac:	0027e793          	ori	a5,a5,2
   11db0:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'w') {
   11db4:	fe043783          	ld	a5,-32(s0)
   11db8:	0007c783          	lbu	a5,0(a5)
   11dbc:	873e                	mv	a4,a5
   11dbe:	07700793          	li	a5,119
   11dc2:	00f71863          	bne	a4,a5,11dd2 <mpu_enable_region+0xea>
            ctrl.bits.WR = 1;
   11dc6:	fd844783          	lbu	a5,-40(s0)
   11dca:	0017e793          	ori	a5,a5,1
   11dce:	fcf40c23          	sb	a5,-40(s0)
        if (*p == 'x') {
   11dd2:	fe043783          	ld	a5,-32(s0)
   11dd6:	0007c783          	lbu	a5,0(a5)
   11dda:	873e                	mv	a4,a5
   11ddc:	07800793          	li	a5,120
   11de0:	00f71863          	bne	a4,a5,11df0 <mpu_enable_region+0x108>
            ctrl.bits.EXEC = 1;
   11de4:	fd844783          	lbu	a5,-40(s0)
   11de8:	0047e793          	ori	a5,a5,4
   11dec:	fcf40c23          	sb	a5,-40(s0)
        p++;
   11df0:	fe043783          	ld	a5,-32(s0)
   11df4:	0785                	addi	a5,a5,1
   11df6:	fef43023          	sd	a5,-32(s0)
    while (*p) {
   11dfa:	fe043783          	ld	a5,-32(s0)
   11dfe:	0007c783          	lbu	a5,0(a5)
   11e02:	fbd1                	bnez	a5,11d96 <mpu_enable_region+0xae>
    asm("csrw 0xBC4, %0" : :"r"(ctrl.value));
   11e04:	fd843783          	ld	a5,-40(s0)
   11e08:	bc479073          	csrw	0xbc4,a5
}
   11e0c:	0001                	nop
   11e0e:	6426                	ld	s0,72(sp)
   11e10:	6161                	addi	sp,sp,80
   11e12:	8082                	ret

0000000000011e14 <is_empty_gui>:
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"
#include <string.h>

int is_empty_gui(const struct gpt_guid *guid) {
   11e14:	1101                	addi	sp,sp,-32
   11e16:	ec22                	sd	s0,24(sp)
   11e18:	1000                	addi	s0,sp,32
   11e1a:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11e1e:	fe843783          	ld	a5,-24(s0)
   11e22:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11e24:	e7ad                	bnez	a5,11e8e <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11e26:	fe843783          	ld	a5,-24(s0)
   11e2a:	0047d783          	lhu	a5,4(a5)
   11e2e:	e3a5                	bnez	a5,11e8e <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   11e30:	fe843783          	ld	a5,-24(s0)
   11e34:	0067d783          	lhu	a5,6(a5)
   11e38:	ebb9                	bnez	a5,11e8e <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11e3a:	fe843783          	ld	a5,-24(s0)
   11e3e:	0087c783          	lbu	a5,8(a5)
   11e42:	e7b1                	bnez	a5,11e8e <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   11e44:	fe843783          	ld	a5,-24(s0)
   11e48:	0097c783          	lbu	a5,9(a5)
   11e4c:	e3a9                	bnez	a5,11e8e <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11e4e:	fe843783          	ld	a5,-24(s0)
   11e52:	00a7c783          	lbu	a5,10(a5)
   11e56:	ef85                	bnez	a5,11e8e <is_empty_gui+0x7a>
   11e58:	fe843783          	ld	a5,-24(s0)
   11e5c:	00b7c783          	lbu	a5,11(a5)
   11e60:	e79d                	bnez	a5,11e8e <is_empty_gui+0x7a>
   11e62:	fe843783          	ld	a5,-24(s0)
   11e66:	00c7c783          	lbu	a5,12(a5)
   11e6a:	e395                	bnez	a5,11e8e <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11e6c:	fe843783          	ld	a5,-24(s0)
   11e70:	00d7c783          	lbu	a5,13(a5)
   11e74:	ef89                	bnez	a5,11e8e <is_empty_gui+0x7a>
   11e76:	fe843783          	ld	a5,-24(s0)
   11e7a:	00e7c783          	lbu	a5,14(a5)
   11e7e:	eb81                	bnez	a5,11e8e <is_empty_gui+0x7a>
   11e80:	fe843783          	ld	a5,-24(s0)
   11e84:	00f7c783          	lbu	a5,15(a5)
   11e88:	e399                	bnez	a5,11e8e <is_empty_gui+0x7a>
   11e8a:	4785                	li	a5,1
   11e8c:	a011                	j	11e90 <is_empty_gui+0x7c>
   11e8e:	4781                	li	a5,0
}
   11e90:	853e                	mv	a0,a5
   11e92:	6462                	ld	s0,24(sp)
   11e94:	6105                	addi	sp,sp,32
   11e96:	8082                	ret

0000000000011e98 <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11e98:	7159                	addi	sp,sp,-112
   11e9a:	f486                	sd	ra,104(sp)
   11e9c:	f0a2                	sd	s0,96(sp)
   11e9e:	1880                	addi	s0,sp,112
   11ea0:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11ea4:	fe843783          	ld	a5,-24(s0)
   11ea8:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11eaa:	0187d79b          	srliw	a5,a5,0x18
   11eae:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   11eb2:	fe843783          	ld	a5,-24(s0)
   11eb6:	439c                	lw	a5,0(a5)
   11eb8:	0107d79b          	srliw	a5,a5,0x10
   11ebc:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ebe:	0ff7f793          	andi	a5,a5,255
   11ec2:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11ec6:	fe843783          	ld	a5,-24(s0)
   11eca:	439c                	lw	a5,0(a5)
   11ecc:	0087d79b          	srliw	a5,a5,0x8
   11ed0:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ed2:	0ff7f793          	andi	a5,a5,255
   11ed6:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   11eda:	fe843783          	ld	a5,-24(s0)
   11ede:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ee0:	0ff7f793          	andi	a5,a5,255
   11ee4:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11ee8:	fe843783          	ld	a5,-24(s0)
   11eec:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11ef0:	0087d79b          	srliw	a5,a5,0x8
   11ef4:	17c2                	slli	a5,a5,0x30
   11ef6:	93c1                	srli	a5,a5,0x30
   11ef8:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   11efc:	fe843783          	ld	a5,-24(s0)
   11f00:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f04:	2781                	sext.w	a5,a5
   11f06:	0ff7f793          	andi	a5,a5,255
   11f0a:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11f0e:	fe843783          	ld	a5,-24(s0)
   11f12:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f16:	0087d79b          	srliw	a5,a5,0x8
   11f1a:	17c2                	slli	a5,a5,0x30
   11f1c:	93c1                	srli	a5,a5,0x30
   11f1e:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   11f22:	fe843783          	ld	a5,-24(s0)
   11f26:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f2a:	2781                	sext.w	a5,a5
   11f2c:	0ff7f793          	andi	a5,a5,255
   11f30:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   11f32:	fe843703          	ld	a4,-24(s0)
   11f36:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f3a:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11f3c:	fe843683          	ld	a3,-24(s0)
   11f40:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f44:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f46:	fe843603          	ld	a2,-24(s0)
   11f4a:	00a64603          	lbu	a2,10(a2) # 4000a <_end+0x2d6b2>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f4e:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f50:	fe843583          	ld	a1,-24(s0)
   11f54:	00b5c583          	lbu	a1,11(a1) # 1000000b <_end+0xffed6b3>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f58:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f5a:	fe843503          	ld	a0,-24(s0)
   11f5e:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f62:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f64:	fe843803          	ld	a6,-24(s0)
   11f68:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f6c:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f6e:	fe843883          	ld	a7,-24(s0)
   11f72:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f76:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11f78:	fe843303          	ld	t1,-24(s0)
   11f7c:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11f80:	2301                	sext.w	t1,t1
   11f82:	e09a                	sd	t1,64(sp)
   11f84:	fc46                	sd	a7,56(sp)
   11f86:	f842                	sd	a6,48(sp)
   11f88:	f42a                	sd	a0,40(sp)
   11f8a:	f02e                	sd	a1,32(sp)
   11f8c:	ec32                	sd	a2,24(sp)
   11f8e:	e836                	sd	a3,16(sp)
   11f90:	e43a                	sd	a4,8(sp)
   11f92:	e03e                	sd	a5,0(sp)
   11f94:	8886                	mv	a7,ra
   11f96:	881e                	mv	a6,t2
   11f98:	8796                	mv	a5,t0
   11f9a:	877e                	mv	a4,t6
   11f9c:	86fa                	mv	a3,t5
   11f9e:	8676                	mv	a2,t4
   11fa0:	85f2                	mv	a1,t3
   11fa2:	6549                	lui	a0,0x12
   11fa4:	68850513          	addi	a0,a0,1672 # 12688 <strnlen+0x28e>
   11fa8:	ef2ff0ef          	jal	ra,1169a <printf_uart>
        );
}
   11fac:	0001                	nop
   11fae:	70a6                	ld	ra,104(sp)
   11fb0:	7406                	ld	s0,96(sp)
   11fb2:	6165                	addi	sp,sp,112
   11fb4:	8082                	ret

0000000000011fb6 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   11fb6:	7179                	addi	sp,sp,-48
   11fb8:	f422                	sd	s0,40(sp)
   11fba:	1800                	addi	s0,sp,48
   11fbc:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   11fc0:	5b1937b7          	lui	a5,0x5b193
   11fc4:	3007879b          	addiw	a5,a5,768
   11fc8:	fef42023          	sw	a5,-32(s0)
   11fcc:	c7800793          	li	a5,-904
   11fd0:	fef41223          	sh	a5,-28(s0)
   11fd4:	6791                	lui	a5,0x4
   11fd6:	0cd7879b          	addiw	a5,a5,205
   11fda:	fef41323          	sh	a5,-26(s0)
   11fde:	f8000793          	li	a5,-128
   11fe2:	fef40423          	sb	a5,-24(s0)
   11fe6:	4789                	li	a5,2
   11fe8:	fef404a3          	sb	a5,-23(s0)
   11fec:	57a1                	li	a5,-24
   11fee:	fef40523          	sb	a5,-22(s0)
   11ff2:	06c00793          	li	a5,108
   11ff6:	fef405a3          	sb	a5,-21(s0)
   11ffa:	04500793          	li	a5,69
   11ffe:	fef40623          	sb	a5,-20(s0)
   12002:	05800793          	li	a5,88
   12006:	fef406a3          	sb	a5,-19(s0)
   1200a:	47ad                	li	a5,11
   1200c:	fef40723          	sb	a5,-18(s0)
   12010:	04700793          	li	a5,71
   12014:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   12018:	fe042703          	lw	a4,-32(s0)
   1201c:	fd843783          	ld	a5,-40(s0)
   12020:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   12022:	0af71863          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   12026:	fe445703          	lhu	a4,-28(s0)
   1202a:	fd843783          	ld	a5,-40(s0)
   1202e:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   12032:	2701                	sext.w	a4,a4
   12034:	2781                	sext.w	a5,a5
   12036:	08f71e63          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   1203a:	fe645703          	lhu	a4,-26(s0)
   1203e:	fd843783          	ld	a5,-40(s0)
   12042:	0067d783          	lhu	a5,6(a5)
   12046:	2701                	sext.w	a4,a4
   12048:	2781                	sext.w	a5,a5
   1204a:	08f71463          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   1204e:	fe844703          	lbu	a4,-24(s0)
   12052:	fd843783          	ld	a5,-40(s0)
   12056:	0087c783          	lbu	a5,8(a5)
   1205a:	06f71c63          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   1205e:	fe944703          	lbu	a4,-23(s0)
   12062:	fd843783          	ld	a5,-40(s0)
   12066:	0097c783          	lbu	a5,9(a5)
   1206a:	06f71463          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   1206e:	fea44703          	lbu	a4,-22(s0)
   12072:	fd843783          	ld	a5,-40(s0)
   12076:	00a7c783          	lbu	a5,10(a5)
   1207a:	04f71c63          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   1207e:	feb44703          	lbu	a4,-21(s0)
   12082:	fd843783          	ld	a5,-40(s0)
   12086:	00b7c783          	lbu	a5,11(a5)
   1208a:	04f71463          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   1208e:	fec44703          	lbu	a4,-20(s0)
   12092:	fd843783          	ld	a5,-40(s0)
   12096:	00c7c783          	lbu	a5,12(a5)
   1209a:	02f71c63          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   1209e:	fed44703          	lbu	a4,-19(s0)
   120a2:	fd843783          	ld	a5,-40(s0)
   120a6:	00d7c783          	lbu	a5,13(a5)
   120aa:	02f71463          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   120ae:	fee44703          	lbu	a4,-18(s0)
   120b2:	fd843783          	ld	a5,-40(s0)
   120b6:	00e7c783          	lbu	a5,14(a5)
   120ba:	00f71c63          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   120be:	fef44703          	lbu	a4,-17(s0)
   120c2:	fd843783          	ld	a5,-40(s0)
   120c6:	00f7c783          	lbu	a5,15(a5)
   120ca:	00f71463          	bne	a4,a5,120d2 <is_uboot_guid+0x11c>
   120ce:	4785                	li	a5,1
   120d0:	a011                	j	120d4 <is_uboot_guid+0x11e>
   120d2:	4781                	li	a5,0
}
   120d4:	853e                	mv	a0,a5
   120d6:	7422                	ld	s0,40(sp)
   120d8:	6145                	addi	sp,sp,48
   120da:	8082                	ret

00000000000120dc <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   120dc:	9c010113          	addi	sp,sp,-1600
   120e0:	62113c23          	sd	ra,1592(sp)
   120e4:	62813823          	sd	s0,1584(sp)
   120e8:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   120ec:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   120f0:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   120f4:	080007b7          	lui	a5,0x8000
   120f8:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   120fc:	00000097          	auipc	ra,0x0
   12100:	89a080e7          	jalr	-1894(ra) # 11996 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   12104:	45b5                	li	a1,13
   12106:	67c9                	lui	a5,0x12
   12108:	6d078513          	addi	a0,a5,1744 # 126d0 <strnlen+0x2d6>
   1210c:	fb3fe0ef          	jal	ra,110be <print_uart>

    sd_start_reading(0);
   12110:	4501                	li	a0,0
   12112:	00000097          	auipc	ra,0x0
   12116:	96c080e7          	jalr	-1684(ra) # 11a7e <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   1211a:	dc040793          	addi	a5,s0,-576
   1211e:	20000593          	li	a1,512
   12122:	853e                	mv	a0,a5
   12124:	8efff0ef          	jal	ra,11a12 <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   12128:	bc040793          	addi	a5,s0,-1088
   1212c:	20000593          	li	a1,512
   12130:	853e                	mv	a0,a5
   12132:	8e1ff0ef          	jal	ra,11a12 <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   12136:	bc043703          	ld	a4,-1088(s0)
   1213a:	67c9                	lui	a5,0x12
   1213c:	7307b783          	ld	a5,1840(a5) # 12730 <strnlen+0x336>
   12140:	00f70663          	beq	a4,a5,1214c <run_from_sdcard+0x70>
        sd_stop_reading();
   12144:	9b1ff0ef          	jal	ra,11af4 <sd_stop_reading>
        return -1;
   12148:	57fd                	li	a5,-1
   1214a:	a2c5                	j	1232a <run_from_sdcard+0x24e>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   1214c:	fc042a23          	sw	zero,-44(s0)
   12150:	a8c5                	j	12240 <run_from_sdcard+0x164>
        i4 = i % 4;
   12152:	fd442703          	lw	a4,-44(s0)
   12156:	41f7579b          	sraiw	a5,a4,0x1f
   1215a:	01e7d79b          	srliw	a5,a5,0x1e
   1215e:	9f3d                	addw	a4,a4,a5
   12160:	8b0d                	andi	a4,a4,3
   12162:	40f707bb          	subw	a5,a4,a5
   12166:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   1216a:	fc442783          	lw	a5,-60(s0)
   1216e:	2781                	sext.w	a5,a5
   12170:	eb81                	bnez	a5,12180 <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   12172:	9c040793          	addi	a5,s0,-1600
   12176:	20000593          	li	a1,512
   1217a:	853e                	mv	a0,a5
   1217c:	897ff0ef          	jal	ra,11a12 <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   12180:	9c040713          	addi	a4,s0,-1600
   12184:	fc442783          	lw	a5,-60(s0)
   12188:	079e                	slli	a5,a5,0x7
   1218a:	97ba                	add	a5,a5,a4
   1218c:	853e                	mv	a0,a5
   1218e:	00000097          	auipc	ra,0x0
   12192:	c86080e7          	jalr	-890(ra) # 11e14 <is_empty_gui>
   12196:	87aa                	mv	a5,a0
   12198:	efd1                	bnez	a5,12234 <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   1219a:	fd442783          	lw	a5,-44(s0)
   1219e:	85be                	mv	a1,a5
   121a0:	67c9                	lui	a5,0x12
   121a2:	6e078513          	addi	a0,a5,1760 # 126e0 <strnlen+0x2e6>
   121a6:	cf4ff0ef          	jal	ra,1169a <printf_uart>
        print_guid(&entry[i4].type);
   121aa:	9c040713          	addi	a4,s0,-1600
   121ae:	fc442783          	lw	a5,-60(s0)
   121b2:	079e                	slli	a5,a5,0x7
   121b4:	97ba                	add	a5,a5,a4
   121b6:	853e                	mv	a0,a5
   121b8:	ce1ff0ef          	jal	ra,11e98 <print_guid>
        print_uart(" : ", 3);
   121bc:	458d                	li	a1,3
   121be:	67c9                	lui	a5,0x12
   121c0:	6e878513          	addi	a0,a5,1768 # 126e8 <strnlen+0x2ee>
   121c4:	efbfe0ef          	jal	ra,110be <print_uart>
        print_uart((const char *)entry[i4].name, sizeof(entry[i4].name));
   121c8:	9c040713          	addi	a4,s0,-1600
   121cc:	fc442783          	lw	a5,-60(s0)
   121d0:	079e                	slli	a5,a5,0x7
   121d2:	03078793          	addi	a5,a5,48
   121d6:	97ba                	add	a5,a5,a4
   121d8:	07a1                	addi	a5,a5,8
   121da:	04800593          	li	a1,72
   121de:	853e                	mv	a0,a5
   121e0:	edffe0ef          	jal	ra,110be <print_uart>
        print_uart("\r\n", 2);
   121e4:	4589                	li	a1,2
   121e6:	67c9                	lui	a5,0x12
   121e8:	6f078513          	addi	a0,a5,1776 # 126f0 <strnlen+0x2f6>
   121ec:	ed3fe0ef          	jal	ra,110be <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   121f0:	9c040713          	addi	a4,s0,-1600
   121f4:	fc442783          	lw	a5,-60(s0)
   121f8:	079e                	slli	a5,a5,0x7
   121fa:	97ba                	add	a5,a5,a4
   121fc:	853e                	mv	a0,a5
   121fe:	00000097          	auipc	ra,0x0
   12202:	db8080e7          	jalr	-584(ra) # 11fb6 <is_uboot_guid>
   12206:	87aa                	mv	a5,a0
   12208:	c79d                	beqz	a5,12236 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   1220a:	fc442783          	lw	a5,-60(s0)
   1220e:	079e                	slli	a5,a5,0x7
   12210:	ff040713          	addi	a4,s0,-16
   12214:	97ba                	add	a5,a5,a4
   12216:	9f07b783          	ld	a5,-1552(a5)
   1221a:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   1221e:	fc442783          	lw	a5,-60(s0)
   12222:	079e                	slli	a5,a5,0x7
   12224:	ff040713          	addi	a4,s0,-16
   12228:	97ba                	add	a5,a5,a4
   1222a:	9f87b783          	ld	a5,-1544(a5)
   1222e:	fef43023          	sd	a5,-32(s0)
   12232:	a011                	j	12236 <run_from_sdcard+0x15a>
            continue;
   12234:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   12236:	fd442783          	lw	a5,-44(s0)
   1223a:	2785                	addiw	a5,a5,1
   1223c:	fcf42a23          	sw	a5,-44(s0)
   12240:	c1042703          	lw	a4,-1008(s0)
   12244:	fd442783          	lw	a5,-44(s0)
   12248:	f0e7e5e3          	bltu	a5,a4,12152 <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   1224c:	8a9ff0ef          	jal	ra,11af4 <sd_stop_reading>

    if (lba_start == 0) {
   12250:	fe843783          	ld	a5,-24(s0)
   12254:	e399                	bnez	a5,1225a <run_from_sdcard+0x17e>
        return -1;
   12256:	57fd                	li	a5,-1
   12258:	a8c9                	j	1232a <run_from_sdcard+0x24e>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   1225a:	fe843783          	ld	a5,-24(s0)
   1225e:	07a6                	slli	a5,a5,0x9
   12260:	853e                	mv	a0,a5
   12262:	00000097          	auipc	ra,0x0
   12266:	81c080e7          	jalr	-2020(ra) # 11a7e <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   1226a:	fe043703          	ld	a4,-32(s0)
   1226e:	fe843783          	ld	a5,-24(s0)
   12272:	40f707b3          	sub	a5,a4,a5
   12276:	0785                	addi	a5,a5,1
   12278:	8385                	srli	a5,a5,0x1
   1227a:	85be                	mv	a1,a5
   1227c:	67c9                	lui	a5,0x12
   1227e:	6f878513          	addi	a0,a5,1784 # 126f8 <strnlen+0x2fe>
   12282:	c18ff0ef          	jal	ra,1169a <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12286:	fe843783          	ld	a5,-24(s0)
   1228a:	fcf43423          	sd	a5,-56(s0)
   1228e:	a8bd                	j	1230c <run_from_sdcard+0x230>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   12290:	9c040793          	addi	a5,s0,-1600
   12294:	20000593          	li	a1,512
   12298:	853e                	mv	a0,a5
   1229a:	f78ff0ef          	jal	ra,11a12 <sd_read_block>
  
        // Check SRAM already initialized with loader1 (sim only)
        if (((uint64_t *)entry)[0] == ((uint64_t *)sram)[0]) {
   1229e:	9c040793          	addi	a5,s0,-1600
   122a2:	6398                	ld	a4,0(a5)
   122a4:	fd843783          	ld	a5,-40(s0)
   122a8:	639c                	ld	a5,0(a5)
   122aa:	00f71b63          	bne	a4,a5,122c0 <run_from_sdcard+0x1e4>
            printf_uart(". . . . . %s", "SKIPPED(sim)");
   122ae:	67c9                	lui	a5,0x12
   122b0:	70878593          	addi	a1,a5,1800 # 12708 <strnlen+0x30e>
   122b4:	67c9                	lui	a5,0x12
   122b6:	71878513          	addi	a0,a5,1816 # 12718 <strnlen+0x31e>
   122ba:	be0ff0ef          	jal	ra,1169a <printf_uart>
            break;
   122be:	a8a9                	j	12318 <run_from_sdcard+0x23c>
        }

        memcpy(sram, entry, sizeof(entry));
   122c0:	fd843783          	ld	a5,-40(s0)
   122c4:	86be                	mv	a3,a5
   122c6:	9c040793          	addi	a5,s0,-1600
   122ca:	20000713          	li	a4,512
   122ce:	863a                	mv	a2,a4
   122d0:	85be                	mv	a1,a5
   122d2:	8536                	mv	a0,a3
   122d4:	00000097          	auipc	ra,0x0
   122d8:	066080e7          	jalr	102(ra) # 1233a <memcpy>
        sram += sizeof(entry);
   122dc:	fd843783          	ld	a5,-40(s0)
   122e0:	20078793          	addi	a5,a5,512
   122e4:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   122e8:	fc843703          	ld	a4,-56(s0)
   122ec:	06400793          	li	a5,100
   122f0:	02f777b3          	remu	a5,a4,a5
   122f4:	e799                	bnez	a5,12302 <run_from_sdcard+0x226>
            print_uart(". ", 2);
   122f6:	4589                	li	a1,2
   122f8:	67c9                	lui	a5,0x12
   122fa:	72878513          	addi	a0,a5,1832 # 12728 <strnlen+0x32e>
   122fe:	dc1fe0ef          	jal	ra,110be <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   12302:	fc843783          	ld	a5,-56(s0)
   12306:	0785                	addi	a5,a5,1
   12308:	fcf43423          	sd	a5,-56(s0)
   1230c:	fc843703          	ld	a4,-56(s0)
   12310:	fe043783          	ld	a5,-32(s0)
   12314:	f6e7fee3          	bleu	a4,a5,12290 <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   12318:	4589                	li	a1,2
   1231a:	67c9                	lui	a5,0x12
   1231c:	6f078513          	addi	a0,a5,1776 # 126f0 <strnlen+0x2f6>
   12320:	d9ffe0ef          	jal	ra,110be <print_uart>

    sd_stop_reading();
   12324:	fd0ff0ef          	jal	ra,11af4 <sd_stop_reading>
    return 0;
   12328:	4781                	li	a5,0
}
   1232a:	853e                	mv	a0,a5
   1232c:	63813083          	ld	ra,1592(sp)
   12330:	63013403          	ld	s0,1584(sp)
   12334:	64010113          	addi	sp,sp,1600
   12338:	8082                	ret

000000000001233a <memcpy>:
   1233a:	00a5c7b3          	xor	a5,a1,a0
   1233e:	8b9d                	andi	a5,a5,7
   12340:	00c50733          	add	a4,a0,a2
   12344:	e781                	bnez	a5,1234c <memcpy+0x12>
   12346:	479d                	li	a5,7
   12348:	00c7ef63          	bltu	a5,a2,12366 <memcpy+0x2c>
   1234c:	87aa                	mv	a5,a0
   1234e:	00e56963          	bltu	a0,a4,12360 <memcpy+0x26>
   12352:	8082                	ret
   12354:	0005c683          	lbu	a3,0(a1)
   12358:	0785                	addi	a5,a5,1
   1235a:	0585                	addi	a1,a1,1
   1235c:	fed78fa3          	sb	a3,-1(a5)
   12360:	fee7eae3          	bltu	a5,a4,12354 <memcpy+0x1a>
   12364:	8082                	ret
   12366:	00757793          	andi	a5,a0,7
   1236a:	ebbd                	bnez	a5,123e0 <memcpy+0xa6>
   1236c:	87aa                	mv	a5,a0
   1236e:	ff877693          	andi	a3,a4,-8
   12372:	fc068613          	addi	a2,a3,-64
   12376:	06c7fc63          	bleu	a2,a5,123ee <memcpy+0xb4>
   1237a:	0005b383          	ld	t2,0(a1)
   1237e:	0085b283          	ld	t0,8(a1)
   12382:	0105bf83          	ld	t6,16(a1)
   12386:	0185bf03          	ld	t5,24(a1)
   1238a:	0205be83          	ld	t4,32(a1)
   1238e:	0285be03          	ld	t3,40(a1)
   12392:	0305b303          	ld	t1,48(a1)
   12396:	0385b883          	ld	a7,56(a1)
   1239a:	04858593          	addi	a1,a1,72
   1239e:	04878793          	addi	a5,a5,72
   123a2:	ff85b803          	ld	a6,-8(a1)
   123a6:	fa77bc23          	sd	t2,-72(a5)
   123aa:	fc57b023          	sd	t0,-64(a5)
   123ae:	fdf7b423          	sd	t6,-56(a5)
   123b2:	fde7b823          	sd	t5,-48(a5)
   123b6:	fdd7bc23          	sd	t4,-40(a5)
   123ba:	ffc7b023          	sd	t3,-32(a5)
   123be:	fe67b423          	sd	t1,-24(a5)
   123c2:	ff17b823          	sd	a7,-16(a5)
   123c6:	ff07bc23          	sd	a6,-8(a5)
   123ca:	b775                	j	12376 <memcpy+0x3c>
   123cc:	0005c683          	lbu	a3,0(a1)
   123d0:	0785                	addi	a5,a5,1
   123d2:	0585                	addi	a1,a1,1
   123d4:	fed78fa3          	sb	a3,-1(a5)
   123d8:	0077f693          	andi	a3,a5,7
   123dc:	fae5                	bnez	a3,123cc <memcpy+0x92>
   123de:	bf41                	j	1236e <memcpy+0x34>
   123e0:	87aa                	mv	a5,a0
   123e2:	bfdd                	j	123d8 <memcpy+0x9e>
   123e4:	6190                	ld	a2,0(a1)
   123e6:	07a1                	addi	a5,a5,8
   123e8:	05a1                	addi	a1,a1,8
   123ea:	fec7bc23          	sd	a2,-8(a5)
   123ee:	fed7ebe3          	bltu	a5,a3,123e4 <memcpy+0xaa>
   123f2:	f6e7e7e3          	bltu	a5,a4,12360 <memcpy+0x26>
   123f6:	8082                	ret
	...

00000000000123fa <strnlen>:
   123fa:	95aa                	add	a1,a1,a0
   123fc:	87aa                	mv	a5,a0
   123fe:	00b78563          	beq	a5,a1,12408 <strnlen+0xe>
   12402:	0007c703          	lbu	a4,0(a5)
   12406:	e701                	bnez	a4,1240e <strnlen+0x14>
   12408:	40a78533          	sub	a0,a5,a0
   1240c:	8082                	ret
   1240e:	0785                	addi	a5,a5,1
   12410:	b7fd                	j	123fe <strnlen+0x4>
	...
