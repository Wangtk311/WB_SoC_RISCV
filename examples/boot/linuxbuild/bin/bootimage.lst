
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000010000 <_start>:
  .globl _start
  .globl exception_handler_c
  .globl interrupt_handler_c

_start:
  j reset_vector
   10000:	0380006f          	j	10038 <reset_vector>

0000000000010004 <trap_table>:
trap_table:
  j trap_entry
   10004:	1680006f          	j	1016c <trap_entry>
/* if mtvec is configured as a vectorized interrupt handlers */
  j bad_irq  # 1 Supervisor software interrupt
   10008:	02c0006f          	j	10034 <bad_irq>
  j bad_irq  # 2 Reserved
   1000c:	0280006f          	j	10034 <bad_irq>
  j bad_irq  # 3 Machine software interrupt
   10010:	0240006f          	j	10034 <bad_irq>
  j bad_irq  # 4 User timer interrupt
   10014:	0200006f          	j	10034 <bad_irq>
  j bad_irq  # 5 Supervisor timer interrupt
   10018:	01c0006f          	j	10034 <bad_irq>
  j bad_irq  # 6 Reserved
   1001c:	0180006f          	j	10034 <bad_irq>
  j bad_irq  # 7 Machine timer interrupt
   10020:	0140006f          	j	10034 <bad_irq>
  j bad_irq  # 8 User external interrupt
   10024:	0100006f          	j	10034 <bad_irq>
  j bad_irq  # 9 Supervisor external interrupt
   10028:	00c0006f          	j	10034 <bad_irq>
  j bad_irq  # 10 Reserved
   1002c:	0080006f          	j	10034 <bad_irq>
  j bad_irq  # 11 Machine external interrupt
   10030:	0040006f          	j	10034 <bad_irq>

0000000000010034 <bad_irq>:

bad_irq:
   j bad_irq
   10034:	0000006f          	j	10034 <bad_irq>

0000000000010038 <reset_vector>:

reset_vector:
  li  x1, 0
   10038:	00000093          	li	ra,0
  li  x2, 0
   1003c:	00000113          	li	sp,0
  li  x3, 0
   10040:	00000193          	li	gp,0
  li  x4, 0
   10044:	00000213          	li	tp,0
  li  x5, 0
   10048:	00000293          	li	t0,0
  li  x6, 0
   1004c:	00000313          	li	t1,0
  li  x7, 0
   10050:	00000393          	li	t2,0
  li  x8, 0
   10054:	00000413          	li	s0,0
  li  x9, 0
   10058:	00000493          	li	s1,0
  li  x10,0
   1005c:	00000513          	li	a0,0
  li  x11,0
   10060:	00000593          	li	a1,0
  li  x12,0
   10064:	00000613          	li	a2,0
  li  x13,0
   10068:	00000693          	li	a3,0
  li  x14,0
   1006c:	00000713          	li	a4,0
  li  x15,0
   10070:	00000793          	li	a5,0
  li  x16,0
   10074:	00000813          	li	a6,0
  li  x17,0
   10078:	00000893          	li	a7,0
  li  x18,0
   1007c:	00000913          	li	s2,0
  li  x19,0
   10080:	00000993          	li	s3,0
  li  x20,0
   10084:	00000a13          	li	s4,0
  li  x21,0
   10088:	00000a93          	li	s5,0
  li  x22,0
   1008c:	00000b13          	li	s6,0
  li  x23,0
   10090:	00000b93          	li	s7,0
  li  x24,0
   10094:	00000c13          	li	s8,0
  li  x25,0
   10098:	00000c93          	li	s9,0
  li  x26,0
   1009c:	00000d13          	li	s10,0
  li  x27,0
   100a0:	00000d93          	li	s11,0
  li  x28,0
   100a4:	00000e13          	li	t3,0
  li  x29,0
   100a8:	00000e93          	li	t4,0
  li  x30,0
   100ac:	00000f13          	li	t5,0
  li  x31,0
   100b0:	00000f93          	li	t6,0
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  # Clear Previous mode (set U-mode), disable interrupt in U-mode
  li t0, 0x00001880   # MPP[12:11] = 0x0 MPIE[7]=0 (Previous to machine mode)
   100b4:	000022b7          	lui	t0,0x2
   100b8:	8802829b          	addiw	t0,t0,-1920
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
   100bc:	3002b073          	csrc	mstatus,t0

  la t0, trap_table
   100c0:	00000297          	auipc	t0,0x0
   100c4:	f4428293          	addi	t0,t0,-188 # 10004 <trap_table>
  csrw mtvec, t0
   100c8:	30529073          	csrw	mtvec,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
   100cc:	f1402573          	csrr	a0,mhartid
#define SRAM_SIZE_BYTES (1<<21)
#define STACK_PER_CORE_BYTES 4096
#define CFG_CPU_MAX 4

  #dedicated region to save cpu context on exception (not interrupt)
  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
   100d0:	08200137          	lui	sp,0x8200
  addi sp,sp,-256
   100d4:	f0010113          	addi	sp,sp,-256 # 81fff00 <_end+0x81ee2d4>
  csrw 0x7b3, sp          # save dedicated stack region into dscratch1 register to run riscv-tests
   100d8:	7b311073          	csrw	0x7b3,sp

  # Initialze stack pointer for each cpu
  li  a1, (CFG_CPU_MAX - 1)
   100dc:	00300593          	li	a1,3
  sub a0, a1, a0                  # (CFG_CPU_MAX - 1 - hartid)
   100e0:	40a58533          	sub	a0,a1,a0
  li  a1, STACK_PER_CORE_BYTES
   100e4:	000015b7          	lui	a1,0x1
  mul a0, a0, a1
   100e8:	02b50533          	mul	a0,a0,a1
  sub sp, sp, a0
   100ec:	40a10133          	sub	sp,sp,a0

  ## Initialize MPU regions

  ## Make all cachable, rwx (default):
  li a1, 0x0ull
   100f0:	00000593          	li	a1,0
  csrw CSR_mpu_addr, a1
   100f4:	bc259073          	csrw	0xbc2,a1
  csrw CSR_mpu_mask, a1
   100f8:	bc359073          	csrw	0xbc3,a1
  li a1, (0 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_CACHABLE | MPU_CTRL_FL_EXEC | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   100fc:	01f00593          	li	a1,31
  csrw CSR_mpu_ctrl, a1
   10100:	bc459073          	csrw	0xbc4,a1
  ## Uncached CLINT:
  li a1, 0x0000000002000000ull
   10104:	020005b7          	lui	a1,0x2000
  csrw CSR_mpu_addr, a1
   10108:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFFE000000ull
   1010c:	fe0005b7          	lui	a1,0xfe000
  csrw CSR_mpu_mask, a1
   10110:	bc359073          	csrw	0xbc3,a1
  li a1, (1 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   10114:	11300593          	li	a1,275
  csrw CSR_mpu_ctrl, a1
   10118:	bc459073          	csrw	0xbc4,a1
  ## Uncached PLIC:
  li a1, 0x000000000C000000ull
   1011c:	0c0005b7          	lui	a1,0xc000
  csrw CSR_mpu_addr, a1
   10120:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFFC000000ull
   10124:	fc0005b7          	lui	a1,0xfc000
  csrw CSR_mpu_mask, a1
   10128:	bc359073          	csrw	0xbc3,a1
  li a1, (2 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   1012c:	21300593          	li	a1,531
  csrw CSR_mpu_ctrl, a1
   10130:	bc459073          	csrw	0xbc4,a1
  ## Uncached peripheries (IO):
  li a1, 0x0000000010000000ull
   10134:	100005b7          	lui	a1,0x10000
  csrw CSR_mpu_addr, a1
   10138:	bc259073          	csrw	0xbc2,a1
  li a1, 0xFFFFFFFFF0000000ull
   1013c:	f00005b7          	lui	a1,0xf0000
  csrw CSR_mpu_mask, a1
   10140:	bc359073          	csrw	0xbc3,a1
  li a1, (3 << 8) | MPU_CTRL_FL_ENA | MPU_CTRL_FL_EXEC | MPU_CTRL_FL_WR | MPU_CTRL_FL_RD
   10144:	31700593          	li	a1,791
  csrw CSR_mpu_ctrl, a1
   10148:	bc459073          	csrw	0xbc4,a1

  # copy image 64 KB
  csrr a0, mhartid            # a0 <= MHARTID value
   1014c:	f1402573          	csrr	a0,mhartid
  beqz a0, init0
   10150:	00050663          	beqz	a0,1015c <init0>
  wfi
   10154:	10500073          	wfi
  j end_init0
   10158:	0080006f          	j	10160 <end_init0>

000000000001015c <init0>:
init0:
  # HW Initialization is run only on Core[0]
  jal _init
   1015c:	2ea000ef          	jal	ra,10446 <_init>

0000000000010160 <end_init0>:
end_init0:

  ##! jump to entry point in SRAM = 0x08000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
   10160:	080002b7          	lui	t0,0x8000
  csrw mepc, t0
   10164:	34129073          	csrw	mepc,t0
  mret
   10168:	30200073          	mret

000000000001016c <trap_entry>:

trap_entry:
  ## was it an interrupt or an exception?
  csrw mscratch, t5;
   1016c:	340f1073          	csrw	mscratch,t5
  csrr t5, mcause;
   10170:	34202f73          	csrr	t5,mcause
  bgez t5, handle_exception;
   10174:	100f5e63          	bgez	t5,10290 <handle_exception>

0000000000010178 <interrupt_entry>:

interrupt_entry:
  add sp, sp, -COOP_REG_FRAME
   10178:	f0810113          	addi	sp,sp,-248
  _save_context(sp)
   1017c:	00113023          	sd	ra,0(sp)
   10180:	00813423          	sd	s0,8(sp)
   10184:	00913823          	sd	s1,16(sp)
   10188:	01213c23          	sd	s2,24(sp)
   1018c:	03313023          	sd	s3,32(sp)
   10190:	03413423          	sd	s4,40(sp)
   10194:	03513823          	sd	s5,48(sp)
   10198:	03613c23          	sd	s6,56(sp)
   1019c:	05713023          	sd	s7,64(sp)
   101a0:	05813423          	sd	s8,72(sp)
   101a4:	05913823          	sd	s9,80(sp)
   101a8:	05a13c23          	sd	s10,88(sp)
   101ac:	07b13023          	sd	s11,96(sp)
   101b0:	06213423          	sd	sp,104(sp)
   101b4:	07013c23          	sd	a6,120(sp)
   101b8:	09113023          	sd	a7,128(sp)
   101bc:	08a13423          	sd	a0,136(sp)
   101c0:	08b13823          	sd	a1,144(sp)
   101c4:	08c13c23          	sd	a2,152(sp)
   101c8:	0ad13023          	sd	a3,160(sp)
   101cc:	0ae13423          	sd	a4,168(sp)
   101d0:	0af13823          	sd	a5,176(sp)
   101d4:	0b013c23          	sd	a6,184(sp)
   101d8:	0d113023          	sd	a7,192(sp)
   101dc:	0c513423          	sd	t0,200(sp)
   101e0:	0c613823          	sd	t1,208(sp)
   101e4:	0c713c23          	sd	t2,216(sp)
   101e8:	0fc13023          	sd	t3,224(sp)
   101ec:	0fd13423          	sd	t4,232(sp)
   101f0:	0e313823          	sd	gp,240(sp)
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
   101f4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
   101f8:	341025f3          	csrr	a1,mepc
  mv a2, sp
   101fc:	00010613          	mv	a2,sp
  jal interrupt_handler_c
   10200:	52e000ef          	jal	ra,1072e <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld t5,COOP_REG_TP(sp)
   10204:	07013f03          	ld	t5,112(sp)
  csrw mepc,t5
   10208:	341f1073          	csrw	mepc,t5
  _restore_context(sp)
   1020c:	00013083          	ld	ra,0(sp)
   10210:	00813403          	ld	s0,8(sp)
   10214:	01013483          	ld	s1,16(sp)
   10218:	01813903          	ld	s2,24(sp)
   1021c:	02013983          	ld	s3,32(sp)
   10220:	02813a03          	ld	s4,40(sp)
   10224:	03013a83          	ld	s5,48(sp)
   10228:	03813b03          	ld	s6,56(sp)
   1022c:	04013b83          	ld	s7,64(sp)
   10230:	04813c03          	ld	s8,72(sp)
   10234:	05013c83          	ld	s9,80(sp)
   10238:	05813d03          	ld	s10,88(sp)
   1023c:	06013d83          	ld	s11,96(sp)
   10240:	06813103          	ld	sp,104(sp)
   10244:	07813803          	ld	a6,120(sp)
   10248:	08013883          	ld	a7,128(sp)
   1024c:	08813503          	ld	a0,136(sp)
   10250:	09013583          	ld	a1,144(sp)
   10254:	09813603          	ld	a2,152(sp)
   10258:	0a013683          	ld	a3,160(sp)
   1025c:	0a813703          	ld	a4,168(sp)
   10260:	0b013783          	ld	a5,176(sp)
   10264:	0b813803          	ld	a6,184(sp)
   10268:	0c013883          	ld	a7,192(sp)
   1026c:	0c813283          	ld	t0,200(sp)
   10270:	0d013303          	ld	t1,208(sp)
   10274:	0d813383          	ld	t2,216(sp)
   10278:	0e013e03          	ld	t3,224(sp)
   1027c:	0e813e83          	ld	t4,232(sp)
   10280:	0f013183          	ld	gp,240(sp)
  add sp, sp, COOP_REG_FRAME
   10284:	0f810113          	addi	sp,sp,248
  csrr t5,mscratch
   10288:	34002f73          	csrr	t5,mscratch
  mret
   1028c:	30200073          	mret

0000000000010290 <handle_exception>:


handle_exception:
  # All registers are invalid after riscv-tests finished!!
  csrr sp, 0x7b3          # restore dedicated stack region from dscratch1 dregister
   10290:	7b302173          	csrr	sp,0x7b3
  jal exception_handler_c
   10294:	37e000ef          	jal	ra,10612 <exception_handler_c>
  mret
   10298:	30200073          	mret
   1029c:	0000                	unimp
   1029e:	0000                	unimp
	...

00000000000102a2 <fw_get_cpuid>:

uint64_t get_dev_bar(uint16_t vid, uint16_t did);

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
   102a2:	1101                	addi	sp,sp,-32
   102a4:	ec22                	sd	s0,24(sp)
   102a6:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
   102a8:	f14027f3          	csrr	a5,mhartid
   102ac:	fef42623          	sw	a5,-20(s0)
    return ret;
   102b0:	fec42783          	lw	a5,-20(s0)
}
   102b4:	853e                	mv	a0,a5
   102b6:	6462                	ld	s0,24(sp)
   102b8:	6105                	addi	sp,sp,32
   102ba:	8082                	ret

00000000000102bc <led_set>:

void led_set(int output) {
   102bc:	1101                	addi	sp,sp,-32
   102be:	ec22                	sd	s0,24(sp)
   102c0:	1000                	addi	s0,sp,32
   102c2:	87aa                	mv	a5,a0
   102c4:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->output_val = (output << 4);
   102c8:	fec42783          	lw	a5,-20(s0)
   102cc:	0047979b          	slliw	a5,a5,0x4
   102d0:	0007871b          	sext.w	a4,a5
   102d4:	100607b7          	lui	a5,0x10060
   102d8:	2701                	sext.w	a4,a4
   102da:	c7d8                	sw	a4,12(a5)
}
   102dc:	0001                	nop
   102de:	6462                	ld	s0,24(sp)
   102e0:	6105                	addi	sp,sp,32
   102e2:	8082                	ret

00000000000102e4 <get_dip>:

int get_dip(int idx) {
   102e4:	7179                	addi	sp,sp,-48
   102e6:	f422                	sd	s0,40(sp)
   102e8:	1800                	addi	s0,sp,48
   102ea:	87aa                	mv	a5,a0
   102ec:	fcf42e23          	sw	a5,-36(s0)
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val >> idx;
   102f0:	100607b7          	lui	a5,0x10060
   102f4:	439c                	lw	a5,0(a5)
   102f6:	0007871b          	sext.w	a4,a5
   102fa:	fdc42783          	lw	a5,-36(s0)
   102fe:	00f757bb          	srlw	a5,a4,a5
   10302:	2781                	sext.w	a5,a5
   10304:	fef42623          	sw	a5,-20(s0)
    return dip & 1;
   10308:	fec42783          	lw	a5,-20(s0)
   1030c:	8b85                	andi	a5,a5,1
   1030e:	2781                	sext.w	a5,a5
}
   10310:	853e                	mv	a0,a5
   10312:	7422                	ld	s0,40(sp)
   10314:	6145                	addi	sp,sp,48
   10316:	8082                	ret

0000000000010318 <get_dips>:

int get_dips() {
   10318:	1101                	addi	sp,sp,-32
   1031a:	ec22                	sd	s0,24(sp)
   1031c:	1000                	addi	s0,sp,32
    // [3:0] DIP pins
    int dip = ((gpio_map *)ADDR_BUS0_XSLV_GPIO)->input_val;
   1031e:	100607b7          	lui	a5,0x10060
   10322:	439c                	lw	a5,0(a5)
   10324:	2781                	sext.w	a5,a5
   10326:	fef42623          	sw	a5,-20(s0)
    return dip & 0xF;
   1032a:	fec42783          	lw	a5,-20(s0)
   1032e:	8bbd                	andi	a5,a5,15
   10330:	2781                	sext.w	a5,a5
}
   10332:	853e                	mv	a0,a5
   10334:	6462                	ld	s0,24(sp)
   10336:	6105                	addi	sp,sp,32
   10338:	8082                	ret

000000000001033a <copy_image>:



void copy_image() { 
   1033a:	7139                	addi	sp,sp,-64
   1033c:	fc06                	sd	ra,56(sp)
   1033e:	f822                	sd	s0,48(sp)
   10340:	0080                	addi	s0,sp,64
    uint32_t tech;
    uint64_t *fwrom = (uint64_t *)ADDR_BUS0_XSLV_FWIMAGE;
   10342:	090007b7          	lui	a5,0x9000
   10346:	fef43023          	sd	a5,-32(s0)
    uint64_t *sram = (uint64_t *)ADDR_BUS0_XSLV_SRAM;
   1034a:	080007b7          	lui	a5,0x8000
   1034e:	fcf43c23          	sd	a5,-40(s0)
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   10352:	100ff7b7          	lui	a5,0x100ff
   10356:	fcf43823          	sd	a5,-48(s0)

    /** 
     * Speed-up RTL simulation by skipping coping stage.
     * Or skip this stage to avoid rewritting of externally loaded image.
     */
    tech = pnp->tech & 0xFF;
   1035a:	fd043783          	ld	a5,-48(s0)
   1035e:	479c                	lw	a5,8(a5)
   10360:	0ff7f793          	andi	a5,a5,255
   10364:	fcf42623          	sw	a5,-52(s0)


    uint64_t qspi2 = ~0ull;
   10368:	57fd                	li	a5,-1
   1036a:	fef43423          	sd	a5,-24(s0)
    printf_uart("dip=%02x\r\n", get_dips());
   1036e:	00000097          	auipc	ra,0x0
   10372:	faa080e7          	jalr	-86(ra) # 10318 <get_dips>
   10376:	87aa                	mv	a5,a0
   10378:	85be                	mv	a1,a5
   1037a:	67c5                	lui	a5,0x11
   1037c:	6e078513          	addi	a0,a5,1760 # 116e0 <strnlen+0x1e>
   10380:	00001097          	auipc	ra,0x1
   10384:	b70080e7          	jalr	-1168(ra) # 10ef0 <printf_uart>
    if (get_dips() == 0xB) {
   10388:	00000097          	auipc	ra,0x0
   1038c:	f90080e7          	jalr	-112(ra) # 10318 <get_dips>
   10390:	87aa                	mv	a5,a0
   10392:	873e                	mv	a4,a5
   10394:	47ad                	li	a5,11
   10396:	04f71b63          	bne	a4,a5,103ec <copy_image+0xb2>
        // Load from SD-card
        qspi2 = get_dev_bar(VENDOR_GNSSSENSOR, GNSSSENSOR_SPI_FLASH);
   1039a:	07500593          	li	a1,117
   1039e:	0f100513          	li	a0,241
   103a2:	3fa000ef          	jal	ra,1079c <get_dev_bar>
   103a6:	fea43423          	sd	a0,-24(s0)
        if (qspi2 != ~0ull) {
   103aa:	fe843703          	ld	a4,-24(s0)
   103ae:	57fd                	li	a5,-1
   103b0:	02f70e63          	beq	a4,a5,103ec <copy_image+0xb2>
            print_uart("Select . .QSPI2\r\n", 17);
   103b4:	45c5                	li	a1,17
   103b6:	67c5                	lui	a5,0x11
   103b8:	6f078513          	addi	a0,a5,1776 # 116f0 <strnlen+0x2e>
   103bc:	00000097          	auipc	ra,0x0
   103c0:	558080e7          	jalr	1368(ra) # 10914 <print_uart>
            if (run_from_sdcard() == -1) {
   103c4:	00001097          	auipc	ra,0x1
   103c8:	002080e7          	jalr	2(ra) # 113c6 <run_from_sdcard>
   103cc:	87aa                	mv	a5,a0
   103ce:	873e                	mv	a4,a5
   103d0:	57fd                	li	a5,-1
   103d2:	00f71d63          	bne	a4,a5,103ec <copy_image+0xb2>
                print_uart("QSPI2. . .FAILED\r\n", 18);
   103d6:	45c9                	li	a1,18
   103d8:	67c5                	lui	a5,0x11
   103da:	70878513          	addi	a0,a5,1800 # 11708 <strnlen+0x46>
   103de:	00000097          	auipc	ra,0x0
   103e2:	536080e7          	jalr	1334(ra) # 10914 <print_uart>
                qspi2 = ~0ull;
   103e6:	57fd                	li	a5,-1
   103e8:	fef43423          	sd	a5,-24(s0)
            }
        }
    }

    if (qspi2 != ~0ull) {
   103ec:	fe843703          	ld	a4,-24(s0)
   103f0:	57fd                	li	a5,-1
   103f2:	02f71763          	bne	a4,a5,10420 <copy_image+0xe6>
        // Copy BSL from SD-card
    } else if (pnp->fwid == 0) {
   103f6:	fd043783          	ld	a5,-48(s0)
   103fa:	43dc                	lw	a5,4(a5)
   103fc:	e395                	bnez	a5,10420 <copy_image+0xe6>
        print_uart("Coping . .FWIMAGE\r\n", 19);
   103fe:	45cd                	li	a1,19
   10400:	67c5                	lui	a5,0x11
   10402:	72078513          	addi	a0,a5,1824 # 11720 <strnlen+0x5e>
   10406:	00000097          	auipc	ra,0x0
   1040a:	50e080e7          	jalr	1294(ra) # 10914 <print_uart>
        memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
   1040e:	000407b7          	lui	a5,0x40
   10412:	863e                	mv	a2,a5
   10414:	fe043583          	ld	a1,-32(s0)
   10418:	fd843503          	ld	a0,-40(s0)
   1041c:	1e6010ef          	jal	ra,11602 <memcpy>
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20211123;
   10420:	fd043783          	ld	a5,-48(s0)
   10424:	20211737          	lui	a4,0x20211
   10428:	1237071b          	addiw	a4,a4,291
   1042c:	c3d8                	sw	a4,4(a5)
}
   1042e:	0001                	nop
   10430:	70e2                	ld	ra,56(sp)
   10432:	7442                	ld	s0,48(sp)
   10434:	6121                	addi	sp,sp,64
   10436:	8082                	ret

0000000000010438 <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
   10438:	1141                	addi	sp,sp,-16
   1043a:	e422                	sd	s0,8(sp)
   1043c:	0800                	addi	s0,sp,16
            print_uart("HIGHCNT: ", 9);
            print_uart_hex(start);
            print_uart("\r\n", 2);
        }
    }*/
}
   1043e:	0001                	nop
   10440:	6422                	ld	s0,8(sp)
   10442:	0141                	addi	sp,sp,16
   10444:	8082                	ret

0000000000010446 <_init>:

void _init() {
   10446:	7139                	addi	sp,sp,-64
   10448:	fc06                	sd	ra,56(sp)
   1044a:	f822                	sd	s0,48(sp)
   1044c:	0080                	addi	s0,sp,64
    uint32_t tech;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   1044e:	100ff7b7          	lui	a5,0x100ff
   10452:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10456:	100107b7          	lui	a5,0x10010
   1045a:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_BUS0_XSLV_GPIO;
   1045e:	100607b7          	lui	a5,0x10060
   10462:	fcf43c23          	sd	a5,-40(s0)
    uart_txctrl_type txctrl;
    uart_rxctrl_type rxctrl;
  
    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    uint64_t t1 = 0x00000008;
   10466:	47a1                	li	a5,8
   10468:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mstatus, %0" : :"r"(t1));  // clear mie
   1046c:	fd043783          	ld	a5,-48(s0)
   10470:	3007b073          	csrc	mstatus,a5
    t1 = 0x00000800;
   10474:	6785                	lui	a5,0x1
   10476:	80078793          	addi	a5,a5,-2048 # 800 <_start-0xf800>
   1047a:	fcf43823          	sd	a5,-48(s0)
    asm("csrc mie, %0" : :"r"(t1));  // disable external irq from PLIC
   1047e:	fd043783          	ld	a5,-48(s0)
   10482:	3047b073          	csrc	mie,a5

    txctrl.v = 0;
   10486:	fc042423          	sw	zero,-56(s0)
    txctrl.b.txen = 1;
   1048a:	fc844783          	lbu	a5,-56(s0)
   1048e:	0017e793          	ori	a5,a5,1
   10492:	fcf40423          	sb	a5,-56(s0)
    rxctrl.v = 0;
   10496:	fc042023          	sw	zero,-64(s0)
    rxctrl.b.rxen = 1;
   1049a:	fc044783          	lbu	a5,-64(s0)
   1049e:	0017e793          	ori	a5,a5,1
   104a2:	fcf40023          	sb	a5,-64(s0)
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
   104a6:	fe043783          	ld	a5,-32(s0)
   104aa:	0ad00713          	li	a4,173
   104ae:	cf98                	sw	a4,24(a5)
    uart->txctrl = txctrl.v;
   104b0:	fc842783          	lw	a5,-56(s0)
   104b4:	0007871b          	sext.w	a4,a5
   104b8:	fe043783          	ld	a5,-32(s0)
   104bc:	c798                	sw	a4,8(a5)
    uart->rxctrl = rxctrl.v;
   104be:	fc042783          	lw	a5,-64(s0)
   104c2:	0007871b          	sext.w	a4,a5
   104c6:	fe043783          	ld	a5,-32(s0)
   104ca:	c7d8                	sw	a4,12(a5)

    gpio->input_en = 0xF;  // [3:0] input DIP; [11:4] output LEDs
   104cc:	fd843783          	ld	a5,-40(s0)
   104d0:	473d                	li	a4,15
   104d2:	c3d8                	sw	a4,4(a5)
    gpio->output_en = 0xFF0;  
   104d4:	fd843783          	ld	a5,-40(s0)
   104d8:	6705                	lui	a4,0x1
   104da:	3741                	addiw	a4,a4,-16
   104dc:	c798                	sw	a4,8(a5)

    led_set(0x01);
   104de:	4505                	li	a0,1
   104e0:	00000097          	auipc	ra,0x0
   104e4:	ddc080e7          	jalr	-548(ra) # 102bc <led_set>

    copy_image();
   104e8:	e53ff0ef          	jal	ra,1033a <copy_image>
    led_set(0x02);
   104ec:	4509                	li	a0,2
   104ee:	00000097          	auipc	ra,0x0
   104f2:	dce080e7          	jalr	-562(ra) # 102bc <led_set>

    print_uart("Boot . . .", 10);
   104f6:	45a9                	li	a1,10
   104f8:	67c5                	lui	a5,0x11
   104fa:	73878513          	addi	a0,a5,1848 # 11738 <strnlen+0x76>
   104fe:	00000097          	auipc	ra,0x0
   10502:	416080e7          	jalr	1046(ra) # 10914 <print_uart>
    print_uart("OK\r\n", 4);
   10506:	4591                	li	a1,4
   10508:	67c5                	lui	a5,0x11
   1050a:	74878513          	addi	a0,a5,1864 # 11748 <strnlen+0x86>
   1050e:	00000097          	auipc	ra,0x0
   10512:	406080e7          	jalr	1030(ra) # 10914 <print_uart>

    tech = (pnp->tech >> 24) & 0xff;
   10516:	fe843783          	ld	a5,-24(s0)
   1051a:	479c                	lw	a5,8(a5)
   1051c:	0187d79b          	srliw	a5,a5,0x18
   10520:	fcf42623          	sw	a5,-52(s0)
    led_set(tech);
   10524:	fcc42783          	lw	a5,-52(s0)
   10528:	853e                	mv	a0,a5
   1052a:	00000097          	auipc	ra,0x0
   1052e:	d92080e7          	jalr	-622(ra) # 102bc <led_set>
    led_set(0x03);
   10532:	450d                	li	a0,3
   10534:	00000097          	auipc	ra,0x0
   10538:	d88080e7          	jalr	-632(ra) # 102bc <led_set>
}
   1053c:	0001                	nop
   1053e:	70e2                	ld	ra,56(sp)
   10540:	7442                	ld	s0,48(sp)
   10542:	6121                	addi	sp,sp,64
   10544:	8082                	ret

0000000000010546 <main>:

/** Not used actually */
int main() {
   10546:	1141                	addi	sp,sp,-16
   10548:	e422                	sd	s0,8(sp)
   1054a:	0800                	addi	s0,sp,16
    while (1) {}
   1054c:	a001                	j	1054c <main+0x6>

000000000001054e <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
   1054e:	1101                	addi	sp,sp,-32
   10550:	ec22                	sd	s0,24(sp)
   10552:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
   10554:	342027f3          	csrr	a5,mcause
   10558:	fef42623          	sw	a5,-20(s0)
    return ret;
   1055c:	fec42783          	lw	a5,-20(s0)
}
   10560:	853e                	mv	a0,a5
   10562:	6462                	ld	s0,24(sp)
   10564:	6105                	addi	sp,sp,32
   10566:	8082                	ret

0000000000010568 <get_mepc>:

int get_mepc() {
   10568:	1101                	addi	sp,sp,-32
   1056a:	ec22                	sd	s0,24(sp)
   1056c:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
   1056e:	341027f3          	csrr	a5,mepc
   10572:	fef42623          	sw	a5,-20(s0)
    return ret;
   10576:	fec42783          	lw	a5,-20(s0)
}
   1057a:	853e                	mv	a0,a5
   1057c:	6462                	ld	s0,24(sp)
   1057e:	6105                	addi	sp,sp,32
   10580:	8082                	ret

0000000000010582 <env_call>:


void env_call(long long test_id) {
   10582:	7179                	addi	sp,sp,-48
   10584:	f406                	sd	ra,40(sp)
   10586:	f022                	sd	s0,32(sp)
   10588:	1800                	addi	s0,sp,48
   1058a:	fca43c23          	sd	a0,-40(s0)
    if (test_id != 0) {
   1058e:	fd843783          	ld	a5,-40(s0)
   10592:	c7bd                	beqz	a5,10600 <env_call+0x7e>
        int mbadaddr;
        print_uart("TEST_FAILED\r\n", 13);
   10594:	45b5                	li	a1,13
   10596:	67c5                	lui	a5,0x11
   10598:	75078513          	addi	a0,a5,1872 # 11750 <strnlen+0x8e>
   1059c:	00000097          	auipc	ra,0x0
   105a0:	378080e7          	jalr	888(ra) # 10914 <print_uart>
        print_uart("a0=", 3);
   105a4:	458d                	li	a1,3
   105a6:	67c5                	lui	a5,0x11
   105a8:	76078513          	addi	a0,a5,1888 # 11760 <strnlen+0x9e>
   105ac:	00000097          	auipc	ra,0x0
   105b0:	368080e7          	jalr	872(ra) # 10914 <print_uart>
        print_uart_hex(test_id);
   105b4:	fd843503          	ld	a0,-40(s0)
   105b8:	3ce000ef          	jal	ra,10986 <print_uart_hex>
        print_uart("\r\n", 2);
   105bc:	4589                	li	a1,2
   105be:	67c5                	lui	a5,0x11
   105c0:	76878513          	addi	a0,a5,1896 # 11768 <strnlen+0xa6>
   105c4:	00000097          	auipc	ra,0x0
   105c8:	350080e7          	jalr	848(ra) # 10914 <print_uart>

        asm("csrr %0, mbadaddr" : "=r" (mbadaddr));
   105cc:	343027f3          	csrr	a5,mbadaddr
   105d0:	fef42623          	sw	a5,-20(s0)
        print_uart("mbadaddr=", 9);
   105d4:	45a5                	li	a1,9
   105d6:	67c5                	lui	a5,0x11
   105d8:	77078513          	addi	a0,a5,1904 # 11770 <strnlen+0xae>
   105dc:	00000097          	auipc	ra,0x0
   105e0:	338080e7          	jalr	824(ra) # 10914 <print_uart>
        print_uart_hex(mbadaddr);
   105e4:	fec42783          	lw	a5,-20(s0)
   105e8:	853e                	mv	a0,a5
   105ea:	39c000ef          	jal	ra,10986 <print_uart_hex>
        print_uart("\r\n", 2);
   105ee:	4589                	li	a1,2
   105f0:	67c5                	lui	a5,0x11
   105f2:	76878513          	addi	a0,a5,1896 # 11768 <strnlen+0xa6>
   105f6:	00000097          	auipc	ra,0x0
   105fa:	31e080e7          	jalr	798(ra) # 10914 <print_uart>
   105fe:	a809                	j	10610 <env_call+0x8e>
    } else {
        print_uart("TEST_PASSED\r\n", 13);
   10600:	45b5                	li	a1,13
   10602:	67c5                	lui	a5,0x11
   10604:	78078513          	addi	a0,a5,1920 # 11780 <strnlen+0xbe>
   10608:	00000097          	auipc	ra,0x0
   1060c:	30c080e7          	jalr	780(ra) # 10914 <print_uart>
    }
    while (1) {}
   10610:	a001                	j	10610 <env_call+0x8e>

0000000000010612 <exception_handler_c>:
}

void exception_handler_c(long long arg) {
   10612:	7179                	addi	sp,sp,-48
   10614:	f406                	sd	ra,40(sp)
   10616:	f022                	sd	s0,32(sp)
   10618:	1800                	addi	s0,sp,48
   1061a:	fca43c23          	sd	a0,-40(s0)
    int mcause = get_mcause();
   1061e:	00000097          	auipc	ra,0x0
   10622:	f30080e7          	jalr	-208(ra) # 1054e <get_mcause>
   10626:	87aa                	mv	a5,a0
   10628:	fef42623          	sw	a5,-20(s0)

    switch (mcause) {
   1062c:	fec42783          	lw	a5,-20(s0)
   10630:	37e1                	addiw	a5,a5,-8
   10632:	0007871b          	sext.w	a4,a5
   10636:	4785                	li	a5,1
   10638:	00e7e963          	bltu	a5,a4,1064a <exception_handler_c+0x38>
    case 8:  // user env. call
    case 9:  // supervisor env. call
        env_call(arg);
   1063c:	fd843503          	ld	a0,-40(s0)
   10640:	00000097          	auipc	ra,0x0
   10644:	f42080e7          	jalr	-190(ra) # 10582 <env_call>
        return;
   10648:	a0b9                	j	10696 <exception_handler_c+0x84>
    default:;
    }

    print_uart("mcause:", 7);
   1064a:	459d                	li	a1,7
   1064c:	67c5                	lui	a5,0x11
   1064e:	79078513          	addi	a0,a5,1936 # 11790 <strnlen+0xce>
   10652:	2c2000ef          	jal	ra,10914 <print_uart>
    print_uart_hex(mcause);
   10656:	fec42783          	lw	a5,-20(s0)
   1065a:	853e                	mv	a0,a5
   1065c:	00000097          	auipc	ra,0x0
   10660:	32a080e7          	jalr	810(ra) # 10986 <print_uart_hex>
    print_uart(",mepc:", 6);
   10664:	4599                	li	a1,6
   10666:	67c5                	lui	a5,0x11
   10668:	79878513          	addi	a0,a5,1944 # 11798 <strnlen+0xd6>
   1066c:	2a8000ef          	jal	ra,10914 <print_uart>
    print_uart_hex(get_mepc());
   10670:	ef9ff0ef          	jal	ra,10568 <get_mepc>
   10674:	87aa                	mv	a5,a0
   10676:	853e                	mv	a0,a5
   10678:	00000097          	auipc	ra,0x0
   1067c:	30e080e7          	jalr	782(ra) # 10986 <print_uart_hex>
    print_uart("\r\n", 2);
   10680:	4589                	li	a1,2
   10682:	67c5                	lui	a5,0x11
   10684:	76878513          	addi	a0,a5,1896 # 11768 <strnlen+0xa6>
   10688:	28c000ef          	jal	ra,10914 <print_uart>

    /// Exception trap
    led_set(0xF0);
   1068c:	0f000513          	li	a0,240
   10690:	c2dff0ef          	jal	ra,102bc <led_set>
    while (1) {}
   10694:	a001                	j	10694 <exception_handler_c+0x82>
}
   10696:	70a2                	ld	ra,40(sp)
   10698:	7402                	ld	s0,32(sp)
   1069a:	6145                	addi	sp,sp,48
   1069c:	8082                	ret

000000000001069e <fatal_error>:

/** Fatal Error Handler can be used to transmit dump image
 *  or trigger watchdog
 */
void fatal_error() {
   1069e:	1141                	addi	sp,sp,-16
   106a0:	e406                	sd	ra,8(sp)
   106a2:	e022                	sd	s0,0(sp)
   106a4:	0800                	addi	s0,sp,16
    led_set(0xF0);
   106a6:	0f000513          	li	a0,240
   106aa:	00000097          	auipc	ra,0x0
   106ae:	c12080e7          	jalr	-1006(ra) # 102bc <led_set>
    print_uart("fatal_error()\r\n", 15);
   106b2:	45bd                	li	a1,15
   106b4:	67c5                	lui	a5,0x11
   106b6:	7a078513          	addi	a0,a5,1952 # 117a0 <strnlen+0xde>
   106ba:	00000097          	auipc	ra,0x0
   106be:	25a080e7          	jalr	602(ra) # 10914 <print_uart>
    while (1) {}
   106c2:	a001                	j	106c2 <fatal_error+0x24>

00000000000106c4 <plic_claim>:
}


uint32_t plic_claim(int ctxid) {
   106c4:	7179                	addi	sp,sp,-48
   106c6:	f422                	sd	s0,40(sp)
   106c8:	1800                	addi	s0,sp,48
   106ca:	87aa                	mv	a5,a0
   106cc:	fcf42e23          	sw	a5,-36(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   106d0:	0c0007b7          	lui	a5,0xc000
   106d4:	fef43423          	sd	a5,-24(s0)
    return p->ctx_prio[ctxid].claim_complete;
   106d8:	fe843703          	ld	a4,-24(s0)
   106dc:	fdc42783          	lw	a5,-36(s0)
   106e0:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee5d4>
   106e4:	07b2                	slli	a5,a5,0xc
   106e6:	97ba                	add	a5,a5,a4
   106e8:	43dc                	lw	a5,4(a5)
   106ea:	2781                	sext.w	a5,a5
}
   106ec:	853e                	mv	a0,a5
   106ee:	7422                	ld	s0,40(sp)
   106f0:	6145                	addi	sp,sp,48
   106f2:	8082                	ret

00000000000106f4 <plic_complete>:

void plic_complete(int ctxid, int irqid) {
   106f4:	7179                	addi	sp,sp,-48
   106f6:	f422                	sd	s0,40(sp)
   106f8:	1800                	addi	s0,sp,48
   106fa:	87aa                	mv	a5,a0
   106fc:	872e                	mv	a4,a1
   106fe:	fcf42e23          	sw	a5,-36(s0)
   10702:	87ba                	mv	a5,a4
   10704:	fcf42c23          	sw	a5,-40(s0)
    plic_map *p = (plic_map *)ADDR_BUS0_XSLV_PLIC;
   10708:	0c0007b7          	lui	a5,0xc000
   1070c:	fef43423          	sd	a5,-24(s0)
    p->ctx_prio[ctxid].claim_complete = irqid;
   10710:	fd842703          	lw	a4,-40(s0)
   10714:	fe843683          	ld	a3,-24(s0)
   10718:	fdc42783          	lw	a5,-36(s0)
   1071c:	20078793          	addi	a5,a5,512 # c000200 <_end+0xbfee5d4>
   10720:	07b2                	slli	a5,a5,0xc
   10722:	97b6                	add	a5,a5,a3
   10724:	c3d8                	sw	a4,4(a5)
}
   10726:	0001                	nop
   10728:	7422                	ld	s0,40(sp)
   1072a:	6145                	addi	sp,sp,48
   1072c:	8082                	ret

000000000001072e <interrupt_handler_c>:


long interrupt_handler_c(long cause, long epc, long long regs[32]) {
   1072e:	7139                	addi	sp,sp,-64
   10730:	fc06                	sd	ra,56(sp)
   10732:	f822                	sd	s0,48(sp)
   10734:	0080                	addi	s0,sp,64
   10736:	fca43c23          	sd	a0,-40(s0)
   1073a:	fcb43823          	sd	a1,-48(s0)
   1073e:	fcc43423          	sd	a2,-56(s0)
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    csr_mcause_type mcause;
    mcause.value = cause;
   10742:	fd843783          	ld	a5,-40(s0)
   10746:	fef43023          	sd	a5,-32(s0)

    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   1074a:	fe744783          	lbu	a5,-25(s0)
   1074e:	f807f793          	andi	a5,a5,-128
   10752:	0ff7f793          	andi	a5,a5,255
   10756:	cb85                	beqz	a5,10786 <interrupt_handler_c+0x58>
   10758:	fe043703          	ld	a4,-32(s0)
   1075c:	57fd                	li	a5,-1
   1075e:	8385                	srli	a5,a5,0x1
   10760:	8f7d                	and	a4,a4,a5
   10762:	47ad                	li	a5,11
   10764:	02f71163          	bne	a4,a5,10786 <interrupt_handler_c+0x58>
        // External M-Mode
        uint32_t irqid = plic_claim(0);
   10768:	4501                	li	a0,0
   1076a:	f5bff0ef          	jal	ra,106c4 <plic_claim>
   1076e:	87aa                	mv	a5,a0
   10770:	fef42623          	sw	a5,-20(s0)
        plic_complete(0, irqid);
   10774:	fec42783          	lw	a5,-20(s0)
   10778:	85be                	mv	a1,a5
   1077a:	4501                	li	a0,0
   1077c:	00000097          	auipc	ra,0x0
   10780:	f78080e7          	jalr	-136(ra) # 106f4 <plic_complete>
    if (mcause.bits.irq == 0x1 && mcause.bits.code == 11) {
   10784:	a029                	j	1078e <interrupt_handler_c+0x60>
    } else {
        fatal_error();
   10786:	00000097          	auipc	ra,0x0
   1078a:	f18080e7          	jalr	-232(ra) # 1069e <fatal_error>
    }

    return epc;
   1078e:	fd043783          	ld	a5,-48(s0)
}
   10792:	853e                	mv	a0,a5
   10794:	70e2                	ld	ra,56(sp)
   10796:	7442                	ld	s0,48(sp)
   10798:	6121                	addi	sp,sp,64
   1079a:	8082                	ret

000000000001079c <get_dev_bar>:
typedef union slave_cfg_type {
    slave_cfg_bits_type u;
    uint64_t v[2];
} slave_cfg_type;

uint64_t get_dev_bar(uint16_t vid, uint16_t did) {
   1079c:	711d                	addi	sp,sp,-96
   1079e:	eca2                	sd	s0,88(sp)
   107a0:	1080                	addi	s0,sp,96
   107a2:	87aa                	mv	a5,a0
   107a4:	872e                	mv	a4,a1
   107a6:	faf41723          	sh	a5,-82(s0)
   107aa:	87ba                	mv	a5,a4
   107ac:	faf41623          	sh	a5,-84(s0)
    master_cfg_type mcfg;
    slave_cfg_type scfg;
    pnp_map *pnp = (pnp_map *)ADDR_BUS0_XSLV_PNP;
   107b0:	100ff7b7          	lui	a5,0x100ff
   107b4:	fcf43c23          	sd	a5,-40(s0)
    int slv_total = (pnp->tech >> 8) & 0xFF;
   107b8:	fd843783          	ld	a5,-40(s0)
   107bc:	479c                	lw	a5,8(a5)
   107be:	0087d79b          	srliw	a5,a5,0x8
   107c2:	2781                	sext.w	a5,a5
   107c4:	2781                	sext.w	a5,a5
   107c6:	0ff7f793          	andi	a5,a5,255
   107ca:	fcf42a23          	sw	a5,-44(s0)
    int mst_total = (pnp->tech >> 16) & 0xFF;
   107ce:	fd843783          	ld	a5,-40(s0)
   107d2:	479c                	lw	a5,8(a5)
   107d4:	0107d79b          	srliw	a5,a5,0x10
   107d8:	2781                	sext.w	a5,a5
   107da:	2781                	sext.w	a5,a5
   107dc:	0ff7f793          	andi	a5,a5,255
   107e0:	fcf42823          	sw	a5,-48(s0)
    int off = 0;
   107e4:	fe042623          	sw	zero,-20(s0)

    // skip all masters
    for (int i = 0; i < mst_total; i++) {
   107e8:	fe042423          	sw	zero,-24(s0)
   107ec:	a82d                	j	10826 <get_dev_bar+0x8a>
        mcfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   107ee:	fec42783          	lw	a5,-20(s0)
   107f2:	04078793          	addi	a5,a5,64 # 100ff040 <_end+0x100ed414>
   107f6:	fd843703          	ld	a4,-40(s0)
   107fa:	97ba                	add	a5,a5,a4
   107fc:	639c                	ld	a5,0(a5)
   107fe:	fcf43423          	sd	a5,-56(s0)
        off += pnp->cfg_table[off];
   10802:	fd843703          	ld	a4,-40(s0)
   10806:	fec42783          	lw	a5,-20(s0)
   1080a:	97ba                	add	a5,a5,a4
   1080c:	0407c783          	lbu	a5,64(a5)
   10810:	2781                	sext.w	a5,a5
   10812:	fec42703          	lw	a4,-20(s0)
   10816:	9fb9                	addw	a5,a5,a4
   10818:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < mst_total; i++) {
   1081c:	fe842783          	lw	a5,-24(s0)
   10820:	2785                	addiw	a5,a5,1
   10822:	fef42423          	sw	a5,-24(s0)
   10826:	fe842703          	lw	a4,-24(s0)
   1082a:	fd042783          	lw	a5,-48(s0)
   1082e:	2701                	sext.w	a4,a4
   10830:	2781                	sext.w	a5,a5
   10832:	faf74ee3          	blt	a4,a5,107ee <get_dev_bar+0x52>
    }

    for (int i = 0; i < slv_total; i++) {
   10836:	fe042223          	sw	zero,-28(s0)
   1083a:	a8b5                	j	108b6 <get_dev_bar+0x11a>
        scfg.v[0] = *(uint64_t *)&pnp->cfg_table[off];
   1083c:	fec42783          	lw	a5,-20(s0)
   10840:	04078793          	addi	a5,a5,64
   10844:	fd843703          	ld	a4,-40(s0)
   10848:	97ba                	add	a5,a5,a4
   1084a:	639c                	ld	a5,0(a5)
   1084c:	faf43c23          	sd	a5,-72(s0)
        scfg.v[1] = *(uint64_t *)&pnp->cfg_table[off + 8];
   10850:	fec42783          	lw	a5,-20(s0)
   10854:	27a1                	addiw	a5,a5,8
   10856:	2781                	sext.w	a5,a5
   10858:	04078793          	addi	a5,a5,64
   1085c:	fd843703          	ld	a4,-40(s0)
   10860:	97ba                	add	a5,a5,a4
   10862:	639c                	ld	a5,0(a5)
   10864:	fcf43023          	sd	a5,-64(s0)

        if (scfg.u.vid == vid && scfg.u.did == did) {
   10868:	fbe45783          	lhu	a5,-66(s0)
   1086c:	fae45703          	lhu	a4,-82(s0)
   10870:	2701                	sext.w	a4,a4
   10872:	2781                	sext.w	a5,a5
   10874:	00f71f63          	bne	a4,a5,10892 <get_dev_bar+0xf6>
   10878:	fbc45783          	lhu	a5,-68(s0)
   1087c:	fac45703          	lhu	a4,-84(s0)
   10880:	2701                	sext.w	a4,a4
   10882:	2781                	sext.w	a5,a5
   10884:	00f71763          	bne	a4,a5,10892 <get_dev_bar+0xf6>
            return scfg.u.xaddr;
   10888:	fc442783          	lw	a5,-60(s0)
   1088c:	1782                	slli	a5,a5,0x20
   1088e:	9381                	srli	a5,a5,0x20
   10890:	a825                	j	108c8 <get_dev_bar+0x12c>
        }
        off += pnp->cfg_table[off];
   10892:	fd843703          	ld	a4,-40(s0)
   10896:	fec42783          	lw	a5,-20(s0)
   1089a:	97ba                	add	a5,a5,a4
   1089c:	0407c783          	lbu	a5,64(a5)
   108a0:	2781                	sext.w	a5,a5
   108a2:	fec42703          	lw	a4,-20(s0)
   108a6:	9fb9                	addw	a5,a5,a4
   108a8:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < slv_total; i++) {
   108ac:	fe442783          	lw	a5,-28(s0)
   108b0:	2785                	addiw	a5,a5,1
   108b2:	fef42223          	sw	a5,-28(s0)
   108b6:	fe442703          	lw	a4,-28(s0)
   108ba:	fd442783          	lw	a5,-44(s0)
   108be:	2701                	sext.w	a4,a4
   108c0:	2781                	sext.w	a5,a5
   108c2:	f6f74de3          	blt	a4,a5,1083c <get_dev_bar+0xa0>
    }

    return ~0ull;
   108c6:	57fd                	li	a5,-1
}
   108c8:	853e                	mv	a0,a5
   108ca:	6466                	ld	s0,88(sp)
   108cc:	6125                	addi	sp,sp,96
   108ce:	8082                	ret
	...

00000000000108d2 <print_char>:

#include <inttypes.h>
#include "axi_maps.h"
#include "uart.h"

int print_char(int ch) {
   108d2:	7179                	addi	sp,sp,-48
   108d4:	f422                	sd	s0,40(sp)
   108d6:	1800                	addi	s0,sp,48
   108d8:	87aa                	mv	a5,a0
   108da:	fcf42e23          	sw	a5,-36(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   108de:	100107b7          	lui	a5,0x10010
   108e2:	fef43423          	sd	a5,-24(s0)
    uart_txdata_type txdata;
    do {
        txdata.v = uart->txdata;
   108e6:	fe843783          	ld	a5,-24(s0)
   108ea:	439c                	lw	a5,0(a5)
   108ec:	2781                	sext.w	a5,a5
   108ee:	fef42023          	sw	a5,-32(s0)
    } while (txdata.b.full);
   108f2:	fe344783          	lbu	a5,-29(s0)
   108f6:	f807f793          	andi	a5,a5,-128
   108fa:	0ff7f793          	andi	a5,a5,255
   108fe:	f7e5                	bnez	a5,108e6 <print_char+0x14>
    uart->txdata = ch;
   10900:	fdc42703          	lw	a4,-36(s0)
   10904:	fe843783          	ld	a5,-24(s0)
   10908:	c398                	sw	a4,0(a5)
    return 0;
   1090a:	4781                	li	a5,0
}
   1090c:	853e                	mv	a0,a5
   1090e:	7422                	ld	s0,40(sp)
   10910:	6145                	addi	sp,sp,48
   10912:	8082                	ret

0000000000010914 <print_uart>:

void print_uart(const char *buf, int sz) {
   10914:	7139                	addi	sp,sp,-64
   10916:	fc22                	sd	s0,56(sp)
   10918:	0080                	addi	s0,sp,64
   1091a:	fca43423          	sd	a0,-56(s0)
   1091e:	87ae                	mv	a5,a1
   10920:	fcf42223          	sw	a5,-60(s0)
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10924:	100107b7          	lui	a5,0x10010
   10928:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < sz; i++) {
   1092c:	fe042623          	sw	zero,-20(s0)
   10930:	a83d                	j	1096e <print_uart+0x5a>
        do {
            txdata.v = uart->txdata;
   10932:	fe043783          	ld	a5,-32(s0)
   10936:	439c                	lw	a5,0(a5)
   10938:	2781                	sext.w	a5,a5
   1093a:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);
   1093e:	fdb44783          	lbu	a5,-37(s0)
   10942:	f807f793          	andi	a5,a5,-128
   10946:	0ff7f793          	andi	a5,a5,255
   1094a:	f7e5                	bnez	a5,10932 <print_uart+0x1e>
        uart->txdata = buf[i];
   1094c:	fec42783          	lw	a5,-20(s0)
   10950:	fc843703          	ld	a4,-56(s0)
   10954:	97ba                	add	a5,a5,a4
   10956:	0007c783          	lbu	a5,0(a5) # 10010000 <_end+0xfffe3d4>
   1095a:	0007871b          	sext.w	a4,a5
   1095e:	fe043783          	ld	a5,-32(s0)
   10962:	c398                	sw	a4,0(a5)
    for (int i = 0; i < sz; i++) {
   10964:	fec42783          	lw	a5,-20(s0)
   10968:	2785                	addiw	a5,a5,1
   1096a:	fef42623          	sw	a5,-20(s0)
   1096e:	fec42703          	lw	a4,-20(s0)
   10972:	fc442783          	lw	a5,-60(s0)
   10976:	2701                	sext.w	a4,a4
   10978:	2781                	sext.w	a5,a5
   1097a:	faf74ce3          	blt	a4,a5,10932 <print_uart+0x1e>
    }
}
   1097e:	0001                	nop
   10980:	7462                	ld	s0,56(sp)
   10982:	6121                	addi	sp,sp,64
   10984:	8082                	ret

0000000000010986 <print_uart_hex>:

void print_uart_hex(long val) {
   10986:	7139                	addi	sp,sp,-64
   10988:	fc22                	sd	s0,56(sp)
   1098a:	0080                	addi	s0,sp,64
   1098c:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_BUS0_XSLV_UART0;
   10990:	100107b7          	lui	a5,0x10010
   10994:	fef43023          	sd	a5,-32(s0)
    uart_txdata_type txdata;
    for (int i = 0; i < 16; i++) {
   10998:	fe042423          	sw	zero,-24(s0)
   1099c:	a041                	j	10a1c <print_uart_hex+0x96>
        do {
            txdata.v = uart->txdata;
   1099e:	fe043783          	ld	a5,-32(s0)
   109a2:	439c                	lw	a5,0(a5)
   109a4:	2781                	sext.w	a5,a5
   109a6:	fcf42c23          	sw	a5,-40(s0)
        } while (txdata.b.full);;
   109aa:	fdb44783          	lbu	a5,-37(s0)
   109ae:	f807f793          	andi	a5,a5,-128
   109b2:	0ff7f793          	andi	a5,a5,255
   109b6:	f7e5                	bnez	a5,1099e <print_uart_hex+0x18>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
   109b8:	473d                	li	a4,15
   109ba:	fe842783          	lw	a5,-24(s0)
   109be:	40f707bb          	subw	a5,a4,a5
   109c2:	2781                	sext.w	a5,a5
   109c4:	0027979b          	slliw	a5,a5,0x2
   109c8:	2781                	sext.w	a5,a5
   109ca:	fc843703          	ld	a4,-56(s0)
   109ce:	40f757b3          	sra	a5,a4,a5
   109d2:	0ff7f793          	andi	a5,a5,255
   109d6:	8bbd                	andi	a5,a5,15
   109d8:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
   109dc:	fdf44783          	lbu	a5,-33(s0)
   109e0:	0ff7f713          	andi	a4,a5,255
   109e4:	47a5                	li	a5,9
   109e6:	00e7e963          	bltu	a5,a4,109f8 <print_uart_hex+0x72>
            s = t + '0';
   109ea:	fdf44783          	lbu	a5,-33(s0)
   109ee:	0307879b          	addiw	a5,a5,48
   109f2:	fef407a3          	sb	a5,-17(s0)
   109f6:	a039                	j	10a04 <print_uart_hex+0x7e>
        } else {
            s = (t - 10) + 'a';
   109f8:	fdf44783          	lbu	a5,-33(s0)
   109fc:	0577879b          	addiw	a5,a5,87
   10a00:	fef407a3          	sb	a5,-17(s0)
        }
        uart->txdata = s;
   10a04:	fef44783          	lbu	a5,-17(s0)
   10a08:	0007871b          	sext.w	a4,a5
   10a0c:	fe043783          	ld	a5,-32(s0)
   10a10:	c398                	sw	a4,0(a5)
    for (int i = 0; i < 16; i++) {
   10a12:	fe842783          	lw	a5,-24(s0)
   10a16:	2785                	addiw	a5,a5,1
   10a18:	fef42423          	sw	a5,-24(s0)
   10a1c:	fe842783          	lw	a5,-24(s0)
   10a20:	0007871b          	sext.w	a4,a5
   10a24:	47bd                	li	a5,15
   10a26:	f6e7dce3          	ble	a4,a5,1099e <print_uart_hex+0x18>
    }
}
   10a2a:	0001                	nop
   10a2c:	7462                	ld	s0,56(sp)
   10a2e:	6121                	addi	sp,sp,64
   10a30:	8082                	ret

0000000000010a32 <printnum>:

void printnum(uint64_t num, int base, int width, int padc) {
   10a32:	7119                	addi	sp,sp,-128
   10a34:	fc86                	sd	ra,120(sp)
   10a36:	f8a2                	sd	s0,112(sp)
   10a38:	0100                	addi	s0,sp,128
   10a3a:	f8a43c23          	sd	a0,-104(s0)
   10a3e:	87ae                	mv	a5,a1
   10a40:	8736                	mv	a4,a3
   10a42:	f8f42a23          	sw	a5,-108(s0)
   10a46:	87b2                	mv	a5,a2
   10a48:	f8f42823          	sw	a5,-112(s0)
   10a4c:	87ba                	mv	a5,a4
   10a4e:	f8f42623          	sw	a5,-116(s0)
    int pos = 0;
   10a52:	fe042623          	sw	zero,-20(s0)
    uint8_t digs[64];

    while (1) {
        digs[pos++] = num % base;
   10a56:	f9442783          	lw	a5,-108(s0)
   10a5a:	f9843703          	ld	a4,-104(s0)
   10a5e:	02f776b3          	remu	a3,a4,a5
   10a62:	fec42783          	lw	a5,-20(s0)
   10a66:	0017871b          	addiw	a4,a5,1
   10a6a:	fee42623          	sw	a4,-20(s0)
   10a6e:	0ff6f713          	andi	a4,a3,255
   10a72:	ff040693          	addi	a3,s0,-16
   10a76:	97b6                	add	a5,a5,a3
   10a78:	fae78c23          	sb	a4,-72(a5) # 1000ffb8 <_end+0xfffe38c>
        if (num < base) {
   10a7c:	f9442783          	lw	a5,-108(s0)
   10a80:	f9843703          	ld	a4,-104(s0)
   10a84:	00f76b63          	bltu	a4,a5,10a9a <printnum+0x68>
            break;
        }
        num /= base;
   10a88:	f9442783          	lw	a5,-108(s0)
   10a8c:	f9843703          	ld	a4,-104(s0)
   10a90:	02f757b3          	divu	a5,a4,a5
   10a94:	f8f43c23          	sd	a5,-104(s0)
        digs[pos++] = num % base;
   10a98:	bf7d                	j	10a56 <printnum+0x24>
            break;
   10a9a:	0001                	nop
    }

    while (width-- > pos) {
   10a9c:	a801                	j	10aac <printnum+0x7a>
        print_char(padc);
   10a9e:	f8c42783          	lw	a5,-116(s0)
   10aa2:	853e                	mv	a0,a5
   10aa4:	00000097          	auipc	ra,0x0
   10aa8:	e2e080e7          	jalr	-466(ra) # 108d2 <print_char>
    while (width-- > pos) {
   10aac:	f9042783          	lw	a5,-112(s0)
   10ab0:	fff7871b          	addiw	a4,a5,-1
   10ab4:	f8e42823          	sw	a4,-112(s0)
   10ab8:	fec42703          	lw	a4,-20(s0)
   10abc:	2701                	sext.w	a4,a4
   10abe:	fef740e3          	blt	a4,a5,10a9e <printnum+0x6c>
    }


    while (pos-- > 0) {
   10ac2:	a089                	j	10b04 <printnum+0xd2>
        print_char(digs[pos] + (digs[pos] >= 10 ? 'a' - 10 : '0'));
   10ac4:	fec42783          	lw	a5,-20(s0)
   10ac8:	ff040713          	addi	a4,s0,-16
   10acc:	97ba                	add	a5,a5,a4
   10ace:	fb87c783          	lbu	a5,-72(a5)
   10ad2:	0007871b          	sext.w	a4,a5
   10ad6:	fec42783          	lw	a5,-20(s0)
   10ada:	ff040693          	addi	a3,s0,-16
   10ade:	97b6                	add	a5,a5,a3
   10ae0:	fb87c783          	lbu	a5,-72(a5)
   10ae4:	86be                	mv	a3,a5
   10ae6:	47a5                	li	a5,9
   10ae8:	00d7f563          	bleu	a3,a5,10af2 <printnum+0xc0>
   10aec:	05700793          	li	a5,87
   10af0:	a019                	j	10af6 <printnum+0xc4>
   10af2:	03000793          	li	a5,48
   10af6:	9fb9                	addw	a5,a5,a4
   10af8:	2781                	sext.w	a5,a5
   10afa:	853e                	mv	a0,a5
   10afc:	00000097          	auipc	ra,0x0
   10b00:	dd6080e7          	jalr	-554(ra) # 108d2 <print_char>
    while (pos-- > 0) {
   10b04:	fec42783          	lw	a5,-20(s0)
   10b08:	fff7871b          	addiw	a4,a5,-1
   10b0c:	fee42623          	sw	a4,-20(s0)
   10b10:	faf04ae3          	bgtz	a5,10ac4 <printnum+0x92>
    }
}
   10b14:	0001                	nop
   10b16:	70e6                	ld	ra,120(sp)
   10b18:	7446                	ld	s0,112(sp)
   10b1a:	6109                	addi	sp,sp,128
   10b1c:	8082                	ret

0000000000010b1e <getuint>:

static uint64_t getuint(va_list *ap, int lflag) {
   10b1e:	1101                	addi	sp,sp,-32
   10b20:	ec22                	sd	s0,24(sp)
   10b22:	1000                	addi	s0,sp,32
   10b24:	fea43423          	sd	a0,-24(s0)
   10b28:	87ae                	mv	a5,a1
   10b2a:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10b2e:	fe442783          	lw	a5,-28(s0)
   10b32:	0007871b          	sext.w	a4,a5
   10b36:	4785                	li	a5,1
   10b38:	00e7dc63          	ble	a4,a5,10b50 <getuint+0x32>
        return va_arg(*ap, unsigned long long);
   10b3c:	fe843783          	ld	a5,-24(s0)
   10b40:	639c                	ld	a5,0(a5)
   10b42:	00878693          	addi	a3,a5,8
   10b46:	fe843703          	ld	a4,-24(s0)
   10b4a:	e314                	sd	a3,0(a4)
   10b4c:	639c                	ld	a5,0(a5)
   10b4e:	a815                	j	10b82 <getuint+0x64>
    } else if (lflag) {
   10b50:	fe442783          	lw	a5,-28(s0)
   10b54:	2781                	sext.w	a5,a5
   10b56:	cb99                	beqz	a5,10b6c <getuint+0x4e>
        return va_arg(*ap, unsigned long);
   10b58:	fe843783          	ld	a5,-24(s0)
   10b5c:	639c                	ld	a5,0(a5)
   10b5e:	00878693          	addi	a3,a5,8
   10b62:	fe843703          	ld	a4,-24(s0)
   10b66:	e314                	sd	a3,0(a4)
   10b68:	639c                	ld	a5,0(a5)
   10b6a:	a821                	j	10b82 <getuint+0x64>
    }
    return va_arg(*ap, unsigned int);
   10b6c:	fe843783          	ld	a5,-24(s0)
   10b70:	639c                	ld	a5,0(a5)
   10b72:	00878693          	addi	a3,a5,8
   10b76:	fe843703          	ld	a4,-24(s0)
   10b7a:	e314                	sd	a3,0(a4)
   10b7c:	439c                	lw	a5,0(a5)
   10b7e:	1782                	slli	a5,a5,0x20
   10b80:	9381                	srli	a5,a5,0x20
}
   10b82:	853e                	mv	a0,a5
   10b84:	6462                	ld	s0,24(sp)
   10b86:	6105                	addi	sp,sp,32
   10b88:	8082                	ret

0000000000010b8a <getint>:

static int64_t getint(va_list *ap, int lflag) {
   10b8a:	1101                	addi	sp,sp,-32
   10b8c:	ec22                	sd	s0,24(sp)
   10b8e:	1000                	addi	s0,sp,32
   10b90:	fea43423          	sd	a0,-24(s0)
   10b94:	87ae                	mv	a5,a1
   10b96:	fef42223          	sw	a5,-28(s0)
    if (lflag >= 2) {
   10b9a:	fe442783          	lw	a5,-28(s0)
   10b9e:	0007871b          	sext.w	a4,a5
   10ba2:	4785                	li	a5,1
   10ba4:	00e7dc63          	ble	a4,a5,10bbc <getint+0x32>
        return va_arg(*ap, long long);
   10ba8:	fe843783          	ld	a5,-24(s0)
   10bac:	639c                	ld	a5,0(a5)
   10bae:	00878693          	addi	a3,a5,8
   10bb2:	fe843703          	ld	a4,-24(s0)
   10bb6:	e314                	sd	a3,0(a4)
   10bb8:	639c                	ld	a5,0(a5)
   10bba:	a805                	j	10bea <getint+0x60>
    } else if (lflag) {
   10bbc:	fe442783          	lw	a5,-28(s0)
   10bc0:	2781                	sext.w	a5,a5
   10bc2:	cb99                	beqz	a5,10bd8 <getint+0x4e>
        return va_arg(*ap, long);
   10bc4:	fe843783          	ld	a5,-24(s0)
   10bc8:	639c                	ld	a5,0(a5)
   10bca:	00878693          	addi	a3,a5,8
   10bce:	fe843703          	ld	a4,-24(s0)
   10bd2:	e314                	sd	a3,0(a4)
   10bd4:	639c                	ld	a5,0(a5)
   10bd6:	a811                	j	10bea <getint+0x60>
    }
    return va_arg(*ap, int);
   10bd8:	fe843783          	ld	a5,-24(s0)
   10bdc:	639c                	ld	a5,0(a5)
   10bde:	00878693          	addi	a3,a5,8
   10be2:	fe843703          	ld	a4,-24(s0)
   10be6:	e314                	sd	a3,0(a4)
   10be8:	439c                	lw	a5,0(a5)
}
   10bea:	853e                	mv	a0,a5
   10bec:	6462                	ld	s0,24(sp)
   10bee:	6105                	addi	sp,sp,32
   10bf0:	8082                	ret

0000000000010bf2 <vprintfmt_lib>:

void vprintfmt_lib(const char *fmt,
                   va_list ap) {
   10bf2:	711d                	addi	sp,sp,-96
   10bf4:	ec86                	sd	ra,88(sp)
   10bf6:	e8a2                	sd	s0,80(sp)
   10bf8:	e4a6                	sd	s1,72(sp)
   10bfa:	e0ca                	sd	s2,64(sp)
   10bfc:	1080                	addi	s0,sp,96
   10bfe:	faa43423          	sd	a0,-88(s0)
   10c02:	fab43023          	sd	a1,-96(s0)
    unsigned long long num;
    int base, lflag, width, precision;// altflag;
    char padc;

    while (1) {
        while ((ch = *(unsigned char *) fmt) != '%') {
   10c06:	a819                	j	10c1c <vprintfmt_lib+0x2a>
            if (ch == '\0') {
   10c08:	2c048d63          	beqz	s1,10ee2 <vprintfmt_lib+0x2f0>
                return;
            }
            fmt++;
   10c0c:	fa843783          	ld	a5,-88(s0)
   10c10:	0785                	addi	a5,a5,1
   10c12:	faf43423          	sd	a5,-88(s0)
            print_char(ch);
   10c16:	8526                	mv	a0,s1
   10c18:	cbbff0ef          	jal	ra,108d2 <print_char>
        while ((ch = *(unsigned char *) fmt) != '%') {
   10c1c:	fa843783          	ld	a5,-88(s0)
   10c20:	0007c783          	lbu	a5,0(a5)
   10c24:	0007849b          	sext.w	s1,a5
   10c28:	8726                	mv	a4,s1
   10c2a:	02500793          	li	a5,37
   10c2e:	fcf71de3          	bne	a4,a5,10c08 <vprintfmt_lib+0x16>
        }
        fmt++;
   10c32:	fa843783          	ld	a5,-88(s0)
   10c36:	0785                	addi	a5,a5,1
   10c38:	faf43423          	sd	a5,-88(s0)

        // Process a %-escape sequence
        last_fmt = fmt;
   10c3c:	fa843783          	ld	a5,-88(s0)
   10c40:	faf43c23          	sd	a5,-72(s0)
        padc = ' ';
   10c44:	02000793          	li	a5,32
   10c48:	fcf403a3          	sb	a5,-57(s0)
        width = -1;
   10c4c:	57fd                	li	a5,-1
   10c4e:	fcf42623          	sw	a5,-52(s0)
        precision = -1;
   10c52:	57fd                	li	a5,-1
   10c54:	fcf42423          	sw	a5,-56(s0)
        lflag = 0;
   10c58:	fc042823          	sw	zero,-48(s0)
        //altflag = 0;
reswitch:
        switch (ch = *(unsigned char *) fmt++) {
   10c5c:	fa843783          	ld	a5,-88(s0)
   10c60:	00178713          	addi	a4,a5,1
   10c64:	fae43423          	sd	a4,-88(s0)
   10c68:	0007c783          	lbu	a5,0(a5)
   10c6c:	0007849b          	sext.w	s1,a5
   10c70:	fdd4869b          	addiw	a3,s1,-35
   10c74:	0006871b          	sext.w	a4,a3
   10c78:	05500793          	li	a5,85
   10c7c:	24e7e963          	bltu	a5,a4,10ece <vprintfmt_lib+0x2dc>
   10c80:	02069793          	slli	a5,a3,0x20
   10c84:	9381                	srli	a5,a5,0x20
   10c86:	00279713          	slli	a4,a5,0x2
   10c8a:	67c5                	lui	a5,0x11
   10c8c:	7b878793          	addi	a5,a5,1976 # 117b8 <strnlen+0xf6>
   10c90:	97ba                	add	a5,a5,a4
   10c92:	439c                	lw	a5,0(a5)
   10c94:	8782                	jr	a5
        // flag to pad on the right
        case '-':
            padc = '-';
   10c96:	02d00793          	li	a5,45
   10c9a:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10c9e:	bf7d                	j	10c5c <vprintfmt_lib+0x6a>
      
        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
   10ca0:	03000793          	li	a5,48
   10ca4:	fcf403a3          	sb	a5,-57(s0)
            goto reswitch;
   10ca8:	bf55                	j	10c5c <vprintfmt_lib+0x6a>
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            for (precision = 0; ; ++fmt) {
   10caa:	fc042423          	sw	zero,-56(s0)
                precision = precision * 10 + ch - '0';
   10cae:	fc842703          	lw	a4,-56(s0)
   10cb2:	87ba                	mv	a5,a4
   10cb4:	0027979b          	slliw	a5,a5,0x2
   10cb8:	9fb9                	addw	a5,a5,a4
   10cba:	0017979b          	slliw	a5,a5,0x1
   10cbe:	2781                	sext.w	a5,a5
   10cc0:	9fa5                	addw	a5,a5,s1
   10cc2:	2781                	sext.w	a5,a5
   10cc4:	fd07879b          	addiw	a5,a5,-48
   10cc8:	fcf42423          	sw	a5,-56(s0)
                ch = *fmt;
   10ccc:	fa843783          	ld	a5,-88(s0)
   10cd0:	0007c783          	lbu	a5,0(a5)
   10cd4:	0007849b          	sext.w	s1,a5
                if (ch < '0' || ch > '9') {
   10cd8:	8726                	mv	a4,s1
   10cda:	02f00793          	li	a5,47
   10cde:	02e7df63          	ble	a4,a5,10d1c <vprintfmt_lib+0x12a>
   10ce2:	8726                	mv	a4,s1
   10ce4:	03900793          	li	a5,57
   10ce8:	02e7ca63          	blt	a5,a4,10d1c <vprintfmt_lib+0x12a>
            for (precision = 0; ; ++fmt) {
   10cec:	fa843783          	ld	a5,-88(s0)
   10cf0:	0785                	addi	a5,a5,1
   10cf2:	faf43423          	sd	a5,-88(s0)
                precision = precision * 10 + ch - '0';
   10cf6:	bf65                	j	10cae <vprintfmt_lib+0xbc>
                }
            }
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
   10cf8:	fa043783          	ld	a5,-96(s0)
   10cfc:	00878713          	addi	a4,a5,8
   10d00:	fae43023          	sd	a4,-96(s0)
   10d04:	439c                	lw	a5,0(a5)
   10d06:	fcf42423          	sw	a5,-56(s0)
            goto process_precision;
   10d0a:	a811                	j	10d1e <vprintfmt_lib+0x12c>

        case '.':
            if (width < 0) {
   10d0c:	fcc42783          	lw	a5,-52(s0)
   10d10:	2781                	sext.w	a5,a5
   10d12:	f407d5e3          	bgez	a5,10c5c <vprintfmt_lib+0x6a>
                width = 0;
   10d16:	fc042623          	sw	zero,-52(s0)
            }
            goto reswitch;
   10d1a:	b789                	j	10c5c <vprintfmt_lib+0x6a>
            goto process_precision;
   10d1c:	0001                	nop
        case '#':
            //altflag = 1;
            goto reswitch;

process_precision:
            if (width < 0) {
   10d1e:	fcc42783          	lw	a5,-52(s0)
   10d22:	2781                	sext.w	a5,a5
   10d24:	f207dce3          	bgez	a5,10c5c <vprintfmt_lib+0x6a>
                width = precision, precision = -1;
   10d28:	fc842783          	lw	a5,-56(s0)
   10d2c:	fcf42623          	sw	a5,-52(s0)
   10d30:	57fd                	li	a5,-1
   10d32:	fcf42423          	sw	a5,-56(s0)
            }
            goto reswitch;
   10d36:	b71d                	j	10c5c <vprintfmt_lib+0x6a>

        // long flag (doubled for long long)
        case 'l':
            lflag++;
   10d38:	fd042783          	lw	a5,-48(s0)
   10d3c:	2785                	addiw	a5,a5,1
   10d3e:	fcf42823          	sw	a5,-48(s0)
            goto reswitch;
   10d42:	bf29                	j	10c5c <vprintfmt_lib+0x6a>

        // character
        case 'c':
            print_char(va_arg(ap, int));
   10d44:	fa043783          	ld	a5,-96(s0)
   10d48:	00878713          	addi	a4,a5,8
   10d4c:	fae43023          	sd	a4,-96(s0)
   10d50:	439c                	lw	a5,0(a5)
   10d52:	853e                	mv	a0,a5
   10d54:	b7fff0ef          	jal	ra,108d2 <print_char>
            break;
   10d58:	a261                	j	10ee0 <vprintfmt_lib+0x2ee>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == 0) {
   10d5a:	fa043783          	ld	a5,-96(s0)
   10d5e:	00878713          	addi	a4,a5,8
   10d62:	fae43023          	sd	a4,-96(s0)
   10d66:	0007b903          	ld	s2,0(a5)
   10d6a:	00091563          	bnez	s2,10d74 <vprintfmt_lib+0x182>
                p = "(null)";
   10d6e:	67c5                	lui	a5,0x11
   10d70:	7b078913          	addi	s2,a5,1968 # 117b0 <strnlen+0xee>
            }
            if (width > 0 && padc != '-') {
   10d74:	fcc42783          	lw	a5,-52(s0)
   10d78:	2781                	sext.w	a5,a5
   10d7a:	06f05263          	blez	a5,10dde <vprintfmt_lib+0x1ec>
   10d7e:	fc744783          	lbu	a5,-57(s0)
   10d82:	0ff7f713          	andi	a4,a5,255
   10d86:	02d00793          	li	a5,45
   10d8a:	04f70a63          	beq	a4,a5,10dde <vprintfmt_lib+0x1ec>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10d8e:	fc842783          	lw	a5,-56(s0)
   10d92:	85be                	mv	a1,a5
   10d94:	854a                	mv	a0,s2
   10d96:	12d000ef          	jal	ra,116c2 <strnlen>
   10d9a:	87aa                	mv	a5,a0
   10d9c:	873e                	mv	a4,a5
   10d9e:	fcc42783          	lw	a5,-52(s0)
   10da2:	9f99                	subw	a5,a5,a4
   10da4:	fcf42623          	sw	a5,-52(s0)
   10da8:	a821                	j	10dc0 <vprintfmt_lib+0x1ce>
                    print_char(padc);
   10daa:	fc744783          	lbu	a5,-57(s0)
   10dae:	2781                	sext.w	a5,a5
   10db0:	853e                	mv	a0,a5
   10db2:	b21ff0ef          	jal	ra,108d2 <print_char>
                for (width -= (int)strnlen(p, precision); width > 0; width--) {
   10db6:	fcc42783          	lw	a5,-52(s0)
   10dba:	37fd                	addiw	a5,a5,-1
   10dbc:	fcf42623          	sw	a5,-52(s0)
   10dc0:	fcc42783          	lw	a5,-52(s0)
   10dc4:	2781                	sext.w	a5,a5
   10dc6:	fef042e3          	bgtz	a5,10daa <vprintfmt_lib+0x1b8>
                }
            }
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10dca:	a811                	j	10dde <vprintfmt_lib+0x1ec>
                print_char(ch);
   10dcc:	8526                	mv	a0,s1
   10dce:	b05ff0ef          	jal	ra,108d2 <print_char>
                p++;
   10dd2:	0905                	addi	s2,s2,1
            for (; (ch = *p) != '\0' && (precision < 0 || --precision >= 0); width--) {
   10dd4:	fcc42783          	lw	a5,-52(s0)
   10dd8:	37fd                	addiw	a5,a5,-1
   10dda:	fcf42623          	sw	a5,-52(s0)
   10dde:	00094783          	lbu	a5,0(s2)
   10de2:	0007849b          	sext.w	s1,a5
   10de6:	c895                	beqz	s1,10e1a <vprintfmt_lib+0x228>
   10de8:	fc842783          	lw	a5,-56(s0)
   10dec:	2781                	sext.w	a5,a5
   10dee:	fc07cfe3          	bltz	a5,10dcc <vprintfmt_lib+0x1da>
   10df2:	fc842783          	lw	a5,-56(s0)
   10df6:	37fd                	addiw	a5,a5,-1
   10df8:	fcf42423          	sw	a5,-56(s0)
   10dfc:	fc842783          	lw	a5,-56(s0)
   10e00:	2781                	sext.w	a5,a5
   10e02:	fc07d5e3          	bgez	a5,10dcc <vprintfmt_lib+0x1da>
            }
            for (; width > 0; width--) {
   10e06:	a811                	j	10e1a <vprintfmt_lib+0x228>
                print_char(' ');
   10e08:	02000513          	li	a0,32
   10e0c:	ac7ff0ef          	jal	ra,108d2 <print_char>
            for (; width > 0; width--) {
   10e10:	fcc42783          	lw	a5,-52(s0)
   10e14:	37fd                	addiw	a5,a5,-1
   10e16:	fcf42623          	sw	a5,-52(s0)
   10e1a:	fcc42783          	lw	a5,-52(s0)
   10e1e:	2781                	sext.w	a5,a5
   10e20:	fef044e3          	bgtz	a5,10e08 <vprintfmt_lib+0x216>
            }
            break;
   10e24:	a875                	j	10ee0 <vprintfmt_lib+0x2ee>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
   10e26:	fd042703          	lw	a4,-48(s0)
   10e2a:	fa040793          	addi	a5,s0,-96
   10e2e:	85ba                	mv	a1,a4
   10e30:	853e                	mv	a0,a5
   10e32:	00000097          	auipc	ra,0x0
   10e36:	d58080e7          	jalr	-680(ra) # 10b8a <getint>
   10e3a:	87aa                	mv	a5,a0
   10e3c:	fcf43c23          	sd	a5,-40(s0)
            if ((long long) num < 0) {
   10e40:	fd843783          	ld	a5,-40(s0)
   10e44:	0007dc63          	bgez	a5,10e5c <vprintfmt_lib+0x26a>
                print_char('-');
   10e48:	02d00513          	li	a0,45
   10e4c:	a87ff0ef          	jal	ra,108d2 <print_char>
                num = -(long long) num;
   10e50:	fd843783          	ld	a5,-40(s0)
   10e54:	40f007b3          	neg	a5,a5
   10e58:	fcf43c23          	sd	a5,-40(s0)
            }
            base = 10;
   10e5c:	47a9                	li	a5,10
   10e5e:	fcf42a23          	sw	a5,-44(s0)
            goto signed_number;
   10e62:	a089                	j	10ea4 <vprintfmt_lib+0x2b2>

        // unsigned decimal
        case 'u':
            base = 10;
   10e64:	47a9                	li	a5,10
   10e66:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10e6a:	a01d                	j	10e90 <vprintfmt_lib+0x29e>

        // (unsigned) octal
        case 'o':
            // should do something with padding so it's always 3 octits
            base = 8;
   10e6c:	47a1                	li	a5,8
   10e6e:	fcf42a23          	sw	a5,-44(s0)
            goto unsigned_number;
   10e72:	a839                	j	10e90 <vprintfmt_lib+0x29e>

        // pointer
        case 'p':
            //static_assert(sizeof(long) == sizeof(void*));
            lflag = 1;
   10e74:	4785                	li	a5,1
   10e76:	fcf42823          	sw	a5,-48(s0)
            print_char('0');
   10e7a:	03000513          	li	a0,48
   10e7e:	a55ff0ef          	jal	ra,108d2 <print_char>
            print_char('x');
   10e82:	07800513          	li	a0,120
   10e86:	a4dff0ef          	jal	ra,108d2 <print_char>
            /* fall through to 'x' */

        // (unsigned) hexadecimal
        case 'x':
            base = 16;
   10e8a:	47c1                	li	a5,16
   10e8c:	fcf42a23          	sw	a5,-44(s0)
unsigned_number:
            num = getuint(&ap, lflag);
   10e90:	fd042703          	lw	a4,-48(s0)
   10e94:	fa040793          	addi	a5,s0,-96
   10e98:	85ba                	mv	a1,a4
   10e9a:	853e                	mv	a0,a5
   10e9c:	c83ff0ef          	jal	ra,10b1e <getuint>
   10ea0:	fca43c23          	sd	a0,-40(s0)
signed_number:
            printnum(num, base, width, padc);
   10ea4:	fc744783          	lbu	a5,-57(s0)
   10ea8:	0007869b          	sext.w	a3,a5
   10eac:	fcc42703          	lw	a4,-52(s0)
   10eb0:	fd442783          	lw	a5,-44(s0)
   10eb4:	863a                	mv	a2,a4
   10eb6:	85be                	mv	a1,a5
   10eb8:	fd843503          	ld	a0,-40(s0)
   10ebc:	00000097          	auipc	ra,0x0
   10ec0:	b76080e7          	jalr	-1162(ra) # 10a32 <printnum>
            break;
   10ec4:	a831                	j	10ee0 <vprintfmt_lib+0x2ee>

        // escaped '%' character
        case '%':
            print_char(ch);
   10ec6:	8526                	mv	a0,s1
   10ec8:	a0bff0ef          	jal	ra,108d2 <print_char>
            break;
   10ecc:	a811                	j	10ee0 <vprintfmt_lib+0x2ee>
      
        // unrecognized escape sequence - just print it literally
        default:
            print_char('%');
   10ece:	02500513          	li	a0,37
   10ed2:	a01ff0ef          	jal	ra,108d2 <print_char>
            fmt = last_fmt;
   10ed6:	fb843783          	ld	a5,-72(s0)
   10eda:	faf43423          	sd	a5,-88(s0)
            break;
   10ede:	0001                	nop
        while ((ch = *(unsigned char *) fmt) != '%') {
   10ee0:	bb35                	j	10c1c <vprintfmt_lib+0x2a>
                return;
   10ee2:	0001                	nop
        }
    }
}
   10ee4:	60e6                	ld	ra,88(sp)
   10ee6:	6446                	ld	s0,80(sp)
   10ee8:	64a6                	ld	s1,72(sp)
   10eea:	6906                	ld	s2,64(sp)
   10eec:	6125                	addi	sp,sp,96
   10eee:	8082                	ret

0000000000010ef0 <printf_uart>:


void printf_uart(const char *fmt, ... ) {
   10ef0:	7159                	addi	sp,sp,-112
   10ef2:	f406                	sd	ra,40(sp)
   10ef4:	f022                	sd	s0,32(sp)
   10ef6:	1800                	addi	s0,sp,48
   10ef8:	fca43c23          	sd	a0,-40(s0)
   10efc:	e40c                	sd	a1,8(s0)
   10efe:	e810                	sd	a2,16(s0)
   10f00:	ec14                	sd	a3,24(s0)
   10f02:	f018                	sd	a4,32(s0)
   10f04:	f41c                	sd	a5,40(s0)
   10f06:	03043823          	sd	a6,48(s0)
   10f0a:	03143c23          	sd	a7,56(s0)
    va_list arg;
    va_start(arg, fmt);
   10f0e:	04040793          	addi	a5,s0,64
   10f12:	fc878793          	addi	a5,a5,-56
   10f16:	fef43423          	sd	a5,-24(s0)
    vprintfmt_lib(fmt, arg);
   10f1a:	fe843783          	ld	a5,-24(s0)
   10f1e:	85be                	mv	a1,a5
   10f20:	fd843503          	ld	a0,-40(s0)
   10f24:	00000097          	auipc	ra,0x0
   10f28:	cce080e7          	jalr	-818(ra) # 10bf2 <vprintfmt_lib>

    va_end(arg);
}
   10f2c:	0001                	nop
   10f2e:	70a2                	ld	ra,40(sp)
   10f30:	7402                	ld	s0,32(sp)
   10f32:	6165                	addi	sp,sp,112
   10f34:	8082                	ret

0000000000010f36 <init_qspi>:
#include "uart.h"

#define CMD18 18
#define CMD12 12

void init_qspi() {
   10f36:	1141                	addi	sp,sp,-16
   10f38:	e422                	sd	s0,8(sp)
   10f3a:	0800                	addi	s0,sp,16
    // TODO: initialization for real HW
}
   10f3c:	0001                	nop
   10f3e:	6422                	ld	s0,8(sp)
   10f40:	0141                	addi	sp,sp,16
   10f42:	8082                	ret

0000000000010f44 <sd_get_byte>:

uint8_t sd_get_byte() {
   10f44:	1101                	addi	sp,sp,-32
   10f46:	ec22                	sd	s0,24(sp)
   10f48:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10f4a:	100507b7          	lui	a5,0x10050
   10f4e:	fef43423          	sd	a5,-24(s0)
    uint32_t rx = 0;
   10f52:	fe042223          	sw	zero,-28(s0)
    do {
        rx = p->rxdata;
   10f56:	fe843783          	ld	a5,-24(s0)
   10f5a:	47fc                	lw	a5,76(a5)
   10f5c:	fef42223          	sw	a5,-28(s0)
    } while (rx & QSPI_RXDATA_EMPTY);
   10f60:	fe442783          	lw	a5,-28(s0)
   10f64:	fe07c9e3          	bltz	a5,10f56 <sd_get_byte+0x12>
    return (uint8_t)rx;
   10f68:	fe442783          	lw	a5,-28(s0)
   10f6c:	0ff7f793          	andi	a5,a5,255
}
   10f70:	853e                	mv	a0,a5
   10f72:	6462                	ld	s0,24(sp)
   10f74:	6105                	addi	sp,sp,32
   10f76:	8082                	ret

0000000000010f78 <sd_set_byte>:

void sd_set_byte(uint8_t v) {
   10f78:	7179                	addi	sp,sp,-48
   10f7a:	f422                	sd	s0,40(sp)
   10f7c:	1800                	addi	s0,sp,48
   10f7e:	87aa                	mv	a5,a0
   10f80:	fcf40fa3          	sb	a5,-33(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10f84:	100507b7          	lui	a5,0x10050
   10f88:	fef43423          	sd	a5,-24(s0)
    while (p->txdata & QSPI_TXDATA_FULL) {}
   10f8c:	0001                	nop
   10f8e:	fe843783          	ld	a5,-24(s0)
   10f92:	47bc                	lw	a5,72(a5)
   10f94:	2781                	sext.w	a5,a5
   10f96:	2781                	sext.w	a5,a5
   10f98:	fe07cbe3          	bltz	a5,10f8e <sd_set_byte+0x16>
    p->txdata = v;
   10f9c:	fdf44783          	lbu	a5,-33(s0)
   10fa0:	0007871b          	sext.w	a4,a5
   10fa4:	fe843783          	ld	a5,-24(s0)
   10fa8:	c7b8                	sw	a4,72(a5)
}
   10faa:	0001                	nop
   10fac:	7422                	ld	s0,40(sp)
   10fae:	6145                	addi	sp,sp,48
   10fb0:	8082                	ret

0000000000010fb2 <sd_read_block>:


void sd_read_block(uint8_t *buf, int sz) {
   10fb2:	7179                	addi	sp,sp,-48
   10fb4:	f406                	sd	ra,40(sp)
   10fb6:	f022                	sd	s0,32(sp)
   10fb8:	1800                	addi	s0,sp,48
   10fba:	fca43c23          	sd	a0,-40(s0)
   10fbe:	87ae                	mv	a5,a1
   10fc0:	fcf42a23          	sw	a5,-44(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   10fc4:	100507b7          	lui	a5,0x10050
   10fc8:	fef43423          	sd	a5,-24(s0)
    uint8_t token;
    uint8_t crc;

    token = sd_get_byte();
   10fcc:	f79ff0ef          	jal	ra,10f44 <sd_get_byte>
   10fd0:	87aa                	mv	a5,a0
   10fd2:	fef403a3          	sb	a5,-25(s0)
    // TODO check token
    while (sz--) {
   10fd6:	a831                	j	10ff2 <sd_read_block+0x40>
       *buf = sd_get_byte();
   10fd8:	f6dff0ef          	jal	ra,10f44 <sd_get_byte>
   10fdc:	87aa                	mv	a5,a0
   10fde:	873e                	mv	a4,a5
   10fe0:	fd843783          	ld	a5,-40(s0)
   10fe4:	00e78023          	sb	a4,0(a5) # 10050000 <_end+0x1003e3d4>
       buf++;
   10fe8:	fd843783          	ld	a5,-40(s0)
   10fec:	0785                	addi	a5,a5,1
   10fee:	fcf43c23          	sd	a5,-40(s0)
    while (sz--) {
   10ff2:	fd442783          	lw	a5,-44(s0)
   10ff6:	fff7871b          	addiw	a4,a5,-1
   10ffa:	fce42a23          	sw	a4,-44(s0)
   10ffe:	ffe9                	bnez	a5,10fd8 <sd_read_block+0x26>
    }
    crc = sd_get_byte();
   11000:	f45ff0ef          	jal	ra,10f44 <sd_get_byte>
   11004:	87aa                	mv	a5,a0
   11006:	fef40323          	sb	a5,-26(s0)
    crc = sd_get_byte();
   1100a:	f3bff0ef          	jal	ra,10f44 <sd_get_byte>
   1100e:	87aa                	mv	a5,a0
   11010:	fef40323          	sb	a5,-26(s0)
}
   11014:	0001                	nop
   11016:	70a2                	ld	ra,40(sp)
   11018:	7402                	ld	s0,32(sp)
   1101a:	6145                	addi	sp,sp,48
   1101c:	8082                	ret

000000000001101e <sd_start_reading>:

int sd_start_reading(uint64_t addr) {
   1101e:	7179                	addi	sp,sp,-48
   11020:	f406                	sd	ra,40(sp)
   11022:	f022                	sd	s0,32(sp)
   11024:	1800                	addi	s0,sp,48
   11026:	fca43c23          	sd	a0,-40(s0)
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   1102a:	100507b7          	lui	a5,0x10050
   1102e:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD18);
   11032:	05200513          	li	a0,82
   11036:	f43ff0ef          	jal	ra,10f78 <sd_set_byte>
    sd_set_byte(0x00);
   1103a:	4501                	li	a0,0
   1103c:	f3dff0ef          	jal	ra,10f78 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 16) & 0xFF));
   11040:	fd843783          	ld	a5,-40(s0)
   11044:	83c1                	srli	a5,a5,0x10
   11046:	0ff7f793          	andi	a5,a5,255
   1104a:	853e                	mv	a0,a5
   1104c:	f2dff0ef          	jal	ra,10f78 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 8) & 0xFF));
   11050:	fd843783          	ld	a5,-40(s0)
   11054:	83a1                	srli	a5,a5,0x8
   11056:	0ff7f793          	andi	a5,a5,255
   1105a:	853e                	mv	a0,a5
   1105c:	f1dff0ef          	jal	ra,10f78 <sd_set_byte>
    sd_set_byte((uint8_t)((addr >> 0) & 0xFF));
   11060:	fd843783          	ld	a5,-40(s0)
   11064:	0ff7f793          	andi	a5,a5,255
   11068:	853e                	mv	a0,a5
   1106a:	f0fff0ef          	jal	ra,10f78 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   1106e:	0ff00513          	li	a0,255
   11072:	f07ff0ef          	jal	ra,10f78 <sd_set_byte>

    cmdresp = sd_get_byte();
   11076:	00000097          	auipc	ra,0x0
   1107a:	ece080e7          	jalr	-306(ra) # 10f44 <sd_get_byte>
   1107e:	87aa                	mv	a5,a0
   11080:	fef403a3          	sb	a5,-25(s0)
    return cmdresp;
   11084:	fe744783          	lbu	a5,-25(s0)
   11088:	2781                	sext.w	a5,a5
}
   1108a:	853e                	mv	a0,a5
   1108c:	70a2                	ld	ra,40(sp)
   1108e:	7402                	ld	s0,32(sp)
   11090:	6145                	addi	sp,sp,48
   11092:	8082                	ret

0000000000011094 <sd_stop_reading>:

int sd_stop_reading() {
   11094:	1101                	addi	sp,sp,-32
   11096:	ec06                	sd	ra,24(sp)
   11098:	e822                	sd	s0,16(sp)
   1109a:	1000                	addi	s0,sp,32
    qspi_map *p = (qspi_map *)ADDR_BUS0_XSLV_QSPI2;
   1109c:	100507b7          	lui	a5,0x10050
   110a0:	fef43423          	sd	a5,-24(s0)
    uint8_t cmdresp;
    sd_set_byte(0x40 | CMD12);
   110a4:	04c00513          	li	a0,76
   110a8:	00000097          	auipc	ra,0x0
   110ac:	ed0080e7          	jalr	-304(ra) # 10f78 <sd_set_byte>
    sd_set_byte(0);
   110b0:	4501                	li	a0,0
   110b2:	00000097          	auipc	ra,0x0
   110b6:	ec6080e7          	jalr	-314(ra) # 10f78 <sd_set_byte>
    sd_set_byte(0);
   110ba:	4501                	li	a0,0
   110bc:	00000097          	auipc	ra,0x0
   110c0:	ebc080e7          	jalr	-324(ra) # 10f78 <sd_set_byte>
    sd_set_byte(0);
   110c4:	4501                	li	a0,0
   110c6:	00000097          	auipc	ra,0x0
   110ca:	eb2080e7          	jalr	-334(ra) # 10f78 <sd_set_byte>
    sd_set_byte(0);
   110ce:	4501                	li	a0,0
   110d0:	00000097          	auipc	ra,0x0
   110d4:	ea8080e7          	jalr	-344(ra) # 10f78 <sd_set_byte>
    sd_set_byte(0xFF);  // CRC
   110d8:	0ff00513          	li	a0,255
   110dc:	00000097          	auipc	ra,0x0
   110e0:	e9c080e7          	jalr	-356(ra) # 10f78 <sd_set_byte>
    cmdresp = sd_get_byte();
   110e4:	e61ff0ef          	jal	ra,10f44 <sd_get_byte>
   110e8:	87aa                	mv	a5,a0
   110ea:	fef403a3          	sb	a5,-25(s0)

    // TODO: read status
    return cmdresp;
   110ee:	fe744783          	lbu	a5,-25(s0)
   110f2:	2781                	sext.w	a5,a5
}
   110f4:	853e                	mv	a0,a5
   110f6:	60e2                	ld	ra,24(sp)
   110f8:	6442                	ld	s0,16(sp)
   110fa:	6105                	addi	sp,sp,32
   110fc:	8082                	ret

00000000000110fe <is_empty_gui>:
#include "axi_maps.h"
#include "sd_uefi.h"
#include "spi.h"
#include "uart.h"

int is_empty_gui(const struct gpt_guid *guid) {
   110fe:	1101                	addi	sp,sp,-32
   11100:	ec22                	sd	s0,24(sp)
   11102:	1000                	addi	s0,sp,32
   11104:	fea43423          	sd	a0,-24(s0)
    return guid->time_low == 0
   11108:	fe843783          	ld	a5,-24(s0)
   1110c:	439c                	lw	a5,0(a5)
        && guid->time_mid == 0
        && guid->time_hi_and_version == 0
        && guid->clock_seq_hi == 0
        && guid->clock_seq_low == 0
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   1110e:	e7ad                	bnez	a5,11178 <is_empty_gui+0x7a>
        && guid->time_mid == 0
   11110:	fe843783          	ld	a5,-24(s0)
   11114:	0047d783          	lhu	a5,4(a5) # 10050004 <_end+0x1003e3d8>
   11118:	e3a5                	bnez	a5,11178 <is_empty_gui+0x7a>
        && guid->time_hi_and_version == 0
   1111a:	fe843783          	ld	a5,-24(s0)
   1111e:	0067d783          	lhu	a5,6(a5)
   11122:	ebb9                	bnez	a5,11178 <is_empty_gui+0x7a>
        && guid->clock_seq_hi == 0
   11124:	fe843783          	ld	a5,-24(s0)
   11128:	0087c783          	lbu	a5,8(a5)
   1112c:	e7b1                	bnez	a5,11178 <is_empty_gui+0x7a>
        && guid->clock_seq_low == 0
   1112e:	fe843783          	ld	a5,-24(s0)
   11132:	0097c783          	lbu	a5,9(a5)
   11136:	e3a9                	bnez	a5,11178 <is_empty_gui+0x7a>
        && guid->node[0] == 0 && guid->node[1] == 0 && guid->node[2] == 0
   11138:	fe843783          	ld	a5,-24(s0)
   1113c:	00a7c783          	lbu	a5,10(a5)
   11140:	ef85                	bnez	a5,11178 <is_empty_gui+0x7a>
   11142:	fe843783          	ld	a5,-24(s0)
   11146:	00b7c783          	lbu	a5,11(a5)
   1114a:	e79d                	bnez	a5,11178 <is_empty_gui+0x7a>
   1114c:	fe843783          	ld	a5,-24(s0)
   11150:	00c7c783          	lbu	a5,12(a5)
   11154:	e395                	bnez	a5,11178 <is_empty_gui+0x7a>
        && guid->node[3] == 0 && guid->node[4] == 0 && guid->node[5] == 0;
   11156:	fe843783          	ld	a5,-24(s0)
   1115a:	00d7c783          	lbu	a5,13(a5)
   1115e:	ef89                	bnez	a5,11178 <is_empty_gui+0x7a>
   11160:	fe843783          	ld	a5,-24(s0)
   11164:	00e7c783          	lbu	a5,14(a5)
   11168:	eb81                	bnez	a5,11178 <is_empty_gui+0x7a>
   1116a:	fe843783          	ld	a5,-24(s0)
   1116e:	00f7c783          	lbu	a5,15(a5)
   11172:	e399                	bnez	a5,11178 <is_empty_gui+0x7a>
   11174:	4785                	li	a5,1
   11176:	a011                	j	1117a <is_empty_gui+0x7c>
   11178:	4781                	li	a5,0
}
   1117a:	853e                	mv	a0,a5
   1117c:	6462                	ld	s0,24(sp)
   1117e:	6105                	addi	sp,sp,32
   11180:	8082                	ret

0000000000011182 <print_guid>:



void print_guid(const struct gpt_guid *u)
{
   11182:	7159                	addi	sp,sp,-112
   11184:	f486                	sd	ra,104(sp)
   11186:	f0a2                	sd	s0,96(sp)
   11188:	1880                	addi	s0,sp,112
   1118a:	fea43423          	sd	a0,-24(s0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   1118e:	fe843783          	ld	a5,-24(s0)
   11192:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11194:	0187d79b          	srliw	a5,a5,0x18
   11198:	00078e1b          	sext.w	t3,a5
        u->time_low >> 24, (u->time_low >> 16) & 0xFF,
   1119c:	fe843783          	ld	a5,-24(s0)
   111a0:	439c                	lw	a5,0(a5)
   111a2:	0107d79b          	srliw	a5,a5,0x10
   111a6:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111a8:	0ff7f793          	andi	a5,a5,255
   111ac:	00078e9b          	sext.w	t4,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   111b0:	fe843783          	ld	a5,-24(s0)
   111b4:	439c                	lw	a5,0(a5)
   111b6:	0087d79b          	srliw	a5,a5,0x8
   111ba:	2781                	sext.w	a5,a5
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111bc:	0ff7f793          	andi	a5,a5,255
   111c0:	00078f1b          	sext.w	t5,a5
        (u->time_low >> 8) & 0xFF, u->time_low & 0xFF,
   111c4:	fe843783          	ld	a5,-24(s0)
   111c8:	439c                	lw	a5,0(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111ca:	0ff7f793          	andi	a5,a5,255
   111ce:	00078f9b          	sext.w	t6,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   111d2:	fe843783          	ld	a5,-24(s0)
   111d6:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111da:	0087d79b          	srliw	a5,a5,0x8
   111de:	17c2                	slli	a5,a5,0x30
   111e0:	93c1                	srli	a5,a5,0x30
   111e2:	0007829b          	sext.w	t0,a5
        u->time_mid >> 8, u->time_mid & 0xFF,
   111e6:	fe843783          	ld	a5,-24(s0)
   111ea:	0047d783          	lhu	a5,4(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   111ee:	2781                	sext.w	a5,a5
   111f0:	0ff7f793          	andi	a5,a5,255
   111f4:	0007839b          	sext.w	t2,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   111f8:	fe843783          	ld	a5,-24(s0)
   111fc:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11200:	0087d79b          	srliw	a5,a5,0x8
   11204:	17c2                	slli	a5,a5,0x30
   11206:	93c1                	srli	a5,a5,0x30
   11208:	0007809b          	sext.w	ra,a5
        u->time_hi_and_version >> 8, u->time_hi_and_version & 0xFF,
   1120c:	fe843783          	ld	a5,-24(s0)
   11210:	0067d783          	lhu	a5,6(a5)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11214:	2781                	sext.w	a5,a5
   11216:	0ff7f793          	andi	a5,a5,255
   1121a:	2781                	sext.w	a5,a5
        u->clock_seq_hi, u->clock_seq_low,
   1121c:	fe843703          	ld	a4,-24(s0)
   11220:	00874703          	lbu	a4,8(a4) # 1008 <_start-0xeff8>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11224:	2701                	sext.w	a4,a4
        u->clock_seq_hi, u->clock_seq_low,
   11226:	fe843683          	ld	a3,-24(s0)
   1122a:	0096c683          	lbu	a3,9(a3)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1122e:	2681                	sext.w	a3,a3
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11230:	fe843603          	ld	a2,-24(s0)
   11234:	00a64603          	lbu	a2,10(a2)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11238:	2601                	sext.w	a2,a2
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   1123a:	fe843583          	ld	a1,-24(s0)
   1123e:	00b5c583          	lbu	a1,11(a1) # fffffffff000000b <_end+0xffffffffeffee3df>
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11242:	2581                	sext.w	a1,a1
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11244:	fe843503          	ld	a0,-24(s0)
   11248:	00c54503          	lbu	a0,12(a0)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1124c:	2501                	sext.w	a0,a0
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   1124e:	fe843803          	ld	a6,-24(s0)
   11252:	00d84803          	lbu	a6,13(a6)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11256:	2801                	sext.w	a6,a6
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11258:	fe843883          	ld	a7,-24(s0)
   1125c:	00e8c883          	lbu	a7,14(a7)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   11260:	2881                	sext.w	a7,a7
        u->node[0], u->node[1], u->node[2], u->node[3], u->node[4], u->node[5]
   11262:	fe843303          	ld	t1,-24(s0)
   11266:	00f34303          	lbu	t1,15(t1)
    printf_uart("%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
   1126a:	2301                	sext.w	t1,t1
   1126c:	e09a                	sd	t1,64(sp)
   1126e:	fc46                	sd	a7,56(sp)
   11270:	f842                	sd	a6,48(sp)
   11272:	f42a                	sd	a0,40(sp)
   11274:	f02e                	sd	a1,32(sp)
   11276:	ec32                	sd	a2,24(sp)
   11278:	e836                	sd	a3,16(sp)
   1127a:	e43a                	sd	a4,8(sp)
   1127c:	e03e                	sd	a5,0(sp)
   1127e:	8886                	mv	a7,ra
   11280:	881e                	mv	a6,t2
   11282:	8796                	mv	a5,t0
   11284:	877e                	mv	a4,t6
   11286:	86fa                	mv	a3,t5
   11288:	8676                	mv	a2,t4
   1128a:	85f2                	mv	a1,t3
   1128c:	6549                	lui	a0,0x12
   1128e:	91050513          	addi	a0,a0,-1776 # 11910 <strnlen+0x24e>
   11292:	c5fff0ef          	jal	ra,10ef0 <printf_uart>
        );
}
   11296:	0001                	nop
   11298:	70a6                	ld	ra,104(sp)
   1129a:	7406                	ld	s0,96(sp)
   1129c:	6165                	addi	sp,sp,112
   1129e:	8082                	ret

00000000000112a0 <is_uboot_guid>:

int is_uboot_guid(const struct gpt_guid *u) {
   112a0:	7179                	addi	sp,sp,-48
   112a2:	f422                	sd	s0,40(sp)
   112a4:	1800                	addi	s0,sp,48
   112a6:	fca43c23          	sd	a0,-40(s0)
   struct gpt_guid spl = GPT_LOADER1;
   112aa:	5b1937b7          	lui	a5,0x5b193
   112ae:	3007879b          	addiw	a5,a5,768
   112b2:	fef42023          	sw	a5,-32(s0)
   112b6:	c7800793          	li	a5,-904
   112ba:	fef41223          	sh	a5,-28(s0)
   112be:	6791                	lui	a5,0x4
   112c0:	0cd7879b          	addiw	a5,a5,205
   112c4:	fef41323          	sh	a5,-26(s0)
   112c8:	f8000793          	li	a5,-128
   112cc:	fef40423          	sb	a5,-24(s0)
   112d0:	4789                	li	a5,2
   112d2:	fef404a3          	sb	a5,-23(s0)
   112d6:	57a1                	li	a5,-24
   112d8:	fef40523          	sb	a5,-22(s0)
   112dc:	06c00793          	li	a5,108
   112e0:	fef405a3          	sb	a5,-21(s0)
   112e4:	04500793          	li	a5,69
   112e8:	fef40623          	sb	a5,-20(s0)
   112ec:	05800793          	li	a5,88
   112f0:	fef406a3          	sb	a5,-19(s0)
   112f4:	47ad                	li	a5,11
   112f6:	fef40723          	sb	a5,-18(s0)
   112fa:	04700793          	li	a5,71
   112fe:	fef407a3          	sb	a5,-17(s0)
   return spl.time_low == u->time_low
   11302:	fe042703          	lw	a4,-32(s0)
   11306:	fd843783          	ld	a5,-40(s0)
   1130a:	439c                	lw	a5,0(a5)
       && spl.node[0] == u->node[0]
       && spl.node[1] == u->node[1]
       && spl.node[2] == u->node[2]
       && spl.node[3] == u->node[3]
       && spl.node[4] == u->node[4]
       && spl.node[5] == u->node[5];
   1130c:	0af71863          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.time_mid == u->time_mid
   11310:	fe445703          	lhu	a4,-28(s0)
   11314:	fd843783          	ld	a5,-40(s0)
   11318:	0047d783          	lhu	a5,4(a5) # 4004 <_start-0xbffc>
   1131c:	2701                	sext.w	a4,a4
   1131e:	2781                	sext.w	a5,a5
   11320:	08f71e63          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.time_hi_and_version == u->time_hi_and_version
   11324:	fe645703          	lhu	a4,-26(s0)
   11328:	fd843783          	ld	a5,-40(s0)
   1132c:	0067d783          	lhu	a5,6(a5)
   11330:	2701                	sext.w	a4,a4
   11332:	2781                	sext.w	a5,a5
   11334:	08f71463          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.clock_seq_hi == u->clock_seq_hi
   11338:	fe844703          	lbu	a4,-24(s0)
   1133c:	fd843783          	ld	a5,-40(s0)
   11340:	0087c783          	lbu	a5,8(a5)
   11344:	06f71c63          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.clock_seq_low == u->clock_seq_low
   11348:	fe944703          	lbu	a4,-23(s0)
   1134c:	fd843783          	ld	a5,-40(s0)
   11350:	0097c783          	lbu	a5,9(a5)
   11354:	06f71463          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.node[0] == u->node[0]
   11358:	fea44703          	lbu	a4,-22(s0)
   1135c:	fd843783          	ld	a5,-40(s0)
   11360:	00a7c783          	lbu	a5,10(a5)
   11364:	04f71c63          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.node[1] == u->node[1]
   11368:	feb44703          	lbu	a4,-21(s0)
   1136c:	fd843783          	ld	a5,-40(s0)
   11370:	00b7c783          	lbu	a5,11(a5)
   11374:	04f71463          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.node[2] == u->node[2]
   11378:	fec44703          	lbu	a4,-20(s0)
   1137c:	fd843783          	ld	a5,-40(s0)
   11380:	00c7c783          	lbu	a5,12(a5)
   11384:	02f71c63          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.node[3] == u->node[3]
   11388:	fed44703          	lbu	a4,-19(s0)
   1138c:	fd843783          	ld	a5,-40(s0)
   11390:	00d7c783          	lbu	a5,13(a5)
   11394:	02f71463          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.node[4] == u->node[4]
   11398:	fee44703          	lbu	a4,-18(s0)
   1139c:	fd843783          	ld	a5,-40(s0)
   113a0:	00e7c783          	lbu	a5,14(a5)
   113a4:	00f71c63          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
       && spl.node[5] == u->node[5];
   113a8:	fef44703          	lbu	a4,-17(s0)
   113ac:	fd843783          	ld	a5,-40(s0)
   113b0:	00f7c783          	lbu	a5,15(a5)
   113b4:	00f71463          	bne	a4,a5,113bc <is_uboot_guid+0x11c>
   113b8:	4785                	li	a5,1
   113ba:	a011                	j	113be <is_uboot_guid+0x11e>
   113bc:	4781                	li	a5,0
}
   113be:	853e                	mv	a0,a5
   113c0:	7422                	ld	s0,40(sp)
   113c2:	6145                	addi	sp,sp,48
   113c4:	8082                	ret

00000000000113c6 <run_from_sdcard>:

/**
 @ret 0 if uefi partion not found, non-zero otherwise
 */
int run_from_sdcard() {
   113c6:	9c010113          	addi	sp,sp,-1600
   113ca:	62113c23          	sd	ra,1592(sp)
   113ce:	62813823          	sd	s0,1584(sp)
   113d2:	64010413          	addi	s0,sp,1600
    gpt_legacy_mbr lba0;
    gpt_header lba1;
    gpt_entry entry[4];   // 1 entry = 128 bytes; block = 512 Bytes
    uint64_t lba_start = 0;
   113d6:	fe043423          	sd	zero,-24(s0)
    uint64_t lba_end = 0;
   113da:	fe043023          	sd	zero,-32(s0)
    uint8_t *sram = (uint8_t *)ADDR_BUS0_XSLV_SRAM;
   113de:	080007b7          	lui	a5,0x8000
   113e2:	fcf43c23          	sd	a5,-40(s0)
    int i4;
   
    init_qspi();
   113e6:	00000097          	auipc	ra,0x0
   113ea:	b50080e7          	jalr	-1200(ra) # 10f36 <init_qspi>

    print_uart("Search uefi\r\n", 13);
   113ee:	45b5                	li	a1,13
   113f0:	67c9                	lui	a5,0x12
   113f2:	95878513          	addi	a0,a5,-1704 # 11958 <strnlen+0x296>
   113f6:	d1eff0ef          	jal	ra,10914 <print_uart>

    sd_start_reading(0);
   113fa:	4501                	li	a0,0
   113fc:	00000097          	auipc	ra,0x0
   11400:	c22080e7          	jalr	-990(ra) # 1101e <sd_start_reading>

    sd_read_block((uint8_t *)&lba0, sizeof(gpt_legacy_mbr));
   11404:	dc040793          	addi	a5,s0,-576
   11408:	20000593          	li	a1,512
   1140c:	853e                	mv	a0,a5
   1140e:	ba5ff0ef          	jal	ra,10fb2 <sd_read_block>
    sd_read_block((uint8_t *)&lba1, sizeof(gpt_header));
   11412:	bc040793          	addi	a5,s0,-1088
   11416:	20000593          	li	a1,512
   1141a:	853e                	mv	a0,a5
   1141c:	b97ff0ef          	jal	ra,10fb2 <sd_read_block>

    if (lba1.signature != 0x5452415020494645ULL) {
   11420:	bc043703          	ld	a4,-1088(s0)
   11424:	67c9                	lui	a5,0x12
   11426:	9987b783          	ld	a5,-1640(a5) # 11998 <strnlen+0x2d6>
   1142a:	00f70663          	beq	a4,a5,11436 <run_from_sdcard+0x70>
        sd_stop_reading();
   1142e:	c67ff0ef          	jal	ra,11094 <sd_stop_reading>
        return -1;
   11432:	57fd                	li	a5,-1
   11434:	aa7d                	j	115f2 <run_from_sdcard+0x22c>
    }

    for (int i = 0; i < lba1.npartition_entries; i++) {
   11436:	fc042a23          	sw	zero,-44(s0)
   1143a:	a8c5                	j	1152a <run_from_sdcard+0x164>
        i4 = i % 4;
   1143c:	fd442703          	lw	a4,-44(s0)
   11440:	41f7579b          	sraiw	a5,a4,0x1f
   11444:	01e7d79b          	srliw	a5,a5,0x1e
   11448:	9f3d                	addw	a4,a4,a5
   1144a:	8b0d                	andi	a4,a4,3
   1144c:	40f707bb          	subw	a5,a4,a5
   11450:	fcf42223          	sw	a5,-60(s0)
        if (i4 == 0) {
   11454:	fc442783          	lw	a5,-60(s0)
   11458:	2781                	sext.w	a5,a5
   1145a:	eb81                	bnez	a5,1146a <run_from_sdcard+0xa4>
            sd_read_block((uint8_t *)entry, sizeof(entry));
   1145c:	9c040793          	addi	a5,s0,-1600
   11460:	20000593          	li	a1,512
   11464:	853e                	mv	a0,a5
   11466:	b4dff0ef          	jal	ra,10fb2 <sd_read_block>
        }
        //guid_to_string(&entry[i4].type, guid);

        if (is_empty_gui(&entry[i4].type)) {
   1146a:	9c040713          	addi	a4,s0,-1600
   1146e:	fc442783          	lw	a5,-60(s0)
   11472:	079e                	slli	a5,a5,0x7
   11474:	97ba                	add	a5,a5,a4
   11476:	853e                	mv	a0,a5
   11478:	00000097          	auipc	ra,0x0
   1147c:	c86080e7          	jalr	-890(ra) # 110fe <is_empty_gui>
   11480:	87aa                	mv	a5,a0
   11482:	efd1                	bnez	a5,1151e <run_from_sdcard+0x158>
            continue;
        }

        printf_uart("[%2d] ", i);
   11484:	fd442783          	lw	a5,-44(s0)
   11488:	85be                	mv	a1,a5
   1148a:	67c9                	lui	a5,0x12
   1148c:	96878513          	addi	a0,a5,-1688 # 11968 <strnlen+0x2a6>
   11490:	a61ff0ef          	jal	ra,10ef0 <printf_uart>
        print_guid(&entry[i4].type);
   11494:	9c040713          	addi	a4,s0,-1600
   11498:	fc442783          	lw	a5,-60(s0)
   1149c:	079e                	slli	a5,a5,0x7
   1149e:	97ba                	add	a5,a5,a4
   114a0:	853e                	mv	a0,a5
   114a2:	ce1ff0ef          	jal	ra,11182 <print_guid>
        print_uart(" : ", 3);
   114a6:	458d                	li	a1,3
   114a8:	67c9                	lui	a5,0x12
   114aa:	97078513          	addi	a0,a5,-1680 # 11970 <strnlen+0x2ae>
   114ae:	c66ff0ef          	jal	ra,10914 <print_uart>
        print_uart(entry[i4].name, sizeof(entry[i4].name));
   114b2:	9c040713          	addi	a4,s0,-1600
   114b6:	fc442783          	lw	a5,-60(s0)
   114ba:	079e                	slli	a5,a5,0x7
   114bc:	03078793          	addi	a5,a5,48
   114c0:	97ba                	add	a5,a5,a4
   114c2:	07a1                	addi	a5,a5,8
   114c4:	04800593          	li	a1,72
   114c8:	853e                	mv	a0,a5
   114ca:	c4aff0ef          	jal	ra,10914 <print_uart>
        print_uart("\r\n", 2);
   114ce:	4589                	li	a1,2
   114d0:	67c9                	lui	a5,0x12
   114d2:	97878513          	addi	a0,a5,-1672 # 11978 <strnlen+0x2b6>
   114d6:	c3eff0ef          	jal	ra,10914 <print_uart>

        if (is_uboot_guid(&entry[i4].type)) {
   114da:	9c040713          	addi	a4,s0,-1600
   114de:	fc442783          	lw	a5,-60(s0)
   114e2:	079e                	slli	a5,a5,0x7
   114e4:	97ba                	add	a5,a5,a4
   114e6:	853e                	mv	a0,a5
   114e8:	00000097          	auipc	ra,0x0
   114ec:	db8080e7          	jalr	-584(ra) # 112a0 <is_uboot_guid>
   114f0:	87aa                	mv	a5,a0
   114f2:	c79d                	beqz	a5,11520 <run_from_sdcard+0x15a>
            lba_start = entry[i4].lba_start;
   114f4:	fc442783          	lw	a5,-60(s0)
   114f8:	079e                	slli	a5,a5,0x7
   114fa:	ff040713          	addi	a4,s0,-16
   114fe:	97ba                	add	a5,a5,a4
   11500:	9f07b783          	ld	a5,-1552(a5)
   11504:	fef43423          	sd	a5,-24(s0)
            lba_end = entry[i4].lba_end;
   11508:	fc442783          	lw	a5,-60(s0)
   1150c:	079e                	slli	a5,a5,0x7
   1150e:	ff040713          	addi	a4,s0,-16
   11512:	97ba                	add	a5,a5,a4
   11514:	9f87b783          	ld	a5,-1544(a5)
   11518:	fef43023          	sd	a5,-32(s0)
   1151c:	a011                	j	11520 <run_from_sdcard+0x15a>
            continue;
   1151e:	0001                	nop
    for (int i = 0; i < lba1.npartition_entries; i++) {
   11520:	fd442783          	lw	a5,-44(s0)
   11524:	2785                	addiw	a5,a5,1
   11526:	fcf42a23          	sw	a5,-44(s0)
   1152a:	c1042703          	lw	a4,-1008(s0)
   1152e:	fd442783          	lw	a5,-44(s0)
   11532:	f0e7e5e3          	bltu	a5,a4,1143c <run_from_sdcard+0x76>
        }
    }

    sd_stop_reading();
   11536:	b5fff0ef          	jal	ra,11094 <sd_stop_reading>

    if (lba_start == 0) {
   1153a:	fe843783          	ld	a5,-24(s0)
   1153e:	e399                	bnez	a5,11544 <run_from_sdcard+0x17e>
        return -1;
   11540:	57fd                	li	a5,-1
   11542:	a845                	j	115f2 <run_from_sdcard+0x22c>
    }

    // Coping SPL partition Data
    sd_start_reading(512 * lba_start);
   11544:	fe843783          	ld	a5,-24(s0)
   11548:	07a6                	slli	a5,a5,0x9
   1154a:	853e                	mv	a0,a5
   1154c:	00000097          	auipc	ra,0x0
   11550:	ad2080e7          	jalr	-1326(ra) # 1101e <sd_start_reading>

    printf_uart("Coping %d KB", (lba_end - lba_start + 1) / 2);
   11554:	fe043703          	ld	a4,-32(s0)
   11558:	fe843783          	ld	a5,-24(s0)
   1155c:	40f707b3          	sub	a5,a4,a5
   11560:	0785                	addi	a5,a5,1
   11562:	8385                	srli	a5,a5,0x1
   11564:	85be                	mv	a1,a5
   11566:	67c9                	lui	a5,0x12
   11568:	98078513          	addi	a0,a5,-1664 # 11980 <strnlen+0x2be>
   1156c:	985ff0ef          	jal	ra,10ef0 <printf_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   11570:	fe843783          	ld	a5,-24(s0)
   11574:	fcf43423          	sd	a5,-56(s0)
   11578:	a8b1                	j	115d4 <run_from_sdcard+0x20e>
        sd_read_block((uint8_t *)entry, sizeof(entry));   // reuse the same buffer
   1157a:	9c040793          	addi	a5,s0,-1600
   1157e:	20000593          	li	a1,512
   11582:	853e                	mv	a0,a5
   11584:	a2fff0ef          	jal	ra,10fb2 <sd_read_block>
        memcpy(sram, entry, sizeof(entry));
   11588:	fd843783          	ld	a5,-40(s0)
   1158c:	86be                	mv	a3,a5
   1158e:	9c040793          	addi	a5,s0,-1600
   11592:	20000713          	li	a4,512
   11596:	863a                	mv	a2,a4
   11598:	85be                	mv	a1,a5
   1159a:	8536                	mv	a0,a3
   1159c:	00000097          	auipc	ra,0x0
   115a0:	066080e7          	jalr	102(ra) # 11602 <memcpy>
        sram += sizeof(entry);
   115a4:	fd843783          	ld	a5,-40(s0)
   115a8:	20078793          	addi	a5,a5,512
   115ac:	fcf43c23          	sd	a5,-40(s0)
        if ((i % 100) == 0) {
   115b0:	fc843703          	ld	a4,-56(s0)
   115b4:	06400793          	li	a5,100
   115b8:	02f777b3          	remu	a5,a4,a5
   115bc:	e799                	bnez	a5,115ca <run_from_sdcard+0x204>
            print_uart(". ", 2);
   115be:	4589                	li	a1,2
   115c0:	67c9                	lui	a5,0x12
   115c2:	99078513          	addi	a0,a5,-1648 # 11990 <strnlen+0x2ce>
   115c6:	b4eff0ef          	jal	ra,10914 <print_uart>
    for (uint64_t i = lba_start; i <= lba_end; i++) {
   115ca:	fc843783          	ld	a5,-56(s0)
   115ce:	0785                	addi	a5,a5,1
   115d0:	fcf43423          	sd	a5,-56(s0)
   115d4:	fc843703          	ld	a4,-56(s0)
   115d8:	fe043783          	ld	a5,-32(s0)
   115dc:	f8e7ffe3          	bleu	a4,a5,1157a <run_from_sdcard+0x1b4>
        }
    }
    print_uart("\r\n", 2);
   115e0:	4589                	li	a1,2
   115e2:	67c9                	lui	a5,0x12
   115e4:	97878513          	addi	a0,a5,-1672 # 11978 <strnlen+0x2b6>
   115e8:	b2cff0ef          	jal	ra,10914 <print_uart>

    sd_stop_reading();
   115ec:	aa9ff0ef          	jal	ra,11094 <sd_stop_reading>
    return 0;
   115f0:	4781                	li	a5,0
}
   115f2:	853e                	mv	a0,a5
   115f4:	63813083          	ld	ra,1592(sp)
   115f8:	63013403          	ld	s0,1584(sp)
   115fc:	64010113          	addi	sp,sp,1600
   11600:	8082                	ret

0000000000011602 <memcpy>:
   11602:	00a5c7b3          	xor	a5,a1,a0
   11606:	8b9d                	andi	a5,a5,7
   11608:	00c50733          	add	a4,a0,a2
   1160c:	e781                	bnez	a5,11614 <memcpy+0x12>
   1160e:	479d                	li	a5,7
   11610:	00c7ef63          	bltu	a5,a2,1162e <memcpy+0x2c>
   11614:	87aa                	mv	a5,a0
   11616:	00e56963          	bltu	a0,a4,11628 <memcpy+0x26>
   1161a:	8082                	ret
   1161c:	0005c683          	lbu	a3,0(a1)
   11620:	0785                	addi	a5,a5,1
   11622:	0585                	addi	a1,a1,1
   11624:	fed78fa3          	sb	a3,-1(a5)
   11628:	fee7eae3          	bltu	a5,a4,1161c <memcpy+0x1a>
   1162c:	8082                	ret
   1162e:	00757793          	andi	a5,a0,7
   11632:	ebbd                	bnez	a5,116a8 <memcpy+0xa6>
   11634:	87aa                	mv	a5,a0
   11636:	ff877693          	andi	a3,a4,-8
   1163a:	fc068613          	addi	a2,a3,-64
   1163e:	06c7fc63          	bleu	a2,a5,116b6 <memcpy+0xb4>
   11642:	0005b383          	ld	t2,0(a1)
   11646:	0085b283          	ld	t0,8(a1)
   1164a:	0105bf83          	ld	t6,16(a1)
   1164e:	0185bf03          	ld	t5,24(a1)
   11652:	0205be83          	ld	t4,32(a1)
   11656:	0285be03          	ld	t3,40(a1)
   1165a:	0305b303          	ld	t1,48(a1)
   1165e:	0385b883          	ld	a7,56(a1)
   11662:	04858593          	addi	a1,a1,72
   11666:	04878793          	addi	a5,a5,72
   1166a:	ff85b803          	ld	a6,-8(a1)
   1166e:	fa77bc23          	sd	t2,-72(a5)
   11672:	fc57b023          	sd	t0,-64(a5)
   11676:	fdf7b423          	sd	t6,-56(a5)
   1167a:	fde7b823          	sd	t5,-48(a5)
   1167e:	fdd7bc23          	sd	t4,-40(a5)
   11682:	ffc7b023          	sd	t3,-32(a5)
   11686:	fe67b423          	sd	t1,-24(a5)
   1168a:	ff17b823          	sd	a7,-16(a5)
   1168e:	ff07bc23          	sd	a6,-8(a5)
   11692:	b775                	j	1163e <memcpy+0x3c>
   11694:	0005c683          	lbu	a3,0(a1)
   11698:	0785                	addi	a5,a5,1
   1169a:	0585                	addi	a1,a1,1
   1169c:	fed78fa3          	sb	a3,-1(a5)
   116a0:	0077f693          	andi	a3,a5,7
   116a4:	fae5                	bnez	a3,11694 <memcpy+0x92>
   116a6:	bf41                	j	11636 <memcpy+0x34>
   116a8:	87aa                	mv	a5,a0
   116aa:	bfdd                	j	116a0 <memcpy+0x9e>
   116ac:	6190                	ld	a2,0(a1)
   116ae:	07a1                	addi	a5,a5,8
   116b0:	05a1                	addi	a1,a1,8
   116b2:	fec7bc23          	sd	a2,-8(a5)
   116b6:	fed7ebe3          	bltu	a5,a3,116ac <memcpy+0xaa>
   116ba:	f6e7e7e3          	bltu	a5,a4,11628 <memcpy+0x26>
   116be:	8082                	ret
	...

00000000000116c2 <strnlen>:
   116c2:	95aa                	add	a1,a1,a0
   116c4:	87aa                	mv	a5,a0
   116c6:	00b78563          	beq	a5,a1,116d0 <strnlen+0xe>
   116ca:	0007c703          	lbu	a4,0(a5)
   116ce:	e701                	bnez	a4,116d6 <strnlen+0x14>
   116d0:	40a78533          	sub	a0,a5,a0
   116d4:	8082                	ret
   116d6:	0785                	addi	a5,a5,1
   116d8:	b7fd                	j	116c6 <strnlen+0x4>
	...
