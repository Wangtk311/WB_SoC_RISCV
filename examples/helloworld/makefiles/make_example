include makeutil.mak

CC=riscv64-unknown-elf-gcc
CPP=riscv64-unknown-elf-gcc
OBJDUMP=riscv64-unknown-elf-objdump

CFLAGS= -c -g -static -O0 -DSYS_HZ=40000000
CFLAGS+= -fno-common
LDFLAGS= -T app.ld -nostartfiles
INCL_KEY=-I
DIR_KEY=-B


# include sub-folders list
INCL_PATH=\
	$(TOP_DIR)common/system \
	$(TOP_DIR)common \
	$(TOP_DIR)helloworld/src

# source files directories list:
SRC_PATH = \
	$(TOP_DIR)common/system \
	$(TOP_DIR)helloworld/src

LIB_NAMES = \
	gcc \
	stdc++ \
	c \
	m

VPATH = $(SRC_PATH)

SOURCES = startup \
	isr_vector \
	gcc_startup \
	gcc_newlib \
	hwinit \
	main

OBJ_FILES = $(addsuffix .o,$(SOURCES))
COMMONNAME = helloworld
EXECUTABLE = $(COMMONNAME).elf
DUMPFILE = $(COMMONNAME).dump
HEXFILE_LO = $(COMMONNAME)_lo.hex
HEXFILE_HI = $(COMMONNAME)_hi.hex
LSTFILE = $(COMMONNAME).lst

all: example

.PHONY: $(EXECUTABLE)


example: $(EXECUTABLE) $(DUMPFILE) $(HEXFILE_HI)

$(HEXFILE_HI): $(EXECUTABLE)
	echo elf2rawx $(addprefix $(ELF_DIR)/,$<) -h -f 65536 -l 8 -o $(addprefix $(ELF_DIR)/,$(HEXFILE_HI)) -o $(addprefix $(ELF_DIR)/,$(HEXFILE_LO))
	elf2rawx $(addprefix $(ELF_DIR)/,$<) -h -f 65536 -l 8 -o $(addprefix $(ELF_DIR)/,$(HEXFILE_HI)) -o $(addprefix $(ELF_DIR)/,$(HEXFILE_LO))

$(DUMPFILE): $(EXECUTABLE)
	echo $(OBJDUMP) --disassemble-all --disassemble-zeroes --section=.text --section=.text.startup --section=.data $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$@)
	$(OBJDUMP) --disassemble-all --disassemble-zeroes --section=.text --section=.text.startup --section=.data $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$@)
	$(OBJDUMP) -S $(addprefix $(ELF_DIR)/,$<) > $(addprefix $(ELF_DIR)/,$(LSTFILE))

$(EXECUTABLE): $(OBJ_FILES)
	echo $(CPP) $(LDFLAGS) $(addprefix $(OBJ_DIR)/,$(OBJ_FILES)) -o $(addprefix $(ELF_DIR)/,$@) $(addprefix -l,$(LIB_NAMES))
	$(CPP) $(LDFLAGS) $(addprefix $(OBJ_DIR)/,$(OBJ_FILES)) -o $(addprefix $(ELF_DIR)/,$@) $(addprefix -l,$(LIB_NAMES))
	$(ECHO) "\n  helloworld has been built successfully.\n"

%.o: %.cpp
	echo $(CPP) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CPP) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)

%.o: %.c
	echo $(CC) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CC) $(CFLAGS) $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)

%.o: %.S
	echo $(CC) $(CFLAGS) -D__ASSEMBLY__=1 $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
	$(CC) $(CFLAGS) -D__ASSEMBLY__=1 $(addprefix $(INCL_KEY),$(INCL_PATH)) $< -o $(addprefix $(OBJ_DIR)/,$@)
